"/** XXX I really don't like this - the XML processor is still             * too 'involved' in the processing. A better solution (IMO)             * would be to create UE for Project and Target too, and             * then process the tree and have Project/Target deal with             * its attributes ( similar with Description ).             *             * If we eventually switch to ( or add support for ) DOM,             * things will work smoothly - UE can be avoided almost completely             * ( it could still be created on demand, for backward compatibility )             */"
// JUnit 4 wraps solo tests this way. We can extract // the original test name with a little hack.
// XXX ignore attributes in a different NS ( maybe store them ? )
//borrowed from TokenFilterTest
// XXX Move to Project ( so it is shared by all helpers )
// What is the property supposed to be?
// PR: Hack for ant-type value //  an ant-type is a component name which can // be namespaced, need to extract the name // and convert from qualified name to uri/name
// there's a convenient xsltc class version but data are // private so use package information
// stolen from org.apache.xerces.impl.XMLEntityManager#getUserDir() // of the Xerces-J team // which ASCII characters need to be escaped
// bingo append it. (this should normally not be done here)
// This is faintly ridiculous:
//cannot remove underscores due to protected visibility >:(
// TODO not read, yet in a public setter
//  PR: I do not know what to do if the object class //      has multiple defines //      but this is for logging only...
// not sure what could be the need of this...
// XXX: (Jon Skeet) Any reason for writing a message and then using a bare // RuntimeException rather than just using a BuildException here? Is it // in case the message could end up being written to no loggers (as the // loggers could have failed to be created due to this failure)?
// Experimental/Testing, will be removed
// XXX should instead make a new ProtectionDomain with a CodeSource // corresponding to container.toURI().toURL() and the same // PermissionCollection as Project.class.protectionDomain had
//this is really irritating; we need a way to set stuff
//XXX // All this to convert source to destination directory according // to weblogic standards Can be written better... this is too hacky!
//silly hack to avoid stack overflow...
// -------------------- Access to property tables  -------------------- // This is used to support ant call and similar tasks. It should be // deprecated, it is possible to use a better (more efficient) // mechanism to preserve the context.
// XXX - should throw an exception instead?
// Temporary - until we figure a better API
// There is a better way to save the context. This shouldn't // delegate to next, it's for backward compatibility only.
// quick fix for Ant.java use of property before // initializing the project
// XXX: we should use JCVS (www.ice.com/JCVS) instead of // command line execution so that we don't rely on having // native CVS stuff around (SM)
"/*             * two reasons are mentioned in the API docs for File.list             * (1) dir is not a directory. This is impossible as             *     we wouldn't get here in this case.             * (2) an IO error occurred (why doesn't it throw an exception             *     then???)             */"
"/** * Jakarta Commons Logging listener. * Note: do not use the SimpleLog as your logger implementation as it * causes an infinite loop since it writes to System.err, which Ant traps * and reroutes to the logger/listener layer. * * The following names are used for the log: *  org.apache.tools.ant.Project.PROJECT_NAME  - for project events *  org.apache.tools.ant.Target.TARGET_NAME - for target events *  TASK_CLASS_NAME.TARGET_NAME - for events in individual targets. * * In all target and project names we replace ""."" and "" "" with ""-"". * * TODO: we should use the advanced context logging features (and expose them * in c-l first :-) * TODO: this is _very_ inefficient. Switching the out and tracking the logs * can be optimized a lot - but may require few more changes to the core. * * @since Ant 1.5 */"
//     * @TODO using taskName here is brittle, as a user could override it. //     *       this should probably be modified to use the classname instead.
//these are pathological cases, but retained in case somebody //subclassed us.
"/*                 * This is a rather hairy case.                 *                 * One of our subclasses knows that we need to update the                 * archive, but at the same time, there are no resources                 * known to us that would need to be added.  Only the                 * subclass seems to know what's going on.                 *                 * This happens if <jar> detects that the manifest has changed,                 * for example.  The manifest is not part of any resources                 * because of our support for inline <manifest>s.                 *                 * If we invoke createEmptyZip like Ant 1.5.2 did,                 * we'll loose all stuff that has been in the original                 * archive (bugzilla report 17780).                 */"
// This is deprecated - use classespath in the future
//XXX  this array stuff is a remnant of prev trials.. gotta remove.
"/**     * Set the number of milliseconds leeway to give before deciding a     * target is out of date.     * TODO: This is not yet used.     * @param granularity the granularity used to decide if a target is out of     *                    date.     */"
// This may change, if we add advanced parsing capabilities.
// We assume, that every output, jikes does, stands for an error/warning // XXX // Is this correct?
// The line below is a hack: the system id must an URI, but it is not // cleat to get the URI of an resource, so just set the name of the // resource as a system id
// XXX what is the following doing? //     should it run if !javadoc4 && executable != null?
// MAC OS 9 and previous //TODO: I have no idea how to get it, someone must fix it
//TODO: nothing appears to read this but is set using a public setter.
// XXX - we are committing CombiningChar and Extender here
"/*                 * XXX - failed to load the class properly.                 *                 * should we print a warning here?                 */"
// XXX could perhaps also call thread.stop(); not sure if anyone cares
"/**         * XXX         * Perhaps we shouldn't use properties for these         * three options (emacs mode, warnings and pedantic),         * but include it in the javac directive?         */"
// XXX maybe use reflection to addPathElement (other patterns ?)
// TODO there is a problem with the constructor for the RBC. // you have to provide the rules in the constructors - no setters // available.
// probably not the best choice, but it solves the problem of // relative paths in CLASSPATH
// Fix for invalid characters. If you think of more add to the list.
"/*             * fallback in case we have trouble loading the class or             * don't know how to handle it (there is no easy way to             * know what IDL mode would generate.             *             * This is supposed to make Ant always recompile the             * class, as a file of that name should not exist.             */"
// Check it out; also ugly.
//I can't get my head around this; is encoding treatment needed here?
//quick & dirty, to make nested mapped p-sets work:
// XXX is this code still necessary? is there any 1.2+ port? // Pull in *.zip from packages directory
// only: the developer knows what (s)he is doing
// XXX Unfortunately JDK1.2 adds entrySet(), keySet(), values() - // implementing this requires a small hack, we can add it later.
// first: developer could use a little help
// XXX     should we silently catch possible exceptions and try to //         load a different implementation?
// since Java 1.4 //return normalizedPath.split("/"); // workaround for Java 1.2-1.3
// HAMMER // end inline mainGTU
"/**     * This array really shouldn't be here.     * Again, for historical purposes it is.     *     * <p>FIXME: This array should be in a private or package private     * location, since it could be modified by malicious code.</p>     */"
// Should move to a separate public class - and have API to add // listeners, etc.
// "" should become a single empty argument, same for '' // PR 5906
// not very nice but will do the job
// provide public visibility
// not used, but public so theoretically must remain for BC?
// super.validateAttributes(); // don't want to call this method
// XXX what is this for?
// We keep this, so we have something to delete in later tests :-)
// *************  copied from ConcatTest  *************
// not sure whether this is clean, but this method is // declared not to throw exceptions.
// We just set the prefix for this fileset, and pass it up. // Do we need to do this? LH
//why do we do nothing?
// // We have to deal with assembly!!! // The programmer can be writing little 32 byte chunks for all // we know, and we must assemble complete records for writing. // REVIEW Maybe this should be in TarBuffer? Could that help to // eliminate some of the buffer copying. //
// This is the new, better way - use classespath instead // of sourcespath.  The code is currently the same - you // need class files in a directory to use this or jar files.
// XXX - why not simply new File(dir, filename)?
// This is ugly; checking for the root folder.
//TODO: Parameterise ?? //Call compiler as class... dont want to fork again //Use classic compiler -- can be parameterised?
//XXX // All this to get package according to weblogic standards // Can be written better... this is too hacky! // Careful.. similar code in scanDir , but slightly different!!
//stolen from writeManifest
"/* If the jarfile already exists then whack it and recreate it.             * Should probably think of a more elegant way to handle this             * so that in case of errors we don't leave people worse off             * than when we started =)             */"
// XXX is the following really necessary? it is in the same thread group...
// we have to find a cleaner way to put this output
// This is the old way and is deprecated - classespath is // the right way to do this and is above
// For Script example that modifies id'ed tasks in other // targets to work. *very* Ugly // The reference is replaced by RuntimeConfigurable
// don't call super.close() because that reader is used // on other places ...
// report error if something weird happens...this is diagnostic.
// sorry - otherwise we will get a ClassCastException because the MockCache // is loaded by two different classloader ...
// ***HACK*** We ask the VM to create an instance // by voluntarily providing illegal arguments to force // the VM to run the class' static initializer, while // at the same time not running a valid constructor.
// Singleton for now, it may change ( per/classloader )
// XXX - shouldn't this always return false in isolated mode?
//TO DO : delete the file if it is not a valid file.
"/** * TODO: * comment field doesn't include all options yet */"
"/**     * This method checks the timestamp on each file listed in the <code>     * ejbFiles</code> and compares them to the timestamp on the <code>jarFile     * </code>.  If the <code>jarFile</code>'s timestamp is more recent than     * each EJB file, <code>true</code> is returned.  Otherwise, <code>false     * </code> is returned.     * TODO: find a way to check the manifest-file, that is found by naming convention     *     * @param ejbFiles Hashtable of EJB classes (and other) files that will be     *                 added to the completed JAR file     * @param jarFile  JAR file which will contain all of the EJB classes (and     *                 other) files     * @return         boolean indicating whether or not the <code>jarFile</code>     *                 is up to date     */"
// Have to think about lazy initialization here...  JHM // comparator = new java.text.RuleBasedCollator();
//TODO no methods yet for getClassname //TODO no method for newInstance using a reverse-classloader
"/*     * The displayName variable stores the value of the ""display-name"" element     * from the standard EJB descriptor.  As a future enhancement to this task,     * we may determine the name of the EJB JAR file using this display-name,     * but this has not be implemented yet.     */"
"/** * An output stream that compresses into the BZip2 format (without the file * header chars) into another stream. * <p>The compression requires large amounts of memory. Thus you * should call the {@link #close() close()} method as soon as * possible, to force <tt>CBZip2OutputStream</tt> to release the * allocated memory.</p> * * <p>You can shrink the amount of allocated memory and maybe raise * the compression speed by choosing a lower blocksize, which in turn * may cause a lower compression ratio.  You can avoid unnecessary * memory allocation by avoiding using a blocksize which is bigger * than the size of the input. </p> * * <p>You can compute the memory usage for compressing by the * following formula:</p> * <pre> * <code>400k + (9 * blocksize)</code>. * </pre> *  * <p>To get the memory required for decompression by {@link * CBZip2InputStream CBZip2InputStream} use</p> * <pre> * <code>65k + (5 * blocksize)</code>. * </pre> * * <table width=""100%"" border=""1""> *  <colgroup> *    <col width=""33%"" /> *    <col width=""33%"" /> *    <col width=""33%"" /> *  </colgroup> *  <tr> *    <th colspan=""3"">Memory usage by blocksize</th> *  </tr><tr> *    <th align=""right"">Blocksize</th> *    <th align=""right"">Compression<br>memory usage</th> *    <th align=""right"">Decompression<br>memory usage</th> *  </tr><tr> *    <td align=""right"">100k</td> *    <td align=""right"">1300k</td> *    <td align=""right""> 565k</td> *  </tr><tr> *    <td align=""right"">200k</td> *    <td align=""right"">2200k</td> *    <td align=""right"">1065k</td> *  </tr><tr> *    <td align=""right"">300k</td> *    <td align=""right"">3100k</td> *    <td align=""right"">1565k</td> *  </tr><tr> *    <td align=""right"">400k</td> *    <td align=""right"">4000k</td> *    <td align=""right"">2065k</td> *  </tr><tr> *    <td align=""right"">500k</td> *    <td align=""right"">4900k</td> *    <td align=""right"">2565k</td> *  </tr><tr> *    <td align=""right"">600k</td> *    <td align=""right"">5800k</td> *    <td align=""right"">3065k</td> *  </tr><tr> *    <td align=""right"">700k</td> *    <td align=""right"">6700k</td> *    <td align=""right"">3565k</td> *  </tr><tr> *    <td align=""right"">800k</td> *    <td align=""right"">7600k</td> *    <td align=""right"">4065k</td> *  </tr><tr> *    <td align=""right"">900k</td> *    <td align=""right"">8500k</td> *    <td align=""right"">4565k</td> *  </tr> * </table> * * <p>For decompression <tt>CBZip2InputStream</tt> allocates less * memory if the bzipped input is smaller than one block.</p> * * <p>Instances of this class are not threadsafe.</p> * * <p> * TODO:    Update to BZip2 1.0.1 * </p> * */"
// XXX - log an error?  throw an exception?
// TODO: allow user to request the system or no parent
//if there was any text before this, add it as a fragment //TODO, this check could be modified to go if pos>prev; //seems like this current version could stick empty strings //into the list
// XXX add exceptions
// test a process that runs and failed
// ignore
// process should abort
// user:password@host:/path notation
"/*          * @param event the build event that is being logged.         */"
// only track progress for files larger than 100kb in verbose mode
// Element doesn't handle text content
// send "C0644 filesize filename", where filename should not include '/'
// ClearCase items
/* Assign actual codes for the tables. */
// -reserved
/* size of the central directory   */
// gcj doesn't support an extension dir (-extdir) // so we'll emulate it for compatibility and convenience.
// At this point we are probably in failure mode, but // try to use the bare URI as a last gasp
// -unreserved
// DataType can have a "no arg" constructor or take a single // Project argument.
// -out
// b may be 0 for success, //          1 for error, //          2 for fatal error,
// Not whitespace - fail
// Fall tru
// -ndata
// C0644 filesize filename - header for a regular file // T time 0 time 0\n - present if perserve time. // D directory - this is the header for a directory.
// -version
//wince isn't really 9x, but crippled enough to //be a muchness. Ant doesnt run on CE, anyway.
// -nwarn
// if a label has been supplied and it is a revision label, use the raw // the view as the snapshot
// Class doesn't have a String constructor but a decent factory method
/* total number of entries in      */
// Check for \r, \r\n and \r\r\n // Regard \r\r not followed by \n as two lines
// // Success!  The xml-commons resolver library is // available, so use it. //
// it is a new file // set the revision but not the prevrevision
//catch script/ant mismatch with a meaningful message //we could ignore it, but there are likely to be other //version problems, so we stamp down on the configuration now
// don't know the type, should throw exception instead?
// char and Character get special treatment - take the first character
// do nothing
// scan base dirs to build up compile lists only if a // specific classname is not given
// write a Properties file in each directory:
// **   simple name specified   == parent dir + name
// requires version 2 as we are going to store length info // in the data descriptor
// the test runner that wrap the dummy formatter that interests us
// CheckStyle:VisibilityModifier OFF - bc
// First try with Project.
// // The ResourceLocation may specify a relative path for its // location attribute.  This is resolved using the appropriate // base. //
// Can return null to represent the bootstrap class loader. // see API docs of Class.getClassLoader.
/* start of the central directory  */
//private static final int GET_ENTRY = 0;
// file comment
//There were no revisions in this changelog //entry so lets move onto next file
//same date if dest timestamp is within granularity of the srcfile
// must be "add"
// ---------------------------------------------------------- // somewhat arbitrary choices that are quite common for shared // installations // -----------------------------------------------------------
// EnumeratedAttributes have their own helper class
// selectors are implicitly ANDed in DirectoryScanner.  To // revert their logic we wrap them into a <none> selector // instead.
// first off, make sure that we've got a srcdir and destdir
// ZIPs store time with a granularity of 2 seconds, round up
// viewpath
// ------------------------------------------------------ //   Helper methods - should be in BuildFileTest // -----------------------------------------------------
// build the command line from what we got the format is // cleartool lsco [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// Check if list of files to check has been specified
// testNoCrash is the test invoked by the captureToSummary's junit task
// if the two substrings are longer than the original, then name // contains address - so reset the name to null
//default
// log options used
// dummy formatter just to catch the error
// we don't expect to find this
// resolve relative paths through Project
//patch file into the fileset
// type value
// bit3 set to signal, we use a data descriptor
//underscores go in front of invalid start chars
// use to scan own archive
"/** * Tests the {@link XSLTProcess} task. * XXX merge with {@link StyleTest}? * @since Ant 1.5 */"
// it is a modified file // set the revision and the prevrevision
"/*             * throw in drive letters             */"
//set our parent dir
"/*             * promised to eliminate consecutive slashes after drive letter.             */"
// -cfile
// avoid multiple configurations
/** Version to use for addXXX and addConfiguredXXX */
// Compare the destination with the temp file
// SMTP auth only allowed with MIME mail
// All three specified and all three exist -> true
// an address to send from is required
// File is not found in specified filepath
// set the character set if not done already (and required)
// 2 is != 0 and even, so it is considered // failure on any platform currently supported // by Execute#isFailure.
// Eof has been reached
//decide whether to copy the existing arg set, or //build a new one from the list of all args excluding the special //operations that only we handle
// type
// wait for TIME_OUT/2, there should be about TIME_OUT/2 ms remaining before timeout
"/*                fragments.addElement(value.substring(pos + 1, pos + 2));                prev = pos + 2;                */"
// Well, no matching constructor.
//check that dir and src are incompatible
// OK, try without.
// Set up a VSSHistory task
// -ptime
// Throws EjbcException if unsuccessful
// tests one the file object
// Make a limited attempt to extract a sanitized name and email address // Algorithm based on the one found in Ant's MailMessage.java
// If the file being added is META-INF/application.xml, we // warn if it's not the one specified in the "appxml" // attribute - or if it's being added twice, meaning the same // file is specified by the "appxml" attribute and in a // <fileset> element.
// if at eolcount == 0 and trailing characters of string // are CTRL-Zs, set eofStr
// We have extra elements
// -keep
// keep searching for the first ^Z
// -identical
// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report
// Trailing characters are ^Zs // Construct new line and eofStr
// Check for required attributes
// DO NOTHING
// permissible values for compression attribute
// build the command line from what we got. the format is // cleartool mkattr [options...] [viewpath ...] // as specified in the CLEARTOOL help
// ================  testcases for the cache implementations  ================
// does the selection
// -replace
// should be full moon
// ADD or ADD_CONFIGURED
// 60s // a further 30s
// For directories:
// -recurse
// Renamed version of original file, if it exists
// order of headers cannot be guaranteed
// now stop the watchdog.
// the method called to set the attribute
// Add the files found in groupfileset to fileset
// can also handle empty archives
// maintain a sorted list of targets
// quick exit if the target is up to date
// Choosing character set of the mail message // First: looking it from MimeType
// Next: looking if charset having explicit definition
// Scanner to find our inputs // list of files to process
// if src and dest dirs are the same, require the extension // to be set, so we don't stomp every file.  One could still // include a file with the same extension, but ....
// Ignore
// CheckStyle:VisibilityModifier OFF - bc // CheckStyle:MemberNameCheck OFF - bc
//couldnt use the xerces or jaxp calls
//enable schema //setFeature(XmlConstants.FEATURE_VALIDATION, false);
// first CR in this line
//if this is our context we assume there must be something here:
// wait for the thread to die, should be the end of the process
// we are recreating the archive, need all resources
// Windows quoting of the value
// Mac-style linebreak or EOF (or both)
// build the command line from what we got. the format is // cleartool mkelem [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// variables to hold arguments
// impossible as getMethods should only return public methods
// copy the source and support files
// boolean and Boolean get special treatment because we // have a nice method in Project
// create an array of strings for input to the compiler: one array // comes from the compile options, the other from the compileList
"/*         * Should choose either -ci or -nco.         */"
// -nco
// 'sync' is needed - otherwise 2 threads can load the same class // twice, resulting in LinkageError: duplicated class definition. // findLoadedClass avoids that, but without sync it won't work.
// make sure we aren't going to get the path separator next
// error level logging for compiler errors
// Execute the top-level target
// need to reset java.class.path property // since the NetRexx compiler has no option for the classpath
// The current character is always emitted.
// Check the command line options
// if at EOF with no characters in the buffer, return EOF
// ant task properties // defaults // CheckStyle:VisibilityModifier OFF - bc
// set in/excludes to reasonable defaults if needed:
// delete a bogus ZIP file (but only if it's not the original one)
// if parent is null, then we are at the root of the fs, // complain that we can't find the build file.
/*<URL>*/
// object selector
// ignore path elements which are invalid // relative to the project
// In this case using java.util.zip will not work // because it does not permit a zero-entry archive. // Must create it manually.
// record data about the last scanned resource
// build the command line from what we got the format is // cleartool uncheckout [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// Not significant for the class loader.
// Cf. PKZIP specification.
//ignore
// -master
// Initialize the globalFileSet's project
"/*     * I'm not fond of this pattern: ""sub-method expected to throw     * task-cancelling exceptions"".  It feels too much like programming     * for side-effects to me...     */"
// don't have to check for public, since // getMethod finds public method only. // don't have to check for abstract, since then // taskClass would be abstract too.
// overriding target from imported buildfile is allowed
// end of try-catch
// sorted by newest Kaffe version first
// remainder zeros
// first build exception
// -eltype
// Not been visited
// Create the stream pumpers to forward listcab's stdout and stderr to the log // note: listcab is an interactive program, and issues prompts for every new line. //       Therefore, make it show only with verbose logging turned on.
// Create.
// Attributes
// the buildfile to use
//not included, do nothing
// process should be dead and well finished
// Mac
// Already present
//empty
// initialResources is not empty
// avoid double scanning of directories, can only happen in fast mode
// Default to string type // which means do nothing
// higher derived
// ----------------------------------------- //  Predefined filters // -----------------------------------------
// If only value is specified, the property is set to it // regardless of its previous value.
// -------------------- Common properties  -------------------- // The following properties are required by import ( and other tasks // that read build files using ProjectHelper ).
// If value and default are both specified and the property // did not exist in the property file, the property is set // to default.
// collect filesets to pass them to getResourcesToAdd
// check to what is in the classname
"/*             * Bad luck.             *             * There are resources in the filesets that make the             * archive out of date, but not in the non-fileset             * resources. We need to rescan the non-FileSets to grab             * all of them now.             */"
// no emptyBehavior handling since the FileSet version // will take care of it.
// may be altered in validate
//calculate our destination directory; it is either the destDir //attribute, or the base dir of the fileset (for in situ updates)
// we will return initialResources anyway, no reason // to scan further.
// Error messages
//not a known type
//no point in setting a message
// If filename does not match the To attribute of the mapper // then filter it out of the files we are considering
// WARN: Don't use the StreamSource(File) ctor. It won't work with // xalan prior to 2.2 because of systemid bugs.
/* disk number start               */
// -rmall -force
// byte - byte compare
// specify output in UTF8 otherwise accented characters will blow // up everything
"/* Had to make two separate commands here because if a space is               inserted between the flag and the value, it is treated as a               Windows filename with a space and it is enclosed in double               quotes (""). This breaks clearcase.            */"
// print the stacktrace in the build file it is always useful... // better have too much info than not enough.
// may be on a case insensitive file system.  We want // the results to show what's really on the disk, so // we need to double check.
// build the command line from what we got. the format is // cleartool checkin [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// put back the original security manager //The following will never eval to true. (PD)
// all the names are the same: check if the class path of the loader // is the same
"/* For debugging purposes uncomment:        org.w3c.dom.Comment s = doc.createComment(""stack="" + threadStack);        buildElement.element.appendChild(s);         */"
// find the line breaks and pass other chars through in blocks
// don't add directories we've already added. // no warning if we try, it is harmless in and of itself
// -------------------------------------------------- BuildLogger interface
// <path> swallows the basedir, it seems //assertTrue(!getProject().resolveFile("A").exists());
// Use a stream so that you can close it yourself quickly // and avoid keeping the handle until the object is garbaged. // (always keep control), otherwise you won't be able to delete // the file quickly on windows.
// Returns list of EJBs for processing
// A "refid" attribute for a node within a Path object.
// Ignore Exception
// type-kind:type-name
// -ignore
// JUnit 4 does not distinguish between errors and failures // even in the JUnit 3 adapter. // So we need to help it a bit to retain compatibility for JUnit 3 tests.
// get the fileset and its basedir
// Shouldn't happen
// Return the type-selector
"/*          Now another magic 48-bit number, 0x177245385090, to          indicate the end of the last block.  (sqrt(pi), if          you want to know.  I did want to use e, but it contains          too much repetition -- 27 18 28 18 28 46 -- for me          to feel statistically comfortable.  Call me paranoid.)        */"
// LF is always end of line (i.e. CRLF or single LF)
// -full
//sort the list. Makes SCM and manual diffs easier.
// create XML document
// -incremental
// CR without LF - send buffer then add char
// -nlabel
// implementation of org.apache.tools.ant.taskdefs.ExecuteStreamHandler interface
// baseline_root_name
// add into buffer
"/*         * If configured to not care about whether the element is         * already checked out to the current view.         * Then check to see if it is checked out.         */"
// info text // list of files // expected result // result
// call a target
// just append beginToken and search further
// java.home is bogus
// Set up a SOSGet task
// Try a silly case
// either end of buffer or a line separator char
"/*              Now ftab contains the first loc of every small bucket.              Calculate the running order, from smallest to largest              big bucket.        */"
//  =====================  helper methods and classes  ====================
// =====================  scenario tests  =====================
// ==============  testcases for the algorithm implementations  ==============
//$NON-NLS-1$
// nearly all times v is zero, 4 in most other cases
// check adapter
// finally create the Huffman tables
// Pattern and string do not have the same size
// '**/**' situation, so skip one
// build the command line from what we got the format is // ss Label VSS items [-C] [-H] [-I-] [-Llabel] [-N] [-O] [-V] [-Y] [-?] // as specified in the SS.EXE help
// build the command line from what we got the format is // cleartool lock [options...] // as specified in the CLEARTOOL.EXE help
/////////////////////////////////////////////////////////////// // GET/SET methods. // Setters, of course are where ant user passes in values. ///////////////////////////////////////////////////////////////
//now we instantiate
///////////////////////////////////////////////////////// // GET/SET methods. // Setters, of course are where ant user passes in values. /////////////////////////////////////////////////////////
// either use default path or root local mapping, // which is now embedded in the root folder
// Write the contents to our master list of links // This method assumes that all links are defined in // terms of absolute paths, or paths relative to the // working directory:
// Mac does \n\r, but that's tough to distinguish from Windows \r\n\r\n. // Don't tackle that problem right now.
// ss.exe exits with '100', when files have been skipped // so we have to ignore the failure
// -ordinary
// For debugging
//set up project references.
// -log logname
// once we find a folder that isn't in the repository, // we know we can add it.
// If the file doesn't pass the include/exclude tests, skip it.
// -graphical
// -overwrite
/* crc-32                          */
// Set up a SOSCheckin task
// The readers return -1 if they end. So simply read the "prepend" // after that the "content" and at the end the "append" file.
/** Our current message output status. Follows Project.MSG_XXX. */
// duplicate equal to add, so we continue
"/*                     if the permission was not explicitly granted or revoked                     the original security manager will do its work                    */"
// -global
// -rename
// initializes extra data to an empty byte array
// -obsolete
// Fall Through
// -noverwrite
// we look through the source path elements. If the element is a dir // we look for the file. If it is a zip, we look for the zip entry. // This isn't normal for source paths but we get it for free
/* null */
/* local file header signature     */
// set user-defined properties
// set Java built-in properties separately, // b/c we won't inherit them.
// -ctime
"/*               If verbosity is MSG_VERBOSE, that mean we are doing               regular logging (backwards as that sounds).  In that               case, we want to print one message about deleting the               top of the directory tree.  Otherwise, the removeDir               method will handle messages for _all_ directories.             */"
/* Methods below all add specific selectors */
// expect the worst
// set all properties from calling project
//now any inner assertions
// -pbranch
//append the ... suffix if not there already
// File[] filesInDir = directory.listFiles();
//convert to lower case in the English locale,
// has been set explicitly
// Strip off drive letters! // REVIEW Would a better check be "(File.separator == '\')"?
// -shared
// class found but restricted name; this is // actually the case we're looking for in JDK 1.3+, // so catch the exception and return
//this is the list of lu
// change this to get the objects from the other reference
// help the gc
// may be null if a system property has been added // after the project instance has been initialized
// we have a file. create a stream for it
// remove duplicate properties - last property wins // Needed for backward compatibility
// Set up a SOSCheckout task
//ignored
// Set up a sosCheckout task
// no-op
// cycle through given args
// basedir of subant/subant-test2/subant.xml is .. // therefore we expect here the subant subdirectory
// Now add all references that are not defined in the // subproject, if inheritRefs is true
// not Clonable
// wait 1 second extra to allow for java to start ... // this time was OK on a Win NT machine and on nagoya
// set the flag to display the targets and quit
// keep track of what operating systems are supported here.
// basedir and ant.file get special treatment in execute()
// when the test is started by the build.xml of ant // if the property tests.and.ant.share.classloader is not set in the build.xml // a sysproperty with name tests.and.ant.share.classloader and value // ${tests.and.ant.share.classloader} will be set // we are trying to catch this here.
// don't re-set user properties, avoid the warning message
//--- NULL JDBC driver just for simple test since there are no db driver // available as a default in Ant :)
// default directory to the project's base directory
// eat up next arg if present, default to build.xml
// private static final int BG_BLACK = 40; // private static final int BG_RED = 41; // private static final int BG_GREEN = 42; // private static final int BG_YELLOW = 44; // private static final int BG_BLUE = 44; // private static final int BG_MAGENTA = 45; // private static final int BG_CYAN = 46; // private static final int BG_WHITE = 47;
// no user property
// assume the worst
// file doesn't exist -> property 'test' == null
"/*     * Get the (sub)-Project instance currently in use.     * @return Project     * @since Ant 1.7     */"
//         expectBuildExceptionContaining("testNoTld", //                 "Jasper found an error in a file", //                 "Java returned: 9");
// create a data input stream from the jar // input stream
// this iterator is exhausted. Can we pop one off the stack
// if buildFile was not specified on the command line,
// check to make sure that the given dir isn't a symlink // the comparison of absolute path and canonical path // catches this
// \ doesn't have a special meaning anymore - this is different from // what the Unix sh does but causes a lot of problems on DOS // based platforms otherwise
// now recover all the dependencies collected and add to the list.
// pick up the last round of dependencies that were determined
//validation logic
// right we have a good looking class file.
/* int minorVersion = */
// but -find then search for it
"/*                        If the argument is not a String or Location,                        and if there                        is an overloaded form of this method already defined,                        we just override that with the new one.                        This mechanism does not guarantee any specific order                        in which the methods will be selected: so any code                        that depends on the order in which ""set"" methods have                        been defined, is not guaranteed to be selected in any                        particular order.                    */"
//this isnt strictly needed, but by being fussy now, //we can change implementation details later
/* int majorVersion = */
/* int accessFlags = */
"/* Interestingly enough, we get to here when a user                 * uses -Dname=value. However, in some cases, the OS                 * goes ahead and parses this out to args                 *   {""-Dname"", ""value""}                 * so instead of parsing on ""="", we just make the ""-D""                 * characters go away and skip one argument forward.                 *                 * I don't know how to predict when the JDK is going                 * to help or not, so we simply look for the equals sign.                 */"
//special case single jar handling with signedjar attribute set
// read the dependency cache from the disk
// not cached - so need to read directly from the class file
// convert the replyTo string into a vector of emailaddresses
// make sure buildfile exists
// should always be the case...
// single jar processing
// -------------------- Optional methods   -------------------- // You can override those methods if you want to optimize or // do advanced things (like support a special syntax). // The methods do not chain - you should use them when embedding ant // (by replacing the main helper)
// This class depends on each class in the dependency list. For each // one of those, add this class into their affected classes list
// The captureToSummary test writes to stdout and stderr, good for // verifying that the TestListener support doesn't break anything.
// now determine which jars each class depends upon
// Usually the initialized is set to true. But here it must not. // Because the prepend and append readers have to be instantiated // on runtime //newFilter.setInitialized(true);
//return here.
// Also check for properly formed URIs. Ant formerly recommended using // nonsense URIs such as "file:./foo.xml" in XML includes. You shouldn't // do that (just "foo.xml" is correct) but for compatibility we special-case // things when the path is not absolute, and fall back to the old parsing behavior.
// write the dependency cache to the disk
// -------------------------------------------- // //      Filter classes // // --------------------------------------------
// need to delete the main class
// We just set the prefix for this fileset, and pass it up.
// Set up a VSSGet task
// // Instance //
//set up our mapping policy
// Default the viewpath to basedir if it is not specified
// now check classpath file dependencies
////////////////////////////////////////////////////////////////////// // CONSTRUCTORS / INITIALIZERS
//no mapper? use the identity policy
// Parse the attribute(s) and text of this node, adding // properties for each. // if the "path" attribute is specified, then return the created path // which will be passed to the children of this node.
// break the classLocations into its components.
// Return the Path we added or the ID of this node for // children to reference if needed.  Path objects are // definitely used by child path elements, and ID may be used // for a child text node.
// search the various source path entries
// An arbitrary attribute.
// create a data input stream from the jar input stream
// If we're on windows, then do the comparison ignoring case // and treat the two directory characters the same
// end execute
//in verbose mode we always log stuff
// for NetWare and OS/2, piggy-back on Windows, since in the // validateSetup code, the same assumptions can be made as // with windows - that ; is the path separator
//the simple action is to send the command line in as is
//the Exec OS check is different from Os.isOs(), which //probes for a specific OS. Instead it searches the os field //for the current os.name
// This path should contain the class files for these testcases:
//value and property are mutually exclusive attributes
// Set up a VSSLabel task
//int logLevel = filesetManifestConfig == null ? //    Project.MSG_WARN : Project.MSG_VERBOSE; //log("File " + file //    + " includes a META-INF/MANIFEST.MF which will be ignored. " //    + "To include this file, set filesetManifest to a value other " //    + "than 'skip'.", logLevel);
//determine the destination filename via the mapper
// Check if we can contact the URL
// Throws EjbcException
// If the archive is built for the first time and it is // matched by a resource collection, then it hasn't been // found in check (it hasn't been there) but will be // included now. // // for some strange reason the old code would simply skip // the entry and not fail, do the same now for backwards // compatibility reasons.  Without this, the which4j build // fails in Gump
//we only like simple mappers.
"/*             * Precedence: manifestFile wins over inline manifest,             * over manifests read from the filesets over the original             * manifest.             *             * merge with null argument is a no-op             */"
//add -tsa operations if declared
// filesets are separate from the rest for performance // reasons.  If we use the code for union below, we'll always // scan all filesets, even if we know the target is out of // date after the first test.
// VSS items
//On VMS platform, we need to create a special java options file //containing the arguments and classpath for the java command. //The special file is supported by the "-V" switch on the VMS JVM.
//JAR source is required
// preserveInTarget would find all files we want to keep, // but we need to find all that we want to delete - so the // meaning of all patterns and selectors must be inverted
// The zero index is never present in the constant pool itself so // we add a null entry for it
// If the destination directory didn't already exist, // or was empty, then no previous file removal is necessary!
//start at 1 because element 0 is the executable name
//alias is required for signing
// Similar to a fileset, but doesn't allow dir attribute to be set
//add to the list
//fill in args
// Windows has a 32k limit on total arg size, so // create a temporary file to store all the arguments
//at this point there is one trailing space to remove, if the list is not empty.
// restore the lastModified attribute
// Do nothing if no resources (including nested text)
//we normally compare destination with source
// filesets has been protected so we need to keep that even after // switching to resource collections.  In fact, they will still // get a different treatment form the other resource collections // even in execute since we have some subtle special features like // switching type to "dir" when we encounter a DirSet that would // be more difficult to achieve otherwise.
"/*             * if we get here, in and out have not been specified, we are             * in batch processing mode.             */"
//set source and rebuild options
// need to reset the stream handler to restart // reading of pipes; // go ahead and do it always w/ nested redirectors
//rebuild unless the dest file is newer than the source file
// Since we "look ahead" before adding, there's one last env var.
//mark for a rebuild if the dest file is newer
// Chunk part of previous env var (UNIX env vars can // contain embedded new lines).
//but if no dest is specified, compare source to source
// On OpenVMS Runtime#exec() doesn't support the environment array, // so we only return the new values which then will be set in // the generated DCL script, inheriting the parent process environment
// Mono 1.0's wsdl doesn't deal with absolute paths
// If this TransformOperation has DrawOperation children // then Rotate the first child and return.
//add in any extra files. //this is an error in mono, but we do not warn on it as they may fix that outside //the ant build cycle.
//noop default encoding used
//if, by any means, the destfile and source match,
"/*         * Writes the command into a temporary DCL script and returns the         * corresponding File object.  The script will be deleted on exit.         * @param cmd the command line to execute as an array of strings.         * @param env the environment to set as an array of strings.         * @return the command File.         * @throws IOException if errors are encountered creating the file.         */"
//mark for a rebuild if we are newer
// add the single group arguments // Javadoc 1.2 rules: //   Multiple -group args allowed. //   Each arg includes 3 strings: -group [name] [packagelist]. //   Elements in [packagelist] are colon-delimited. //   An element in [packagelist] may end with the * wildcard.
//conditionally compile
// ensure that parent dir of dest file exists!
// Set up a Timestamp
// for each sourcePath entry, add a directoryset with includes // taken from packagenames attribute and nested package // elements and excludes taken from excludepackages attribute // and nested excludepackage elements
//we check the presence of signatures on lazy signing
// if it's a non source file, copy it if a later date than the // dest // if it's a source file, see if the destination class file // needs to be recreated via compilation
// Errors
// ------------------------------------------------------ //   Helper methods // -----------------------------------------------------
//bail on no references
"/*         * In Ant 1.1, <chmod dir=""foo"" /> means, change the permissions         * of directory foo, not anything inside of it.  This is the case the         * second branch of the if statement below catches for backwards         * compatibility.         */"
//if they are different, the timestamps are used
// For -sourcepath, use the "sourcepath" value if present. // Otherwise default to the "srcdir" value.
//demand create pathlist
// SQL defines "--" as a comment to EOL // and in Oracle it may contain a hint // so we cannot just remove it, instead we must end it
//bail on no references listed
// create intermediary directories - sometimes zip don't add them
// Load the property files specified by -propertyfile
//hand down
//just log this
"/* for historical and performance reasons we have to do               things in a rather complex way.               (1) Move is optimized to move directories if a fileset               has been included completely, therefore FileSets need a               special treatment.  This is also required to support               the failOnError semantice (skip filesets with broken               basedir but handle the remaining collections).               (2) We carry around a few protected methods that work               on basedirs and arrays of names.  To optimize stuff, all               resources with the same basedir get collected in               separate lists and then each list is handled in one go.            */"
//loop through all definitions
// we have started to (over)write dest, but failed. // Try to delete the garbage we'd otherwise leave // behind.
//set up response file options
//not modified so no file download. just return //instead and trace out something so the user //doesn't think that the download happened when it //didn't
// fileutils
// Ignore exception
//if the refs are out of date, force a build.
// we have already started reading this section // this line is the first attribute. set it and then // let the normal read handle the rest
// classpath attributes go into a vector
// Get today's date
// scan source and dest dirs to build up both copy lists and // compile lists //        scanDir(srcDir, destDir);
// ensure that -D properties take precedence
// --- Fields --
"/*             * Many system have been reported to get into trouble with             * long command lines - no, not only Windows ;-).             *             * POSIX seems to define a lower limit of 4k, so use a temporary             * file if the total length of the command line exceeds this limit.             */"
//add the source file
// Setup the apt executable
//now run
// Create an instance of the compiler, redirecting output to // the project log
// Error generated during parsing
// start() would throw IllegalThreadStateException from // ThreadGroup.add if it were destroyed
//forcibly delete the output file in case of trouble
// kjc-1.5A doesn't support -encoding option now. // but it will be supported near the feature.
//then rethrow the exception
// add dest dir to classpath so that previously compiled and // untouched classes are on classpath
// check if the target file exists in the current directory
//On VMS platform, we need to create a special java options file //containing the arguments and classpath for the javac command. //The special file is supported by the "-V" switch on the VMS JVM.
// Parser with specified options can't be built
//must keep for subclass BC, though unused: // CheckStyle:ConstantNameCheck OFF - bc
// I/O error
// Set up a VSSCheckIn task
// Set the prefix for this node to include its tag name.
// there is a bootclasspath stated.  By default, the // includeJavaRuntime is false.  If the user has stated a // bootclasspath and said to include the java runtime, it's on // their head!
// Pass the container to the processing of this node,
// change to parent directory
// The date format is using a - format since 1.12.9 so we have: // 1.12.9-: 'date: YYYY/mm/dd HH:mm:ss;  author: name;' // 1.12.9+: 'date: YYYY-mm-dd HH:mm:ss Z;  author: name'
// now, iterate through children.
// hasCR is still true (for the second one)
// CheckStyle:ConstantNameCheck OFF - bc
// convert from ascii back to native // encoding to convert to/from // Where to find input files // Where to put output files // Extension of output files if different
// -branch
// Specified class is "" -> can not exist
// refresh our file handle
// CheckStyle:MethodNameCheck OFF - bc
// We need character encoding aware printing here. // So, using PrintWriter over OutputStreamWriter instead of PrintStream
// The value of an id attribute of this node.
// entries are of the form: //CVS 1.11 // File module/filename is new; current revision 1.1 //CVS 1.11.9 // File module/filename is new; cvstag_2003_11_03_2  revision 1.1 // or // File module/filename changed from revision 1.4 to 1.6 // or // File module/filename is removed; not included in // release tag SKINLF_12 //CVS 1.11.9 // File testantoine/antoine.bat is removed; TESTANTOINE_1 revision 1.1.1.1 // // get rid of 'File module/"
// CheckStyle:MemberNameCheck OFF - bc
// Set up a VSSCheckOut task
//error if both are empty, or both are set
// set the thread priorities
// we are forced to fork ANTLR since there is a call // to System.exit() and there is nothing we can do // right now to avoid this. :-( (SBa) // I'm not removing this method to keep backward compatibility
// Is there an id attribute?
//The following is data used while processing stdout of CVS command
// Now, iterate through the attributes adding them.
// swallow
"/* ========================================================================    *    * Instance variables.    */"
//we cannot set the priority here.
"/*                     * The main conditional logic -- if the attribute                     * is somehow ""special"" (i.e., it has known                     * semantic meaning) then deal with it                     * appropriately.                     */"
//determine directory: resourceDir if set, //the dir of the destFile if not
//scan for an implicit fileset if there was a srcdir set //or there was no srcDir set but there was no contained classes
// ID has already been found above.
// build the command line from what we got the format // as specified in the CCM.EXE help
//if there is no src dir here, set it
// depending on implementation, XMLReader can yield hips of warning, // only output then if user explicitly asked for it
//get dependencies list.
// If only default is specified and the property previously // existed in the property file, it is unchanged.
// Set up a VSSAdd task
// make sure to close all handles, otherwise the garbage // collector will close them...whenever possible and // Windows may complain about not being able to delete files.
// set user-define properties
// A "path" attribute for a node within a Path object.
//get any included source directories
//add the files to the command
"/*         * pre Ant 1.6 this method used to call getClass().getResource         * while Ant 1.6 will call ClassLoader.getResource().         *         * The difference is that Class.getResource expects a leading         * slash for ""absolute"" resources and will strip it before         * delegating to ClassLoader.getResource - so we now have to         * emulate Class's behavior.         */"
"/*         *  space for more argumentativeness         *  command.addArgument();         *  command.addArgument();         */"
//proxy setup if enabled
// ends with '.' or null
/* Constants used for the "beantype" attribute */
/* Classpath used when the iAS ejbc is called */
/* Options passed to the iAS ejbc */
// this is guaranteed by FileUtils#createTempFile
// Set up a VSSCp task
// Count the number of empty strings
// make sure that we have a target to execute
// Core class that exists in system classpath is ignored, but found in specified classpath
/* iAS installation directory (used if ejbc isn't on user's PATH) */
/* Parser and handler used to process both EJB descriptor files */
/* If the -classpath flag isn't specified, use the system classpath */
// first off, make sure that we've got a command and a vssdir and a label ...
/* Construct a SAXParser used to process the descriptors */
// Add the default listener
// SAXException or ParserConfigurationException may be thrown
/* Build and populate an instance of the ejbc utility */
// A node identifying a new path
/* Execute the ejbc utility -- stubs/skeletons are rebuilt, if needed */
// // The ResourceLocation may specify a relative url for its // location attribute.  This is resolved using the appropriate // base. //
// find the target with the longest name
// For the text node, add a property.
// Add one for the "\"
// If the containing object was a String, then use it as the ID.
/* Concatenate all of the command line arguments into a single String */
/* If an iAS home directory is specified, prepend it to the commmand */
// build the command line from what we got. the format is // cleartool rmtype [options...] type-selector... // as specified in the CLEARTOOL help
// split the targets in top-level and sub-targets depending // on the presence of a description
// Never include the "refid" attribute as part of the // attribute name.
/* OPTIONAL COMMAND LINE PARAMETERS */
/* No beantype flag is needed for an entity bean */
// Otherwise, return it appended unless property to hide it is set.
/* REQUIRED COMMAND LINE PARAMETERS */
/* Convert the List into an Array and return it */
// ran Ant tests with -ea and this would fail spuriously
// shouldn't need to check but...
// use the directory containing the target as the output directory
/* Expose members for extensibility */
/* Inner classes follow */
// End of EjbcException inner class
// delegate this way around to support subclasses that // overwrite getFile
// Tracks current element // Tracks current text data // "session" or "entity"
/* Search the resource Map and (if not found) file Map */
// now, start printing the targets and their descriptions
//we arent fully defined yet. this is an error unless //we are in an antlib, in which case the resource name is determined //automatically. //NB: URIs in the ant core package will be "" at this point.
/* A new element has started, so reset the text being captured */
// worst case. look for a public String constructor and use it // also supports new Whatever(Project, String) as for Path or Reference // This is used (deliberately) for all primitives/wrappers other than // char and boolean
// build the command line from what we got the format is // cleartool update [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// build the command line from what we got. the format is // cleartool mklbtype [options...] type-selector... // as specified in the CLEARTOOL help
// type-name@vob
// we get the root classes and build up a set of // classes upon which they depend
// skip version info and general purpose byte
/* int superClassIndex = */
// try to read the dependency info from the map if it is // not out of date
// depFile exists and is newer than the class file // need to get dependency list from the map.
//convert the URI to a resource
// End of EjbcHandler inner class
// we need to add this jar to the list for this class.
/* Check that the specified instance variables are valid */
"/*         * Use the Runtime object to execute an external command.  Use the         * RedirectOutput inner class to direct the standard and error output         * from the command to the JRE's standard output         */"
// now to the expected failures
// got a bit annoyed that I couldn't find a pad function
//handle new style full paths to an antlib, in which //all but the forward slashes are allowed.
/* Check that the EJB "source" classes all exist */
//downgrade warnings on RMI stublike classes, as they are generated //by rmic, so there is no need to tell the user that their source is //missing.
// if we have no info about the class - it may have been deleted already and we // are using cached info.
// there was no class file. add this class to the list
//if we haven't already named an XML file, it gets antlib.xml
/*<String,String>*/
//convert from a package to a path
// Here if there is an error
// add null entries for any additional slots required.
// iterator through all the files and process them.
// let's be nice with the next generation of developers
// make the spawned process run 4 seconds
"/*         * Two Maps are used to track local DTDs that will be used in case the         * remote copies of these DTDs cannot be accessed.  The key for the Map         * is the DTDs public ID and the value is the local location for the DTD         */"
// catalog1 --> catalog2 --> catalog3 --> catalog1
//always trigger file mode if commands are big enough
// is the zip file in the cache
// without closure we may delete an inner class but not the // top level class which would not trigger a recompile.
//iterate through the ref list & generate an entry for each //or just rely on the fact that the toString operator does this, but //noting that the separator is ';' on windows, ':' on unix
// log at a lower level
// read the constant pool in and resolve it
//but for big operations, we save all the params to a temp file //and set @tmpfile as the command -then we remember to delete the tempfile //afterwards
//now run the command of exe + settings + files
//add those that are set, and a delimiter
// store the token just read for next time
"/*     * This Hashtable maintains a list of EJB class files processed by the ejbc     * utility (both ""source"" class files as well as stubs and skeletons). The     * key for the Hashtable is a String representing the path to the class file     * (relative to the destination directory).  The value for the Hashtable is     * a File object which reference the actual class file.     */"
// Ignore the problem
"/*     * Directory where ""source"" EJB files are stored and where stubs and     * skeletons will also be written.     */"
//trick to evoke "basedir not set" if null:
// catalog2 --> catalog1 --> catalog
// EJB's display name // EJB's home interface name // EJB's remote interface name // EJB's implementation class // EJB's primary key class // or "stateful" or "stateless" // Does this EJB support CMP? // Does this EJB support IIOP? // Does this EJB require failover? // CMP descriptor list
//no sources = nothing to compare; no targets = nothing to delete:
"/*     * Validates URL     */"
/* Check the timestamp on the remote interface */
// Since the descriptor read properly, everything should be o.k.
/* Check the timestamp on the home interface */
//client jar file
// Members
// If an explicit securityPolicy file was specified, it maybe an // absolute path.  Use the project to resolve it.
/* Check the timestamp of the primary key class */
// descriptorName = <path><basename><basenameterminator><remainder> // examples = /org/objectweb/fooAppli/foo/Foo-ejb-jar.xml // examples = /org/objectweb/fooAppli/foo/Foo.xml (JOnAS convention)
//bail out early if there were no files
//now scan the hashtable and add the files
// Have to catch this because of the semantics of calling main()
// List of all stubs & skels // Earliest mod time // Has each been found?
// additionalargs
// ejb jar file
//Public //Private //Family //Assembly //Family and Assembly //Family or Assembly //Private Scope
// class name (search in the classpath provided for the ejbjar element)
"/*             * Loop through each stub/skeleton class that must be generated, and             * determine (if all exist) which file has the most recent timestamp             */"
// the new value, this needs to be here // because it is required to calculate the next position to // search from at the end of the loop
"/*                 * Add each stub/skeleton class to the list of EJB files.  Note                 * that each class is added even if it doesn't exist now.                 */"
// empty
// If we are a reference, create a Path from the reference
// Lastly create File object for the Jar files. If we are using // a flat destination dir, then we need to redefine baseName!
/* Keep track of the oldest modification timestamp */
// RFC 822 s4.1: //   "Header fields are NOT required to occur in any particular order, //    except that the message body MUST occur AFTER the headers" // (the same section specifies a reccommended order, which we ignore)
// End of EjbInfo inner class
// need to close files and perhaps rename output
// CheckStyle:VisibilityModifier OFF - bc // CheckStyle:ConstantNameCheck OFF - bc
"/*                         * stub is derived from implementation,                         * tie from interface name.                         */"
/* Filenames of the standard EJB descriptor and the iAS-specific descriptor */
// Update with changed Bean class
// this loop runs parallel to the build
// Get the filename of vendor specific descriptor
// now that we have the weblogic descriptor, we parse the file // to find other descriptors needed to deploy the bean. // this could be the weblogic-cmp-rdbms.xml or any other O/R // mapping tool descriptors.
// End of Classname inner class
// Available specification version must be >= required
// Stream to read and redirect to standard output
// are any of the above out of date. // we find the implementation classes and see if they are older than any // of the above or the .ser file itself.
// End of RedirectOutput inner class
/* Value of the display-name element read from the standard EJB descriptor */
"/*         * Parse the classpath into it's individual elements and store the         * results in the ""classpathElements"" instance variable.         */"
"/*     * Filenames of the standard EJB descriptor (which is passed to this class     * from the parent ""ejbjar"" task) and the iAS-specific EJB descriptor     * (whose name is determined by this class).  Both filenames are relative     * to the directory specified by the ""srcdir"" attribute in the ejbjar task.     */"
//can throw the same exception, if there is no this(Project) ctor.
//WARNING: We trim the values of all the attributes because //Some extension declarations are badly defined (ie have spaces //after version or vendorID)
"/*         * If the -d flag isn't specified, use the working directory as the         * destination directory         */"
// Implementation version must be >= required
// check that reference zipfilesets cannot have specific attributes
"/*         * The EJB information is gathered from the standard XML EJB descriptor         * and the iAS-specific XML EJB descriptor using a SAX parser.         */"
// Simplest constructor, uses default encryption algorithm and compression level.
"/*             * If this is a standard EJB 1.1 descriptor, we are looking for one             * set of data, while if this is an iAS-specific descriptor, we're             * looking for different set of data.  Hand the processing off to             * the appropriate method.             */"
//the trick to integrating test output to the formatter, is to //create a special test class that asserts an error //and tell the formatter that it raised.
// we don't have any more args to recognize!
// this comment extract from JUnit Task may also apply here // "in VM is not very nice since it could probably hang the // whole build. IMHO this method should be avoided and it would be best // to remove it in future versions. TBD. (SBa)"
// if it's no other arg, it may be the target
//remove the .class
// keys to optional attributes
// A special parent loader which is not the system class loader:
// check that a reference zipfileset gets the same attributes as the original
// null watchdog means no timeout, you'd better not check with null
//class-BFT
//do nothing
"/*         * Below are getter's and setter's for each of the instance variables.         * Note that (in addition to supporting setters with the same type as         * the instance variable) a setter is provided with takes a String         * argument -- this are provided so the XML document handler can set         * the EJB values using the Strings it parses.         */"
//-- XSLTProcess
// add -file xxxxx to the commandline
// Create an instance of the rmic
//clientname = ejbjarfile+client.jar
// not necessary as JDepend would fail, but why loose // some time?
// end of else
// Self-describing as of JUnit 4 (#38811). But trim "(ClassName)".
// The timestamp of the "newest" class // Timestamp for a given class // File for the remote interface class // File for the home interface class // File for the EJB implementation class // File for the EJB primary key class
// Fully qualified name of the Java class // Name of the package for this class // Name of the class without the package
// ignored.
// if there is a suite method available, then try // to extract the suite from it. If there is an error // here it will be caught below and reported.
// NumberFormatException or ArrayOutOfBondsException could happen here
// ignore it
// make sure it's not a directory (this falls into the ultra // paranoid lets check everything category
// to remove directories, start by the end of the list // the trunk does not let itself be removed before the leaves
// use a system manager that prevents from System.exit()
//Throw exception on errors (except up-to-date) // //When a server is down, the code expects : //Perforce client error: //Connect to server failed; check $P4PORT. //TCP connect to localhost:1666 failed. //connect: localhost:1666: Connection refused //Some forms producing commands (p4 -s change -o) do tag the output //others don't..... //Others mark errors as info, for example edit a file //which is already open for edit..... //Just look for error: - catches most things....
//we mark the file to be deleted on exit. //the alternative would be to cache the filename and delete //after execution finished, which is much better for long-lived runtimes //though spawning complicates things...
// If the element starts with the configured prefix, then // convert the prefix to the configured 'to' value.
// We try to update the status once to give StarTeam // another chance.
// Currently, we deal with only two path formats: Unix and Windows // And Unix is everything that is not Windows
//classpath
// If we find a "file" attribute then act on a file otherwise act on a project
// If we displayed the project, view, item type, or folder, // then show the list of relevant item properties.
// Create a variable dir that contains the name of // the StarTeam folder that is the root folder in this view. // Get the default path to the current view.
/* GenIC options */
// path containing one or more elements
// We want to display the folder the same way you would // enter it on the command line ... so we remove the // View name (which is also the name of the root folder, // and therefore shows up at the start of the path).
// may be altered in validateSetup // may be altered in validateSetup
// Catch everything - some of the above return nulls, // throw exceptions or generally misbehave // in the event of a problem etc
// Path to the SourceOffSite home directory /home/user/.sos
/* other options */
// Special setters for the sub-classes
// Login info is required
// validate our setup
/* GenIC options setter */
"/*             *  There is a bug in JavaSound 0.90 (jdk1.3beta).             *  It prevents correct termination of the VM.             *  So we have to exit ourselves.             */"
// Check if source is a directory
// Get the list of path components in canonical form
// -I- // ignore all errors // -Vd
// JOnAS-specific descriptor deployment
// Apply the path prefix map
// note, it's important to scan the items BEFORE we make the // UnmatchedFileMap because that creates a bunch of NEW // folders and files (unattached to repository) and we // don't want to include those in our traversal.
// Now convert the path and file separator characters from the // current os to the target os.
//SecurityManager can not be installed here for backwards //compatibility reasons (PD). Needs to be loaded prior to //ant class if we are going to implement it. //System.setSecurityManager(new NoExitSecurityManager());
// since filesize keeps on decreasing we have to store the // initial filesize
// security
// JDK usage command line says that -jar must be the first option, as there is // a bug in JDK < 1.4 that forces the jvm type to be specified as the first // option, it is appended here as specified in the docs even though there is // in fact no order.
// Nothing specified -> Fail
// default behavior is to fail on an error // default behavior is to not overwrite // default behavior is make a single link
// note, it's important to scan the items BEFORE we make the // Unmatched file map because that creates a bunch of NEW // folders and files (unattached to repository) and we // don't want to include those in our traversal.
// Note I'm using "!=" to see if we got a new object back from // the apply method.
/////////////////////////////////////////////////////////////// // default values for attributes. ///////////////////////////////////////////////////////////////
// JOnAS-specific DD // true if the JOnAS convention is used for the DD // Directory path of the EJB descriptor // EJB descriptor file name // Filename appearing before name terminator // Filename appearing after the name terminator
// once we find a folder that isn't in the repository, // anything below it can be deleted.
// input file to process by GenIC
// RFC 822 s4.1: "From:" header must be sent // We rely on error checking by the MTA
// Place the result into the specified property, // unless setonempty == false
// build the command line from what we got the format is // ss Checkout VSS items [-G] [-C] [-H] [-I-] [-N] [-O] [-R] [-V] [-Y] [-?] // as specified in the SS.EXE help
// We applied one, so we're done
// Not a .class file or the one we'd generate
// baseNameTerminator not found: the descriptor use the // JOnAS naming convention, ie [Foo.xml,jonas-Foo.xml] and // not [Foo<baseNameTerminator>-ejb-jar.xml, // Foo<baseNameTerminator>-jonas-ejb-jar.xml].
// We have the loader which is being used to load the // CatalogResolver. Can it see the ApacheResolver? The // base resolver will only be able to create the ApacheResolver // if it can see it - doesn't use the context loader.
// Following block contains unrolled code which could be shortened by // coding it in additional loops.
// Determine the separator strings.  The dirsep and pathsep attributes // override the targetOS settings.
// override with pathsep=
// override with dirsep=
"/**     * When using this as a custom selector, this method will be called.     * It translates each parameter into the appropriate setXXX() call.     *     * @param parameters the complete set of parameters for this selector     */"
//At least one constructor is guaranteed to be there, but check anyway.
// Get the value of the <ejb-name> tag.  Only the first occurrence.
// Quick return: directories cannot be signed
"/* now check each Resource in case the child only           lets through files from any children IT may have: */"
/* other options setter */
// write namespace declarations
/* other methods */
// Check if used by attributes
//find the out-of-date targets:
// the method deleteOnExit() do not work because the directory is not empty
// create the generic jar first
//no need to synchronize, as Vector is always synchronized
// ? is there an xml api for this ?
// NotReached
// GenIC call on generic jar
// fall through
// create the real jar
// Extrapolating from: // "NetWare may have a "java" in that directory, but 99% of // the time, you don't want to execute it" -- Jeff Tulley // <JTULLEY@novell.com>
// Only property specified -> Fail
// treat non-matching groups as empty matches
////////////////////////////////////////////////////////////////////// // ATTRIBUTES
// record destdir for later use in getResource
// extract path info
//if it does not, then the file is not up to date.
// check that something which is not a testcase generates no errors // at first even though this is incorrect.
// descriptorName is just a file without path
// Eliminate consecutive slashes after the drive spec:
/* Attributes set by the Ant build file */
// Check to see if it's an inner class 'com.company.Class$Inner'
// Create the zip entry and add it to the jar file
"/*          A 6-byte block header, the value chosen arbitrarily          as 0x314159265359 :-).  A 32 bit value does not really          give a strong enough guarantee that the value will not          appear by chance in the compressed datastream.  Worst-case          probability of this event, for a 900k block, is about          2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits.          For a compressed file of size 100Gb -- about 100000 blocks --          only a 48-bit marker will do.  NB: normal compression/          decompression do *not* rely on these statistical properties.          They are only important when trying to recover blocks from          damaged files.        */"
// How to handle non-file-Resources? I copy temporarily the // resource to a file and use the file-implementation.
"/*         * Check for the odd case where the terminator and/or filename         * extension aren't found.  These will ensure ""jonas-"" appears at the         * end of the name and before the '.' (if present).         */"
// bsBuffShadow |= 0 << (32 - bsLiveShadow - 1);
// no . found
////////////////////////////////////////////////////////////////////// // ACCESSOR METHODS
// The clean way would be to throw an exception. //throw new IOException("crc error");
// try to find JOnAS specific convention name
//  900021 byte // 3600000 byte // 3600000 byte // ------------ // 8433529 byte // ============
// else get standard baseName
// make sure the cache is cleared.
//Validate mandatory attributes
// Step 2: // Now scan this big bucket so as to synthesise the // sorted order for small buckets [t, ss] for all t != ss.
// jonasroot
"/*                  Complete the big bucket [ss] by quicksorting                  any unsorted small buckets [ss, j].  Hopefully                  previous pointer-scanning phases have already                  completed many of the small buckets [ss, j], so                  we don't have to sort them at all.            */"
// Translate periods into path separators, add .class to the // name, create the File object and add it to the Hashtable.
"/*          Setting up the unzftab entries here is not strictly          necessary, but it does save having to do it later          in a separate pass, and so saves a block's worth of          cache misses.        */"
// Retrive the files to be added to JAR from EJB descriptor
// java policy file
//check that fullpath and prefix are incompatible
// add the types of the parent project
//the property attribute must have access to a property file
// outputdir
//if either of them is missing, they are different
// work around a bug of GenIC 2.5
//Make sure property exists in property file
// All characters in the string are used. Check if only '*'s are // left in the pattern. If so, we succeeded. Otherwise failure.
// classpath
// if we followed the symlink we just made we should // bypass the excludes.
// Check to see if we need a build and start doing the work!
// after loading the cache is up to date with the file
"/* Parse the ejb deployment descriptor.  While it may not             * look like much, we use a SAXParser and an inner class to             * get hold of all the classfile names for the descriptor.             */"
"/**     * Invoked by IntrospectionHelper for <code>setXXX(Path p)</code>     * attribute setters.     * @param p the <code>Project</code> for this path.     * @param path the <code>String</code> path definition.     */"
// try to create the classpath for the correct ORB
//now any assertions are added
// Avoid runtime problem on pre 1.4 when compiling post 1.4
// Creation is done here rather than in isSelected() because some // containers may do a validation pass before running isSelected(), // but we need to check for the existence of the created class.
// keepgenerated
// process pattern between stars. padIdxStart and patIdxEnd point // always to a '*'.
// nocompil
// The EnumeratedAttributes for the three interface implementations. // Name-Classname mapping is done in the configure() method.
// end of finally
// ----- BuildListener interface methods -----
// novalidation
// // -----  Set the special attributes, pattern '*.*'  ----- //
// javac
// use Cache defined via name
// tell the build it is finished
// Get the values and do the comparison
// An AntClassLoader which is supposed to delegate to // the parent and then to the disk path:
// should the following two be switched?  If r1 and r2 refer to the same file, // isn't their content equal regardless of whether that file is a directory?
// Only file specified -> Fail
// -----  additional  -----
// resource doesn't exist -> property 'test' == null
// Because the content is only read the file will not be damaged. I tested // with JPG, ZIP and PDF as binary files.
// try a netware-volume length path, see how it is handled
//log uptodateness of all targets:
// Expecting an exception to be thrown by this call: // IllegalArgumentException: wrong number of Arguments
// // Cannot return a null source, because we have to call // setEntityResolver (see setEntityResolver javadoc comment) //
// javacopts
// Determine the Java version by looking at available classes // java.net.Proxy was introduced in JDK 1.5 // java.lang.CharSequence was introduced in JDK 1.4 // java.lang.StrictMath was introduced in JDK 1.3 // java.lang.ThreadLocal was introduced in JDK 1.2 // java.lang.Void was introduced in JDK 1.1 // Count up version until a NoClassDefFoundError ends the try
// rmicopts
//last character isn't a digit
//look for and print warnings
// fall back to JRE bin directory, also catches JDK 1.0 and 1.1 // where java.home points to the root of the JDK and Mac OS X where // the whole directory layout is different from Sun's
// check that an exception in the constructor is noticed
// now wait until the spawned process is finished
// use the classloader that loaded this class otherwise // it will not be able to run inner classes if this test // is ran in non-forked mode.
// ignore expected
// secpropag
//at this point the paths are set up with lists of files, //and the mapper is ready to map from source dirs to dest files //now we iterate through every JAR giving source and dest names // deal with the paths
// verbose
"/*             * ZipOutputStream.putNextEntry expects the ZipEntry to             * know its size and the CRC sum before you start writing             * the data when using STORED mode - unless it is seekable.             *             * This forces us to process the data twice.             */"
// depending on the implementation the actual RE won't // get instantiated in the constructor.
// we need to search the components of the path to see if we can // find the class we want.
// Reflection problems? Should not happen, debug.
// calling GenIC task
// make sure we are dealing with an absolute path
// The the weblogic cmp deployment descriptor
// magic property
// try to use the compiler specified by build.compiler. // Right now we are just going to allow Jikes
// extra field
// check that reference tarfilesets cannot have specific attributes
//and add any files if also defined
//Object class Changed   update it.
// add an extra slash for filesystems with drive-specifiers
//use fle from original weblogic jar
// build the command line from what we got // the format is: // ss Create VSS items [-C] [-H] [-I-] [-N] [-O] [-S] [-Y] [-?] // as specified in the SS.EXE help
// first off, make sure that we've got a command and a vssdir...
// we need to search the components of the path to see if // we can find the class we want.
// version needed to extract // general purpose bit flag
// Use getShortLabel() so labels longer then 30 char are truncated // and the user is warned
// -V Label an existing file or project version
//make sure m_LocalDir exists, create it if it doesn't
// try a multi-part netware-volume length path w/forward slash, see how it is handled
// do nothing by default
// try and load from this loader if the parent either didn't find // it or wasn't consulted.
// this is the classname to run as well as its arguments. // in case of 'executeJar', the executable is a jar file.
// GenIC task // GenIC class (3 are supported for various // versions
// bootclasspath is "-Xbootclasspath:<classpath>" -> 1 arg
// // If you don't do this, you get all sorts of annoying // warnings about a missing properties file.  However, it // seems to work just fine with default values.  Ultimately, // we should probably include a "CatalogManager.properties" // file in the ant jarfile with some default property // settings.  See CatalogManager.java for more details. //
"/*                  This loop is hammered during decompression,                  hence avoid native method call overhead of                  System.arraycopy for very small ranges to copy.                */"
// Do nothing
// Is the ser file or any of the source files newer then the class files. // firstly find the oldest of the two class files.
"/*     * Regardless of the name of the iAS-specific EJB descriptor file, it will     * written in the completed JAR file as ""ias-ejb-jar.xml"".  This is the     * naming convention implemented by iAS.     */"
// build the list of sources which are out of date with // respect to the target
// this loader was first but it didn't find it - try the parent
// push the current iterator onto the stack and then // iterate through this directory.
// add the generated files to the ejbFiles
// not before the filesystem root and not after it, since root // already contains one
// orb
// can safely use '/' because Windows understands '/' as separator
// get index of parts which are equal
/* utilitary methods */
// different size =>different files
"/*             * Check for the odd case where the terminator and/or filename             * extension aren't found.  These will ensure ""ias-"" appears at the             * end of the name and before the '.' (if present).             */"
// Add the class in dotted notation 'com.company.Class'
// dummy1 --> dummy2 --> dummy3 --> dummy1
// For all Files in this folder, we need to check // if there have been modifications.
"/**     * When using this as a custom selector, this method will be called.     * It translates each parameter into the appropriate setXXX() call.     *     * @param parameters the complete set of parameters for this selector.     */"
// line separators in values and tokens are "\n" // in order to compare with the file contents, replace them // as needed
// this method has severe consequences on performance. We cannot rely // on the super.hashCode() method since super.getName() always return // the empty string in the current implemention (there's no setter) // so it is basically draining the performance of a hashmap lookup
// Create the parser using whatever parser the system dictates
//  262148 byte // ------------ //  333408 byte
// Loop through the files. Each file represents one deployment // descriptor, and hence one bean in our model.
/* compressed size                 */
// process the deployment descriptor in each tool
//-- Methods ---------------------------------------------------------------
// end of execute()
// read in the descriptor. Under weblogic, the descriptor is a weblogic // specific subclass which has references to the implementation classes. // These classes must, therefore, be in the classpath when the deployment // descriptor is loaded from the .ser file
/* last mod file time              */
/* external file attributes        */
// resolve relative to project basedir
/* number of the disk with the     */
// Get the filename into a String object
// empty path return empty string
// no errors so far
// swallow, throw the original exception instead
// Then the toplink deployment descriptor
// Setup a naming standard here?.
//do not use a FileResource b/c it pulls File info from the filesystem:
// resource does exist -> property 'test' == 'true'
// try a netware-volume length path w/forward slash, see how it is handled
// // We didn't match a ResourceLocation, but since we // only support PUBLIC and URI entry types internally, // it is still possible that there is another entry in // an external catalog that will match.  We call // Apache resolver's resolveEntity method to cover // this possibility. //
//preserve order-encountered using a list; enforce set logic manually:
// plain impossible
// get all the files in the descriptor directory
//log security exceptions and continue; it aint that //important and may be quite common running Ant embedded.
// If we still can't find it, complain
// tt.length should always be >= length, but theoretically // it can happen, if the compressor mixed small and large // blocks.  Normally only the last block will be smaller // than others.
// deprecated, but email is byte-oriented
// We must check if the process was not stopped // before being here
// // NOTE // We have fit EOF, and the block is not full! // // This is a broken archive. It does not follow the standard // blocking algorithm. However, because we are generous, and // it requires little effort, we will simply ignore the error // and continue as if the entire block were read. This does // not appear to break anything upstream. We used to return // false in this case. // // Thanks to 'Yohann.Roussel@alcatel.fr' for this fix. //
// OK, properties file may be absolute
// do we need to regenerate the file
// write 8-bit
// make next blocks readable without error // (repair feature, not yet documented, not tested)
// Delegate to the parent:
// // inlined: bsW(len_selCtr[sfmap_i] & 0xff, //              code_selCtr[sfmap_i]); //
// the process is not terminated, if this is really // a timeout and not a manual stop then kill it.
// // -----  Set default values  ----- //
// there was an exception - run with no exit to get proper error
// nothing specified - use default
////////////////////////////////////////////////////////////////////// // CORE / MAIN BODY
// END class ManifestClassPathTest
// Check for bsf first then javax // This version does not check if the scriptManager // supports the language.
// ClassLoader.this.parent is already delegated to from // ClassLoader.getResources, no need:
// get the recorder entry
// I assume that starting this takes less than TIME_OUT/2 ms...
//File other then class changed   rebuild
// create the -generic.jar, if required
//create the command to run Java, including user specified options
//Cycle Through generic and make sure its in websphere
// // Get Method instances for each of the methods we need to // call on the resolverImpl using reflection.  We can't // call them directly, because they require on the // xml-commons resolver library which may not be available // in the classpath. //
// // Use the passed in base in preference to the base // from matchingEntry, which is either null or the // directory in which the external catalog file from // which it was obtained is located.  We make a copy // so matchingEntry's original base is untouched. // // This is the standard behavior as per my reading of // the JAXP and XML Catalog specs.  CKS 11/7/2002 //
// This available optional package satisfies the requirements
// build the command line from what we got the format is // ss Add VSS items [-B] [-C] [-D-] [-H] [-I-] [-K] [-N] [-O] [-R] [-W] [-Y] [-?] // as specified in the SS.EXE help
//add it to list of files in jar
// Because of the way I create the full target path, there // must be NO slash at the end of targetFolder and folderName // However, if the slash or backslash is the only character, leave it alone
// set the values on the recorder
// Connect to the StarTeam server, and log on.
// ignore path elements which are not valid relative to the // project
// okay we have a copy of the child, now the child becomes the parent // and we are iterating recursively over its children.
//getProject().log("listing files in directory " + directory, Project.MSG_DEBUG);
//Load default locale bundle files //using default file encoding scheme.
// See wrapListener for reason:
// Normal case.
// Quick return - no output do nothing.
////////////////////////////////////////////////////////////////////// // INNER CLASSES
//If we get here, it could be because we are trying to put a //directory entry that already exists. //For example, we're trying to write "com", but a previous //entry from another mergefile was called "com". //In that case, just ignore the error and go on to the //next entry.
// If it's a primitive wrapper then we shouldn't try and put // it into the jar, so ignore it.
"/*          First, some notes.          On MRJ 2.2.2, getting the size, compressed size, and CRC32 from the          ZipInputStream does not work for compressed (deflated) files.  Those calls return -1.          For uncompressed (stored) files, those calls do work.          However, using ZipFile.getEntries() works for both compressed and          uncompressed files.          Now, from some simple testing I did, it seems that the value of CRC-32 is          independent of the compression setting. So, it should be easy to pass this          information on to the output entry.        */"
// create a recorder entry
// Weblogic will throw an error if the deployment descriptor does // not match the class files.
// create the output .jar, if required
//if all resource files associated with this bundle //have been scanned for and still not able to //find a single resrouce file, throw exception
"/*         * For the GenericDeploymentTool, do nothing.  Vendor specific         * subclasses should throw a BuildException if the configuration is         * invalid for their server.         */"
// we found a starttoken, is there an endtoken following? // start at token+tokenlength because start and end // token may be indentical
//classpath //add at the end of the classpath //the system classpath in order to find the tools.jar file
// Create the file input stream, and buffer everything over // to the jar output stream
"/* Check the timestamp on the EJB implementation class.             *             * Note that if ONLY the implementation class has changed, it's not             * necessary to rebuild the EJB stubs and skeletons.  For this             * reason, we ensure the file exists (using lastModified above), but             * we DON'T compare it's timestamp with the timestamps of the home             * and remote interfaces (because it's irrelevant in determining if             * ejbc must be run)             */"
// class doesn't exist -> property 'test' == null
// Inverted.
// Read the checksum from disk.
// Close up the file input stream for the class file
// register any DTDs supplied by the user
// A separate directory was explicitly declared
// none to register for generic
// give it some time to display
// constructs the "-url <url> -debug <action> <password>" portion // of the commmand line
/////////////////////////////////////////////////////////////////////////// // // Set/get methods // ///////////////////////////////////////////////////////////////////////////
//we create a fileset with the source file. //this lets us combine our logic for handling output directories, //mapping etc.
// Add any support classes specified in the build file
// if input files are specified, inputString and inputStream are ignored; // classes that work with redirector attributes can enforce // whatever warnings are needed
// already defined
// Empty statement
// // Override the logging of output in order to filter out Generating // messages.  Generating messages are set to a priority of VERBOSE // unless they appear after what could be an informational message. //
// Determine the JAR filename (without filename extension)
// Locate the auxiliary script
// default to the global setting and then see // if this class belongs to a package which has been // designated to use a specific loader first // (this one or the parent one)
//************************************************************************ //  protected and private methods //************************************************************************
// load command line with optional attributes
// Build the command
// First the regular deployment descriptor
// preserve permissions
// Ignore and keep trying
//can either be a property name string or a file
// override permissions if set explicitly
// now the vendor specific files, if any
// Create the directory, as it might not exist.
// add any dependent files
// Calculate the total checksum // Convert the keys (source files) into a sorted array.
// must not use getEntry as "well behaving" applications // must accept the manifest in any capitalization
// define the package now
// END static class TemplateElement
// file is on wrong format, swallow
// Log that we are going to build...
// If we're in this finally clause because of an // exception, we don't really care if there's an // exception when closing the stream. E.g. if it // throws "ZIP file must have at least one entry", // because an exception happened before we added // any files, then we must swallow this // exception. Otherwise, the error that's reported // will be the close() error, which is not the // real cause of the problem.
//private CommandlineJava commandline = new CommandlineJava();
// Works like clone() but doesn't show up in the Javadocs
// if there is an error/failure and that it should halt, stop // everything otherwise just log a statement
// don't have to check for public, since // getConstructor finds public constructors only.
// Use helper method to write the jarfile
// 'reasonable' default, if the component is used without // a Project ( for example as a standalone Bean ). // Most ant components can be used this way.
// try to be smart, not to be fooled by a weird directory name
// create a new Vector to avoid ConcurrentModificationExc when // the listeners get added/removed while we are in fire
// Log that the file is up to date...
// Ignore - we are interested only in the side // effect - that of getting the static initializers // invoked.  As we do not want to call a valid // constructor to get this side effect, an // attempt is made to call a hopefully // invalid constructor - come on, nobody // would have a constructor that takes in // 256 String arguments ;-) // (In fact, they can't - according to JVM spec // section 4.10, the number of method parameters is limited // to 255 by the definition of a method descriptor. // Constructors count as methods here.)
// add in support classes if any
// ioe.printStackTrace();
// Work out what the base name is
// nothing to add for generic tool.
// Note: could cause overlaps in case ClassLoader.this.parent has matches.
"/*                            Ignore method m, as there is an overloaded                            form of this method that takes in a                            non-string argument, which gains higher                            priority.                        */"
// clean the addedfiles set
// If you felt daring, you could cache the basedir absolute path
// Create the streams necessary to write the jarfile
// following could be done in a loop, but // unrolled it for performance:
// class does exist -> property 'test' == 'true'
// dummy1 --> dummy2 --> dummy3 (with Path "/a")
//get and clean up innerclass name
"/*          In the various block-sized structures, live data runs          from 0 to last+NUM_OVERSHOOT_BYTES inclusive.  First,          set up the overshoot area for block.        */"
// See if there are any inner classes for this class and add them in if there are
// Loop through all the class files found and add them to the jar
//assertions take up space too
"/*                  Calculate the cost of this group as coded                  by each of the coding tables.                */"
// link the file
// JL: comment extracted from JUnitTask (and slightly modified)
"/*              Recompute the tables based on the accumulated frequencies.            */"
// dummy1 --> dummy2 --> dummy3 // (which has the Project's basedir as root).
// ignored
// {tasks, types}
// having a space between the file and its path causes commandline // to add quotes around the argument thus making JDepend not taking // it into account. Thus we split it in two
"/*     * Actually performs the merging of f into the output.     * f should be a zip or jar file.     */"
// add the parsed namespaces of the parent project
//Weblogic jspc does not seem to work unless u explicitly set this... // Does not take the classpath from the env.... // Am i missing something about the Java task??
// should be the default, as it integrates better in ant.
//trim the META_INF\ off of the file name
// build the command line from what we got the format is // cleartool checkout [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// Specified property-name is "" -> true
"/*     * Used when sorting.  If too many long comparisons     * happen, we stop sorting, randomise the block     * slightly, and try again.     */"
// Close the output stream.
// end of writeJar
// only generate a new ClassLoader if we have a classpath
// simple test to ensure that the caching does work...
// register all the known DTDs
// File is Comparable, so sorting is trivial
// try to determine it from publicId
//Ignore manifest entries.  They're bound to cause conflicts between //files that are being merged.  User should supply their own //manifest file when doing the merge.
// BSF uses a hashtable to store values // so cannot declareBean with a null value // So need to remove any bean of this name as // that bean should not be visible
// see if the file is in fact a .class file, and determine its actual name.
// need to create a generic jar first.
// Loop over the checksums and generate a total hash.
// relative offset of LFH
// Only go forward if the generic and the weblogic file both exist
//open jar files
// Set up a VSSCreate task
// dummy1 --> dummy2 --> dummy3 // (which holds patterns "include" and "exclude")
"/* Write `magic' bytes h indicating file-format == huffmanised,           followed by a digit indicating blockSize100k.        */"
// Add the digest for the file content
//get the list of generic jar entries
// catalog <--> catalog
//get the list of weblogic jar entries
// Add the file path
//Cycle Through generic and make sure its in weblogic
// File name/path match
// Check files see if same
"/*     * A convenience method that several other methods might call.     */"
//File are different see if its an object or an interface
//Interface changed   rebuild jar.
// is it the manifest. If so ignore it
// override allowed on <available>
// check that a reference tarfileset gets the same attributes as the original
// if we haven't got the manifest yet, attempt to // get it now and have manifest be the final merge
// time to write the manifest
// a file doesnt exist rebuild
//Copy files from old weblogic jar
// Use the entry from the generic jar
// encoding must be UTF8 as specified in the specs.
// version-info blankline
// if the implementation classes don;t exist regenerate
"/*     * A method that does the work on a given entry in a mergefile.     * The big deal is to set the right parameters in the ZipEntry     * on the output stream.     */"
// any problems - just regenerate
// was expected
// header newline
// create a Java task to do the rebuild
//must have same validity; then if they are valid they must also be the same:
// we add this to our group of fileset manifests
// Hide warning also as it makes no sense since // the filesetmanifest attribute itself has been // hidden
// need to handle manifest as a special check
// Specified file is "" -> invalid files do not exist
// Specified file is "" actually a directory, so it should pass
// Was expected, test passes
// if it doesn't exist, it will get created anyway, don't // bother with any up-to-date checks.
//running under an IDE that doesn't set ANT_HOME
//success: proceed with more steps
// no existing archive
// run with no exit for better reporting
// Ignore close exception
// we want to save this info if we are going to make another pass
/* Add CMP descriptors to the list of EJB files */
/* Only calculate the descriptor name once */
// couldn't find it - must be on path
// Directory path of the EJB descriptor // Filename appearing before name terminator // Filename appearing after the name terminator
/* Find the end of the standard descriptor's relative path */
// only the first build exception is reported
//no more $ signs found //if there is any tail to the file, append it
/* Check to see if the standard name is used (there's no basename) */
//choose the right vendor DD
// ejb jar file to verify
//debug ?
//set the classpath
//end class
// ignore event
//list file
//no TIE classes
//root dir
//compiling order
//add the home class
//build the home classes list.
//remove .class extension
//add the gen files to the collection
//        assertEquals("with classpath", "java", s[0]);
// Get the Extensions document
//Weblogic.jspc calls System.exit() ... have to fork // Therefore, takes loads of time // Can pass directories at a time (*.jsp) but easily runs out of // memory on hefty dirs (even on  a Sun)
// We attempt to put in the MAP and Schema files of CMP beans
// Add the Map file
// We first run a DFS based sort using each root as a starting node. // This creates the minimum sequence of Targets to the root node(s). // We then do a sort on any remaining unVISITED targets. // This is unnecessary for doing our build, but it catches // circular dependencies or missing Targets on the entire // dependency tree, not just on the Targets that depend on the // build Target.
// set default value, can be changed by the user
// Theres nothing else to see here...keep moving sonny
// Set the options
// Set the JvmArgs
// Set the Environment variable
"/*     * returns non null IBM JDK 1.3 Linux     */"
// only the second iteration would pass because of PR 27218
//too bad
// compile the source files
//add path URLs
// -------------------- Default implementation  -------------------- // Methods used to support the default behavior and provide backward // compatibility. Some will be deprecated, you should avoid calling them.
// namespace that does not contain antlib
// We have to compare the decompressed content instead:
//if we are a webapp, hand off to the compiler, which had better handle it
// Specified dir is "" -> this is the current directory and should // always exist
// Already processed
// scan source directories and dest directory to build up both copy // lists and compile lists
// If the first char is not a start of Java identifier or is _ // prepend a '_'.
// name newline
// for all other possibilities
//mix element types
//there to stop error messages being "null"
// longest match comes first
// register all the DTDs, both the ones that are known and // any supplied by the user
// META-INF would be skipped anyway, avoid index for // manifest-only jars.
// Set the working directory
// Set the Java class name
// 2nd run..
// Specified dir is "../this_dir_should_never_exist" -> null
//implicit composite
//if this is left out, bad things happen. like all build files break //on the first element encountered.
// a file, not in the root // since the jar may be one without directory // entries, add the parent dir of this file as // well.
// create the "undeployed" output .jar, if required
// Only go forward if the generic and the websphere file both exist
/*protected*/
//get the list of websphere jar entries
// File name/path match // Check files see if same
// a fishing expedition :- ignore errors if antlib not present
// if the target file is not there, then it can't be up-to-date
// a file doesn't exist rebuild
//Copy files from old websphere jar
// append the err and output streams to the log
// -------------------- Property parsing  -------------------- // Moved from ProjectHelper. You can override the static method - // this is used for backward compatibility (for code that calls // the parse method in ProjectHelper).
// if the source file isn't there, throw an exception
//use fle from original websphere jar
// Specification Name must match
//class of problem
// by default, messages are always displayed
// Implementation Vendor ID must match
// we must keep two lists since other classes may modify the // filesets Vector (it is package private) without us noticing
//look up the name
// add the main fileset to the list of filesets to process.
//Reset list of sections
// must be plain, ensured by TypeAttribute
// Extension Name must match
// check if tar is out of date with respect to each // fileset
//Add all the dependency data to manifest for dependencies
// The children are added to after this cloning
// Invalid type specified
//we are defined, so it is an instantiation problem
// warn or GNU
// A project helper may process multiple files. We'll keep track // of them - to avoid loops and to allow caching. The caching will // probably accelerate things like <antCall>. // The key is the absolute file, the value is a processed tree. // Since the tree is composed of UE and RC - it can be reused ! // protected Hashtable processedFiles=new Hashtable();
// can be null if an error occurred in setUp
// Output properties
// '/' is appended for compatibility with the zip task.
//start with instantiating the class.
// we would end up adding "" to the archive
//Add all the dependency data to manifest for "optional" //dependencies
//add in something like //"Extension-List: javahelp java3d"
//here we successfully loaded the class or failed.
//all methods static
"/*     * Gets the destination file     */"
//So long as the line isn't empty and isn't a comment...
//hey, there is nothing wrong with us
//Legal Key-Value separators are :, = and white space.
//Only if we do have a key is there going to be a value
//Handle line continuations, if any
//Has key already been loaded into resourceMap?
// // These shenanigans are necessary b/c Norm Walsh's resolver // has a different idea of how file URLs are created on windoze // ie file://c:/foo instead of file:///c:/foo //
// the driver must still be cached.
// Core class that exists in system classpath is ignored
// a --> b --> c --- def //               \-- ghi
/*<Thread,Task>*/
//Make sure parent dirs exist, else, create them.
//Check to see if dest file has to be recreated
// reflect these into the target
// is there a startToken // and there is still stuff following the startToken
// grab the token
/*<ThreadGroup,Task>*/
// If there is a white space or = or :, then // it isn't to be treated as a valid key.
// find the replace string
// generate the new line
// forceLoadClass is not convenient here since it would not // properly deal with inner classes of these classes.
// execute the test and get the return code
// set start position for next search
// If the listeners already has this listener, do nothing
// only override permissions if set explicitly
// find next starttoken
// deal with specified srcDir
// deal with the filesets
// remove any files that shouldn't be overwritten.
// we need to build the hashtable dynamically
// non-file resources
// check that the password has been set
// check for missing application on deploy & update
// check for missing source on deploy & update
// check for missing application on delete & undeploy
// Core class that exists in system classpath is not ignored with ignoresystemclass="false"
// // Ensure that an external entity resolves as expected Using an // XMLCatalog: // // Transform an XML file that refers to the entity into a text // file, entity is listed in the XMLCatalog pointing to a // different file.  Stuff result into property: val2 //
// sanity check
//extend Comparison; retain for BC only
// actually tests constructor as well as setPath
//when writing to the log, we'll see what's happening:
//try the current classloader
// close the output file if required
/////////////////////////////////////////////////////////////////////////// // // Place vendor specific tool creations here. // ///////////////////////////////////////////////////////////////////////////
//only set if successful to this point:
/////////////////////////////////////////////////////////////////////////// // // Execute method // ///////////////////////////////////////////////////////////////////////////
// throw further
// deal with the resource collections
// convert backslashes to slashes, otherwise jjtree will // put this as comments and this seems to confuse javacc
// deal with filesets in a special way since the task // originally also used the directories and Union won't return // them.
// required attributes
// Make sure we exist
// use this to create file and deal with non-writable files
// start any daemon threads
// look for the driver path...
// Class is found in specified classpath
// // Ensure that an external entity resolves as expected with NO // XMLCatalog involvement: // // Transform an XML file that refers to the entity into a text // file, stuff result into property: val1 //
// Currently visiting this node, so have a cycle
// now run main threads in limited numbers... // start initial batch of threads
// used by jpackage for JavaCC 3.x
// check the target is a file
// start the timeout thread
// determine if the generated java file is up-to-date
// Extract file's base-name
// in VM is not very nice since it could probably hang the // whole build. IMHO this method should be avoided and it would be best // to remove it in future versions. TBD. (SBa)
// will cause trouble in JDK 1.1 if omitted
// now find available running slots for the remaining threads
// Replace the file's extension with '.java'
// Change the directory
// continue on outer while loop to get another // available slot
// This default has been good enough until Ant 1.6.3, so stick // with it
// first search for the "old" javah class in 1.4.2 tools.jar
// this actually relies on the first manifest being found on // the classpath (probably rt.jar's) being valid
// if we got here all slots in use, so sleep until // something happens
// assume older than 1.4.2 tools.jar
// required attributes // Deprecated! // Use this going forward
// are all threads finished
// optional attributes
// who would interrupt me at a time like this?
// now did any of the threads throw an exception
// // Ensure that an external entity resolves as expected Using an // XMLCatalog: // // Transform an XML file that contains a reference to a _second_ XML file // via the document() function.  The _second_ XML file refers to an entity. // The entity is listed in the XMLCatalog pointing to a different file. // Stuff result into the property: val4 //
// return a bogus number
// Should be safe to parse
// sanity check ourselves, if we've been asked to build nothing // then we should complain
// Check name is "antlib"
//include locally for screening purposes
// The following will be used as types and tasks
// Sort and run the dependency tree. // Sorting checks if all the targets (and dependencies) // exist, and if there is any cycle in the dependency // graph.
// try to find the executable
// now try to resolve against the dir if given
// What's the difference between id and name ?
// no warning, this is not changing anything
// This bit turns <exclude> child tags into patters to ignore
// if not set, auto-create the ClassPath from the project
// This is the new way - use classespath - code is the // same for now
// The intended result URLs:
// JDK 1.4: return Collections.list(e);
//file time checks for java1.2+
// test when file begins with basedir twice
// Check for old id behaviour
// read in all constant pool entries.
// verify this is a valid class file.
/* int version = */
// read the constant pool.
// this one is here because the changes to support ResourceCollections // have broken Magic's JUnitTestTask. // // The task adds a FileSet to a BatchTest instance using the // Java API and without telling the FileSet about its project // instance.  The original code would pass in project on the // call to getDirectoryScanner - which is now hidden deep into // Resources.iterator() and not reachable.
// Inform IH to clear the cache
// read access flags and class index.
// try a multi-part netware-volume length path, see how it is handled
//Be sure everything has been set.
//Do the merge
// check for a static suite method first, even when using // JUnit 4
// Check for JDK 5 first. Will *not* help on JDK 1.4 // if only junit-4.0.jar in CP because in that case // linkage of whole task will already have failed! But // will help if CP has junit-3.8.2.jar:junit-4.0.jar.
//Add this file to the addfiles Vector and add it //later at the top level of the output file.
// Add/overlay system properties on the properties from the Ant project
// share the setup for testing the depend task
// register this as the current task on the current thread.
// jlink output input1 ... inputN
// To maintain compatibility with the command-line version, // we will only add files to be merged.
//Check to see that the file with name "name" exists.
// Test for path relative to project base directory
//META-INF not found in the name of the entry. Go ahead and process it.
// Make sure that
// test for searching parents
//class-MockCache
// ignore this if the object does not have // a set project method or the method // is private/protected.
// mustSearchPath is false, or no PATH or not found - keep our // fingers crossed.
// Quick fail if this is not a valid OS for the command
"/*     * Necessary in the case where you add a entry that     * is not compressed.     */"
//override facility for subclasses to put custom hashtables in
//hand osfamily off to Os class, if set
//It was the duplicate entry.
// this command will be executed only on the specified OS
"/*     * Adds contents of a directory to the output.     */"
"/*     * Gets the name of an entry in the file.  This is the real name     * which for a class is the name of the package with the class     * name appended.     */"
//  =====================  attributes  =====================
// --------------------  Hook management  --------------------
// time of the build in milli seconds
"/*     * Adds a file to the output stream.     */"
//test for and handle a forced process death
//Make sure file exists
//This entry already exists. So, go with the first one.
// --------------------  Methods to override  --------------------
// show the command
//Note, don't need to specify size or crc for compressed files.
// Not strictly necessary but probably desirable. // JUnit 4-specific test GUIs will show just "failures". // But Ant's output shows "failures" vs. "errors". // We would prefer to show "failure" for things that logically are.
//use the systemclasspath as well, to include the ant jar
//Finally set the property
//TODO Test on other versions of weblogic //TODO add more attributes to the task, to take care of all jspc options //TODO Test on Unix
//only test on java1.5+
// test for not searching parents
// If next has handled the property
// Override Task#init
//private String compilerPath; //fully qualified name for the compiler executable
// get all the files in the sourceDirectory
// Instantiate it
// try to get it from the project or keys // Backward compatibility
// Override Task#execute
// apply transformation
// we are going to scan everything anyway
// The destination of the files to copy
// evaluate correctness
// user (CLI) properties take precedence
// The complete list of files to copy
// Copy all the necessary out-of-date files
// -------------------- Getting properties  --------------------
// nope ;-)
// Get rid of all files not listed in the source filesets.
// Output the default excludes
//search for the next instance of $ from the 'prev' position
// Get rid of empty directories on the destination side
// Test here again to avoid method call for non-directories!
// put in the newroots vector the include patterns without // wildcard tokens
// we are already in the right path, so the second parameter // is false
//if we are at the end of the string, we tack on a $ //then move past it
// must match the default value of Ant#inheritAll
// must match the default value of Ant#inheritRefs
// now we need to populate the compiler adapter
// finally, lets execute the compiler!!
// check if dir exists by trying to change into it.
//peek ahead to see if the next char is a property or not //not a property: insert the char as a literal
/*<TargetElement>*/
//demand create vector of filesets
// try a multi-part netware-volume length path with UNIX // separator (this testcase if from an actual bug that was // found, in AvailableTest, which uses PathTokenizer)
// check if one of the builds failed in keep going mode
// make sure that we've got a destdir
//bind to a compiler
//     REVISIT: Defaults to the target name that contains this task if not specified.
// make sure that we've got a srcdir
// if the compiler does its own dependency stuff, we just call it right now
// END class SubAnt
//the remainder of this method is only for compilers that need their dependency work done
//        String srcFileDir=srcFile.getParent();
// adding something to the excludes'
//  =====================  constructors, factories  =====================
// Child elements.
//end inner class
// since we don't mangle extensions like the servlet does, // we need to check for keywords as class names
// If we are sending files, then assume out of date. // If we are getting files, then throw an error
// first char is more restrictive than the rest
// this is the rest
//we are forking here to be sure that if JspC calls //System.exit() it doesn't halt the build
//tomcat4.0 gets the old mangler
//tomcat4.1 gets the new one
// project reference is set in super.setUp()
// acrobatic cast.
// set the destination directory relative from the project if needed.
// If an initial command was configured then send it. // Some FTP servers offer different modes of operation, // E.G. switching between a UNIX file system mode and // a legacy file system.
// This class acts as a custom Ant task also // and uses these variables/methods in that mode
//CVS missing
// init the testclasses path object
// If style dir is not specified we have to retrieve // the stylesheet from the classloader
// If we are here, then the style dir is here and we // should read the stylesheet from the filesystem
// xalan 2
// =======  testcases for the attributes and nested elements of the selector  =====
// xalan xsltc
// jdk 1.5 xsltc
// pre JUnit 3.7
// file does exist -> property 'test' == 'true'
// Empty
// Snapshot of the system properties
//add the timestamp
// Grant extra permissions to read and write the user.* properties and read to the // java.home property
// no-op: not a real business error
// do the actions
//backwards compatibility two $ map to one mode
//and the hostname.
// Revoke permission to write user.home (granted above via user.*), still able to read though. // and the default granted permission to read os.name.
// a TestSuite can contain Tests from multiple classes, // even tests with the same name - disambiguate them.
// Do we send output to the formatters ?
//new behaviour: $X maps to $X for all values of X!='$'
//   Attributes for basetest
//property found, extract its name or bail on a typo
// // Various copy attributes/subelements of <copy> passed thru to <mycopy> //
// getConstants is a static method, no need to // pass in the object
// Try parsing the line into an integer.
// Make sure the dependency is not empty string
// Should work whether or not redirector.inputStream == null:
// test if os match
// set the default values if not specified //@todo should be moved to the test class instead.
"/*         * After changing CommandlineJava to search for the java         * executable, I don't know, how to tests the value returned         * here without using the same logic as applied in the class         * itself.         *         * assertTrue(""no classpath"", ""java"", s[0]);         */"
// exec command on system runtime
// Create a temporary file to pass the test cases to run to // the runner (one test case per line)
// CheckStyle:VisibilityModifier OFF - bc //ToDo: If dealing with default cl need to parse out <enter description here>
// copy input and error to the output stream
// make sure the test will be accepted as a TestCase
// Make sure that depends attribute does not // end in a ,
// starts pumping away the generated output/error
// make sure the test annotation are accepted
// NOTE kirk@radik.com 04-April-2001 -- If you put in the -s, you // have to start running through regular expressions here. Much easier // to just not include the scripting information than to try to add it // and strip it later.
// local copy since LogOutputStream.task is private
// Wait for everything to finish
// dummy output for the framed report // it's all done by extension...
// configure attributes of the object and it's children. If it is // a task container, defer the configuration till the task container // attempts to use the task
//    public Hashtable getProcessedFiles() { //        return processedFiles; //    }
// check its exit value
// conforming to NodeList interface
//do some writing to it
// this should never happen
// The size of buffers to be used
// write the document
// ensure <tstamp>'s new prefix attribute is working
// Check it's a read-only map.
//dont look for much text here as it is vendor and version dependent
// --------------------  Parse method  --------------------
// Identify the class loader we will be using. Ant may be // in a webapp or embedded in a different app
// Attributes.
// Attribute setters.
// Nested element creators.
// treat empty nested text as no text
// First, try the system property
// if binary check if incompatible attributes are used
// Sanity check our inputs.
//----- from now, the methods are all related to DOM tree manipulation
// A JDK1.3 'service' ( like in JAXP ). That will plug a helper // automatically if in CLASSPATH, with the right META-INF/services.
// no need to do anything
// writers do not throw exceptions, so check for them.
// create the dom tree
// Log using WARN so it displays in 'quiet' mode.
// get all files and add them to the document
// make sure that this is REALLY a testsuite.
// This code is needed by EBCDIC and other strange systems. // It's a fix for bugs reported in xerces
// try next method
// non-existing files are not allowed
//wrong root element name // issue a warning.
// a testcase might have failed and write a zero-length document, // It has already failed, but hey.... mm. just put a warning
// a missing . might imply no package at all. Don't get fooled.
// modify the name attribute and set the package
// don't filter AssertionFailure
// JUnit 4 support:
// Most likely an UnknownElement
// check if there is a suite method
// no appropriate suite method found. We don't report any // error here since it might be perfectly normal.
// -------------------- Static utils, used by most helpers ----------------
// In that case first C.fN will fail with CNFE and we // will avoid UnsupportedClassVersionError.
// OK, fall back to JUnit 3.
// Let's use it!
//when running labelsync, if view elements are in sync, //Perforce produces a line of output //looking like this one : //error: //depot/file2 - label in sync.
// Use JUnit 3.
// id attribute must be set externally
// try to extract a test suite automatically this // will generate warnings if the class is no // suitable Test
// had an exception constructing suite
// a task container - anything could happen - just add the // child to the container
// on Windows and Unix, we can ignore delimiters and still have // enough information to tokenize correctly.
// return the stack unfiltered
"/*     * Constant for the PCLI listversionedfiles recursive i a format ""get"" understands     */"
// Extract the name of the directory from the filename
// To compile on pre-JDK 4 (even though this should always succeed):
// Check to see if the target directory exists.
// needed since project properties are not accessible
/*<UnknownElement>*/
// Create a ZipFileSet for this file, and pass it up.
// pre-3.4
// JUnitTestRunner
//rethrow
//wrap
// implicit else: ignore the ':' since we have either a // UNIX or a relative path
//skip abs. paths not under basedir, if set:
// pre Kaffe 1.1.5
// Logon using specified user name and password.
// Initialize to the size of the first text fragment, with // the hopes that it's the only one.
// If using resources, disallow inline text. This is similar to // using GNU 'cat' with file arguments -- stdin is simply // ignored.
/*package*/
//by default, we add the file.
// only scan directories that can include matched files or // directories
//file length checks rely on touch generating a zero byte file
// Rats. // should not happen
//a second web.xml file, so skip it
// otherwise ExecuteJava has thrown an exception
// No includes supplied, so set it to 'matches all'
//check to see if we warn or not
//no added file, yet
// always start from the current ftp working dir
// construct it
// cool case, //we do not need to scan all the subdirs in the relative path
//this should not happen, except if parent has been deleted by another process
//and remember that we did
// hit a hidden file assume not a symlink
// will be caught and redirected to Ant's logging system
// getRelativePath also finds about symlinks
// Add the explicit resource collections to the archive.
//validation
// warn that selectors are not supported
// If we are doing a listing, we need the output stream created now.
// father and child pattern test
//discard most of really big resources
//open up the resource
// get files from filesets
// find first non cached dir
// could not change to it - try to create it
// create a local temporary file
// impossible since *our* processLine doesn't throw an IOException
// see if we should issue a chmod command
// don't have to check for interface, since then // taskClass would be abstract too.
//if we have a RedirectorElement, return a decoy
// ignore this if the class being used as a task does not have // a set location method.
// 0 --> srcIndex
// srcIndex --> targetIndex
// targets are already absolute file names
// put in the newroots map the include patterns without // wildcard tokens
// targetIndex --> end
// do the checks - the buildfile stores the fileset as property
// delegate the deletion of the local temp file to the delete task // because of race conditions occuring on Windows
// For Microsoft's Ftp-Service an Array with length 0 is // returned if configured to return listings in "MS-DOS"-Format
// 0 --> targetIndex
// codes 521, 550 and 553 can be produced by FTP Servers //  to indicate that an attempt to create a directory has //  failed because the directory already exists.
// For a unix ftp server you can set the default mask for all files // created.
// If the action is MK_DIR, then the specified remote // directory is the directory to create.
// in this case we want to find how much time span there is between local // and remote
//socks
//this may be a java1.4 thingy only
// simple one-shot execution
// need nested read/write elements
// Mask, block from being edited, all characters in constants.
// target must be specified
// must be empty according to the Mock* implementations
// contains AbstractFileSet // (both DirSet and FileSet)
//We have to create a unlocked label first
// All three specified but class missing -> null
// Specified resource is "" -> can such a thing exist?
// Specified dir is "../taskdefs" -> should exist since it's the // location of the buildfile used...
// Core class that exists in system classpath is not ignored with default ignoresystemclasses value
// removing something from the defaults
// don't catch the JUnit exceptions
// targetIndex --> srcIndex
// srcIndex --> end
// readable form of parameter kind
// no targetFilePos
// fill in source file names
// If source at EOF and lookAhead is ctrl-z, return EOF (NOT ctrl-z)
//here we'd parse the output from change -o into submit -i //in order to support default change.
/* this is skipEmpty == false */
//Remove any non-numerical chars - should leave the change number
//if there is a new priority, and it is different, change it
// this type of output might happen // Change 18 renamed change 20 and submitted.
//Match "//" for begining of depot filespec
// setup the "Ant project"
//catch permissions denial and keep going
// we need to escape the description in case there are /
//EoF
//-- XSLTLiaison
// CheckStyle:VisibilityModifier OFF - bc //Input //Output //Error // CheckStyle:VisibilityModifier ON
"/* Here we can either revert any unchanged files in a changelist         * or         * any files regardless of whether they have been changed or not         *         *         * The whole process also accepts a p4 filespec         */"
// Write the properties file back out
"/*                     * shouldn't throw out deprecation warnings before we know,                     * the wrong version has been used.                     */"
// addConfigured(Hashtable) should come before addConfigured(Map)
// setup the selector
// if we have an in file and out then process them
//-- make sure destination directory exists...
// Process all the directories marked for styling
// only resource collections, there better be some
// get the cache, so we can check our things
//anything else is a classname
// Massage PCLI lvf output transforming '\' to '/' so get command works appropriately
//Read back the label spec from perforce, //Replace Options //Submit back to Perforce
//-- processXML
//sync says "error:" when a file is up-to-date
//sometimes there's "info1:
// Param
//P4 runtime directives
// Perforce task directives
//P4 g-opts and cmd opts (rtfm)
//Setters called by Ant
// check that both arrays have the same size
// the test
//Get default P4 settings from environment - Mark would have done something cool with //introspection here.....:-)
// reset error flags before executing the command
//Check API for these - it's how CVS does it...
// private static final String PCLI_LVF_ARGS = "lvf -z -aw";
// Check workspace exists // Launch PCLI listversionedfiles -z -aw // Capture output // build the command line from what we got the format is
// default pvcs project is "/"
// Create folders in workspace
// add the test classes to its classpath
// plain impossible to get here, maybeConfigure should // have thrown an exception.
// Launch get on output captured from PCLI lvf
// Change these through their GET and SET methods.
// These fields deal with includes and excludes
// Check all of the properties that are required.
// Finished executing the task, null it to allow // GC do its job // If this UE is used again, a new "realthing" will be made
// Search the items on this server.
// Disconnect from the server.
// Tell how many files were checked out.
// Optional; logOn() connects if necessary.
//instance variable to allow cleanup
// let the selector do its checks
// Do the runtime
// We always display the ItemID (OBJECT_ID) and primary descriptor.
//If a working directory was specified then add it to the command line
// UnknownElement always has an associated target
// If failed to process document, must delete target document, // or it will not attempt to process it the second time
// Checking for "\ // or           "/ // or           "X:\...
// if processor wasn't specified, see if TraX is available.  If not, // default it to xalan, depending on which is in the classpath
// For performance reasons, it is important to pre-fetch all the // properties we'll need for all the items we'll be searching.
// extract the algorithm name (and config) from the selectors output
//return elementName;
// If we are here we can set the stylesheet as a // resource
// We'll need this item type's primary descriptor.
// Does this item type have a secondary descriptor? // If so, we'll need it.
// If we are here we cannot set the stylesheet as // a resource, but we can set it as a file. So, // we make an attempt to get it as a file
// Now, build an array of the property names.
// Pre-fetch the item properties and cache them.
// Are the names the same ?
// only 'name' and 'value' exist.
// Now, search for items in the selected folder.
// convert whatever separator char is in starteam to that of the target system.
// a value must be of a given type // say boolean|integer|string that are mostly used.
// If it ends with separator then strip it off
// Return copy so that the caller must call setTab() to change the state // of fixCRLF.
// Change all EOL characters to match the calculated EOL string. If // configured to do so, append a trailing EOL so that the file ends on // a EOL.
// only want to do this the first time
// return the clean value
// Are attributes the same ?
// -- class Attribute
// Process all items in this folder.
// Process all subfolders recursively if recursion is on.
// -- class Factory
// Get descriptors for this item type.
// // Ensure that an external entity resolves as expected with NO // XMLCatalog involvement: // // Transform an XML file that contains a reference to a _second_ XML file // via the document() function.  The _second_ XML file refers to an entity. // Stuff result into the property: val3 //
// VERBOSE MODE ONLY
// Are the sub elements the same ?
// error message strings
// Show folder only if changed.
// Show if the file is locked.
// END VERBOSE ONLY
// initialize test environment (called "bed")
// hidden constructor
//now exit here if the property is already set
// add -command CheckOutFile to the commandline
//create the file
//Use the VM launcher instead of shell launcher on VMS
"/*     * Builds a command launcher for the OS and JVM we are running under.     */"
// Show the primary descriptor. // There should always be one.
// ensure <tstamp> follows the immutability rule
// INVALID extension point
// Set a property on the project to make sure that loading // a property with the same name from an xml file will // *not* change it.
//calendar stuff.
// Try using a JDK 1.3 launcher
// Show the secondary descriptor, if there is one. // Some item types have one, some don't.
// Change the item to be checked out to a StarTeam File.
// Begin SET and GET methods
// Begin filter getters and setters
//this field will hold unnnn right after reading a non latin character //afterwards it will be truncated of one char every call to read
// ----------------------------------------- //  Predefined tokenizers // -----------------------------------------
// Check if need to set the loader
// Now create the scriptRunner
// Windows XP/2000/NT
// find the script repository - it is stored in the project
"/*            // try the context classloader            ClassLoader loader                = Thread.currentThread().getContextClassLoader();            */"
// Configure the selector
// not included, to nothing
// Windows 98/95 - need to use an auxiliary script
// add -command CheckInFile to the commandline
// OpenVMS
// -------------------------------------------- // //      Tokenizer Classes (impls moved to oata.util) // // --------------------------------------------
// Set the location of the implicit target associated with the project tag
// Check if this target is in the current build file
/*<RuntimeConfigurable>*/
// Generic
// add -command CheckInProject to the commandline
// look for a recursive option
// Make sure we do not recurse forever
// Look for a comment
// Just try to use what we got
// soscmd Command options
// soscmd Option flags
/*<String>*/
// add -command GetFile to the commandline
// look for a version attribute
// Configure the object
// add -command GetProject to the commandline
// look for a label option
// make sure localDir exists, create it if it doesn't
// This is the exit status
// Children (this is a shadow of UnknownElement#children)
// Get the path to the soscmd(.exe)
// SOS server address is required
// VSS Info is required
// VSS project is required
// Task included in a target ( including the default one ).
// poly type
// -verbose
// Disable Compression
// Every key identified by the Properties must have been loaded.
// Text
//ATTRIBUTES settable from ant.
// Just try to see how much we got
// Determine if we're running under XP/2000/NT or 98/95
// Windows 98/95
// same logic as on algorithm, no testcases created
// Windows XP/2000/NT/2003
// add -command CheckOutProject to the commandline
// add -command AddLabel to the commandline
// On most systems one could use: /bin/sh -c env
// a label is required
// get the list of files in the dir
// rely on PATH
// set the source to the file at that location
// Empty block
//System.exit(0);
// build successfull!
// Substitute .xml with .properties
// cache must return a stored value
/*AbstractSshMessage*/
// dir does not exist.
// get I/O streams for remote scp
// this indicates an error.
// add the process to the list of those to destroy if the VM exits //
// appears that the next token is not used and it's zero.
// read a content of lfile
// #31928: forcibly kill it before continuing.
// Ignored
// do nothing;
// test the iterator
// remove the process to the list of those to destroy if // the VM exits //
// didn't receive any response
// execute the command
// Get key including "="
// wait for it to finish
// ran out of time
// Nb: using default locale as key is a env name
// completed successfully
// no password, will require passphrase
// Find the key in the current enviroment copy // and remove it.
// skip
// send a content of lfile
// basedir of subant/subant-test1/subant.xml is .. // therefore we expect here the subant/subant-test1 subdirectory
// clear the cache
// further equivalence name of previous logical
// new logical?
// already got this logical from a higher order table
// if a label has been supplied and it is a view label, use it // to configure the view
/* the arguments: */
// swallow if there was an error before so that // original error will be passed up
// must not be a directory
// IllegalAccess, IllegalArgument, ClassCast
// like <exec> // like <exec> // like <exec>
// add the environment as logicals to the DCL script
//log(message, Project.MSG_DEBUG);
// we want this to have a false default, unlike for Checkin.
// Output an empty String
// get the Hashvalues
// if a label has been supplied, use it to configure the view // otherwise use current view
// if a date has been supplied use a view configured to the date.
// otherwise, use this view configured as the tip.
// Now we recursively call this method on all sub folders in this // folder unless recursive attribute is off.
// handle the files so they appear first
// now do it again for the directories so they appear last.
// Assert !=null and equality
// Is the text the same? //   Need to use equals on the string and not //   on the stringbuffer as equals on the string buffer //   does not compare the contents.
// Create the new label and update the repository
// Create an instance of the rmic, redirecting output to // the project log
// Assume that this is an not supported attribute type // thrown for example by a dymanic attribute task // Do nothing
//  =====================  JUnit stuff  =====================
// Use cmd.exe to change to the specified drive and // directory before running the command
// Output 'OUTPUT OF ECHO'
//if-isFile //for
// we are on a dos style system so this path could be a drive // spec. We look at the next token
// Use cmd.exe to change to the specified directory before running // the command
// need to set the project on unknown element
// we know we are on a DOS style platform and the next path // starts with a slash or backslash, so we know this is a // drive spec
//Attempt complete directory renames, if any, first.
// We try to delete the directory created in CopydirTest
// files to move
// prune away any files not belonging to the revision label // this is one ugly API from Starteam SDK
//not yet supported see note in selector
//Is this file still available to be moved?
// PR 31965 says that it can return null
// no root local mapping has been specified.
// implicit target must be first on dependency list
// if this is the last time through the loop then // move will not occur, but that's what we want
// Inspect everything in the root folder and then recursively
// Tell user what he is doing
// ignore ";" and get the next token
// maybe io error?
// set the local folder.
// found a file
// ATTRIBUTES
// create a hashtable to group them by parent directory:
"/*          * @param message         */"
//new File("src/etc/testcases/types/resources/selectors/cache.properties").delete();
// this path could be a drive spec, so look at the next token
// on an io error list() can return null
// else lnk exists, do nothing
// get an Iterator of file objects representing links (canonical):
// task can contain other tasks - no other nested elements possible
// the first hex character if a character needs to be escaped
// Whether *this VM* is 1.4+ (but also check executable != null).
//iterate through the names, get the matching values
// it indeed is a drive spec, get the next bit
// ---------------------------- javadoc2 arguments for default doclet
// add the links arguments
// really "2"
// Miscellaneous typical temporary files
// should be impossible
// is the href a valid URL
// CVS
// ok - just skip
//return
/* BuildListener stuff */
// ensure <condition> follows the immutability rule
// Configure the selector - only defaults are used
// SCCS
/////////////////////////////////////////////////////////////// // INCLUDE-EXCLUDE processing ///////////////////////////////////////////////////////////////
// find the starteam folder specified to be the root of the // operation.  Throw if it can't be found.
// Visual SourceSafe
// Valid extension point
// make sure that the parsing does not break
// fill up a Properties object with link and resource names:
// Subversion
// find the resource of the existing link:
// rename the resource, thus breaking the link:
// delete the (now) broken link:
// return the resource to its original name:
// loop through the supplied file sets:
// load included files as properties files:
// where the name contains <>
// if no basedir and no includes, nothing to do:
// Ignore malformed exception
// we saw some non-ascii character
//skip non-abs. paths if basedir == null:
// firstly check if the tools jar is already in the classpath
// now update the class.path property
// private static final int ATTR_NORMAL = 0; // private static final int ATTR_BRIGHT = 1;
// -GWS or -GWR
//set to empty str if no local path return
// Use the OS launcher so we get environment variables
// where only an address is supplied
//removing base from path yields no change; path not child of base
// createArgument(true) is necessary to make sure -locale // is the first argument (required in 1.3+).
// -L Specify the new label on the command line (instead of being prompted)
// first off, make sure that we've got a command and a vssdir ...
// Ant javadoc task rules for group attribute: //   Args are comma-delimited. //   Each arg is 2 space-delimited strings. //   E.g., group="XSLT_Packages org.apache.xalan.xslt*, //                XPath_Packages org.apache.xalan.xpath*"
/* package-private */
// add the group arguments
// private static final int ATTR_UNDERLINE = 3; // private static final int ATTR_BLINK = 5; // private static final int ATTR_REVERSE = 7; // private static final int ATTR_HIDDEN = 8;
// Javadoc 1.4 parameters
// do the "singleton" initialization
// The tag element is not used as a fileset, // but specifies the tag directly.
// Not 1.4+.
// build the command line from what we got the format is // ss Get VSS items [-G] [-H] [-I-] [-N] [-O] [-R] [-V] [-W] [-Y] [-?] // as specified in the SS.EXE help
// Whether or not an actual update is required - // we don't need to update if the original file doesn't exist
// should get no output at all
// Tests property element, using XML schema properties as an example.
// If using an external file, write the command line options to it
// Javadoc 1.2/1.3 parameters:
// are there any java files in this directory?
// If location of ss.ini is specified we need to set the // environment-variable SSDIR to this value
// We don't need to care for duplicates here, // Path.list does it for us.
// build the command line from what we got the format is // ss Checkin VSS items [-H] [-C] [-I-] [-N] [-O] [-R] [-W] [-Y] [-?] // as specified in the SS.EXE help
//convert a class name into a resource
// ensure <exec> follows the immutability rule
// Valid extension point, more derived than Map above, but *after* it!
//set the property
// line feed
// first off, make sure that we've got a command and a localPath ...
// pre Kaffe 1.1.2
// by default, remove matching empty dirs
// only supported since Kaffe 1.1.2
// don't know how to handle that - a IDL file doesn't // have a corresponding Java source for example.
//handle the many different stub options.
// delete the single file
//default is compatibility
//anything else
// delete the directory
//do nothing with the value? or go -v+stubVersion??
//set the non-null stubOption
//add the files from the default fileset:
// we know that name.endsWith(".class")
// **   full-pathname specified == parent dir of path in list
//patch the redirector to save output to a file
// Combine the build classpath with the system classpath, in an // order determined by the value of build.sysclasspath
//verify special operations
//JAR  is required
// build the command line from what we got the format is // ss CP VSS items [-H] [-I-] [-Y] [-?] // as specified in the SS.EXE help
//for java1.5+, we generate compatible stubs, that is, unless //the caller asked for IDL or IIOP support.
//deal with jdk1.4.2 bug:
// JRMP with simple naming convention
"/*                 * I know, this is not necessary, but I prefer it explicit (SB)                 */"
// no package
// EOL was "\r\n"
// only stub, no tie
//rely on RMIC being on the path
//set up the args
//handle default specially by choosing the sun or kaffe compiler
//no match? ask for the non-lower-cased type
//do the system assertions
// // *****  Second Run  ***** // the second call should get no files, because no content // has changed //
//catch invalidness
//see if it is a package or a class
//packages get a ... prefix
//classes just get the classname
//-- Fields ----------------------------------------------------------------
// don't reposition when we've reached the end // of the stream
// Add all nested elements to our catalog
// // *****  make some files dirty  ***** //
// nonexistent resources could only occur if we already // deleted something from a fileset:
// ignore this if the class being used as a task does not have // a set project method.
//cache
"/* * /    // for test only - ignore tests where we arent work at the moment    public static junit.framework.Test suite() {        junit.framework.TestSuite suite= new junit.framework.TestSuite();        suite.addTest(new ModifiedSelectorTest(""testValidateWrongCache""));        return suite;    }    /* */"
// no check for 1<=kind<=3 - only internal use therefore check it // while development
//Do not process this file
// shadow of the above if the value is altered in execute
// these files are made dirty --> 3+4 with different content
// make sure facade knows about magic properties and fork setting
// deal with the resources
// New behavior for delayed task creation. Description // will be evaluated in Project.getDescription()
// Append the classpath of the nested catalog
// adapt currentelement to the case we've // actually found
// Make a transaction for each resource
// Append the catalog path of the nested catalog
// The Apache resolver is present - Need to check if it can // be seen by the catalog resolver class. Start by getting // the actual loader
// Make a transaction group for the outer command
// load the base class through this loader.
// and find its actual loader
// AccessObject to the test-Ant-environment
// I am the only one so I have to close the reader
// Process all transactions
// // The xml-commons resolver library is not // available, so we can't use it. //
// the following line seems to be necessary on Windows under JDK 1.2
// Catch any statements not followed by ;
// // for classpath lookup we ignore the base directory //
// Check and ignore empty statements
// MockCache doesnt create a file - therefore no cleanup needed
// '<' and '>' are only used if the algorithm has properties
// dreaded backwards compatibility
// call the target for making the files dirty
// get parameters
/*Throw an exception if cvs exited with error. (Iulian)*/
// re-implement legacy behaviour:
// Check if not real cvsroot => set it to null
// Check if not real cvsrsh => set it to null
// // *****  Check the result  ***** //
// Calculate the EOL string per the current config
// Check if not real tag => set it to null
// // Use the passed in base in preference to the base // from matchingEntry, which is either null or the // directory in which the external catalog file from // which it was obtained is located.  We make a copy // so matchingEntry's original base is untouched.  Of // course, if there is no base, no need to make a // copy... // // This is the standard behavior as per my reading of // the JAXP and XML Catalog specs.  CKS 11/7/2002 //
// Parse each catalog listed in nested <catalogpath> elements
// assume (eol == CrLf.LF || eol == CrLf.UNIX)
//-- XMLCatalog
// execute
// Mark all files which should be selected as (T)rue and all others // as (F)alse. Directories are always selected so they always are // (T)rue.
// Add/Remove tabs
// Add missing EOF character
// f2name shouldn't be selected: only timestamp has changed!
// given cache must be empty
//this call should succeed as unless overrides if
// override some of the code so we can test the handling of the // return code only.
//req // req
// scan source directories and dest directory to build up // compile lists
// cleanup the environment
//there is no need to expand properties here as that happens when Transaction.addText is //called; to do so here would be an error.
// We can't do it ourselves as jCVS is GPLed, a third party task // outside of jakarta repositories would be possible though (SB).
/* package-private for now */
// we are chmodding the given directory
// special case in ZIPs, we do not want this thing included
// ask ant to update the properties...
// EOL
// may be altered in validateAttributes
// first check if the archive needs to be scanned again
// spare scanning again and again
// will be removed in validateAttributes
/* cached DirectoryScanner instance for our own Project only */
// SelectorContainer methods
// EOL was "\n"
// make sure we don't have an illegal set of options
// WIN9x uses a bat file for executing commands
//no command? no string
// deal with the single file
// parse with a simple finite state machine
//inherit doc
// RuleBasedCollator not yet supported - see Selector:375 note
// EOL was "\r\r\n"
// deal with the ResourceCollections
//can't have zero-length token
// we have another token, let's parse it.
// Step (1) - beware of the ZipFileSet
// EOL was "\r"
// not a fileset or contains non-file resources
// a not-directory file resource // needs special treatment
// add conditions and more commands as soon as the need arises
// make sure we do not get a NPE
// test that the watchdog ends the process
// to override
// make dirty
// if source is EOF but last character was NOT ctrl-z, return ctrl-z
// do all the copy operations now...
// ==============  testcases for the comparator implementations  ==============
/* ============ ResourceFactory interface ====================== */
// restrict to out-of-date resources
// Return current look-ahead
// clean up again, so this instance can be used a second // time
// reuse the array created by the mapper
// third run
//now patch in all system properties
// is the keystore a file
// must be a URL - just pass as is
// ignore: don't trust anyone
// Gump friendly - don't mess with the core loader if only classpath
// last: don't trust the developer
// newer versions of Kaffe (1.1.1+) won't have this, // but this will be sorted by FileSet anyway.
// just to be sure
// the directories to check
// EOL was "\r\r" - handle as two consecutive "\r" and // "\r"
// Construct a new class loader
// in this case all files from origin map to // the fullPath attribute of the zipfileset at // destination
// JDK 1.2+ seems to set java.home to the JRE directory.
// The param is "parentFirst"
// Just keep the old version as well and let addExisting // sort it out.
// Sun's and Apple's 1.4 have JCE and JSSE in separate jars.
// Instance initializer: Executes just after the super() call in this // class's constructor.
/*public*/
// IBM's 1.4 has rt.jar split into 4 smaller jars and a combined // JCE/JSSE in security.jar.
// Added for MacOS X
//shield it from being closed by a filtering StreamPumper
//remove any null elements
//create the list
// do the checks
// Return copy so that the call must call setEof() to change the state // of fixCRLF
//fill it
//convert to an array
"/*         * Backwards compatibility forces us to repeat the logic of         * getResourcesToAdd(FileSet[], ...) here once again.         */"
// properties are part of the vm options...
//boot classpath
// Return copy so that the call must call setEol() to change the state // of fixCRLF
//main classpath
// cloned system properties
// classpath is "-classpath <classpath>" -> 2 args
// If I'm removing an EOF character, do so first so that the other // filters don't see that character.
// jar execution requires an additional -jar option
/*<? extends EnumeratedAttribute>*/
// Store data into a byte[]
//end nested class
// Add this PropertySet's nested PropertySets' property names.
// If filtering Java source, prevent changes to whitespace in // character and string literals.
// set read-only properties // CheckStyle:VisibilityModifier ON
//make a copy...
// // *****  First Run  ***** // the first call should get all files, because nothing is in // the cache //
// give some values (via property file) to that environment
// // *****  Third Run  ***** // third call should get only those files, which CONTENT changed // (no timestamp changes required!)
// The core loader must be reverse //reverse=true;
// First read in zero bytes
// This allows the core loader to load optional tasks // without delegating
// Are we trying to call the target in which we are defined (or // the build file if this is a top level task)?
// ignore this if the class being referenced does not have // a set project method.
// @note: it is a string and not a file to handle relative/absolute // otherwise a relative file will be resolved based on the current // basedir.
//wait for the StreamPumpers to finish
// Normalize the reference directory (containing the jar)
// Gotta atleast put in the proper spelling :-P
// read in the file
// Now read in the string
// Normalize the current file
// No match, so bail out!
// try to find a MAX_LINE_LENGTH byte section
// continuation line
//DO NOT SET THE -signedjar OPTION if source==dest //unless you like fielding hotspot crash reports
// CheckStyle:VisibilityModifier OFF
//unsigned or non-lazy self signings are always false
// Keep a hashtable of attributes added by this task. // This task is allow to override its own properties // but not other properties.  So we need to keep track // of which properties we've added.
// Make sure that the counts are the same
// the merge file always wins
// Add this PropertySet's property names.
//map the names
// the merge file *always* wins, even for Class-Path
// Create one NameEntry in the appropriate pattern list for each // line in the file.
// Get a FileReader
//replace the last 0s by the chars contained in s
// add in the warnings
//Ignore exception
//-- ResourceLocation
// For each child, pass the object added by // processNode to its children -- in other word, each // object can pass information along to its children.
// This should be the manifest version
// Add base set of permissions
// use Algorithm specified by classname
// ensure <pathconvert> follows the immutability rule
// and a little shorter
// else
// line started with comment
// add it back
// None of the actions revoked, so all allowed.
//default true:
// shouldn't happen - ignore
//default false:
// write everything up to the from
// create a vector and add in the warnings for all the sections
// The regular expression factory
// temporary variable
//off by default
// This is included
//s.addParam(createParam("algorithm.provider","---")); // i don't know any valid
// first and second run
//class-MockProject
// make sure that elapsed time in set via date works
// make sure that elapsed time in ms works
// write the replacement to
//set up logging
//dont do any progress, unless asked
// search again
//set up the URL connection
// If this attribute was added by this task, then // we append this value to the existing value. // We use the setProperty method which will // forcibly override the property if it already exists. // We need to put these properties into the project // when we read them, though (instead of keeping them // outside of the project and batch adding them at the end) // to allow other properties to reference them.
// should be new moon
// write the remaining characters
//- ApacheCatalog
// // Make sure CatalogResolver instantiates ApacheCatalog, // rather than a plain Catalog //
// debug // CatalogManager.getStaticManager().setVerbosity(4);
// Pass in reference to ourselves so we can be called back.
// Use the original casiness of the key
//sorted bag impl. borrowed from commons-collections TreeBag:
//not using the accessor in this case to avoid side effects
/*package-private*/
//new oata.util.ReaderInputStream(new InputStreamReader(
//, encoding), encoding);
//first the easy way, if all children are filesystem-only, return true:
// for NetWare and OS/2, piggy-back on Windows, since here and // in the apply code, the same assumptions can be made as with // windows - that \\ is an OK separator, and do comparisons // case-insensitive.
/* cached DirectoryScanner instance */
//if no nested, natural order:
// use an anonymous subclass since ProjectComponent is abstract
// ReplaceRegExpTest
// and a little longer
//dummy
//implement ResourceSelector; inherit doc
// First, check that all elements are correctly configured
// different dates => different files
//here do a bulk comparison
// At this point, we know we have a tie.
// Currently, we deal with only two path formats: Unix and Windows // And Unix is everything that is not Windows // (with the exception for NetWare and OS/2 below)
// Iterate over the map entries and apply each one. // Stop when one of the entries actually changes the element.
// throw BuildException on error
/* ============ FileNameMapper interface ======================= */
//Default is empty string
// test for 10 consecutives transform
// Create as many directory prefixes as parent levels to traverse, // in addition to the reference directory itself
// Sanity check. Ditch it if you want faster performance
// Determine file whose out-of-dateness is to be checked
// Sanity check
// Find the longest prefix shared by the current file // and the reference directory.
// We have a match! Add as many ../ as parent // directory traversed to get the relative path
// Determine file whose existence is to be checked
// Directory size never selected for
/* You wish! */
// check millis and only set it once.
// a continuation on the first line is a // continuation of the name - concatenate this // line and the name
// When str starts with a File.separator, pattern has to start with a // File.separator. // When pattern starts with a File.separator, str has to start with a // File.separator.
// up to first '**'
// required // required
// String is exhausted
//java keywords are not special
//modify the headers //NB: things like user authentication could go in here too.
// prepare Java 1.1 style credentials
// String not exhausted, but pattern is. Failure.
//connect to the remote site (may take some time)
// up to last '**'
//next test for a 304 result (HTTP only)
// No '*'s, so we make a shortcut
// Character mismatch
// test for 401 result (HTTP only)
//this three attempt trick is to get round quirks in different //Java implementations. Some of them take a few goes to bind //property; we ignore the first couple of such failures.
// String matches against pattern
//successful download
// this happens if the projecthelper was not registered with the project.
// Find the pattern between padIdxStart & padIdxTmp in str between // strIdxStart & strIdxEnd
"/* I wrote the testcases in one java file because I want also to test the * combined behaviour (see end of the class).*/"
// methods to register and unregister shutdown hooks
// check to see if the shutdown hook methods exists // (support pre-JDK 1.3 VMs)
// wait to add shutdown hook as needed
// Pattern contains only '*', which matches anything
// Process characters before first star
// it just won't be added as a shutdown hook... :(
"/*         * Sleep for some time to make sure a touched file would get a         * more recent timestamp according to the file system's         * granularity (should be > 2s to account for Windows FAT).         */"
// Process characters after last star
"/*         * I would love to compare this with 123456, but depending on         * the filesystems granularity it can take an arbitrary value.         *         * Just assert the time has changed.         */"
// Expected exception caught
//underscores at the front get an underscore too
// shutdown already is in progress
// Two stars next to each other, skip the first one.
// All characters in the string are used. Check if only '*'s are left // in the pattern. If so, we succeeded. Otherwise failure.
// We know that dynselector must be non-null if no error message
// -------------------------------------------------------- //  static utility methods - could be placed somewhere else // --------------------------------------------------------
// Deal with if and unless properties first
// -----  attributes  -----
// ----- internal member variables -----
// -----  constructors  -----
//non java char at start => underscore then the the _hex value
//Remove start and end quotes if field is a String
// ----- configuration  -----
// normal use inside Ant
// set self as a BuildListener to delay cachefile saves
// no reference to project - e.g. during normal JUnit tests
// default buffer size
// this is a *.* parameter for later use
// specify the algorithm classname
//preserve case on Cygwin when using 1.4 toURI:
// use Algorithm defined via name
"/*        assertTrue(""same timestamp is up to date"",                fu.isUpToDate(firstTime, firstTime));                */"
// state engine: false=envelope, true=message
/* Stateless */
// else nothing to do
// singletons - since all state is in the context
// // -----  Set the main attributes, pattern '*'  ----- //
//and paths are stripped
// we are in an imported file.
// specify the cache classname
// use Cache specified by classname
// after you are all of the properties are ok, do your thing // with StarTeam.  If there are any kind of exceptions then // send the message to the project log.
// top level file
// specify the comparator classname
// load the specified class
// -----  the selection work  -----
// We have a 'resourced' file, so reconvert it and use // the 'old' implementation.
// If we don't know the type of the line // and we are in emacs mode, it will be // an error, because in this mode, jikes won't // always print "error", but sometimes other // keywords like "Syntax". We should look for // all those keywords.
// Use '/' to calculate digest based on file name. // This is required in order to get the same result // on different platforms.
// You can not compute a value for a directory
// Maybe update the cache
// this happens if ant is used with a project // helper that doesn't set the import.
// -----  attribute and nested element support  -----
// the usual classloader
// use default if not file or file not found
// Paths are relative to the build file they're imported from, // *not* the current directory (same as entity includes).
// additional use the provided classpath
// whether or not this ProcessDestroyer is currently running as // shutdown hook
// ----- 'beautiful' output -----
// -----  member variables  -----
// redo the test, but the 2 include patterns are inverted
// check defaults
//Now lock if required
"/*             * Start with simple absolute file names.             */"
// Ignore attributes from unknown uris
// this should return quickly, since it basically is a NO-OP.
// the thread didn't die in time // it should not kill any processes unexpectedly
// -----  Logic  -----
// if this list is empty, register the shutdown hook
// implementation adapted from ...taskdefs.Checksum, thanks to Magesh for hint
// generate classpath, because kjc doesn't support sourcepath.
// Read the file
// -----  member variables - configuration  -----
// two characters form the hex value.
// generate the clsspath
// -----  member variables - internal use  -----
// -----  Constructors  -----
// kjc don't have bootclasspath option.
// -----  Cache-Configuration  -----
// -----  Data Access
// Process the factory class
// swallow as this simply doesn't seem to be Kaffe
// no further processing
// Process the factory path
// avoid endless loop
"/*         * Now test some relative file name magic.         */"
// set explicitly before starting ?
//set up the javac options
// Check if the service is configured correctly
//then add the Apt options
// Default for baseDir is the location of the build file.
//finally invoke APT // Use reflection to be able to build on all JDKs:
//rethrow build exceptions
// check whether the user has specified an absolute path
//cast everything else to a build exception
// don't need the opposite check as the Dictionaries have the // same size, so we've also covered all keys of d2 already.
// CheckStyle:ParameterNumberCheck OFF - bc
// Call the compile() method
// this should not happen, because the lines are // returned with the end of line delimiter
// If the name has not already been defined define it
// jvc doesn't support an extension dir (-extdir) // so we'll emulate it for compatibility and convenience.
// two not existing files are equal
// don't want to compare directory contents for now
// jvc has no option for source-path so we // will add it to classpath.
//as far as we know
//ignore release of an already-closed funnel
// those would fail because of the way BuildFileTest captures output
// implies lastModified == 0
// Add the Classpath before the "internal" one.
// Enable MS-Extensions and ...
// Write child elements and text
// Write indent characters
// Write element
// Free up the memory used by the cached items.
// Replace the projectName in the file's absolute path to the viewName. // This makes the root target of a checkout operation equal to: // targetFolder + dirName
// steal default namespace
// ... do not display a Message about this.
// Write attributes
// Write element close
// Do not display Logo
// relative path
//add the files
//run
// does the modern compiler exist?
// What's the working directory?  If local, then its the // folder of the input file.  Otherwise, its the "current" dir..
//To change body of implemented methods use File | Settings | File Templates.
// Windows adds the drive letter in uppercase, unless you run Cygwin
// If this is the same name specified in 'manifest', this // is the manifest to use
// assuming 'skip' otherwise // don't warn if skip has been requested explicitly, warn if user // didn't set the attribute
// parse the output of the command
// swallow as we've hit the max class version that // we have
// number of milliseconds in a day
// On IBM's JDK 1.2 the directory layout is different, 1.3 follows // Sun's layout.
// Unfortunately on Windows java.home doesn't always refer // to the correct location, so we need to fall back to // assuming java is somewhere on the PATH.
// can't access the booleans in MyPrinter here (even if they // were static) since the MyPrinter instance that was used in // the test has likely been loaded via a different classloader // than this class.  Therefore we make the printer assert its // state and only check for the tail invocation.
// This is the most common extension case - exe for windows and OS/2, // nothing for *nix.
//In Java1.5, the apache stuff moved.
// Finally, show the Item properties ... // Always show the ItemID.
//fall through.
// give ourselves some time for the system call // to execute... tweak if you have a really over // loaded system.
// in a previous version, the date of the file was set to 123456 // milliseconds since 01.01.1970 // it did not work on a computer running JDK 1.4.1_02 + Windows 2000
// Just add "sourcepath" to classpath ( for JDK1.1 ) // as well as "bootclasspath" and "extdirs"
// If the buildfile specifies sourcepath="", then don't // output any sourcepath.
// are there any here that we forgot? // fall through
//things like sun.reflection, sun.misc, sun.net
// support for -source 1.1 and -source 1.2 has been // added with JDK 1.4.2 - and isn't present in 1.5.0 either
//Strip '.' token
// 1.5.0 doesn't support -source 1.1
//If it ended in a dot, throw an exception
// Exact match
"/*             * throw in NetWare volume names             */"
//Use the VM launcher instead of shell launcher on VMS //for java
// gcj doesn't support bootclasspath dir (-bootclasspath) // so we'll emulate it for compatibility and convenience.
// might read too much
// would be imprecise
// Gcj has no option for source-path so we // will add it to classpath.
// write out the number of characters encoded in this line.
// set the padding defaults
//throw new IllegalStateException("Command unrecognized: " //    + response);
// Use reflection to be able to build on all JDKs >= 1.1:
// get the next 3 bytes (if we have them)
// In an impored file (and not completely // ignoring the project tag)
// no bootclasspath, therefore, get one from the java runtime
// if the user has set JIKESPATH we should add the contents as well
//reflection to avoid bootstrap/build problems
// OK, Java 1.3.
//now verify that the class has an implementation
"/*             * drive letters must be considered just normal filenames.             */"
"/* UnknownElement is used for tasks and data types - with               delayed eval */"
//windows probing logic relies on the word 'windows' in //the OS
//there are only four 9x platforms that we look for
// #8031: first try Java 1.4.
// Nested element
// millis per second
//get the host of a url
// terminate with a linefeed alone
// Filter out messages based on priority
// Passed test 
// container.addTask(task); // This is a nop in UE: task.init();
//Java1.5: reachable = address.isReachable(timeout * 1000);
// store the octets
//utterly implausible, but catered for anyway
// **   simple name specified   == path in list + name
// load the parser class
// padding
//only text nodes that are non null after property expansion are added
// do not close the stream
//Empty
//get some non-crypto-grade randomness from various places.
// if the suffix does not starts with a '.' and the // char preceding the suffix is a '.', we assume the user // wants to remove the '.' as well (see docs)
// Cannot resolve it, so skip it.
// plain component
//remove the initial separator; the root has it.
// UNC drive
// null parent dir
// format: "DEVICE:[DIR.SUBDIR]FILE"
// treat directories specified using .DIR syntax as files
// not really user settable properties on tasks/project components
//do a check for the destination file existing
// execute the script
// support for -source 1.1 and -source 1.2 has been // added with JDK 1.4.2, Jikes doesn't like it
//assume this is an IOexception about un readability
//any kind of fault: not reachable.
//java1.4 or earlier
// check build.compiler provides defaults
//get a time
//add some time. We assume no OS has a granularity this bad
//pick a value that is good for everything
//initial state is false.
// on cygwin, our current directory can be a UNC; // assume user.dir is absolute or all hell breaks loose...
// ensure that l ends with a / // so we never think /foo was a parent directory of /foobar
// looks like nothing from META-INF should be added // and the check is not case insensitive. // see sun.misc.JarIndex
// need to keep the package private version for backwards compatibility
//every condition is xored against the previous one
// build the path stack info to compare
// not the same device (would be "" on Linux/Unix)
//validate
// no comparison possible
// if "from" part is longer, fill it up with ".." // to reach path which is equal to both paths
// Fall through
//#now match the files
// fill it up path with parts which were not equal
// base directory of the fileset
// Intentionally left blank
// code from Magesh moved from DefaultLogger and slightly modified
//if you cannot read it, you won't be able to write it either
// don't add "" to the archive
// make sure attributes are reset when // working on a 'new' file.
// must be a zip of some sort
// does the class have a package structure
"/*         * The initial version used DateFormat.SHORT for the         * time format, which ignores seconds.  If we want         * seconds as well, we need DateFormat.MEDIUM, which         * in turn would break all old build files.         *         * First try to parse with DateFormat.SHORT and if         * that fails with MEDIUM - throw an exception if both         * fail.         */"
// check if the package structure is more than 1 level deep
// class name has more than 1 package level 'com.company.Class'
// When we leave this block we can be sure all data is really // stored in main memory before the new threads start, the new // threads will for sure load the data from main memory. // // This probably is slightly paranoid.
// doesn't java know interruptions are rude? // just pretend it didn't happen and go about out business. // sheesh!
//check that older is up to date with a newer dest
//We have ended changelog for that particular file //so we can save it
//was -1
// class name has only 1 package level 'package.Class'
// possibly altered in prepareExec
// Add a class with no package 'Class'
// force BCEL classes to load now
//Reset comment to empty here as we can accumulate multiple lines //in the processComment method
// Same as regular <copy> task... see at end-of-file!
// We want something of the form: -d ">=YYYY-MM-dd"
//for now skip entries which are missing a date
//Skip dates that are too early
// we look through the classpath elements. If the element is a dir // we look for the file. IF it is a zip, we look for the zip entry
// first letter of the previous segment of the class name 'Class' // is upper case ascii. so according to the spec it's an inner class
// Default config of <mycopy> for our purposes.
// Do we need to perform further processing?
//Skip dates that are too late
// Register Groovy ourselves, since BSF did not // natively support it in versions previous to 1.2.4.
// want to keep toDir itself
// This just tests that the function does not blow up
// validate the input parameters
// build the rdiff command
// translate \1 to $1 so that the Perl5Substitution will work
// no permission here
// compute the compiler options based on the input options first
// be strict about line separator
// translate \1 to $(1) so that the Matcher will work
// ds returns the directories in lexicographic order. // iterating through the array backwards means we are deleting // leaves before their parent nodes - thus making sure (well, // more likely) that the directories are empty when we try to // delete them.
// Do the substitution
// replace \1 with the corresponding group
"/*          Nodes and heap entries run from 1.  Entry 0          for both the heap and nodes is a sentinel.        */"
//        blockNo++;
// // When we get here we have EITHER: // o An empty "assemble" buffer. // o No bytes to write (numToWrite == 0) //
// This directory may have become empty... // We need to re-query its children list!
// List of files that must be copied, irrelevant from the // fact that they are newer or not than the destination.
// #24918: send standard input to the process by default.
// Inner class for continually pumping the input stream during // Process's runtime.
/* 20 is just a paranoia constant */
// Nothing to concatenate!
// ensure that the parent dir of dest file exists
// could still be OS/2
// empty block at end of file
// Append the fragment -- we defer property replacement until // later just in case we get a partial property in a fragment.
/* sort the block and establish posn of original string */
// 27224 = magic (a random port which is unlikely to be in use)
// support multiple packages
/* Now the block's CRC, so it is in a known place. */
/* Now a single bit indicating randomisation. */
// force command not to be null
/* Finally, block's contents proper. */
// run the cvs command
// parse the rdiff
// followLinks should be true by default, but if this ever // changes we will need this line.
"/*             * drive letters are not used, just to be considered as normal             * part of a name             */"
// Should fail since a recursion will occur...
// write the tag diff
// it is a removed file
// If the file being added is WEB-INF/web.xml, we warn if it's // not the one specified in the "webxml" attribute - or if // it's being added twice, meaning the same file is specified // by the "webxml" attribute and in a <fileset> element.
//a web.xml file was found. See if it is a duplicate or not
//there is no web.xml file, so add it
// There have been reports that 300 files could be compiled // so 250 is a conservative approach
/* special headers */
/* Decide how many coding tables to use */
/* Generate an initial set of coding tables */
// prepare for the auto select mechanism
"/*          Iterate up to N_ITERS times to improve the tables.        */"
/* Compute MTF values for the selectors. */
// try MIME format
// SSL only allowed with MIME mail
/* Transmit the mapping table. */
/* Now the selectors. */
/* Now the coding tables. */
/* And finally, the block data proper */
// try UU format
/* Set group start & end marks. */
// unrolled version of the else-block
// try plain format
"/*                  Find the coding table which is best for this group,                  and record its identity in the selector table.                */"
"/*                  Increment the symbol frequencies for the selected table.                */"
// a valid mailer must be present by now
// a valid message is required
// inlined: bsW(1, inUse[i16 + j] ? 1 : 0);
// inlined: bsW(1, 1);
// inlined: bsW(1, 0);
// at least one address to send to/cc/bcc is required
//bsBuffShadow |= 0 << (32 - bsLiveShadow - 1);
// inlined: bsW(5, curr);
// set the mimetype if not done already (and required)
// inlined: bsW(2, 2);
// identify which files should be attached
// let the user know what's going to happen
// inlined: bsW(2, 3);
// pass the params to the mailer
// send the email
// setUserProperty to override system properties
// let the user know what happened
// Read message from a file
// copy
// start inline mainGTU
// We assume, that everything jikes writes goes to // standard output, not to standard error. The option // -Xstdout that is given to Jikes in Javac.doJikesCompile() // should guarantee this. At least I hope so. :)
// while x > 0
// Set up the 2-byte frequency table
// shortcut for "<address>"
/* Undo the MTF values for the selectors. */
// Complete the initial radix sort:
// support "address (name)"
"/*              The main sorting loop.        */"
"/*                  Process big buckets, starting with the least full.            */"
// support "(name) address"
// Step 1:
// Step 3:
// handle 16 bit signed numbers
// make maps
/* directory with respect to       */
// a rather convoluted equals() test
// check if liaison wants to log errors using us as logger
// If we enter here, it means that the stylesheet is supplied // via style attribute
// Process all the files marked for styling
// New env var...append the previous one if we have it.
// Start handling SAX events
// Let parent resume handling SAX events
// with blockSize 900k //     256 byte //     256 byte //    1032 byte //   18002 byte //   18002 byte
//     256 byte //    1548 byte //    6192 byte //      24 byte //      12 byte //    6192 byte //       6 byte //      16 byte
// check attribute overrides build.compiler
// allow this as imported in targets are only tested when a target is run
// take care of dependencies
// swallow here, will be thrown again in // UnknownElement.maybeConfigure if the problem persists.
// To work properly with national charsets we have to use // implementation of interface javax.activation.DataSource
//    4000 byte //    4000 byte //    4000 byte
//    1024 byte //    1024 byte //     256 byte
// Must be like "text/plain; charset=windows-1251"
//    1040 byte //    2064 byte //    2064 byte
// Just print a message, like the previous versions of this class did
// Aside, the JDK is clearly unaware of the Scottish // 'session', which involves excessive quantities of // alcohol :-)
// Variables used by setup* methods exclusively
// We call liason.configure() and then liaison.setStylesheet() // so that the internal variables of liaison can be set up
// Give always a slash as file separator, so the stylesheet could be sure about that // Use '.' so a dir+"/"+name would not result in an absolute path
// currBlockNo++;
// SMTP provider
// A bad CRC is considered a fatal error.
/* Receive the mapping table */
//XXX task.setTaskType(tag);
//create the message
/* Now the selectors */
/* Now the coding tables */
//set the sender
// taskcontainer nested element can contain other tasks - no other // nested elements possible
// set the reply to addresses
//create the URL //ant equivalent of  fileToConvert.toURI().toURL().toExternalForm();
// Assign/reassign message charset from MimeType
// make sure there are no issues concerning line separator interpretation // a line separator for regex (perl) is always a unix line (ie \n)
// Should not happen
// Using default
// Using javax.activation.DataSource paradigm
// Assuming mime type in form "text/XXXX; charset=XXXXXX"
// Skip 'charset='
// sb.append( response + "\r\n" );
// default srcDir to basedir
// Require destDir
// the second hex character if a character needs to be escaped
// File to convert // where to put the results
// end of file // '1' // ')' // 'Y' // '&' // 'S' // 'Y'
// Build the full file names
// Inlined: // int zvec = bsR(zn);
// deactivate this test as imports within targets are not allowed
// initialize the above 3 arrays
// Make sure we're not about to clobber something
/* not a char and not EOF */
// if we run into a timeout, the run-away thread shall not // make the VM run forever - if no timeout occurs, Ant's // main thread will still be there to let the new thread // finish
// (with blockSize 900k) //      256 byte
// Make intermediate directories if needed // XXX JDK 1.1 doesn't have File.getParentFile,
//     1024 byte
//this.fork = s;
// No need to keep track of Bcc'd addresses
// Blindly trust the user doesn't set any invalid headers
//TODO: use ANTLR to parse the grammar file to do this.
// RFC 822 s4.1: "Reply-To:" header is optional
// Fine, Java 1.3 or earlier, do it by hand.
// if no output directory is specified, used the target's directory
// first off, make sure that we've got a from and to extension
// extra field length
// Error strings
//Ignore - We do not want this to stop the build.
//validating
//set the schema source for the doc
// OS/2 - use same mechanism as Windows 2000
"/*         * JUnit 3.7 adds a getName method to TestCase - so we now         * have a name attribute in IntrospectionHelperTest if we run         * under JUnit 3.7 but not in earlier versions.         *         * Simply add it here and remove it after the tests.         */"
//enable XSD
//validate the parser type
//enable schema checking
// Some systems have /bin/env, others /usr/bin/env, just try
//By default, use the shell launcher for VMS //
//turn off DTDs if desired
//schema declarations go in next
// Running on Windows or something, so skip it.
// wait for connection
//      256 byte //    18002 byte //    18002 byte
//     6192 byte //     6192 byte //     6192 byte //       24 byte
//     1028 byte //      512 byte //     3096 byte //        6 byte //--------------- //    60798 byte
//on openvms even exit value signals failure; // for other platforms nonzero exit value signals failure
//  3600000 byte //   900000 byte //--------------- //  4560782 byte //===============
// Make a limited attempt to extract a sanitized email address // Prefer text in <brackets>, ignore anything in (parentheses)
// * * * * * Raw protocol methods below here * * * * *
// make sure dot is on new line
// raw supports <CRLF>.<CRLF>
// Check that the response is one of the valid codes
// ensure always \r\n
// Add the key to the enviromnent copy
//this is almost implausible, but required handling
// file name
// add extra dot
//SchemaLocation
// while
//private Path extdirs;
// first off, make sure that we've got a srcdir
// UNDONE
// create a TarEntry for the LongLink, the contents // of which are the entry's name
// parse the VMS logicals into required format ("VAR=VAL[,VAL2]")
// Keep jdk 1.1 compliant so others can use this
// second CR -> EOL + possibly empty line
// CRC manually calculated, sorry // CRC // mode // link length // uid, gid
// LF -> EOL
// any other char
// No absolute pathnames // Windows (and Posix?) paths can start with "\\NetworkDrive\", // so we loop on starting /'s.
// Locate method Runtime.exec(String[] cmdarray, //                            String[] envp, File dir)
// Bad URI, pass this on.
// REVIEW // This is horribly inefficient, but it ensures that we // properly skip over bytes via the TarBuffer... //
// read in the name
// remove trailing null terminator
// Unexpected EOF!
// remove log file from testSpawn
// Unexpected target exception? Should not happen.
// ?? Should this be the default for ant?
/* method is STORED and we used RandomAccessFile */
// If random access output, write the local file header containing // the correct CRC and compressed/uncompressed sizes
// constants for the messages to suppress by flags and their corresponding properties
// not specified
// ------------------------------------------ general Javadoc arguments
// other implementation variables
// Size/CRC not required if RandomAccessFile is used
"/*     * Various ZIP constants     */"
// classpath makes no sense
//store method in local variable to prevent multiple method calls
// CRC // mode // link length // uid, gid
// Fallback method for Java 1.3 or earlier.
// destDir
// compression method
// srcDir
// last mod. time and date
// file name length
// version made by
"/*                         *  Ignore this method as there is an addConfigured                         *  form of this method that has a higher                         *  priority                         */"
// Only try to move if this is the last mapped file // and one of the mappings isn't to itself
// create a single array of arguments for the compiler
// if it's not an ASCII character, break here, and use UTF-8 encoding
// print nice output about what we are doing for the log
// need to set java.class.path property and restore it later // since the NetRexx compiler has no option for the classpath
// record the fact that it's escaped
// path is mentioned in the message
// verbose level logging for suppressed messages
// CRC // mode // link // uid, gid
// get UTF-8 bytes for the remaining sub-string
// warning for all warning messages
// CRC // compressed length // uncompressed length
// info level for the rest.
// Go through the tokens one at a time, updating the // elements array and issuing warnings where appropriate.
// The tag element is used as a // fileset. Parse all the files and create // -tag arguments.
// for each byte
// add our classpath to the mix
// file comment length
// add the system classpath // addExistingToClasspath(classpath,System.getProperty("java.class.path"));
// disk number start
// internal file attributes
// some database keys, see #getProperties(int)
// bad CRC // mode // link // uid, gid
// for non-ascii character: make it positive, then escape
// XMLReader used to validation process
// external file attributes
// disk numbers
// turn validation on
// number of entries
// length and location of CD
// just check whether this throws an exception
// set the feature from the attribute list
// ZIP file comment
"/*         * No reason to change the working directory as all filenames and         * path components have been resolved already.         *         * Avoid problems with command line length in some environments.         */"
// array not exhausted
// Sets properties
/* version made by                 */
/* version needed to extract       */
//if we got here, all was well
// couldn't find compiler - try to find tools.jar // based on java.home setting
/* general purpose bit flag        */
/* compression method              */
/* last mod file date              */
// sort first to files, then dirs
// Found in java.home as given
/* uncompressed size               */
/* filename length                 */
// Only whitespace - ignore
/* extra field length              */
/* file comment length             */
// add any jars in the directory
/* internal file attributes        */
/* relative offset of local header */
// disk number
// LFH offset,
// overlay specified properties file (if any), which overrides project // settings
// data offset will be filled later
/* end of central dir signature    */
/* number of this disk             */
// ignore because properties file is not required
// to report sax parsing errors // CheckStyle:VisibilityModifier ON
/* the central dir on this disk    */
/* the central dir                 */
// then check it implements XMLReader
/* offset of start of central      */
"/*                 * Plain impossible with UTF8, see                 * http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html                 *                 * fallback to platform specific anyway.                 */"
// no include pattern implicitly means includes="**"
// private static final int FG_BLACK = 30;
// see if it is a SAX1 Parser
"/*     * Closes an unused connection after an error and doesn't rethrow     * a possible SQLException     * @since Ant 1.7     */"
// Validates property
// wait 2 second extras // the test failed with 100 ms of margin on cvs.apache.org on August 1st, 2003
// Print out the name of the task if we're in one
// private static final int FG_YELLOW = 33;
//for every file, we have a new instance of the validator
// dummy1 --> dummy2 --> dummy3 // (which holds a glob mapper from "*.java" to "*.class"
// // *****  initialize test environment (called "bed")  ***** //
// if this is not a valid file: just use the uri
// THIS WILL FAIL. //compareBytes("abc", "utf-16");
//if there were no main targets, we list all subtargets //as it means nothing has a description
// private static final int FG_WHITE = 37;
// Property
// For NetWare, use the boolean=true mode, so we can use delimiter // information to make a better decision later.
// we are on NetWare, tokenizing is handled a little differently, // due to the fact that NetWare has multiple-character volume names.
// add ant properties
// NB: this makes use of Project#setProperty rather than Project#setNewProperty //     due to backwards compatiblity reasons
// If we've been successful on an update, delete the // temporary file
// shouldn't be possible
//Ignore - we will use the defaults.
// CheckStyle - magic numbers // checking for "X:\ 0=dquote,1=letter,2=:,3=\
// get files from old methods - includes and nested include
// Pump streams asynchronously
// A wild default for when the thread is interrupted
// On junit3 this is a FAILURE, on junit4 this is an ERROR
// Set up PRIMITIVE_TYPE_MAP
// Wait for the process to finish
// Wait for the end of output and error streams
// Informative summary message in case of errors
// die if cabarc fails
/* the starting disk number        */
// check of add[Configured](Class) pattern
// Use this to prepend a message to the properties file
/* zipfile comment length          */
"/*     * Converts DOS time to Java time (number of milliseconds since epoch).     */"
"/* ========================================================================    *    * Constructors    */"
// CRC will be added later
/*<ZipExtraField>*/
// The local file name is simply the local target path (tgt) which has // been passed recursively down from the top of the tree, with the item's name appended.
"/* ========================================================================    *    * Methods    */"
//add -revision xxxxx to the commandline
// Use the OS VM launcher so we get environment variables
// If -soshome was not specified then we can look for nocache
// MS-DOS read-only attribute
// MS-DOS directory flag
// Create the PropertyFile
// A "location" attribute for a node within a // Path object.
//testing drive letter search from root:
// fail, because buildfile contains two targets with the same name
//executeTarget("setup"); //commented out for performance while target is empty
// ensure <checksum> follows the immutability rule
// hide addTask for TaskContainers
// type may be null because it wasn't set
// Just use the same directory as the file itself. // This directory will exist
// JarIndex is sorting the directories by ascending order. // it has no value but cosmetic since it will be read into a // hashtable by the classloader, but we'll do so anyway.
// Insert as a string by default
// // Static //
// Protected first so if any GUI tool offers a default // based on enum #0, it will be right.
// CheckStyle:VisibilityModifier OFF - bc // the source file // the destination file // the destination directory
// configure the transformer...
// build the command line from what we got. the format is // cleartool mklabel [options...] [viewpath ...] // as specified in the CLEARTOOL help
// List of EJBs found in XML // One item within the Map // Is doc iAS or EJB descriptor
// Loop through the files seeing if any has been touched // more recently than the destination jar.
//WARNING: We trim the values of all the attributes because //Some extension declarations are badly defined (ie have spaces //after version or vendor)
// 2003-02-21 new replace algorithm by tbee (tbee@tbee.org) // because it wasn't able to replace something like "@aaa;@bbb;"
//although this code appears to duplicate that of ClasspathUtils.newInstance, //we cannot use that because this formatter may run in a forked process, //without that class.
// build the command line from what we got the format is // ss History elements [-H] [-L] [-N] [-O] [-V] [-Y] [-#] [-?] // as specified in the SS.EXE help
//there are places (in this file, and perhaps elsewhere, where it is assumed //that null is an acceptable parameter.
// // Just call the getExecuteStreamHandler() and let it handle //     the semantics of instantiation or retrieval. //
// converted from sun internal classes to // new Base64Converter // utility class extracted from Get task
// No further methods necessary. This is just an amalgamation of two other // interfaces.
// copying of dirs is trivial and can be done // for non-file resources as well as for real // files.
// // -----  The "Singleton"  ----- //
// simplest case - setAttribute expects String
// Use the logger config
// If only default is specified and the property did not // exist in the property file, the property is set to default.
// If we had child elements, we need to indent before we close // the element, otherwise we're on the same line and don't need // to indent
// The key is in the dictionary but cannot be retrieved // This is usually due references that refer to tasks // that have not been taskdefed in the current run. // Ignore
// If value and default are both specified and the property // previously existed in the property file, the property // is set to value.
// write magic: done by caller who created this stream //this.out.write('B'); //this.out.write('Z');
// Since task log category includes target, we don't really // need this message
// Property type operations
// CRC // Mode // SizDev // UID // GID
// Property types
// keys used in properties.
// target // file // exptected string
// mandatory constructor
// resetting the stylesheet - reset transformer
// do we need to reset templates as well
// Driver doesn't understand the URL
// It's a task - append the target
// set parameters on each transformation, maybe something has changed //(e.g. value of file name parameter)
// Doesn't make sense for c-l. Use the logger config
// check that a suite generates no errors
// Could not get the required information
// Are any other references held ? Can we 'close' the loader // so it removes the locks on jars ? // a new one will be created.
// Finally assign the property with the manifest classpath
// refresh attribute in case of multivalued attributes.
//execute the get
//set the timestamp to the file date.
// If no webxml file is specified, it's an error.
//neither
// check that having no suite generates no errors
// use wrappers for primitive classes, e.g. int and // Integer are treated identically
// One cannot RMIC an interface for "classic" RMI (JRMP)
// Manifest's ClassPath: attribute always uses forward // slashes '/', and is space-separated. Ant will properly // format it on 72 columns with proper line continuation
//we do not use the sun impl for portability, //and always use our own implementation for consistent //testing
// otherwise perform a timestamp comparison - at least
"/*             * Move the generated source file to the base directory.  If             * base directory and sourcebase are the same, the generated             * sources are already in place.             */"
//REVISIT: at this point even non HTTP connections may //support the if-modified-since behaviour -we just check //the date of the content and skip the write if it is not //newer. Some protocols (FTP) don't include dates, of //course.
// no source file generated, nothing to move
// The property is the name of a file.  We are testing // a location attribute, so we need to resolve the given // file name in the provided folder.
// the method called to add/create the nested element
// check that an invalid suite generates an error.
// Check if a create of this property is already present // add takes preference over create for CB purposes
// not the requested type
// I don't think we can use File - different rules // for relative paths.
// **   full-pathname specified == path in list // **   simple name specified   == path in list
// If a helper cannot be found, or if the helper is for another // classloader, create a new IH
// we only get here if an exception has been thrown
// whether or not this ProcessDestroyer has been registered as a // shutdown hook
//      assertTrue("return code is invalid: " + retCode, retCode!=0);
// JUnit3 test //assertEquals(runner.getFormatter().getError(), JUnitTestRunner.FAILURES, runner.getRetCode());
// Ignore attribute from unknown uri's
// not initialized yet, so create the factory
// specific attributes for the transformer
// need to load Task via system classloader or the new // task we want to define will never be a Task but always // be wrapped into a TaskAdapter.
// kept for backwards compatibility
// configure factory attributes
//the rest of the method treats single jar like //a nested path with one file
// use XMLCatalog as the entity resolver and URI resolver
// configure output properties
// Process the processor options
// jvc doesn't support bootclasspath dir (-bootclasspath) // so we'll emulate it for compatibility and convenience.
//as new versions of java come out, add them to this test
//copy the properties file
"/* load properties from file if specified, otherwise        use Ant's properties */"
// add configured replaces the add method
// should print "panic: Cannot find importVocab file 'JavaTokenTypes.txt'" // since it needs to run java.g first before java.tree.g
// found the property we set - it's good.
//on java<=1.3 the modern falls back to classic if it is not found //but on java>=1.4 we just bail out early
// output properties
//create task ok, set this task as the default one
// build the command line from what we got the format is // ccm co /t .. files // as specified in the CCM.EXE help
// The SOS class knows that the SOS server needs the password flag, // even if there is no password ,so we send a " "
// get a random number between 0 and the number of files
// TODO turn into parameter?
// TODO: should this just call super()?
// TODO improve this
// TODO do contentType and/or dataEncoding belong in HTTPSampleResult instead?
// TODO - needs more work ...
// Maybe move to vector if MT problems occur
// TODO: This method doesn't appear to be used.
// TODO is this really necessary?
// Programming error: bail out.
// TODO should this throw an error?
// houston we have a problem !!
//TODO replace with proper Exception
// TODO - charset? // TODO this should really be request data, but there is none
// in milli-seconds // TODO: properties?
//TODO - move to JOrphanUtils?
// N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class
// Can be null (not sure why)
//TODO implement other non-text types
// TODO this is not populated currently
// N.B. Needs to implement Visualizer so that TestBeanGUI can find the correct GUI class // TODO - remove UnsharedComponent ? Probably does not make sense for a TestBean.
// $NON-NLS-1$ // TODO - use a different format here?
// NOTUSED: long[] longSample = getSamples(); // load each node
//This can lead to code smell, meh! Do we care
// TODO is this ever used?
// TODO is this the best way to do this?
// All keys in messages.properties are lowercase (historical reasons?)
//NOT USED protected double[][] data = null;
//TODO do this more efficiently
// TODO - should this use setFirst() ?
"/*     *     * A Dom tree panel for to display response as tree view author <a     * href=""mailto:d.maung@mdl.com"">Dave Maung</a>      * TODO implement to find any nodes in the tree using TreePath.     *     */"
// TODO: Does this method need to be public? It isn't currently // called outside of this class.
"/*         * Does the system support UNC paths? If so, may need to fix them up         * later         */"
// Not used
// TODO should this be indeterminate? // TODO should this be indeterminate? //$NON-NLS-1$ //$NON-NLS-1$
// hack to skip processing
// TODO should we allow null for non-primitive types?
// TODO - not sure this is the best method
// TODO - is this needed?
// TODO - should we call start() and stop()?
// TODO: I believe the following code (to the end of the method) is // obsolete, // since NamePanel no longer seems to be the GUI for any component:
// Method is broken anyway
// TODO is this a sensible number? //$NON-NLS-1$
// TODO work out how to search the XML pane
// TODO is this sensible?
// Should we return fragment as text, rather than text of fragment?
"/*         * Not clear what can cause this ? conflicting versions perhaps         */"
//TODO replace with proper Exception // return with an error
//TODO: validate contentType for reasonable types?
"/*     * Mask values for TEST_TYPE TODO: remove either MATCH or CONTAINS - they     * are mutually exckusive     */"
// TODO ought to be a FileChooser ...
// Allow JMeter to render frames (and relative images) // Must be done after setContentType [Why?]
// TODO - is this used? (apart from test code)
// TODO: should this be clearData()?
"/**     * Provide a description of this timer class.     *     * TODO: Is this ever used? I can't remember where. Remove if it isn't --     * TODO: or obtain text from bean's displayName or shortDescription.     *     * @return the description of this timer class.     */"
"/*             * Provide dummy implementations to suppress download and display of             * related resources: - FRAMEs - IMAGEs TODO create better dummy             * displays TODO suppress LINK somehow             */"
// TODO should this be JTLSAVER? Only seems to be called by MonitorHealthVisualzer
// TODO: Make the running indicator its own class instead of a JButton
// If child of TransactionController is a ThroughputController and TPC does // not sample its children, then we will have this // TODO Should this be at warn level ?
// $NON-NLS-1$ // so it agrees with above // TODO perhaps should share code with __time() function for this... // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
// Hack to allow automated tests to find when test has ended //transient boolean testEnded = false;
// TODO could these be done earlier (or just once?)
// Hack to resolve ModuleControllers in non GUI mode
// add a system property so samplers can check to see if JMeter // is running in NonGui mode // $NON-NLS-1$ // TODO - why does it create a new instance?
// Should we run a beanshell script on startup? // $NON-NLS-1$
"/*         * A little hack - add each listener to the start of the list - this         * ensures that the thread running the show is the first listener and         * can modify certain values before other listeners are called.         */"
// TODO: move this to components -- the only reason why it's in core is because // it's used as a guinea pig by a couple of tests.
// TODO this bit of code needs to be tidied up // Unfortunately ModuleController is in components, not core // Bug 47165
// TODO: This class looks a lot like ArgumentsPanel. What exactly is the // difference? Could they be combined? // Note: it seems that this class is not actually used ...
// TODO does not appear to be used
"/*         * Ensure that the sample variables are correctly initialised for each run.         * TODO is this the best way to do this? should it be done elsewhere ?         */"
"/*             * Add fix for Deadlocks, see:             *              * See https://issues.apache.org/bugzilla/show_bug.cgi?id=48350            */"
// Hack to allow external control
// TODO - why use space?
// TODO should this also clear isDynamic, rawParameters, permanentResults?
// TODO should level be more than debug ?
// This is effectively the same as saver.toXML(Object, Writer) except we get to provide the DataHolder // Don't know why there is no method for this in the XStream class
// TODO fix up for Nimbus LAF
"/** * FIXME Why is searchTF not getting focus correctly after having been setVisible(false) once */"
// MenuBar related methods // TODO: Do we really need to have all these menubar methods duplicated // here? Perhaps we can make the menu bar accessible through GuiPackage?
// Hack to get full modifier value
"/*     * TODO consider removing this method, and providing method wrappers instead.     * This would allow the Gui package to do any additional clearups if required,     * as has been done with clearTestPlan()    */"
//Maybe do nothing at all?
"/*     * NOTUSED private void initButtonMap() { }     */"
//avoid error in ant task tests (good way?)
// Does not appear to be used; called by MainFrame#setEditAddMenu() but that is not called
"/** * Aggregates sample results for use by the Statistical remote batch mode. * Samples are aggregated by the key defined by getKey(). * TODO: merge error count into parent class? */"
// TODO should errors be thrown back through RMI?
"/*                 * JMeterTreeNode and TestBeanGUI are special GUI classes, and                 * aren't intended to be added to menus                 *                 * TODO: find a better way of checking this                 */"
// not used
// TODO - perhaps save other items such as headers?
// TODO should class implement SampleListener?
// Settings; readResolve sets these from the server/client values as appropriate // TODO would be nice to make these final; not 100% sure volatile is needed as not changed after creation
// should the samples be aggregated on thread name or thread group (default) ?
// Make it easier to enter a tab (can use \<tab> but that is awkward)
// TODO turn into method?
// Does not appear to be used (yet)
//@GuardedBy("sampleStore") TODO perhaps use ConcurrentHashMap ?
//TODO clazz is probably always the same as testclass
// TODO - should this be restored?
//TODO provide proper name?
// TODO: does it matter that an empty line will terminate the loop? // CSV output files should never contain empty lines, so probably // not // If so, then need to check whether the reader is at EOF
"/*     * TODO - convert to work more like upgrade.properties/NameUpdater.java     *     * Special processing is carried out for the Header Class The String     * property TestElement.name is converted to Header.name for example:     * <elementProp name=""User-Agent""     * elementType=""org.apache.jmeter.protocol.http.control.Header""> <stringProp     * name=""Header.value"">Mozilla%2F4.0+%28compatible%3B+MSIE+5.5%3B+Windows+98%29</stringProp>     * <stringProp name=""TestElement.name"">User-Agent</stringProp>     * </elementProp> becomes <elementProp name=""User-Agent""     * elementType=""org.apache.jmeter.protocol.http.control.Header""> <stringProp     * name=""Header.value"">Mozilla%2F4.0+%28compatible%3B+MSIE+5.5%3B+Windows+98%29</stringProp>     * <stringProp name=""Header.name"">User-Agent</stringProp> </elementProp>     */"
"/*     * These must be set before reading/writing the XML. Rather a hack, but     * saves changing all the method calls to include an extra variable.     *     * AFAIK the variables should only be accessed from one thread, so no need to synchronize.     */"
// TODO: should this be restored?
// TODO: not used - make private?
// TODO appears to duplicate the threadName field in SampleResult
// Yuck: TIFFImageEncoder uses Error to report runtime problems
// a check, just in case:
// TODO is this the right thing to do?
// results.setResponseCode("???"); TODO what code should be set here?
// TODO should this implement supportsCustomEditor() ?
// Not used, as the <testResult> element is generated by the // ResultCollector class
"/**     * Check if a string is a valid JMeter 'expression'.     * <p>     * The current implementation is very basic: it just accepts any string     * containing ""${"" as a valid expression. TODO: improve, but keep returning     * true for ""${}"".     */"
// TODO - use or remove
// I guess this can happen as a result of a bad // file read? In this case, it would be better to replace the // incorrect value with anything valid, e.g. the default value // for the property. // But for the time being, I just prefer to be aware of any // problems occuring here, most likely programming errors, // so I'll bail out. // (MS Note) Can't bail out - newly create elements have blank // values and must get the defaults. // Also, when loading previous versions of jmeter test scripts, // some values // may not be right, and should get default values - MS // TODO: review this and possibly change to:
// TODO does not work yet; need to determine the sample type
// Temporary fix to allow default protocol to be changed
//TODO consider using private logs for each derived class
// Does not appear to be used yet
// Remember to change this when the class changes ...
// TODO temporary hack to avoid unnecessary bug reports for subclasses
// TODO - yet another ambiguous name - does it need changing? // See also: Clearable, JMeterGUIComponent
// TODO Is this silent exception intended
"/*     * The following variables are set by StandardJMeterEngine.     * This is done before start() is called, so the values will be published to the thread safely     * TODO - consider passing them to the constructor, so that they can be made final     * (to avoid adding lots of parameters, perhaps have a parameter wrapper object.     */"
// TODO should this set the thread names for all the subsamples? // might be more efficient than fetching the name elsewehere
"/*         * Setting SamplingStarted before the contollers are initialised allows         * them to access the running values of functions and variables (however         * it does not seem to help with the listeners)         */"
// TODO: remove this useless Entry parameter
// TODO fix this when there is a real implementation
// TODO only clear the relevant entry - if possible...
// Surely this is always null in the constructor?
// TODO why not use the super class value?
// TODO - does not appear to be called directly
"/** * Custom TrustManager ignores all certificate errors * * TODO: implement conditional checking and logging * * (Derived from AuthSSLX509TrustManager in HttpClient contrib directory) */"
// Maps to contain page and form encodings // TODO - do these really need to be shared between all Proxy instances?
// NOTE: Source and line arguments are nonsense in a call(). //       Any way to make these arguments *sensible?
// Is it an exception wrapped in a JavaScriptException?
// TODO Why empty block ?
// TODO - perhaps this should be a fatal error?
// clone will produce correct type // TODO but why do we need to clone the list?
// TODO only called by UserParameterXMLParser.getXMLParameters which is a deprecated class
// TODO probably not needed
// TODO needs to be synch? Probably not changed after threads have started // JMeter Home directory (excludes trailing separator) // JMeter bin directory (excludes trailing separator)
// Hack: bsh-2.0b5.jar BshScriptEngine implements Compilable but throws "java.lang.Error: unimplemented"
// TODO: what is this for?
// TODO should equals and hashCode depend on field other than count?
// TODO is sync really needed?
// TODO is this correct?
// TODO cpercent is the same as cmedian here - why? and why pass it to "distributionLine"?
// TODO: Should the method signature of this method be changed to // match the super-implementation (using a TestElement parameter // instead of AbstractListenerElement)? This would require an // instanceof check before adding the listener (below), but would // also make the behavior a bit more obvious for sub-classes -- the // Java rules dealing with this situation aren't always intuitive, // and a subclass may think it is calling this version of the method // when it is really calling the superclass version instead.
// TODO Should this method be synchronized ? all other function execute are
// TODO should the engine be static?
// N.B. Commons IO IOUtils has equivalent methods; these were added before IO was included // TODO - perhaps deprecate these in favour of Commons IO?
// TODO should this be getMin()?
"/*                 * Fix bug: -D arg1=arg2 was causing parse error; however                 * --define arg1=arg2 is OK This seems to be because the parser                 * skips the terminator for the long options, but was not doing                 * so for the short options.                 */"
// TODO improve the error handling
"/**     * Add logTargets to root logger     * FIXME What's the clean way to add a LogTarget afterwards ?     * @param logTargets LogTarget array     */"
// hack to reduce the need to load every class in non-GUI mode, which only needs functions // TODO perhaps use BCEL to scan class files instead? // class name should contain this string // class name should not contain this string
"/*             * TODO: Exact ordering is only required for some tests; change the             * comparison to do a set compare where necessary.             */"
// TODO field always true, what for ?
// TODO - improve this check
// TODO - could this be return?
//very wrong.
// TODO - should this be a failure?
"/*     * Wrapper to convert a JUnit4 class into a TestCase     *     *  TODO - work out how to convert JUnit4 assertions so they are treated as failures rather than errors     */"
// TODO should really return most specific (i.e. longest) match.
// TODO - should this be done for embedded usage? // Note: the element is a ConfigTestElement when used standalone, so we cannot use FTPSampler access methods
// TODO: replace all this url2 mess with a proper method // "areEquivalent(url1, url2)" that // would also ignore case in protocol and host names, etc. -- use that // method in the CookieManager too.
// TODO is this possible?
"/*     * Holder for storing cache details.     * Perhaps add original response later?     */"
// TODO not used by GUI
// not currently used
// TODO correct URL?
// NOTE: the handling of simple- vs. double-quotes could be formally // more accurate, but I can't imagine a session id containing // either, so we should be OK. The whole set of expressions is a // quick hack anyway, so who cares.
"/*         * TODO improve string version to better match browser behaviour? e.g.         * do browsers regard http://host/ and http://Host:80/ as the same? If         * so, it would be better to reflect this in the string         */"
// Code also allows for LF only (not sure why - perhaps because the test code uses it?)
// TODO: find a way to avoid the cost of creating a String here -- // probably a new PatternMatcherInput working on a byte[] would do // better.
// TODO should setBaseForScript be called here rather than above?
// Java 1.6.0_22+ no longer allows Content-Length to be set, so don't check it. // See: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6996110 // TODO any point in checking the other headers?
// SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording // TODO - is this the correct threadgroup name?
// TODO needs cleaning up
// $NON-NLS-1$ TODO should this be a variable?
// TODO replace repeated substr() above and below with more efficient method.
// TODO perhaps make more specific than this? // no point parsing anything else, e.g. GIF ...
// won't work: writeErrorToClient(HttpReplyHdr.formInternalError()); // Generate result (if nec.) and populate it // hack to skip processing
// TODO - should this be done when the client is created? // If so, then the details need to be added as part of HttpClientKey
// HACK
// May be replaced later
// TODO hack, to be removed later
// Could we drop the Sync here?
// TODO - should LF-only EOL be allowed? 
// DirContext dc = //TODO perhaps return this?
// $NON-NLS-1$ // TODO - change to use URL version? Will this affect test plans?
// TODO specify collection type without breaking callers
// TODO - can this eever happen?
// All form parameter always have text/plain as mime type //TODO make this a parameter?
// $NON-NLS-1$ // TODO can this be obtained from the file somehow?
// Does not appear to be used
// NOTUSED: GuiPackage guiPack =
// Allow serializable test to work // TODO: is the serializable test necessary now that JMeterTreeNode is // no longer a GUI component?
// TODO is null correct?
// TODO - how to handle thread stopped here
// Slight hack - we need to ensure the TestClass is not reset by the previous call
// TODO should this be called if basedir == null?
// TODO - could be converted to generic class?
// TODO not used?
// TODO: make static?
// Hack to allow entire URL to be provided in host field
// TODO Should this be OK ? //assertEquals(contentEncoding, s.getContentEncoding()); // Check arguments // We should have one argument, with the value equal to the post body
// TODO downcase UPPER case non-final variables
// TODO - belongs elsewhere 
// TODO can this happen?
// TODO needed here because currently done on sample completion in JMeterThread, // but that only catches top-level samples.
// TODO : This is a bit fragile
// TODO is this correct? // If this is not the first file we can't write its header now // for simplicity we always save it, even if there is only one file
// TODO - should this return something else?
// Don't allow override of Content-Length // This helps with SoapSampler hack too // TODO - what other headers are not allowed?
//$NON-NLS-1$ TODO should this be variable?
// TODO - is this the correct default?
// TODO do we need to add a charset for the file contents? // $NON-NLS-1$
// TODO merge put and post methods as far as possible. // e.g. post checks for multipart form/files, and if not, invokes sendData(HttpEntityEnclosingRequestBase)
// Get the content length, it tells us how much data to read // TODO : Maybe support chunked encoding, then we cannot rely on content length
// TODO: is this the correct default?
// TODO should we allow mimetype only?
"/*     * TODO should these fields be public?     * They don't appear to be used externally.     *      * Also, are they any different from HTTPConstants.GET etc. ?     * In some cases they seem to be used as the method name from the Tomcat log.     * However the RMETHOD field is used as the value for HTTPSamplerBase.METHOD,     * for which HTTPConstants is most approriate.     */"
// NOTUSED org.apache.jmeter.monitor.model.Status st = // TODO - charset?
// TODO: find out how to retrieve these from the script // At present the script has to use SampleResult methods to set them. // $NON-NLS-1$ // $NON-NLS-1$
// TODO: process warnings? Set Code and Message to success?
// TODO - should the encoding be configurable? // $NON-NLS-1$
//$NON-NLS-1$ // TODO - probably wrong
// TODO Method with 0 reference, really useful ?
// Maybe we should consider creating a global cache for the // random files to make JMeter more efficient.
// Should we use java.naming.security.[principal|credentials] to create the QueueConnection?
// TODO set different status if not enough messages found?
"/** * FIXME BROKEN CODE */"
// NOTUSED private String chosenFile;
"/* * Find all beans out there and check their resource property files: - Check * that non-default property files don't have any extra keys. - Check all * necessary properties are defined at least in the default property file, * except for beans whose name contains ""Experimental"" or ""Alpha"".  *  * TODO: - Check property files don't have duplicate keys (is this important) *  */"
// This could perhaps be a variable name
// Should we add the "_" separator?
// TODO - should we skip processing here?
//TODO add some real tests now that split() has been removed
// NOT USED transient protected ThreadGroup THREADGROUP = null; // Anyway, was this supposed to be the class from java.lang, or // jmeter.threads?
// all the others could be private too?
// TODO can this ever happen?
// TODO fetch list of languages from a file? // N.B. Changes to language list need to be reflected in // resources/PackageTest.java
//TODO: move to utils class (JMeterUtils?)
// TODO: do we need to implement any kind of connection pooling? // If so, which connections should be shared? // Should threads share connections to the same destination? // What about cross-thread sharing?
//            // Set the content type TODO - needed? //            String multiPartContentType = multiPart.getContentType().getValue(); //            post.setHeader(HEADER_CONTENT_TYPE, multiPartContentType);
"/*     * TODO this assumes that the redirected response will always immediately follow the original response.     * This may not always be true.     * Is there a better way to do this?     */"
// TODO is it the best way ? https://issues.apache.org/bugzilla/show_bug.cgi?id=55634
// Keep the unexpanded path // TODO - allow directories to end with .jar by removing this check?
// TODO: the above works in the current situation, but it's // just a hack. How to get each editor to report whether it // wants to grow bigger? Whether the property label should // be at the left or at the top of the editor? ...?
// Hack: save the package for any transaction controllers
// How many classes can we assign from? // TODO: there must be a nicer way...
// Should the TestBean be hidden?
// TODO - why lower case? OK to use the default Locale?
//A hack to make user-defined variables in the testplan element more dynamic
// HACK: force the controller to load its tree
// It might be useful also to make this available in the 'Request' tab, for // when posting JSON.
// should header be saved with the data? //$NON-NLS-1$
// Showing large strings can be VERY costly, so we will avoid // doing so if the response // data is larger than 200K. TODO: instead, we could delay doing // the result.setText // call until the user chooses the "Response data" tab. Plus we // could warn the user // if this happens and revert the choice if he doesn't confirm // he's ready to wait.
// TODO strings should be resources
// result.setError(true); // TODO is this the correct strategy? // throw exception; // allow assertion to pass
// Why does this not call guiInstance.clearTestPlan() ? // Is there a reason for not clearing everything?
// NOTUSED yet private JTextField filename;
// TODO somehow show progress
// TODO support multiple signers
// TODO: fetch this once as per vars above?
// TODO: add and delete not currently supported // $NON-NLS-1$
// Fix path to allow the use of UNC URLs
// TODO should this use setDone()? // TODO should this use setFirst()?
// Set the overall status for the transaction sample // TODO: improve, e.g. by adding counts to the SampleResult class
// Should we exit at end of the test? (only applies to server, because host is non-null)
"/*         * Have we reached the reporting boundary?         * Need to allow for a margin of error, otherwise can miss the slot.         * Also need to check we've not hit the window already         */"
// TODO save hostname; save sample type (plain or http)
// Allow the mimetype of the file to control the content type // This is not obvious in GUI if you are not uploading any files, // but just sending the content of nameless parameters // TODO: needs a multiple file upload scenerio
// REMIND: convert arg list Vectors here?
// It is chunked transfer encoding, which we do not really support yet. // So we just read without blocking, because we do not know when to // stop reading, so we cannot block // TODO propery implement support for chunked transfer, i.e. to // know when we have read the whole request, and therefore allow // the reading to block
// TODO handle filenames
// not yet handled
// TODO - should check that error has been logged...
// Don't allow override of Content-Length // TODO - what other headers are not allowed?
// TODO ? perhaps note connection so it can be disconnected at end of test?
// Check request headers
// $NON-NLS-1$
// --------------------------------------------------------------------- // PROPERTY FILE CONSTANTS // ---------------------------------------------------------------------
// package protected so can be accessed by test class
// Test sending data with default encoding
// return with an error
"/*     * Low-level (recursive) routine to define the method - if not already defined.     * Synchronized to protect access to methodToInvoke.     */"
// regular expression used to match against embedded resource URLs
// Don't save this - only needed for processing CSV headers currently
// flush
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.setHeaders(URLConnection, HTTPSampler)'     */"
// OPTIONAL TASKS
// List of variable names to be saved in JTL files
// flag - if all machines within a given domain can access the variable. //(from http://www.cookiecentral.com/faq/ 3.5)
///////////////// End of standard field accessors /////////////////////
"/*         * Run tidy.         */"
// Get appropriate sender class governed by the behaviour set in the JMeter property
// Column numbers - must agree with order above
// We don't want this passed on to browser
// return with no error
// Fix the content length
// only http and https are supported
// Obtain another URL with an explicit port:
"/*     * Constructor is initially called once for each occurrence in the test plan     * For GUI, several more instances are created Then clear is called at start     * of test Called several times during test startup The name will not     * necessarily have been set at this point.     */"
// write output to file
"/*     * For use by SaveService only.     *     * @param stamp -     *            this may be a start time or an end time     * @param elapsed     */"
// this should never happen // anyway, we'll continue with url2 set to null.
// probably does not need to be synch (always accessed through ThreadLocal?) // give access to Test code
// For use by AJP
// vars will be null on TestPlan
// Original numeric order (we now use strings)
// Allow for old format file without the extra columnns
"/*     * Determine if content-type is known to be binary, i.e. not displayable as text.     *     * @param ct content type     * @return true if content-type is of type binary.     */"
// Embedded URL match regex
// Extract charset and store as DataEncoding // N.B. The meta tag: // <META http-equiv="content-type" content="text/html; charset=foobar"> // is now processed by HTTPSampleResult#getDataEncodingWithDefault // $NON-NLS-1$
// check if filename defined
//    private static final Logger log = LoggingManager.getLoggerForClass();
// does not apply to Java implementation
// divisor is a positive number // should never case NFE
// add a listener to activate or not concurrent dwn.
// Note: Windows user preferences are stored relative to: HKEY_CURRENT_USER\Software\JavaSoft\Prefs
// close file
// non-null Comparators don't appear to be used at present
// URL CONFIG
// Keep track of token separator
// includes \n
// open file
// find order.indexOf(currentKey) using == rather than equals() // there may be multiple entries which compare equals (Bug 50898) // This will be slightly slower than the built-in method, // but replace() is not used frequently.
// Bottom (embedded resources, source address and optional tasks)
// Note: this is an instance field (and is not transient), so is created by the JMeter client // and propagated to the server instance by RMI. // [a static field would be recreated on the server, and would pick up the server properties] // $NON-NLS-1$
//"" is not the same as no realm
// 2 column size
//$NON-NLS-1$ //$NON-NLS-1
"/*     * Argument types used to create the method.     * May be provided explicitly, or derived from the constructor argument list.     */"
// Register the handler for focus listening. This handler will // only notify the registered when the text changes from when // the focus is gained to when it is lost.
// We do not use getEncoding method of Writer, since that returns // the historical name
// find all jar files or paths that end with strPathOrJar
// Holds the mappings from the saveservice properties file // Key: alias Entry: full class name // There may be multiple aliases which map to the same class
// equation for calculating the weight // w = (int)(33 * (used/max))
"/*     * (non-Javadoc) A new instance is created for each thread group, and the     * clone() method is then called to create copies for each thread in a     * thread group. This means that the lock object is common to a thread     * group; separate thread groups have separate locks. If this is not     * intended, the lock object could be made static.     *     * @see java.lang.Object#clone()     */"
// we have a single character; could be a token // it is a token
// no error as default
"/*                     * Now check for invalid message format: if string contains {0}                     * and ' there may be a problem, so do a format with dummy                     * parameters and check if there is a { in the output. A bit                     * crude, but should be enough for now.                     */"
// The test object, i.e. the instance of the class containing the test method // This is the same as testCase for JUnit3 tests // but different for JUnit4 tests which use a wrapper
// Mask should contain all types (but not NOT)
// we have to check and make sure the constructor is // accessible. if we didn't it would throw an exception // and cause a NPE.
// RETRIEVE IMAGES // $NON-NLS-1$
// Define file format versions // $NON-NLS-1$
// go to 1st line
// draw grid only when x is 1. If we didn't // the grid line would draw over the data // lines making it look bad.
// Is monitor // $NON-NLS-1$
// --------------------------------------------------------------------- // XML RESULT FILE CONSTANTS AND FIELD NAME CONSTANTS // ---------------------------------------------------------------------
// only contains HTTPFileArg elements
// changed the logic for BEA Weblogic in the case a // user uses Tomcat's status servlet without any // modifications. Weblogic will return nothing for // the connector, therefore we need to check the size // of the list. Peter 12.22.04
// The string to check (Url or data)
// this.DATA = null; // this.DATA = stat;
// Use MD5 // $NON-NLS-1$
// we check to see if the lastSelectedPath is null // after we clear, it would return null
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
// Allow testing of failure codes
// pick up any recent changes from other threads
// Add a new field source ip address (for HC implementations only) //default: IP/Hostname
// Use binary mode file transfer? // $NON-NLS-1$
// What are we testing against?
"/*             * Parent elapsed total should be no smaller than the sum of the individual samples.             * It may be greater by the timer granularity.             */"
// $NON-NLS-1$ //default: IP/Hostname
// used by HttpTestSampleGui
// did not find \n, put the character // back
// Assume it is the URL
// Tabbed pane that contains parameters and raw body
// Button for browsing webservice wsdl
// Find the first non-null message
// Both these are needed in the list even though they set the same // variable
// autoRedirects and followRedirects cannot both be selected
// Web Methods
// date or lastModified may be null or in bad format
// see https://developer.mozilla.org/en/HTTP_Caching_FAQ // see http://www.ietf.org/rfc/rfc2616.txt#13.2.4 
// do it once outside loop
// Is there a cached parser?
// improve xml display
// The headers and body are divided by a blank line (the \r is to allow for the CR before LF) // $NON-NLS-1$
// Test files for testLoadAndSave; output will generally be different in size but same number of lines
// Not should always succeed against an empty result
// Otherwise don't save anything - no point
// add the proxy elements
// Needs to be package protected for Unit test
// Set the bean's property to the value we just obtained:
// Get the Matcher for this thread
// TEXT FIELD // This means exit if last sample failed // $NON-NLS-1$
// Download concurrent resources // $NON-NLS-1$
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// should never happen...
// We get the AuthManager and pass it to the WSDLHelper // once the sampler is updated to Axis, all of this stuff // should not be necessary. Now I just need to find the // time and motivation to do it.
// Enable the DELETE and SAVE buttons if they are currently // disabled.
// transient Perl5Compiler compiler = new Perl5Compiler(); // $NON-NLS-1$
// reset the bsh.Interpreter before each execution
// ensure value is propagated to editor
// so we can detect it
// must create a new object, // or else end up with a set full of the same Map object
// parameters to pass to script file (or script)
// Next line
// Initialize the editor with the provided default value or null:
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// MAIN PANEL
// Duration is in seconds, starting from when the threads start
// script file name (if present)
// ++ // GUI tests throw the error // testArgumentCreation(org.apache.jmeter.config.gui.ArgumentsPanel$Test)java.lang.NoClassDefFoundError // at java.lang.Class.forName0(Native Method) // at java.lang.Class.forName(Class.java:141) // at // java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:62) // // Try to find out why this is ...
// script area
"/*     * A dummy class to pass the pointer of URL.     */"
// The Set is used to ignore duplicated binary files. // Using a LinkedHashSet to avoid unnecessary overhead in iterating // the elements in the set later on. As a side-effect, this will keep // them roughly in order, which should be a better model of browser // behaviour.
// Don't let the input field shrink too much
// Now look for URLs in the STYLE attribute
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// we only put HTTPFileArgs in it
// $NON-NLS-1$ // Permit dynamic resize of TextArea
// Note there's 3 capturing groups per value
// Check for a BASE HREF:
// Non-expiring
/* Action to be taken when a Sampler error occurs */
// should not happen
// Doesn't even look like a URL? // Maybe it isn't: Ignore the exception.
// if use proxy is checked, we enable // the text fields for the host and port
// Two null values -- return equal
// required for unit tests
// Disable DELETE and BROWSE buttons if there are no rows in // the table to delete.
// Listen on main socket
// Disable DELETE and BROWSE if there are no rows in the table to delete.
"/*     * See below for reason for this change. Just in case this causes problems,     * allow the change to be backed out     */"
// Putting the string first means it works even if the attribute is null
// running number
// create the JTable that holds header per row
// first we check to see if body tag has a // background set
// file panel //$NON-NLS-1$ //$NON-NLS-2$
// $NON-NLS-1$ // $NON-NLS-1$ proxy.binary.filetype=binary
"/*             * We don't want to store any cookies in the generated test plan             */"
"/*                     * TestSuite only finds testXXX() methods, and does not look                     * for suite() methods.                     *                      * To provide more compatibilty with stand-alone tests,                     * where JUnit does look for a suite() method, check for it                     * first here.                     *                      */"
// Set the form data
// Tell the sampler to do a multipart post
// $NON-NLS-1$ // $NON-NLS-1$
// Make the connection ready for sending post data
// NOOP
// $NON-NLS-1$ //- JMX file attributes
/* Implements JMeterGUIComponent.createTestElement() */
"/*     *     * The string is made private so the compiler can't propagate it into     * JMeterUtils. (Java compilers may make copies of final variables)     *     * This ensures that JMeterUtils always gets the correct     * version, even if JMeterUtils is not re-compiled during the build.     */"
/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
// Must agree with the order of entries in the drop-down // created in ProxyControlGui.createGroupingPanel() //private static final int GROUPING_NO_GROUPS = 0;
// Enable DELETE (which may already be enabled, but it won't hurt)
// Check if the property exists
// Highlight (select) the appropriate row.
// A HTTP POST request, multipart/form-data, simple values, // with \n as end of line, which should also be handled, // and with more headers in each multipart
// Force a minimum table height of 70 pixels
// script (if file not provided)
// called from ctor, so must not be overridable
// Re-throw Errors because we're supposed to let the JVM see it // Don't re-throw StackOverflows, because we know we've // corrected the situation by aborting the loop and // a long stacktrace would end up on the user's console
// Highlight (select) the appropriate rows.
// OK to call TestBeanHelper.prepare()
"/*         * If we are creating a JSR223 element, add the cache key property.         *          * Note that this cannot be done in the JSR223BeanInfoSupport class         * because that causes problems with the group; its properties are         * not always set up before they are needed. This cause various         * issues with the GUI:         * - wrong field attributes (should not allow null)         * - sometimes GUI is completely mangled         * - field appears at start rather than at end.         * - the following warning is logged:         * jmeter.testbeans.gui.GenericTestBeanCustomizer:          * org.apache.jmeter.util.JSR223TestElement#cacheKey does not appear to have been configured         *          * Adding the group here solves these issues, and it's also         * possible to add the key just before the script panel         * to which it relates.         *          * It's not yet clear why this should be, but it looks as though         * createPropertyGroup does not work properly if it is called from         * any subclasses of this class.         *          */"
// If a table cell is being edited, we must cancel the editing // before deleting the row.
// Override so we can intercept the stream
// Done by finally block: fileReader.close();
// Disable the DELETE and SAVE buttons if no rows remaining // after delete
// else No object in Map, ctx is the one
// JMeter.fail("Could not read internal resource. " + // "Archive is broken.");
// $NON-NLS-1$ //--
// @see TestRegexFunction for unit tests
// If a table cell is being edited, we should accept the current // value and stop the editing before adding a new row.
// elements have empty nodeValue, but we are usually interested in their content
// It is the most common post request, with parameter name and values // We also assume this if no content type is present, to be most backwards compatible, // but maybe we should only parse arguments if the content type is as expected //standard name=value postData
// Disable the DELETE and SAVE buttons if no rows remaining // after delete.
// Set the file uploads
// preset to default impl
// we check the count to see if we have exceeded // the number of lines to parse. There's no way // to know where to stop in the file. Therefore // we use break to escape the while loop when // we've reached the count.
// If clic on the Graph tab, make the graph (without apply interval or filter)
// create the JTable that holds one cookie per row
// Remove the header for content-type and content-length, since // those values will most likely be incorrect when the sampler // performs the multipart request, because the boundary string // will change
// Cannot find the file locally, so try the bin directory
// USER_INPUT
// independent frame to // allow it to be overlaid // by the main frame //$NON-NLS-1$
// class attributes
//++ Action command names //$NON-NLS-1$
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.SamplerResultTab#clearData()     */"
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//$NON-NLS-1$ resource name
// The following getters may appear not to be used - however they are invoked via the Functor class
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//this.setDaemon(true);
// desc.add("Use fully qualified host name: TRUE/FALSE (Default FALSE)"); //$NON-NLS-1$
// We really should never get here // because eval will throw an exception // if xpath is invalid, but whatever, better // safe
// Check if we know the encoding of the page
// doctype
// Now parse the DOM tree
// drop-down list for renderer
// a url is always in a Tag.
// if no results render in jmeter.properties, load Standard (default)
/* A checkbox choosing whether or not only successes should be logged. */
//NOT USED protected   static final String TAG_URL               = "requestUrl";       //$NON-NLS-1$
// If a table cell is being edited, we must cancel the editing before // deleting the row
// Names for the fields // $NON-NLS-1$
// only contains Argument (or HTTPArgument)
// instance attributes
// format (HMTL, XHTML, XML)
// errors only
// When the encoding is not known, the argument will get the encoded value, and the "encode?" set to false
// Table still contains one or more rows, so highlight // (select) the appropriate one.
// thresholds
//$NON-NLS-1$$NON-NLS-2$
//$NON-NLS-1$ // We only support chunked transfer encoding
// Relatively expensive operation, so do it once
// return JMeterContextService.getContext().getCurrentSampler().getName();
// Button Panel
// create the JTable that holds auth per row
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#setSamplerResult(java.lang.Object)     */"
// Ignore non-HTTP samplers
// wait for server to stop
// $NON-NLS-1$ // Detect if user has pressed a new link
// Drop the last character:
// N.B. originally called clear() // @see also JMeterGUIComponent
//NOOP
// $NON-NLS-1$ $NON-NLS-2$
// store the operator
//$NON-NLS-1$ $NON-NLS-2$
// default
// Whether to use dymanic key generation (if supported) // $NON-NLS-1$;
// $NON-NLS-1$ // $NON-NLS-2$
//$NON-NLS-1$;
// all table cells are editable
// $NON_NLS-1$
// Put the check boxes in a column in a panel
// Convert the old numeric types - just in case someone wants to reload the workbench
// Assume URL
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#getLabel()     */"
// Don't get tripped up by RE chars in the arg name
// With ssl request, url is host:port (without https:// or path) // $NON-NLS-1$
// name="sessionid" value="value"
// return the current value (don't forget the prefix!)
// increment the value
// Whether to use the redirect disabling feature (can be switched off if it does not work)
// Use null for url to simulate that HttpRequestHdr do not // know the encoding for the page. Specify contentEncoding, so the // request is "sent" using that encoding
//        super(new JMeterTreeNode(new WorkBenchGui().createTestElement(), null)); //        TestElement tp = new TestPlanGui().createTestElement(); //        initTree(tp);
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // e.g. "Transfer-Encoding: chunked", which is processed automatically by the underlying protocol // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ pseudo-header for reporting Local Address // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // For handling caching // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //e.g. public, max-age=259200 //e.g. Date Header of response 
// Cannot use getThreadContext() as not cloned per thread
"/*     * Although the lock appears to be an instance lock, in fact the lock is     * shared between all threads in a thread group, but different thread groups     * have different locks - see the clone() method below     *     * The lock ensures that all the variables are processed together, which is     * important for functions such as __CSVRead and _StringFromFile.     */"
// revert
// Check if the include pattern is matched
// PreProcessors are cloned per-thread, so this will be saved per-thread // $NON-NLS-1$
// Package protected to allow test case access
// String in the panel // Do not make these static, otherwise language changes don't work // $NON-NLS-1$
// ;sessionid=value // $NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Not 100% sure, but I believe this can't happen, so // I'll log and throw an error:
//  value="value" name="sessionid" // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-1$
// can be specified in jmeter.properties //$NON-NLS-1$
"/*     * ------------------------------------------------------------------------     * Methods implemented from interface org.apache.jmeter.config.Modifier     * ------------------------------------------------------------------------     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testIterationStart(org.apache.jmeter.engine.event.LoopIterationEvent)     */"
// if a mask for this argument exists
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setPageTitle(java.lang.String)     */"
// values to be masked must be set in the WebApp to "*"
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// Check which HTTPSampler class we should use
// If a content encoding is specified, we set it as http parameter, so that // the post body will be encoded in the specified content encoding
// Allow list of headers to be overridden // $NON-NLS-1$
// create instances needed for parsing
// Test CSV file with a header line
// Don't break the world just because this failed:
// go on with next property.
// register content handler
// Engine may be null if it has not correctly started
// register error handler
// Build the replacer from all the variables in the collection:
// parse
//Synchronize on the info object's MUTEX to ensure //Multiple threads don't update the scheduled time simultaneously
// ------------------------------------------- // Constructors // -------------------------------------------
// Check if the user wants to create from template
// initalise pointer to first user
// $NON-NLS-1$ // default: bottom //$NON-NLS-1$
// Use round robin allocation of user details
// Assume we have already created the store
// no entries in all users, therefore create an empty Map object
// $NON-NLS-1$; // $NON-NLS-1$;
// verify if regex groups exists
// no CA key - probably the wrong store type. // cannot continue
// Note UserParameterXML accesses this variable // to obtain the Set data via method getParsedParameters()
// Set up some objects for the script to play with //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Previously mis-spelt as theadName //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// cannot be first line either
// Leave header as is // headerBuf.append(conn.getHeaderField(0).substring(0, 8)); // headerBuf.append(" "); // headerBuf.append(conn.getResponseCode()); // headerBuf.append(" "); // headerBuf.append(conn.getResponseMessage()); //$NON-NLS-1$
// ensure Proxy threads cannot interfere with each other
// store is faulty, we need to recreate it // if cert is not valid, flag up to recreate it
// Otherwise, the response is scanned for these strings //$NON-NLS-1$
"/*     * @return     */"
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// ------------------------------------------- // Methods // -------------------------------------------
// Set the title for the first tab //$NON-NLS-1$ // Remove the other tabs if present // $NON-NLS-1$
// Should Tidy be quiet?
// reload to pick up new aliases // reloading is very quick compared with creating an entry currently
// haven't got to reset paramname & paramvalue // but did it to keep the code looking correct
//$NON-NLS-1$  // Test can't have a duration more than 2^31 secs (cast from long to int)
"/*     * These are used as GUI item names;     * LOWERBOUND, UPPERBOUND and INCREMENT are used in the focusLost() method     */"
//$NON-NLS-1$ //$NON-NLS-2$
"/*     * @param element     */"
// These names must agree case-wise with the variable and property names //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// this.updateUI();
//$NON-NLS-1$  //$NON-NLS-2$ //$NON-NLS-1$
// Property was found in a config element. Whether or not // it matched the value in the sampler, we're done with // this property -- don't look at lower-priority configs:
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// Should we download external DTDs?
// boolean pass = true;
// regex //$NON-NLS-1$ // template //$NON-NLS-1$ // which match //$NON-NLS-1$ // between text //$NON-NLS-1$ // default text //$NON-NLS-1$ // output variable name //$NON-NLS-1$ // input variable //$NON-NLS-1$
// Called by XPathAssertionGui
//$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ $NON-NLS-2$
// Don't make these static, otherwise language change does not work //$NON-NLS-1$
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Previously mis-spelt as theadName //$NON-NLS-1$ //$NON-NLS-1$ (may be null) //$NON-NLS-1$ (may be null) //$NON-NLS-1$
// Report Tidy errors as Assertion failure?
// Use null for url and contentEncoding, to simulate that HttpRequestHdr do not // know the encoding for the page
//$NON-NLS-1$ //$NON-NLS-1$ // Check if it is form data //$NON-NLS-1$ // Get the form field name //$NON-NLS-1$
// Process tolerant settings
// Show Tidy warnings ?
//$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$
//$NON-NLS-1$//$NON-NLS-2$
// Non-Tidy options
// Tabbed results: fill table //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// Needed by AbstractTestElement. // Also TestElementConverter and TestElementPropertyConverter for handling empty comments //$NON-NLS-1$ // N.B. Comments originally only applied to Test Plans, hence the name - which can now not be easily changed
// Tidy options
// Set the title for the first tab //$NON-NLS-1$ // Add the other tabs if not present // $NON-NLS-1$ // $NON-NLS-1$
// The HTTPClient always urlencodes both name and value, // so if the argument is already encoded, we have to decode // it before adding it to the post request
// setup bottom tabs, first Raw, second Parsed //$NON-NLS-1$ //$NON-NLS-1$
// Title multipart
// Add local JMeter properties, if the file is found //$NON-NLS-1$ //$NON-NLS-1$
// If invokee was provided, then clazz has been set up
// Label // count // Mean // median // 90% // Min // Max // Error %age //$NON-NLS-1$ // Throughput //$NON-NLS-1$ // pageSize   //$NON-NLS-1$
// Called by XPathExtractorGui
// Although this field is mutable, it is only accessed within the synchronized method deliverSampler()
// Check for local contentEncoding (charset) override; fall back to default for content body // we do this here rather so we can use the same charset to retrieve the data
//$NON-NLS-1$ // file_merge.setAccelerator( // KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK)); // Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
// We get the posted bytes using the charset that was used to create them
//    public final static String CONNECTION = "MongoSourceElement.connection"; //$NON-NLS-1$ //    public final static String SOURCE = "MongoSourceElement.source"; //$NON-NLS-1$ // //    public final static String AUTO_CONNECT_RETRY = "MongoSourceElement.autoConnectRetry"; //$NON-NLS-1$ //    public final static String CONNECTIONS_PER_HOST = "MongoSourceElement.connectionsPerHost"; //$NON-NLS-1$ //    public final static String CONNECT_TIMEOUT = "MongoSourceElement.connectTimeout"; //$NON-NLS-1$ //    public final static String CONTINUE_ON_INSERT_ERROR = "MongoSourceElement.continueOnInsertError"; //$NON-NLS-1$ //    public final static String MAX_AUTO_CONNECT_RETRY_TIME = "MongoSourceElement.maxAutoConnectRetryTime"; //$NON-NLS-1$ //    public final static String MAX_WAIT_TIME = "MongoSourceElement.maxWaitTime"; //$NON-NLS-1$ //    public final static String SOCKET_TIMEOUT = "MongoSourceElement.socketTimeout"; //$NON-NLS-1$ //    public final static String SOCKET_KEEP_ALIVE = "MongoSourceElement.socketKeepAlive"; //$NON-NLS-1$ //    public final static String THREADS_ALLOWED_TO_BLOCK_MULTIPLIER = "MongoSourceElement.threadsAllowedToBlockForConnectionMultiplier"; //$NON-NLS-1$ // //    public final static String FSYNC = "MongoSourceElement.fsync"; //$NON-NLS-1$ //    public final static String SAFE = "MongoSourceElement.safe"; //$NON-NLS-1$ //    public final static String WAIT_FOR_JOURNALING = "MongoSourceElement.waitForJournaling"; //$NON-NLS-1$ //    public final static String WRITE_OPERATION_NUMBER_OF_SERVERS = "MongoSourceElement.writeOperationNumberOfServers"; //$NON-NLS-1$ //    public final static String WRITE_OPERATION_TIMEOUT = "MongoSourceElement.writeOperationTimeout"; //$NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // Add variables for access to context and variables
// If getSendFileAsPostBody returned true, it's sure that file is not null // no need for content-type here
// Could time this // res.sampleEnd(); // if sampleEnd() is not called, elapsed time will remain zero // TODO distinguish errors better //$NON-NLS-1$
// N.B. It's not po ssible to forward threadStarted() to the implementation class. // This is because Config items are not processed until later, and HTTPDefaults may define the implementation
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//$NON-NLS-1$ // $NON-NLS1$
// More general attributes not supported
// Help convert existing JMX files which use HTTPSampler[2] nodes
// superclass does not support types
/* Shown as Parameter Name on the GUI */
// private static final int LIMIT_STR_SIZE = 100; // private boolean isRoot;
// for Thread Pool for resources but no need to use a special value?
// Find the data sent to the mirror server, which the mirror server is sending back to us
// IMAGE_PARSER now really means EMBEDDED_PARSER // $NON-NLS-1$
// for omitted file names //$NON-NLS-1$
// If there is one file with no parameter name, the file will // be sent as post body.
// Check arguments
// We know that URL arguments should always be encoded in UTF-8 according to spec
// Parse the arguments in querystring, assuming specified encoding for values
// private method to allow AsyncSample to reset the value without performing checks
// Get the query string encoded in specified encoding // If no encoding is specified by user, we will get it // encoded in UTF-8, which is what the HTTP spec says
// Needs to be visible to test cases //$NON-NLS-1$
// Encode the parameter value in the specified content encoding
// first copy the children as the call to copy.add will modify the collection we're iterating on
// we don't; use the default parser
// need to handle four cases: // - string contains name=value // - string contains name= // - string contains name // - empty string
// For concurrent get resources
// See catch clause below
// IF for download concurrent embedded resources
// kill any remaining tasks
// We must ask the user if it is ok to close current project // i.e. it is OPEN
// Browsers seem to tolerate Location headers with spaces, // replacing them automatically with %20. We want to emulate // this behaviour.
// We don't want to use CacheManager clone but the parent one, and CacheManager is Thread Safe
// Implement these here, to avoid re-implementing for sub-classes // (previously these were implemented in all TestElements)
// N.B. These values are used in jmeter.properties (jmeter.httpsampler) - do not change // They can alse be used as the implementation name
// Access needed from CSVDataSet
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// $NON-NLS-1$ //- JMX
// otherwise we use "text/xml" as the default //$NON-NLS-1$
// Store the resource keys
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$  //$NON-NLS-1$ //$NON-NLS-1$
// default (e.g. if test plan does not have definition)
// This should only be called for a specific host
// keystore for SSL keys; fixed at config except for dynamic host key generation
// trailing string is not empty
// safer to start afresh
// This class is not cloned per thread, so this is shared
"/*     * nextInt(n) returns values in the range [0,n),     * so n must be set to max-min+1     */"
// most likely this is because of a certificate error
// This can overflow
// Can be null if called from Config item testEnded() method
// This is used as an error indicator
// Note: the resource string won't respond to locale-changes, // however this does not matter as it is only used when pasting to the clipboard
// check for overflow too
// If this is defined, it is assumed to be the alias of a user-supplied certificate; overrides dynamic mode // $NON-NLS-1$
// Cannot use getThreadContext() as we are not cloned per thread
// Use format to create number; if it fails, use the default
// place raw tab in first position (first tab)
// The original name of the property
// reset the value
"/* (non-Javadoc)         * @see javax.swing.JTabbedPane#setSelectedIndex(int)         */"
// HashMap to save ssl connection between Jmeter proxy and browser
// The alias to be used if dynamic host names are not possible // $NON-NLS-1$
// user-specified key
// treat the same as EOF
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Just put the whole postbody as the value of a parameter //used when postData is pure xml (ex. an xml-rpc call)
// Check post body which was sent to the mirror server, and // sent back by the mirror server
// i.e. EOF
// Helper class (callback) for applying parameter definitions
// Should we match using regexes?
// We create the post body content now, so we know the size
// Test sending data as UTF-8, with values that have been urlencoded
// Request sent. Now get the response:
// Needs to be done after execute to pick up all the headers
// for ssl connection
// $NON-NLS-1$       
// Hide Window on ESC //$NON-NLS-1$
// Allows HTTPSamplerProxy to call threadFinished; subclasses can override if necessary
// Process Commons HttpClient parameters file // $NON-NLS-1$
"/*         * (non-Javadoc)         *          * @see jodd.lagarto.EmptyTagVisitor#tag(jodd.lagarto.Tag)         */"
//        throw new UnsupportedOperationException("For test purposes only");
//$NON-NLS-1$ // return unknown action names for display error msg
// N.B. Must be in this class for the TestBean code to work
// Only check form tags
// If the pre-emptive parameter is undefined, then we can set it as needed // otherwise we should do what the user requested.
// Proxy configuration SSL
// HC3.1 does not have the method
// we stay within the same parent node
// will be null for HEAD
// Get the preference for the recent files
// Use special field ip source address (for pseudo 'ip spoofing')
// Extract transfer data.
"/*         *  We use the HostConfiguration as the key to retrieve the HttpClient,         *  so need to ensure that any items used in its equals/hashcode methods are         *  not changed after use, i.e.:         *  host, port, protocol, localAddress, proxy         *        */"
// If getSendFileAsPostBody returned true, it's sure that file is not null
// NT Includes other types of Credentials
// If there are no arguments, we can send a file as the body of the request // TODO: needs a multiple file upload scenerio
// Just append all the parameter values, and use that as the post body
//$NON-NLS-1$ //$NON-NLS-1$
// Keys for user preferences
// default: sans serif //$NON-NLS-1$
// Allow for missing optional jars
// N.B. default charset is used deliberately here
// These group names must have .displayName properties // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
//if we found a TestPlan, then we are on our way to the TestFragment
// only try to load the JMX test plan if there is one
// filter the tree for a TestFragment.
// might be null (e.g. in testing)
// TODO ?? (JMeterTreeNode) selectedNode.clone();
// If parent is OK, but child failed, add a message and flag the parent as failed
// Ensure global counters and lock are shared across threads in the group
// the DEFAULT class // Convert int to Integer etc:
// Insert the subControllersAndSamplers into random list positions.
// Creation of the customizer and GUI initialization is delayed until // the // first // configure call. We don't need all that just to find out the static // label, menu // categories, etc!
// We clone to avoid enabling existing node
// Programming error. Don't // continue.
// Set the selection once per iteration
// Original (rather odd) behaviour // start at the end
// Create a new list containing numElements null elements.
// Replace subControllersAndSamplers with reordered copy.
// Retrieve the formatted data using the same encoding used to create it
// not a wildcard
// Don't change the string, as it is used in JMX files // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Needed for HTTPSampler2
// setDone(true);
// We've gone through the whole list and are now back at the start // point of our search.
// N.B. this only reloads if necessary (ignores the reference)
// $NON-NLS-1$ // throughput.addActionListener(this);
// Form encoding has priority over page encoding
// start/end index default value for string getters and setters
// Not implemented: public static final String SAVE = "save_as"; // Not implemented: public static final String SAVE_ALL = "save_all"; // Not implemented: public static final String SAVE_TO_PREVIOUS = "save";
//$NON_NLS-1$
// implements UnsharedComponent
// Although the default is not the same as for the string value, it is only used internally
// If we are disabling the Edit-->Remove menu item and the // Edit-->Add menu item is disabled, then we also need to disable // the Edit menu. // The Java Look and Feel Guidelines say to disable a menu if all // menu items are disabled.
// Prevent entry if nothing to do
// PERTHREAD FIELD
// In case we are converting back from floating point, drop the decimal fraction // $NON-NLS-1$
// TYPE FIELD
// TEXT FIELD
// chop to server.name // $NON-NLS-1$
// Handle IPv6 urls
// chop to server.name:xx
// For all the file multiparts, we must tell it to not include // the actual file content
// Check if the header manager had a content type header // This allows the user to specify his own content-type for a POST request
// Buffer to hold the post body, except file content
// Standalone
// Allow Headers to override Host setting //$NON-NLS-1$ //Host
// If none of the arguments have a name specified, we // just send all the values as the put body
// Embedded
// Can cause NPE in HttpClient 3.1 //((SimpleHttpConnectionManager)cl.getHttpConnectionManager()).shutdown();// Closes the connection // Revert to original method: // Closes the connection
// JPanel loopPanel = new JPanel(new BorderLayout(5, 0));
// charset must agree with content-type below // $NON-NLS-1$
"/*     * This Map serves two purposes:     * - maps names to  containers     * - ensures only one container per file across all threads     * The key is the concatenation of the file name and the XPath string     */"
// Write the form data post body, which we have constructed // in the setHeaders. This contains the multipart start divider // and any form data, i.e. arguments
// we're sure that there is at least one file because of // getSendFileAsPostBody method's return value.
// Add also the length of the file content
// Check if we should do a multipart/form-data or an // application/x-www-form-urlencoded post request
// It is a normal post request, with parameter names and values
//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-1$  $NON-NLS-2$
// Default value // $NON-NLS-1$
// $NON-NLS-1$ // maintain original default
// Action listener will be added later
// Ignore everything else
// The headers are written using ISO_8859_1 encoding //$NON-NLS-1$
// Note: position of these elements in the menu *must* match the // corresponding ProxyControl.GROUPING_* values. // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// @GuardedBy("this")
// Stop action notifications while we shuffle this around:
// Include request body if it is a post or put or patch
// Reinstate action notifications:
// never null
// Functions are wrapped in ${ and } //$NON-NLS-1$
// Set the current value:
// Check if we know the encoding of the form
// can share these
"/*         * Don't redirect the following:         * 300 = Multiple choice         * 304 = Not Modified         * 305 = Use Proxy         * 306 = (Unused)         */"
// get the start of the file
// Preserve original case
// Fetch some variables
// N.B. Originally the response code was saved with the code "rs" // but retrieved with the code "rc". Changed to always use "rc", but // allow for "rs" when restoring values. //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// LOOP LABEL // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Checkbox // $NON-NLS-1$
//Suppress messages to stdout
// Update the dataEncoding
/*================= internal business =================*/
// DROP-DOWN MENU
// number of previous matches
// e.g. DTD not reachable
// Extract the content-type if present // $NON-NLS-1$
// $NON-NLS-1$ // Temporary copies, so can set the final ones
// this method assumes UTF-8 input data
// Update follow redirects setting just for this connection
// N.B. must be done after opening connection
// Can happen for bad input document
// works OK even if ContentEncoding is null
// The following are used to set the Result details on return from // the script: //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
// Normal InputStream is not available
/*============= object properties ================*/
// N.B. this closes 'in'
// Get all the request properties, which are the headers set on the connection
// Exclude the COOKIE header, since cookie is reported separately in the sample
// value is a List of Strings
// Count the retries as well in the time
// Check cache for an entry with an Expires header in the future
// Start with 0 so tries at least once, and retries at most MAX_CONN_RETRIES times
// Attempt the connection:
// try again
// This should never happen, but...
// Nice, we've got a connection. Finish sending the request:
// Done with the sampling proper.
// Now collect the results into the HTTPSampleResult:
// get the component parts // Assume domains must have at least 2 parts, e.g. apache.org // Don't try matching against *.org; however we don't check *.co.uk here
// Cannot be null here
// e.g. text/html; charset=ISO-8859-1
// if either a file or path location is given, // get the file object. // we have a file
// Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Will already have been logged by XPathUtil // fail the sample
"/*         * To avoid re-opening the file repeatedly after an error, only try to         * open it in the first execute() call (It may be re=opened at EOF, but         * that will cause at most one failure.)         */"
// Store any cookies received in the cookie manager:
// If we redirected automatically, the URL may have changed
// Just in case // Clear any other remaining variables
// has been seen in a redirect // use header (if possible) if no message found
// Don't process again
// What to match against. N.B. do not change the string value or test plans will break! // $NON-NLS-1$
// Save cache information
"/*     * Random class for generating random numbers.     */"
"/*     * Create a data input text field     *     * @return the panel for entering the data     */"
// Check if we found an accept-charset attribute on the form
// ensure old value is not left defined
// return the absolutePath of the file
//+ JMX file attribut names - do not change! //$NON-NLS-1$
// Only replace default if it is provided
// we check to see if the proxy host and port are set
//get filename or ""
//Note: match.groups() includes group 0
"/* Note that the filename is also used as a key to the pool (if used)        ** Documents provided in the testplan are not currently pooled, as they may change        *  between samples.        */"
// we created the document
// refname has already been set to the default (if present)
// Must be local content - or not using pool
// NOTE: responseData encoding is server specific //       Therefore we do byte -> unicode -> byte conversion //       to ensure UTF-8 encoding as required by XPathUtil // convert unicode String -> UTF-8 bytes // $NON-NLS-1$
// Number of refName_n variable sets to keep
// create a temporary file to make sure we always have a file to give to the PostWriter  // Whereever we are or Whatever the current path is.
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending a request which contains both formdata and file content     */"
// Save the count
// Original match behaviour
// < 0 means we save all the matches
// remove any single matches
// it's not set, lets check if the user passed // proxy host and port from command line
// Remove any left-over variables
// must be a "here" document
"/*     * Required to satisfy HTTPSamplerBase Should not be called, as we override     * sample()     */"
// We assume the argument value is encoded according to the HTTP spec, i.e. UTF-8
// Remove the group count
//$NON-NLS-1$ //- JMX file attribut names - do not change!
// N.B. if the string is not recognised, DEBUG is assumed
// Assume it will fail // ditto $NON-NLS-1$
// How many groups are there?
// set the response defaults
// WARNING - could be large
// API expects null not empty array, see http://docs.oracle.com/javase/6/docs/api/javax/net/ssl/X509KeyManager.html
// remove the remaining _gn vars
// if a blank HeaderManager exists, try to // get the SOAPHTTPConnection. After the first // request, there should be a connection object // stored with the cookie header info.
// check the proxy
// Contains Strings and Integers
// if use proxy is set, we try to pick up the // proxy host and port from either the text // fields or from JMeterUtil if they were passed // from command line
// if for some reason the host is blank and the port is // zero, the sampler will fail silently
// add match as Integer
// API uses raw types
// Scheme used for slow HTTP sockets. Cannot be set as a default, because must be set on an HttpClient instance.
// $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$ // $NON_NLS-1$
// string is not empty
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#isSuccessful()     */"
"/* (non-Javadoc)         * @see org.xml.sax.helpers.DefaultHandler#fatalError(org.xml.sax.SAXParseException)         */"
// Allow for property not yet being set (probably only applies to Test cases)
// Random match
"/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testEnded()     */"
// for request Data
// save the agent for next time round
// @see mergeFileProperties // Must be private, as the file list needs special handling // $NON-NLS-1$ // MIMETYPE is kept for backward compatibility with old test plans // $NON-NLS-1$ // FILE_NAME is kept for backward compatibility with old test plans // $NON-NLS-1$
"/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase#testEnded(java.lang.String)     */"
"/*     * @see org.apache.jmeter.report.gui.action.Command#getActionNames()     */"
// Make a internal list of all results to allow reload data with filter or interval
//$NON-NLS-1$         //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#pageEnded()     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setSuccessful(boolean)     */"
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testEnded(java.lang.String)     */"
// by not reading the response // for real, it improves the // performance on slow clients
// reuse documentation //$NON-NLS-1$ //$NON-NLS-2$
// reponse code doesn't really apply, since // the soap driver doesn't provide a // response code
// Set up HTTP scheme override if necessary
// We always want to override the HTTPS scheme
// RUN MENU //$NON-NLS-1$
// Accessed from multiple threads
// can throw IOException
// perform the sample
// FILE MENU //$NON-NLS-1$
// We've finished with the request, so we can add the LocalAddress to it for display
// HTTP protocol violation, but avoids NPE
// This sequence is borrowed from: // org.apache.commons.httpclient.protocol.ReflectionSocketFactory.createSocket
// Follow redirects and download page resources if appropriate:
// pick up headers if failed to execute the request
// Although the spec says UTF-8 should be used for encoding URL parameters, // most browser use ISO-8859-1 for default if encoding is not known. // We use null for contentEncoding, then the url parameters will be added // with the value in the URL, and the "encode?" flag set to false
// EDIT MENU //$NON-NLS-1$
// Always create hash because we will always need it
// Allow for null strings
// No proxy, so don't check proxy fields
// user-provided keystore // keystore generated by JMeter; single entry
// Lookup key - must agree with all the values used to create the HttpClient.
// Set the content encoding
// One-time init for this client
// This class is not serialised // The interpreter instance for this class
// set retry count
// Check if the request itself tells us what the encoding is
// Override the defualt schemes as necessary
// we start to iterate through the elements
// Set up proxy details
// This was the old value that was checked for // $NON-NLS-1$
// Add variables for access to context and variables
// reset in case was set previously
// Allow the mimetype of the file to control the content type
//$NON-NLS-1$ // Set params as a single line // $NON-NLS-1$ // and set as an array //$NON-NLS-1$ //$NON-NLS-1$
// Overridden by non-TestBean implementations to return the property value instead
// no need to process further
// N.B. need to separate protocol from authority otherwise http://server would match https://erver // could use separate fields, but simpler to combine them
// used when postData is pure xml (eg. an xml-rpc call) or for PUT
// We want to retain insertion order, so LinkedHashMap is necessary
// Method left empty here, but allows subclasses to override
// and as a string
// header[0] is not the status line... // $NON-NLS-1$
// no need to specify the port if it is the default
// Get rid of the query and the ?
// Get all the request headers
// No, must be CSV //$NON-NLS-1$
// Helper class so we can generate request data without dumping entire file contents
// parse other header lines, looking for Content-Length
// encoding does not really matter here
// TODO - charset?
"/*             * Create a Header Manager to ensure that the browsers headers are             * captured and sent to the server             */"
// If a content encoding is specified, we use that as the // encoding of any parameter values
// Save the last valid content length one
// Don't try to adjust the host name
// Write the request to our own stream
// SSL connection
// Create the parts // Add any parameters
// Keep the raw post data
// We get the posted bytes using the encoding used to create it
// If a table cell is being edited, we should accept the current value // and stop the editing before adding a new row.
// $NON-NLS-1$ this is the default used by HttpClient
// will be host:port for CONNECT
// it must be a proxied HTTPS request // $NON-NLS-1$
// not multipart // Check if the header manager had a content type header // This allows the user to specify his own content-type for a POST request
//$NON-NLS-1$ (Flash Media Manifest)
// Used by GUI
"/*     * Constructor for use during startup (intended for non-GUI use) @param name     * of summariser     */"
// second, if the tag was a composite tag, // recursively parse its children.
// So we know which button is selected
// reset
// Skip report packages as implementation is incomplete // Skip report GUI as implementation is incomplete // No, not a work in progress ...
// We just add placeholder text for file content
// If none of the arguments have a name specified, we // just send all the values as the post body
// get to 'path' part of the URL, preserving schema, auth, host if // present
// Check if we have found a content-length header //$NON-NLS-1$
// Note: if "Encoded?" is not selected, arg.getEncodedValue is equivalent to arg.getValue
// We are displaying an AssertionResult
//                ScriptRuntime.call(cx, fun, global, args, global);
"/*             * DecimalFormat adds the number to the end of the format if there             * are no formatting characters, so we need a way to prevent this             * from messing up the file name.             *             */"
// Let StringEntity perform the encoding
"/* * No point doing this on a per-connection basis, as there is currently no way to configure it. * So we leave it to the defaults set up in the SSL Context * */"
// Look for special Response Length header //$NON-NLS-1$
"/* The next line looks odd, but proxied HTTP requests look like:         * GET http://www.apache.org/foundation/ HTTP/1.1         * i.e. url starts with ""http:"", not ""/""         * whereas HTTPS proxy requests look like:         * CONNECT www.google.co.uk:443 HTTP/1.1         * followed by         * GET /?gws_rd=cr HTTP/1.1         */"
// Set the content type
// Find the page encoding and possibly encodings for forms in the page // in the response from the web server
// saved copy of first line for error reports
// Add the parameters
// Use the default encoding for urls
"/*         * Reset Locale if necessary so other locales are properly handled         */"
// The value is already encoded by the user // Must decode the value now, so that when the // httpclient encodes it, we end up with the same value // as the user had entered.
// Add the parameter, httpclient will urlencode it
// inclusion filter assumes most of // the files are not wanted, therefore // usefile is set to false unless it // matches.
//$NON-NLS-1$ // See TestElementPropertyConverter
// Buffer to hold the entity body
// we provide the MIME type here
// Only create this if we are overriding whatever default there may be // If there are no arguments, we can send a file as the body of the request
// NOTUSED Font plainText = new Font("plain", Font.PLAIN, 9); // These must not be static, otherwise Language change does not work //$NON-NLS-1$
// Just append all the parameter values, and use that as the entity body
// Check if it is a file being uploaded //$NON-NLS-1$
// Check if we have any content to send for body
// Generate result (if nec.) and populate it
//$NON-NLS-1$ // change the classname drop down
// Fetch once; needs to stay constant
// A HTTP POST request, multipart/form-data, with value that will change // if they are url encoded // Values are similar to __VIEWSTATE parameter that .net uses
// Look for special Sleep request //$NON-NLS-1$
// This class is not cloned per thread, so this is shared //@GuardedBy("this")
// If none of the arguments have a name specified, we // just send all the values as the entity body
//$NON-NLS-1$ // We have a default
// If the request entity is repeatable, we can send it first to // our own stream, so we can return it
// default: 16 //$NON-NLS-1$
// this probably cannot happen
// if argument is 'next' - go to the next line //$NON-NLS-1$ //$NON-NLS-2$
// Does not need to be synchronised, as all access is from same thread
// Lock object must exist
// ignored, already processed
// don't try twice
// Process __CSVRead(filename,*ALIAS) //$NON-NLS-1$
// ensure that clones share the same lock object
// may be the empty string
// Get the InputReader to use
// super.mergeIn(element);
// Forward to sampler
// value to return at EOF //$NON-NLS-1$ //$NON-NLS-2$
// Don't process the NAME column
"/*         * Note: the item name is used by ChangeLanguage to create a Locale for         * that language, so need to ensure that the language strings are valid         * If they exist, use the Locale language constants.         * Also, need to ensure that the names are valid resource entries too.         */"
// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$
// If we are enabling the Edit-->Add menu item, then we also need to // enable the Edit menu. The Edit menu may already be enabled, but // there's no harm it trying to enable it again.
// Get the file name of the current project
// Just use the first one of the possible many charsets
// use negative condition so missing (null) value is treated as FALSE
// we check the input tag type for image
// Create the multiparts
// Disable DELETE if there are no rows in the table to delete.
// default: normal //$NON-NLS-1$
// Function name //$NON-NLS-1$
// force reopen on next sample
"/*     * The testStarted/testEnded methods are called at the start and end of a test.     *     * However, when a test is run on multiple nodes, there is no guarantee that all the     * testStarted() methods will be called before all the threadStart() or sampleOccurred()     * methods for other threads - nor that testEnded() will only be called after all     * sampleOccurred() calls. The ordering is only guaranteed within a single test.     *     */"
// Content-length
//$NON-NLS-1$ // so we can add them again in init
// Marker for query string attribute
//+ JMX names - do not change // $NON-NLS-1$
// Authorization
// derived from: http://www.coderanch.com/t/342563/GUI/java/TriState-CheckBox
// Host always
//Empty override of superclass method
// Allow for some margin of error // Check that the throughput uses the time elapsed for the sub results
// Empty overrides of superclass methods
// content-type
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
// Add SamplerData for consistency with BeanShell Sampler //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// we need to use up the int now
// Add alias for original StringFromFile name (had only one underscore) //$NON-NLS-1$ //$NON-NLS-1$
//int mark =
"/* * N.B. to add a new field, remember the following * - static _xyz * - instance xyz=_xyz * - clone s.xyz = xyz (perhaps) * - setXyz(boolean) * - saveXyz() * - update SampleSaveConfigurationConverter to add new fields to marshall() and shouldSerialiseMember() * - update SampleResultConverter and/or HTTPSampleConverter * - update CSVSaveService: CSV_XXXX, makeResultFromDelimitedString, printableFieldNamesToString, static{} * - update messages.properties to add save_xyz entry * - update jmeter.properties to add new property * - update listeners.xml to add new property, CSV and XML names etc. * - take screenshot sample_result_config.png * - update listeners.xml and component_reference.xml with new dimensions (might not change) * */"
// Dummy
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// Methods needed by subclasses to get access to the implementation
// new WSDLHelper("http://services.bio.ifi.lmu.de:1046/prothesaurus/services/BiologicalNameService?wsdl");
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//$NON-NLS-1$ // select last tab 
// NOTREAD // $NON-NLS-1$
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a file multipart.     */"
//+ JMX field names - do not change values //$NON-NLS-1$
//$NON-NLS-1$ // Ensure variable has been provided
//        private void drawCross(Graphics g, int x, int y) { //            g.drawLine(x + (iconWidth - 4), y + 2, x + 3, y + (iconHeight - 5)); //            g.drawLine(x + (iconWidth - 4), y + 3, x + 3, y + (iconHeight - 4)); //            g.drawLine(x + 3, y + 2, x + (iconWidth - 4), y + (iconHeight - 5)); //            g.drawLine(x + 3, y + 3, x + (iconWidth - 4), y + (iconHeight - 4)); //        }
"/*     * Keep track of the file writer and the configuration,     * as the instance used to close them is not the same as the instance that creates     * them. This means one cannot use the saved PrintWriter or use getSaveConfig()     */"
// KEY = TCPKEY or ERRKEY, Entry= Socket or String
// Number of active threads in this group
// This won't work right if we remove components. But we don't, so I'm // not going to worry about it right now.
// $NON-NLS-1$ // default value: false
// set the start time for the Thread // Duration is in seconds
// default for concurrent pool (do not change)
// Do search on Enter //$NON-NLS-1$
//- JMX names
// Ensure that these are set, even if no paramters are provided //$NON-NLS-1$ //$NON-NLS-1$
// Default concurrent pool size for download embedded resources
// Don't bother reporting stop test interruptions
// The default setting to be used (i.e. historic)
// fetch once; must be done under lock // (also protects against null)
// Use for ComboBox Source Address Type. Preserve order (specially with localization)
// Always remove cookies // Always remove authorization // Remove additional headers
// $NON-NLS-1$ // default value: 60 secs 
// Only encode strings if outVersion = 1.0 //$NON-NLS-1$
// This is what JOrphanUtils.split() does
// Use default encoding
// FILE_FIELD is kept for backward compatibility with old test plans // $NON-NLS-1$
// Pass request to new proxy thread
// $NON-NLS-1$ // Supported methods:
// check there is a GUI
// i.e. GET
// Derive the mapping of content types to parsers
// look for Objects
"/*     * Optionally number the requests     */"
// checks the scheduler to stop the iteration
// If we got any results, then perform processing on the result
// Test sending data as UTF-8
// look for applets
// Table still contains one or more rows, so highlight (select) // the appropriate one.
// Search MENU //$NON-NLS-1$
// Properties to be sent to remote servers
// ensure that interrupt cannot overlap with shutdown
// then we need to download the binary
// Store MD5 hash instead of storing response // $NON-NLS-1$
"/*     * Externally callable suite() method for use by JUnit Allows tests to be     * run directly under JUnit, rather than using the startup code in the rest     * of the module. No parameters can be passed in, so it is less flexible.     */"
// paramTable.setCellSelectionEnabled(true); // paramTable.setPreferredScrollableViewportSize(new Dimension(100, // 70));
// Not synch, but it is not modified after creation
// returns empty array for null
// Send the mail ...
// Don't display Request headers label if rh is null or empty
////////////////////// Code ///////////////////////////
// Skip parameters with a blank name (allows use of optional variables in parameter lists)
// //////////////////////////////////////////////////////////// // // Implementation of the ActionListener-Interface. // // ////////////////////////////////////////////////////////////
// We use multipart if we have been told so, or files are present // and the files should not be send as the post body
// create some properties and get the default Session
// Try to ensure that more javascript code is processed OK ...
// Check if there are any difference between name and value and their encoded name and value
// Timeout occurred. Ignore, and keep looping until we're // told to stop running.
// If there is no difference, we mark it as not needing encoding
// Element tags. Must be unique. Keep sorted. //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// this is only possible for 3rd party controllers by default
// This can't happen (how should utf8 not be supported!?!), // so just throw an Error:
// boolean toReturn = true;
// allow use of relative file URLs
//$NON-NLS-1$ //-- End of names used in JMX files
// HTTP URLs must be absolute, allow file to be relative // $NON-NLS-1$ // $NON-NLS-1$
// empty collection ok to cast, local var is here to allow SuppressWarnings
// Add the query string if it is a HTTP GET or DELETE request
// Already contains a prefix
// If default port for protocol is used, we do not include port in URL
// We use the encoding which should be used according to the HTTP spec, which is UTF-8
//$NON-NLS-1$ - all threads // All threads
// Check if the sampler has a specified content encoding
// $NON-NLS-1$ // don't set empty to keep cssJquery // cssJqueryField.setText(""); // $NON-NLS-1$ // $NON-NLS-1$ // don't set empty to keep attribute // this.attributeField.setText(""); // $NON-NLS-1$ // don't change impl // this.cssJqueryLabeledChoice.setText(HtmlExtractor.DEFAULT_EXTRACTOR);
// records the existance of an equal sign
//+JMX file attributes - do not change values! // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //-JMX file attributes
// create a message
// Response Data // $NON-NLS-1$ // Request Data // $NON-NLS-1$ // Sampler result // $NON-NLS-1$
// We do not know the content encoding of the query string
// if true the Scheduler is enabled
// Append body if it is a post or put
// N.B. these are not multi-threaded, so don't make it static // ISO format $NON-NLS-1$
// The object used for each row
"/*     * The suite() method creates separate test suites for each of the types of     * test. The suitexxx() methods create a list of items to be tested, and     * create a new test instance for each.     *      * Each test type has its own constructor, which saves the item to be tested     *      * Note that the suite() method must be static, and the methods to run the     * tests must be instance methods so that they can pick up the item value     * which was saved by the constructor.     *      */"
// Transaction is done, we do not have a sampler to sample
"/*     * Private iterator used to unwrap the URL from the URLString class     *     */"
// is there a separator? // case of name=value, name=
// If we know the encoding, we can decode the argument value, // to make it easier to read for the user
// No WARN message to avoid performance impact
// If we do not know the encoding, we just use the encoded value // The browser has already done the encoding, so save the values as is
// Noop
// we have a name
// We need to call the super.next, instead of this.next, which is done in GenericController, // because if we call this.next(), it will return the TransactionSampler, and we do not want that. // We need to get the next real sampler or controller
// Iterate through the URLs and download each image:
// Get the URL matcher
// don't fetch unless pattern compiles
//url.replace('+',' ');
//+ JMX attributes - do not change
// Create a button to trigger the file chooser:
// There were some spaces in the URL
//   Used by both StandardJMeterEngine and ClientJMeterEngine. //   In the latter case, only ResultCollectors are updated, //   as only these are relevant to the client, and updating //   other elements causes all sorts of problems. // skip certain processing for remote tests
// I don't think localMatcher can be null here, but check just in case
// we have a pattern and the URL does not match, so skip it
// default: serial download embedded resources
// If selected, then generate parent sample, otherwise as per original controller
// -1 is the code for a failed sample. //
// deliverSampler allows sampler to be null, but result must not be null
// init with default value
// sample all resources with threadpool
// Number of capturing groups possibly containing Base HREFs:
// private void setSuccessCount(long count) // { // this.successCount = count; // }
// Clear all data before display a new
// call normal shutdown (wait ending all tasks)
// no need to change the foreground color
// put a timeout if tasks couldn't terminate
// Remove the other (parsed) tab if present
// private void setFailureCount(long count) // { // this.failureCount = count; // }
// case Node.TEXT_NODE: // break;
// add result to main sampleResult
// did all the tasks finish?
// log.warn("ThreadContext was not set up - should only happen in // JUnit testing..." // ,new Throwable("Debug"));
// sends the result to the visualiser // updates the model used for sending e-mails
// Not intended to be instantiated
// Cache for object-message, only used when parsing from a file because in text-area // property replacement might have been used
// Actions
// Get next sample and its name
// Action targets
"/*     * True iff we're currently processing an event triggered by the user     * selecting the ""Edit"" option. Used to prevent reverting the combo to     * non-editable during processing of secondary events.     */"
"/*     * @param res HTTPSampleResult to check     * @return parser class name (may be """") or null if entry does not exist     */"
// public static final int THREAD_GROUP = 1;
//$NON-NLS-1$ default: normal
// The redirect URL we got was not a valid URL
// Identifiers //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// This means no sample is saved
// Only add sample if it is a sample of valid url redirect, i.e. that // we have actually sampled the URL
// Now populate the any totalRes fields that need to // come from lastRes:
"/*     * Helper method to get an attribute value, if it exists @param attrs list     * of attributs @param attname attribute name @return     */"
// take copy so cannot get NPE
"/*     * Method to set files list to be uploaded.     *     * @param value     *   HTTPFileArgs object that stores file list to be uploaded.     */"
// no point saving an empty list
// Some editors may need the descriptor
// private ButtonGroup actionButtons;
"/*     * Method to get files list to be uploaded.     */"
// Weed out the empty files
// State variables
// NOOP to provide based empty impl and avoid breaking existing implementations
// may also happen if long value > int.max
// Target
// Add any assertion that failed as children of the sample node
// for new test plans that don't have FILE/PARAM/MIME properties
//$NON-NLS-1$ //$NON-NLS-1$ // These are the names of the get/set methods
// Updated the property lists
// Does not need to be synch. because it is only accessed from the sampler thread // The ClientPool does access it in a different thread, but ClientPool is fully synch.
// Action
// computes the value of the curve at the pecified abscissa // and relative to the beginning of the right piece of Spline curve
// Non-instantiable
// If we are enabling the Edit-->Remove menu item, then we also need to // enable the Edit menu. The Edit menu may already be enabled, but // there's no harm it trying to enable it again.
"/*         * Unwraps the URLString class to return the URL         */"
// Duration
//For calculating throughput across all threads
// else do nothing (cell isn't a string to edit)
//For holding the ThrougputInfo objects for all ThreadGroups. Keyed by AbstractThreadGroup objects
// assume the sample will run as soon as the delay has expired
// Calculate the delay based on the mode
// in the case the test uses a file, we set it locally and // prevent loading the file repeatedly
// N.B. we fetch the throughput each time, as it may vary during a test
// * Static int to signify the type of logical comparitor to assert
// Total number of threads
// the host has a key already
// Active threads in this group
// 8kB is the (max) size to have the latency ('the first packet') // Enough for MD5
// UTF-8 unsupported? You must be joking!
// OK, we have an old-style file definition // save it // Now deal with any additional file arguments
// All threads - alternate calculation
// -1 means not defined
// cache the parser
// NOOP state is held by component
//All threads in this group - alternate calculation
// ~a tic every 50 px
// Control reuse of cached SSL Context in subsequent iterations
// if the title graph is empty, we can assume some default
// no need to sync as one per instance
// Stroke and shape line settings
// e.g. *.apache.org // $NON-NLS-1$
// e.g. www.apache.org
// Test sending data as UTF-8, with values similar to __VIEWSTATE parameter that .net uses, // with values urlencoded, but the always encode set to false for the arguments // This is how the HTTP Proxy server adds arguments to the sampler
// Add to cache
// Get hostname
// Evaluation occurs when nbLoops is not yet evaluated  // or when nbLoops is equal to special value INFINITE_LOOP_COUNT
//+ JMX implementation attribute values (also displayed in GUI) - do not change // $NON-NLS-1$
"/*         * To disable downloading and rendering of images and frames, enable the         * editor-kit. The Stream property can then be         */"
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a formdata, as urlencoded data     */"
"/*     * In spite of the name, this is actually used to determine if the loop controller is repeatable.     *     * The value is only used in nextIsNull() when the loop end condition has been detected:     * If forever==true, then it calls resetLoopCount(), otherwise it calls setDone(true).     *     * Loop Controllers always set forever=true, so that they will be executed next time     * the parent invokes them.     *     * Thread Group sets the value false, so nextIsNull() sets done, and the Thread Group will not be repeated.     * However, it's not clear that a Thread Group could ever be repeated.     */"
// get past separator
// Put request does not use multipart, so no need for boundary
// if the displayName is the empty string, leave it like that.
// Get the encoding to use for the request
// If there are no arguments, we can send a file as the body of the request
// ensure the manager is initialised // we don't currently need to do anything further, as this sets the default https protocol
// Create the content length we are going to write
// N.B. Since the tags are extracted from an HTML Form, any values must already have been encoded
// Just append all the parameter values, and use that as the put body
// JAVA Impl accepts URLs with unsafe characters so don't do anything
// Keep the content, will be sent later
// OK (currently) to invoke using sub-class 
// Set the content length
// the copying thread won't generally detect EOF
"/*     * Class to be used to create the Method.     * Will be non-null if either Class or Object was provided during construction.     *     *  Can be used instead of invokee, e.g. when using interfaces.    */"
// if the "Title of Graph" is empty, we can assume some default
// as above, but with aggregate sample instead
// Allow for the old JMX file which used the local language string
// SortFilterModel mySortedModel = // new SortFilterModel(myStatTableModel);
// if the labels are too long, they'll be "squeezed" to make the chart viewable.
"/*-------------------------------------------------------------------------     * Methods (used by UserParameterXML to get XML parameters from XML file)     *----------------------------------------------------------------------- */"
// record some sizes to allow HTTPSampleResult.getBytes() with different options
// don't call isHeadless() here, as it has a side effect. // --
// Handle the various methods
// The value is in the second group
// Expected results established using the DDA // algorithm (see // http://www.siggraph.org/education/materials/HyperGraph/scanline/outprims/drawline.htm): // 0/1 vs. 1/1 -> 0 is // closer to 33.33 // 0/2 vs. 1/2 -> 50.0 is closer to // 33.33 // 1/3 vs. 2/3 -> 33.33 is // closer to 33.33 // 1/4 vs. 2/4 -> 25.0 is closer to // 33.33 // 1/5 vs. 2/5 -> 40.0 is closer to // 33.33 // 2/6 vs. 3/6 -> 33.33 is // closer to 33.33
// Allows HTTPSamplerProxy to call notifyFirstSampleAfterLoopRestart; subclasses can override if necessary
"/*     * Map of translations for tags; only created if there is at least     * one tag and a ResourceBundle has been provided.     */"
// Provide access to HTTPSamplerBase methods
// did not want to spoof the IP address
// add listener to intercept texttofind changes and reset search
// OK to set pre-emptive auth?
// chop to "server.name:x/thing"
// Needs to be accessible by HTTPSampler2
// Generate Error Body
// Set default parameters as needed
"/*     * Split line into name/value pairs and store in headers if relevant     * If name = ""content-length"", then return value as int, else return 0     */"
// Handle old-style JMeter properties
// // Parsing Methods //
//Cannot happen
// Get the boundary string for the multiparts from the content type
// This must be done last, as must not be overridden
// Nothing to do
// We do our own cookie handling
// We did not replace the entry // so use the existing one
// chop to server.name
// May generate IllegalArgumentException
// chop to server.name:xx // $NON-NLS-1$
// Set any default request headers
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending a HTTPSampler with form parameters, and only     * the filename of a file.     */"
"/*     * ------------------------------------------------------------------------     * Methods     * ------------------------------------------------------------------------     */"
// Setup connection
// Will throw MissingResourceException if key is not there.
// tmp inputstream needs to have a good counting
// Pick up Actual path (after redirects)
// Can be missing, e.g. on redirect
// ------------------------------------------- // Constants and Data Members // -------------------------------------------
// We're behind schedule -- try to catch up: // assume the sample will run immediately
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
// For access from test code
// We should only evalute the condition if it is the first // time ( first "iteration" ) we are called. // For subsequent calls, we are inside the IfControllerGroup, // so then we just pass the control to the next item inside the if control
// OK, because find only returns correct element types
// Label // count // Mean // Min // Max // Std Dev. // Error %age // Throughput // kB/sec // avg. pageSize
// The text field should expand horizontally, but have // a fixed height
//    /** A button for adding new arguments to the table. */ //    private JButton add; // //    /** A button for removing arguments from the table. */ //    private JButton delete;
"/*                 * Synch is needed because multiple threads can update the counts.                 */"
// Unique Barrier creation ensured by synchronized setup
"/*     * protected void initializeTableModel() { tableModel = new     * ObjectTableModel( new String[] { ArgumentsPanel.COLUMN_NAMES_0,     * ArgumentsPanel.COLUMN_NAMES_1, ENCODE_OR_NOT, INCLUDE_EQUALS }, new     * Functor[] { new Functor(""getName""), new Functor(""getValue""), new     * Functor(""isAlwaysEncoded""), new Functor(""isUseEquals"") }, new Functor[] {     * new Functor(""setName""), new Functor(""setValue""), new     * Functor(""setAlwaysEncoded""), new Functor(""setUseEquals"") }, new Class[] {     * String.class, String.class, Boolean.class, Boolean.class }); }     */"
// if parameter name exists in http request // then change its value with value obtained with regular expression
"/*     * ------------------------------------------------------------------------     * Constructors     * ------------------------------------------------------------------------     */"
// must be defined
// Label // count // Mean // median // 90% // Min // Max // Error %age // Throughpur // pageSize
// Set up the local address if one exists
// This column actually consists of a row with two sub-columns // The first column contains the labels, and the second // column contains the fields.
// Default checked // $NON-NLS-1$
// Instantiate requestview classes
// if use dynamic graph size is checked, we disable the dimension fields
// remove any port specification // $NON-NLS-1$ $NON-NLS-2$
// Sampler selection
// e.g. started from IDE with full classpath // Allow override $NON-NLS-1$ $NON-NLS-2$
// Ensure transient object is created by the server
// draw the Y axis
// add a \r\n
// the test plan has to have more than 200 samples // for it to generate half way decent distribution // graph. the larger the sample, the better the // results.
// e.g. some kinds of invalid URL
// Set up the graph with header, footer, Y axis and graph display
// DELAY DEVIATION
// Ensure that directory URLs end in "/" // $NON-NLS-1$ // $NON-NLS-1$
// already include the \r\n
"/*             * The following is needed for HTTPClient.             * (originally tried doing this in HTTPSampler2,             * but it appears that it was done too late when running in GUI mode)             * Set the commons logging default to Avalon Logkit, if not already defined             */"
// last \r\n before response data
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // jmeter.log // $NON-NLS-1$ // sample result log file // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Lazy init
"/*     * -----------------------------------------------------------------------     * Methods     * -----------------------------------------------------------------------     */"
"/*     * Listen to test and handle tidyup after non-GUI test completes.     * If running a remote test, then after waiting a few seconds for listeners to finish files,     * it calls ClientJMeterEngine.tidyRMI() to deal with the Naming Timer Thread.     */"
// All needed to ensure re-usablility
// only add Summariser if it can not be shared with the ResultCollector
// use later
// null means use the default
// Process command line property definitions // These can potentially occur multiple times
// Dynamic proxy overrules static proxy
// AVG DELAY
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ // removed expiration because it's just an annoyance for static cookies
// N.B. HostConfiguration.equals() includes proxy settings in the compare.
// If we have both file as body, and form data, then only form data will be sent
// Replacement only needs to occur when starting the engine // @see StandardJMeterEngine.run()
// Set up any required Proxy credentials
// for result
// Prepare the Request tabbed pane
// Deliberate use of deprecated ctor // Create non-GUI version to avoid headless problems
// Allow HttpClient to handle the redirects:
// This is a daemon thread, which should only reach here if there are other // non-daemon threads still active
// Set all the headers from the HeaderManager
// Hint to background color on bottom tabs (grey, not blue)
"/*             * GenericController sub_1 = new GenericController();             * sub_1.addTestElement(new IfController(""3==3""));             * controller.addTestElement(sub_1); controller.addTestElement(new             * IfController(""false==true""));             */"
// Because CollectionProperty.mergeIn will not prevent adding two // properties of the same name, we need to select the first value so // that this element's values prevail over defaults provided by // configuration // elements:
"/*     * Evaluate the condition, which can be:     * blank or LAST = was the last sampler OK?     * otherwise, evaluate the condition to see if it is not ""false""     * If blank, only evaluate at the end of the loop     *     * Must only be called at start and end of loop     *     * @param loopEnd - are we at loop end?     * @return true means OK to continue     */"
// 300 codes tell client to do actions
"/*     * Use regexes to match the source data     */"
// This is applied to fields that should cause a restart when changed // $NON-NLS-1$
// Proxy can take some while to start up; show a wating cursor
//- action names
// We have credentials - should we set pre-emptive authentication?
// Prevent both redirect types from being selected
// We don't know how many entries will be skipped
// Add any files
// Change Cancel label to Close //$NON-NLS-1$
// We do not know the char set of the file to be uploaded, so we set it to null
"/*     * Update the current field. The addend is only expected to be +1/-1, but     * other values will work. N.B. the roll() method only supports changes by a     * single unit - up or down     */"
// We do not know what the char set of the file is
//$NON-NLS-1$ // Set default SAVE menu item to disabled since the default node that // is selected is ROOT, which does not allow items to be inserted.
// Set the multipart for the post
// Is Destination setup static? else dynamic // $NON-NLS-1$ // default to maintain compatibility
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // Look and Feel prefix // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ enable/disable // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Used for per-thread/user numbers
// For example: // jar:file:/JMeter/lib/ext/ApacheJMeter_core.jar!/org/apache/jmeter/util/JMeterVersion.class // or if using an IDE         // file:/workspaces/JMeter/build/core/org/apache/jmeter/util/JMeterVersion.class
// Used by SampleSaveConfigurationConverter.unmarshall()
"/*     * Implementation notes:     *     * All of the methods in this class are currently read-only. If update     * methods are included in the future, they should be defined so that a     * single instance of JavaSamplerContext can be associated with each thread.     * Therefore, no synchronization should be needed. The same instance should     * be used for the call to setupTest, all calls to runTest, and the call to     * teardownTest.     */"
// Note that sampleStarted() and sampleStopped() is not made to appear // in synch with sampleOccured() when replaying held samples. // For now this is not critical since sampleStarted() and sampleStopped() // is not used, but it may become an issue in the future. Then these // events must also be stored so that replay of all events may occur and // in the right order. Each stored event must then be tagged with something // that lets you distinguish between occured, started and ended.
// Test ignore trailing split characters // Ignore adjacent delimiters
// Resource names for column headers // $NON-NLS-1$
// Calculate the test duration. Needs to xAxis Labels and getData.
// Verify for a ".." component at next iteration
// Look for arguments elements in the target controller or higher up:
// Create the panels for the regexp tab
// Not an expression (isn't or can't be), not null. // may throw IllegalArgumentExc.
// go to first line
// For all the file multiparts, we must revert the hiding of // the actual file content
// Construct a multi-line string with all matches
// Buffer to hold the put body, except file content
// Cache of parsers - parsers must be re-usable
// Should be true
// Add regexp tester pane // $NON-NLS-1$ // $NON-NLS-1$
// empty init // $NON-NLS-1$
// nothing to do
// if other node type, we will just skip it
// NAME
// description Panel
// assume text output - script can override if necessary
// default to name of element
// number Panel
// should be quicker to find the editors if they are registered.
// information display Panel
// boolean resized = true;
// Check if alias is suitable here, rather than waiting for connection to fail
// OK, we still have some data, restore it
// rounds!
// Check if we should send only placeholder text for the // file content, or the real file content
// Implemented by parent class
// Used by itemListener // $NON-NLS-1$
// Take length from file
// Use this to override file length
// All the other headers are set up by HTTPSampler2.setupConnection()
// No header provided
// so we don't generate chunked encoding
// Execute the sample. In this case sleep for the // specified time, if any
// Write the EOL separately so we generate LF line ends on Unix and Windows // $NON-NLS-1$
// key: name (lowercase) from java.sql.Types; entry: corresponding int value
// will use chunked encoding
// Some headers are set by executeMethod()
// Add local system properties, if the file is found //$NON-NLS-1$
// add the remaining parts
// do not check hashcodes; unequal objects may have equal hashcodes
// If file encoding is specified, read using that encoding, otherwise use default platform encoding
// System.err.println("Enable Restart");
// the host matches a domain; use its key
// This should now work
"/*     * Handles groupingMode. actionPerfomed is not suitable, as that seems to be     * activated whenever the Proxy is selected in the Test Plan     * Also handles samplerTypeName     */"
//Get all fields in java.sql.Types and store the corresponding int values
// Query types (used to communicate with GUI) // N.B. These must not be changed, as they are used in the JMX files // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// no existing file or not valid // Alphanum to avoid issues with command-line quoting // we use same password for both
// Not sure we can test anything else here
// read first line and forget
//contentLength > 0 ? contentLength : DEFAULT_INITIAL_BUFFER_SIZE);
// first response
// save the latency
// Set up the defaults (may be overridden below)
// NOTUSED private Class PARSERCLASS = null;
// Should // not // detect // trailing // option
// drop empty trailing content
// Was there an error?
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.AbstractJMeterGuiComponent#clearGui()     */"
// Delegate the final check to the typeEditor:
// Check that other encoding is not the current encoding // TODO - charset?
"/* Make transient as we don't want to save the SimpleDataFormat class     * Also, there's currently no way to change the value via the GUI, so changing it     * later means editting the JMX, or recreating the Listener.     */"
// Write end of multipart
// message includes the file name
// These constants are used both for the JMX file and for the setters/getters // $NON-NLS-1$
// N.B. These must agree with the new member names in SampleSaveConfiguration // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Set up the table itself
// everyone is free to swing on its side :) // add(infoPanel, BorderLayout.EAST);
// dimension of the SplineGraph is the same // resized = false;
// Sample number (string) // Start Time // Thread Name // Label // Sample Time // Status // Bytes
// The subject may be either a host or a domain
// getParentFile() may not work on relative paths
// dimension changed // resized = true;
// Default for writing//$NON-NLS-1$
// As a connection is held by only one thread, we cannot already have a  // preparedStatementMap put by another thread
// we want to return the context that is actually in the map // if it's the first put we will have a null result
// PreparedStatementMap is associated to one connection so  //  2 threads cannot use the same PreparedStatement map at the same time
//flag - if all machines within a given domain can access the variable. //(from http://www.cookiecentral.com/faq/ 3.5)
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
"/*     * N.B. NoThreadClone is used to ensure that the testStarted() methods will share the same     * instance as the sampleOccured() methods, so the testStarted() method can fetch the     * Totals accumulator object for the samples to be stored in.     */"
// Add the main panel and the graph
// Do we have some data, or a trailing empty field? // we have some data // we've started a field // Just seen ""
// First write the start multipart file // TODO - charset?
// Delete any properties whose name converts to the empty string
// Column renderers
// Use this instead of getLabelResource() otherwise getDocAnchor() below does not work
// Retrieve the formatted data using the same encoding used to create it // TODO - charset? // Write the actual file content
// Note this test will fail if a property is added or // removed to any of the components used in the test // files. The way to solve this is to appropriately change // the test file.
// We just add placeholder text for file content // $NON-NLS-1$ // Write the end of multipart file
// =================================== CSV quote/unquote handling // ==============================
// We just add placeholder text for file content // $NON-NLS-1$
// Write the form section
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// First the multipart start divider
// Add any parameters
// End the previous multipart
// Set up footer of table which displays numerics of the graphs
// Write multipart for parameter
// If there are any files, we need to end the previous multipart
// Generate x-axis label and associated color
// Write multipart for file
// And the end of the file multipart
// Set up the table with footer
// Add the end of multipart
// finally, merge the names so it's clear they've been merged
// internal list of all results
// Use for x-axis scale
"/*     * Finds all classes that extend the class, searching in the listAllClasses     * ArrayList.     *     * @param theClass     *            the parent class     * @param listAllClasses     *            the collection of classes to search in     * @param listSubClasses     *            the collection of discovered subclasses     * @param innerClasses     *            indicates whether inners classes should be included in the     *            search     */"
// Allow access to context and variables directly //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// If we have a file, but no data, then read the file
// $NON-NLS-1$ // Maximum connection retries
// Don't save empty comments - except for the TestPlan (to maintain compatibility)
// Now we just construct any multipart for the files // We only construct the file multipart start, we do not write // the actual file content
// we're sure that there is one file because of // getSendFileAsPostBody method's return value.
// Exception in progress
// N.B. this needs to be done before opening the connection
// Write boundary end marker
// get access to buffer
// wrap read() methods to track output buffer
// Can't have two matching cookies
// Preload the output so that can be read back as HTTP
// reset colors index
// Allow testcode access to the settings
// indicate that an error occured
// List of value by sampler
// make sure buffer details // track the output
// Sampling proper - establish the connection and read the response: // Repeatedly try to connect:
// canvas size
"/*         * A HTTP RESPONSE HEADER LOOKS ALOT LIKE:         *         * HTTP/1.0 200 OK Date: Wednesday, 02-Feb-94 23:04:12 GMT Server:         * NCSA/1.1 MIME-version: 1.0 Last-modified: Monday, 15-Nov-93 23:33:16         * GMT Content-Type: text/html Content-Length: 2345 \r\n         */"
// Set details from the actual response // Needs to be done before response can be stored
// Characters per second to emulate
// Add all the headers from the HeaderManager
// we don't want interrupt to try disconnection again
// Draw the graph
// Test can't have a duration more than 2^31 secs (cast from long to int)
// Override all the super-class Socket methods.
"/*     * The method will check to see if JMeter was started in NonGui mode. If it     * was, it will try to pick up the proxy host and port values if they were     * passed to JMeter.java.     */"
// Calculate intermediate values (if needed)
// Look for special Cookie request //$NON-NLS-1$
// log.debug("data["+s+"]["+idx+"]: " + data[s][idx]);
// $NON-NLS-1$ // $NON-NLS-1$ // default is not in range of a byte
// Force reload data
"/*         * Consider using Apache commons pool to create a pool of document         * builders or make sure XMLParserUtils creates builders efficiently.         */"
"/*     * This method uses Apache soap util to create the proper DOM elements.     *     * @return Element     */"
// Not 'else if' because forceReloadData 
// Reload data from file
// Reload data form internal list of results
// Button
// timeout to retrieve wsdl when server not response
// NOTUSED String portname = pnode.getAttribute("name"); // used to check binding, but now it doesn't. it was // failing when wsdl did not using binding as expected
// check soap12
"/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createSocket()     */"
// Search field
// Check URL
// get the node
// checkboxes
// revert to previous behaviour //$NON-NLS-1$ //$NON-NLS-2$
// $NON-NLS-1$ // default: bold
// get the soap:operation
// Samplers and Controllers need not apply ... // but AbstractThreadGroup (Controller) is OK
// default: circle
// there should only be one soap:operation node per operation
"/*     * Cached copy of Totals for this instance.     * The variables do not need to be synchronised,     * as they are not shared between threads     * However the contents do need to be synchronized.     */"
// first we iterate through the bindings
// Create the test file content
// default option
// now we iterate through the operations
// if the first child is soap:operation // we add it to the array
// For unit tests, @see TestCSVSaveService
// Remove quotes from charset name
// get ../ or ../../ etc.
// Keep copies of the two editors needed
// find index of path start
// Look for a case variation
// absolute URL
"/*     * @see org.apache.jmeter.gui.action.Command#getActionNames()     */"
// ditto // $NON-NLS-1$
// find path endIndex
// Try a real encoded argument
// install new path
// Must be done before setContentType
// This ensures tha HttpClient knows about the protocol
// Now allow the URL handling to work.
//$NON-NLS-1$ //$NON-NLS-2$  //$NON-NLS-1$
// now we create the compiled pattern and // add it to the arraylist
// not needed for HttpClient
// Perform the encoding
// LRUMap does not support generics currently
// We assume the name is always encoded according to spec
// The value is encoded in the specified encoding
//$NON-NLS-1$ //-- JMX tag values
// Match /../[../] etc. // $NON-NLS-1$
// skip expensive processing if it cannot apply // $NON-NLS-1$
// document or context-relative URL like: // '/path/to' // OR '../path/to' // OR '/path/to/../path/'
// path is between idx='pathStartIndex' (inclusive) and // idx='pathEndIndex' (exclusive)
// Encode according to the HTTP spec, i.e. UTF-8
// get the text response and image icon // to determine which is NOT null
// this.READER = new BufferedReader(new // FileReader(this.SOURCE)); // parse(this.READER,el);
// we clean the line to get // rid of extra stuff
// now we set request method
// increment the current count
// we filter the line first, before we try // to separate the URL into file and // parameters.
// current default language properties file
// in the case when the filter is not set, we // parse all the lines
// Find the last controller in the target to store the // sampler there:
// check the URL for "?" symbol
// variables maintained by server code // @GuardedBy("sampleStore") // maintain separate count of samples for speed
// Bug can generate RTE
// we don't want interrupt to try disconnection again // We don't want to continue using this connection, even if KeepAlive is set // May not exist
// if the string contains atleast one double // quote and checkMethod is true, go ahead // and tokenize the string.
// we return the original string
// Test CSV file with a header line and recycle is true
// convert the Parameters
// Send different event wether we are merging a test plan into another test plan, // or loading a testplan from scratch
// avoid possible NPE when trimming the name
// number of nodes
// the keystore for use by the Proxy
// There's a few properties which are excluded from this processing:
// number of non extreme nodes (_m-2)
// Huh! don't store this one!
// the number of nodes is defined by the length of r
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.util.LocaleChangeListener#localeChanged(org.apache.jmeter.util.LocaleChangeEvent)     */"
// grab the nodes
// read one line at a time using // BufferedReader
// If set, this is the regex that is used to extract the status from the // response // NOT implemented yet private static final String STATUS_REGEX = // JMeterUtils.getPropDefault("tcp.status.regex","");
// computes interpolation coefficients
//OK //OK // Don't copy this; it is per instance resultFileName = res.resultFileName;
// creation of the interpolation structure
// local variables
// we tokenize using double quotes. this means // for tomcat we should have 3 tokens if there // isn't any additional information in the logs
// Allow for old format file without mechanism support
// there should only be one token // that starts with slash character
// do nothing. it's naive, but since // the utility is meant to parse access // logs the formatting should be correct
// initialize system structures (just to be safe)
// initialize the diagonal of the system matrix (A) to 4
// Test that only loops twice
// let notified threads move on and get lock on managersInUse
// initialize the two minor diagonals of A to 1
// no implementation at this time, since // we bypass the idea of having a console // tool to generate test plans. Instead // I decided to have a sampler that uses // the generator and parser directly
// initialize B
// we do a quick check to see if any // filters are set. If not we just // return false to be efficient.
// double check this logic make sure it // makes sense
//+ JMX file attributes // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX file attributes
// di (degree 0)
// Check if the entry index corresponds to a tag, if so return the tag // This also works if the tags were not translated
// exclusion filter assumes most of // the files are used, therefore // usefile is set to true, unless // it matches.
// the other object has an empty value, so remove this value from the merged object
// Request headers column renderers
//++JMX attribute names - do not change the values! // These were moved from SMTPSampler, which is why the prefix is still SMTSampler // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //--JMX attribute names
// bi (degree 2)
// ai (degree 3)
"/*     * Send POST data from <code>Entry</code> to the open connection.     *     * @param connection     *            <code>URLConnection</code> where POST data should be sent     * @return a String show what was posted. Will not contain actual file upload content     * @exception IOException     *                if an I/O exception occurs     */"
// check that there aren't any extra entries
// No text, but using fragment mode
// Obtain message formats: //$NON-NLS-1$ //$NON-NLS-1$
// intermediate arrays
// Jacobi convergence test
// init newX and oldX arrays to 0
// verify t belongs to the curve (range [0, _m-1])
// seek the good interval for t and get the piece of curve on it
// the polynomial calculation is done by the (fast) Euler method
// clear results table before filling
// Display with same order HTTP protocol
// If we know the content length, we can allow the reading of // the request to block until more data arrives. // If it is chunked transfer, we cannot allow the reading to // block, because we do not know when to stop reading, because // the chunked transfer is not properly supported yet
// computes auto-scaling and absolute plots
// can be null - e.g. if URL was invalid
// Parsed request headers
// shouldn't draw negative values
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#init()     */"
// $NON-NLS-1$ // SOAP request (generally) //blank name // $NON-NLS-1$
//blank name // $NON-NLS-1$
// Outer only once + ("three" + ("four" + "five" + "six" + "seven") * innerLoopCount) * outerLoopCount;  
// Key // Value
// invalid dates must be treated as expired
// Set up the 2nd table 
// Set up the 1st table Result with empty headers
// could be null if it has been deleted via NameUpdater
// Set up the 3rd table 
// Create the split pane
//$NON-NLS-1$ // Concatenate query post if exists
// better ISO-8859-1 than UTF-8
// Find all the classes which implement the JavaSamplerClient // interface.
/* Implements JMeterGuiComponent.createTestElement() */
/* Implements JMeterGuiComponent.modifyTestElement(TestElement) */
// Entry tends to be ignored ...
"/*     *  The datasource is set up by testStarted and cleared by testEnded.     *  These are called from different threads, so access must be synchronized.     *  The same instance is called in each case.    */"
// Default (can be overridden by the script)
/* Overrides AbstractJMeterGuiComponent.configure(TestElement) */
"/*         * If previous time is zero, then target will be in the past.         * This is what we want, so first sample is run without a delay.        */"
// N.B. some engines (e.g. Javascript) cannot handle certain declareBean() calls // after the engine has been initialised, so create the engine last
// Catch evaluation errors
// Settings panes
// the number of non extreme nodes is the number of intervals // minus 1, i.e. the length of r minus 2
// initialize to empty string, this will fail the assertion
// No max-age && No expires
// the upper limit of the curve range belongs by definition // to the last interval
"/*             * N.B. Revision 323346 introduced the ClassCast check, but then used iter.next()             * to fetch the item to be cast, thus skipping the element that did not cast.             * Reverted to work more like the original code, but with the check in place.             * Added a warning message so can track whether it is necessary             */"
// computes relative auto-scaled plots to fit in the specified area
// return label
/* Implements JavaSamplerClient.setupTest(JavaSamplerContext) */
// initialize GUI.
/* Implements JavaSamplerClient.teardownTest(JavaSamplerContext) */
/* Implements JavaSamplerClient.getDefaultParameters() */
"/*     *  N.B. this class is shared between threads (NoThreadClone) so all access to variables     *  needs to be protected by a lock (either sync. or volatile) to ensure safe publication.     */"
// Jacobi system resolving // results are stored in _rS // computes the coefficients (di, ci, bi, ai) from the results
// Test mail button
// Allow Sampler access // to test element name
// Don't add delimiter first time round
// Only set the default label if it has not been set
// Used for per-thread/user numbers // Cannot be static, as random numbers are not to be shared between instances
// failed to initialise the class
// but we do trap this error to make tests work better
// If the Parameter data can be converted (i.e. no names), we  // warn the user that the Parameter data will be lost.
// show the grid lines, to turn it off, set it to zero
// reset the paint counter
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// No point continuing // Mainly for bsh.EvalError
// variables are unlikely to contain spaces, so most likely a translation
/* Implements TestStateListener.testStarted() */
// Failures count
/* Implements TestStateListener.testStarted(String) */
/* Implements TestStateListener.testEnded(String) */
// TestStateListener implementation
// Set default values //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// set the Y Axis to round
// See modifyTestElement
"/*             * Textfield uses \n (LF) to delimit lines; we need to send CRLF.             * Rather than change the way that arguments are processed by the             * samplers for raw data, it is easier to fix the data.             * On retrival, CRLF is converted back to LF for storage in the text field.             * See             */"
// log.info(getLabel()+" "+getFilename());
// The property name to be used to look up the display string
// Set response data
"/*     * Constructor is initially called once for each occurrence in the test plan.     * For GUI, several more instances are created.     * Then clear is called at start of test.     * Called several times during test startup.     * The name will not necessarily have been set at this point.     */"
// script can also use setResponseData() so long as it returns null
// This assumes the header names are all single words with no spaces // word followed by 0 or more repeats of (non-word char + word) // where the non-word char (\2) is the same // e.g. abc|def|ghi but not abd|def~ghi // $NON-NLS-1$ // last entries may be quoted strings
// Set if we were successful or not
// ensure counts are updated correctly
// These variable names must have .displayName properties and agree with the getXXX()/setXXX() methods // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// private static final String LABEL_DEFAULT = "JavaTest";
"/*     * Utility method to set up all the values     */"
// Let the GUI show that it will not be encoded
// set this false to suppress some items for use in HTTP Request defaults
// Make sure the sample start time and sample end time are recorded // in order not to confuse the statistics calculation methods: if //  an error occurs and an exception is thrown it is possible that // the result.sampleStart() or result.sampleEnd() won't be called
// If we're not storing subsequent samplers, we'll need the // first sampler to do all the work...:
// Find the first empty line of the multipart, it signals end of headers for multipart // Agents are supposed to terminate lines in CRLF:
// Used by Request Panel //$NON-NLS-1$
"/*     * Returns the selection value as a int,     * with the value set to zero if it is out of range.     */"
// Record sample start time.
// Are we uploading? // $NON-NLS-1$
// Generate a random-ish offset value using the current time.
// These items are shared between threads in a group by the clone() method // They are initialised by testStarted() so don't need to be serialised
//$NON-NLS-1$ key for HashMap
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#clearData()     */"
// Probably a missing // jar
// Record end time and populate the results.
// The name of the sampler
//private ImageIcon runningIcon = JMeterUtils.getImage("thread.enabled.gif");
// Only do the calculation if it is needed
// property values are strings
// Execute the sample. In this case sleep for the // specified time.
// read 1st line // read 5 lines + restart to file begin // line 2 // line 3 // line 4 // line 5 // return to 2nd line (first line is names)
// String used to indicate a null value
// Decent value for timers
// read-only after class init
// Find the data sent to the mirror server, which the mirror server is sending back to us // We assume the headers are in ISO_8859_1, and the body can be in any content encoding. // Therefore we get the data sent in ISO_8859_1, to be able to determine the end of the // header part, and then we just construct a byte array to hold the body part, not taking // encoding of the body into consideration, because it can contain file data, which is // sent as raw byte data
// based on e291. Getting the Name of a JDBC Type from javaalmanac.com // http://javaalmanac.com/egs/java.sql/JdbcInt2Str.html
// Based on query return value, get results
// User provided incorrect query type
// N.B. Originally there was only one filename, and only get(RETR) was supported // To maintain backwards compatibility, the property name needs to remain the same // $NON-NLS-1$
// Special case for the TestPlan's Arguments sub-element:
// Use with SSL connection
// Remember this was first in its batch
// Re-parse (now it's the http request over SSL)
// //////////////////////////////////////////////////////////// // // Methods used to store and retrieve the MailerVisualizer. // // ////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////// // // Methods to implement the ModelListener. // // ////////////////////////////////////////////////////////////
// Should not happen, but if it does we don't want to continue 
// Create the panels for the cssJquery tab
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testStarted()     */"
// Save the value in the variable if present
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testEnded()     */"
// most current subclasses can process text
// For identifying log messages
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.testelement.TestStateListener#testStarted(java.lang.String)     */"
// in case
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
// Could be SampleResult or AssertionResult
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()     */"
// can't have an output parameter type null
// thrown by Derby JDBC (at least) if there are no "?" markers in statement
// add a message when no request data (ex. Java request)
// called by HttpRequestHdr
// save the current count
// LRUMap is not generic
// to save last select tab (raw/parsed)
// i starts at 1
// Result column renderers
// Remove any additional values from previous sample
// call to TestBeanHelper.prepare() is intentional
// Response headers column renderers
// Can't add a TestPlan anywhere
// $NON-NLS-1$ // Get the previous count
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Keep a record of the pre-thread pools so that they can be disposed of at the end of a test
// Ensure output follows version
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(org.apache.jmeter.testelement.TestElement)     */"
// Response fields column renderers
// Now, parse initial request (in case it is a CONNECT request)
// Test leading split characters
// calling disconnect doesn't close the connection immediately, // but indicates we're through with it. The JVM should close // it when necessary. // we don't want interrupt to try disconnection again // Disconnect unless using KeepAlive
// Check if the exclude pattern is matched
// the child to be removed will always be 0 'cos as the nodes are // removed the nth node will become (n-1)th
// i.e. if we want per thread pooling // pool will be created later
// Look for elements directly within the HTTP proxy:
"/*     * Set up the DataSource - maxPool is a parameter, so the same code can     * also be used for setting up the per-thread pools.    */"
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$
// Add cssJquery tester pane // $NON-NLS-1$ // $NON-NLS-1$
// log is required to ensure errors are available
// If no expressions are specified, we let the sample pass
// used to hold per-thread singleton connection pools
"/*     * Wrapper class to allow getConnection() to be implemented for both shared     * and per-thread pools.     *     */"
// one space for blank header // $NON-NLS-1$  // one space for blank header  // $NON-NLS-1$
// Check that we have a content type
// i.e. shared pool
// in the rare case the WSDL is protected and requires // authentication, use the AuthManager to set the // authorization. Basic and Digest authorization are // pretty weak and don't provide real security.
// make sure setting the new isolation mode is done in an auto committed transaction
// Reset it
// Will use default isolation
// We always want to override the HTTPS scheme, because we want to trust all certificates and hosts
// Assume we will be successful
// set the auth. thanks to KiYun Roe for contributing the patch // I cleaned up the patch slightly. 5-26-05
// create tables // The object used for each row
// The environment is supposed to use String keys only
// It is not possible to access the actual HTTP response code, so we assume no data means failure
// $NON-NLS-1$ // Create the panels for the other tabs
// assume default charset is OK here //      <apache-bsf.version>2.4.0</apache-bsf.version>
"/*     * We use a LinkedBlockingQueue (rather than a ConcurrentLinkedQueue) because it has a     * poll-with-wait method that avoids the need to use a polling loop.     */"
// Using onMessage Listener
// We are displaying a SampleResult
// Allow for short/negative times
// reset for reuse
// called from threadFinished() thread
//GuardedBy("this")
// $NON-NLS-1$ // $NON-NLS-1$  // $NON-NLS-2$
// reload after adding alias
// Not a real sampler
// response message label
// Parsed response headers
// renamed from clear
// Done
// Reset search
// Check if we have it in the cache
// (TestElement) // el.getProperty(JMSSampler.JMS_PROPERTIES).getObjectValue());
// (TestElement) // el.getProperty(JMSSampler.JNDI_PROPERTIES).getObjectValue());
// restore tabbed pane parsed if needed
// Button group resources
// restore last selected tab
// append '/' if this isn't the last token or it is but the original // path terminated w/ a '/'
// NO NEED TO INITIALIZE WHEN getCreateOneInstancePerSample  // is true cause it will be done in sample
"/*                             * Calling a method via reflection results in wrapping any                             * Exceptions in ITE; unwrap these here so runProtected can                             * allocate them correctly.                             */"
// if concurrent download emb. resources, add to a list for async gets later
// now that we have stripped the file, we can parse the parameters
// These are the names of properties used to define the labels // $NON-NLS-1$
// Is it only the parameter values which are encoded in the specified // content encoding, the rest of the query is encoded in UTF-8 // Therefore we compare the whole query using UTF-8
// if checkMethod on the token is true // we tokenzie it using space and escape // the while loop. Only the first matching // token will be used
// Button group resources when Bytes Message is selected
// $NON-NLS-1$ // Button group resources
// Add variables for access to context and variables //$NON-NLS-1$
"/**     * Method should add the JUnit testXXX method to the list at     * the end, since the sequence matters.     * @param methodName     */"
// here is the core routine to find appropriate cookie manager and // check it's not being used.  If used, wait until whoever's using it gives // it up
// First have to release the cookie we were using so other // threads stuck in wait can move on
//++ These names are used in the JMX files, and must not be changed
// Cache for file. Only used by sample() in a single thread
// Cache for bytes-message, only used when parsing from a file 
// Potentially expensive; do it once
// Allow shorthand names
// Display cookie in headers table (same location on http protocol)
"/*     * N.B. These entry indexes MUST agree with the SearchControls SCOPE_LEVELS, i.e.     *      * javax.naming.directory.SearchControls.OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE     *      * These have the values 0,1,2 so can be used as indexes in the array     * as well as the value for the search itself.     *      * N.B. Although the strings are used to set and get the options, language change     * does not currently cause a problem, because that always saves the current settings first,     * and then recreates all the GUI classes.     */"
// list of parsers //$NON-NLS-1$
// quieten Findbugs // default - do nothing
// Add styles to use for different types of status messages
// Prepare the Results tabbed pane
//    /** //     * Resize the table columns to appropriate widths. //     * //     * @param _table //     *            the table to resize columns for //     */ //    private void sizeColumns(JTable _table) { //    }
// Not found
"/*     * The following strings are used in the test plan, and the values must not be changed     * if test plans are to be upwardly compatible.     */"
// Add search text extension
// count limit // time limit // attributes (null = all) // return object ? // dereference links?
// ------------- get/set properties ----------------------//
// These static variables are only used to convert existing files
// will be the 3rd option, which is not checked specifically
// Internal information only // read from saveservice.properties file// $NON-NLS-1$ // Must match Revision id value in saveservice.properties,  // used to ensure saveservice.properties and SaveService are updated simultaneously // Expected value $NON-NLS-1$ // read from properties file// $NON-NLS-1$
// Maximum size that we will display
// This is the name of the HotSpot Diagnostic platform MBean (Sun Java 1.6) // See: http://download.oracle.com/javase/6/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html
// Add sample
// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
// Default wait (ms) for a message if timeouts are not enabled // This is the maximum time the sampler can be blocked.
// No need to synch/ - only used by sampler and ClientPool (which does its own synch)
// This will be null if initialization succeeds.
// If true, start/stop subscriber for each sample
// Prepare the common tab
// run threadStarted only if Destination setup on each sample
// the createTest() method creates an extra context which needs to be closed
// If so, we need to start collection here
// init right side with first render
// run threadFinished only if Destination setup on each sample (stop Listen queue)
// MapNames are Strings
// to restore last tab used
//log.warn("DEBUG",ex); // e.g. javax.naming.SizeLimitExceededException: [LDAP: error code 4 - Sizelimit Exceeded]; remaining name '' //                                                123456789012345678901 // TODO: tidy this up
// Disabled thread start if listen on sample choice
// Don't start yet if stop between samples
// listen on sample 
// element.setProperty(TCPSampler.FILENAME, filename.getText());
// Can be null if init fails
// Instantiate render classes
// listen on sample
"/*     *   Write out search results in a stable order (including order of all subelements which might     * be reordered like attributes and their values) so that simple textual comparison can be done,     * unless the number of results exceeds {@link #MAX_SORTED_RESULTS} in which case just stream     * the results out without sorting.     */"
// so we break the loops in SampleWithListener and SampleWithReceive
// preset to "Text" option
// to restore last selected tab (better user-friendly)
// Now put the current GUI in place. [This code was copied from the // EditCommand action -- we can't just trigger the action because that // would populate the current node with the contents of the new GUI -- // which is empty.] // Fetch once // Probably caused by unit testing on headless system
// Remove old right side
// create and add a new right side
// To display current sampler result before change
// Assume failure
// Cookie //$NON-NLS-1$
//++ These are JMX names, and must not be changed // $NON-NLS-1$
"/*     * Strings used to set up and process actions in this menu The strings need     * to agree with the those in the Action routines     */"
// Convert the old test plan entry (which is the language dependent string) to the resource name
// We use the default character set encoding of the JRE
// Default to be applied
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
//++ These are JMX file attribute names and must not be changed // $NON-NLS-1$
// N.B. Cannot change value, as that is used in JMX files // $NON-NLS-1$
//-- End of JMX file attribute names
// MENU_ADD_xxx - controls which items are in the ADD menu // MENU_PARENT_xxx - controls which items are in the Insert Parent menu
"/*     * perform the checks on the resources     *      */"
// Programming error. Don't continue.
// Gui components
// can't be null - this is checked by canAddTo
// No body should have been sent
// Processes Assertions // display a SampleResult
// This check the state of the TestElement and if returns false it // disable the loaded node
// Translate alias to classname and then delegate to wrapped class
// Set the status for the node
// Samples inside InterleaveController        
// TEXTAREA LABEL
// Used for per-thread/user storage of increment in Thread Group Main loop
// // Member variables //
"/*         * Test:          * Before          * Selection Controller         *  - zero (default)         *  - simple controller 1         *  - - one         *  - - two         *  - simple controller 2         *  - - three         *  - - four         *  - five         *  - six         * After         *          * cond  = Switch condition          * exp[] = expected results         */"
// msgId not available until after send() is called // Note: there is only one admin object which is shared between all threads // interlock with Receiver
// if the directory already exists and is a directory, // we just renamed to "archive.date"
// TEXTAREA
// While (blank), previous sample OK - should loop until false
//$NON-NLS$
// define max scale y axis
// Outer only once + ("three" + "only once five and six" + ("four" + "seven") * innerLoopCount) * outerLoopCount;  
// replace _xAxisTitle to null (don't display x axis title)
// Test plan with OnlyOnceController inside inner loop // Set up the test plan
// Check that the query string is empty
// Outer only once + ("three" + "only once five and six" + "eight in interleave only once" + ("four" + "interleave" + "eleven") * innerLoopCount) * outerLoopCount;  
// assertEquals("Expected 4 lines",4,f.size());
// Create the StringFromFile function and set its parameters.
// *A next
// Lines colors
// Define chart type (line)
// Clear maps
// Y Axis ruler
// Increment cannot be < 1
// Constructor for GUI tests
// Defaults
// Manage legend placement
// Save the method name
// return new Dimension(width, 400);
// int width = getWidth();
// will always be within range of an int: as must be < width
// Test sending parameters which are urlencoded beforehand // The values must be URL encoded with UTF-8 encoding, because that // is what the HTTPArgument assumes // %C3%85 in UTF-8 is the same as %C5 in ISO-8859-1, which is the same as &Aring;
// Names for the cards // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// e.g unbind
// Take note of when buttong are changed so can change panel
// additional ctor for processing tests which use int parameters
//private static final Logger log = LoggingManager.getLoggerForClass();
// ensure only values are used
// Test sending data as ISO-8859-1
// Test sending data as UTF-8, with values similar to __VIEWSTATE parameter that .net uses
// Test sending data as UTF-8, with values that have been urlencoded, and // where we tell the sampler to urlencode the parameter values
// Check if it was a multipart http post request
// Do not use TestCase.run(TestResult) method, since it will // call setUp and tearDown. Doing that will result in calling // the setUp and tearDown method twice and the elapsed time // will include setup and teardown.
// The headers and body are divided by a blank line
// Check arguments // We should have one argument, with the value equal to the post body
// If we are loading a new test plan, initialize the tree with the testplan node we are loading
// Header may contain ;charset= , regexp extracts it so computed boundary is wrong
// Skip non-editable properties, that is: // Ignore hidden, read-only, and write-only properties
// This is needed to stop XStream keeping copies of each class
// test cases for making Url, and exercise method // addArgument(String name,String value,String metadata)
// Only contains LDAPArgument entries
// Same ViewResultsTree
//$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$
//sizeColumns(table);
// Needed by Visualizer interface
// chunk the output if necessary
// Educated guess
"/*     * Converts a class file from the text stored in a Jar file to a version     * that can be used in Class.forName().     *     * @param strClassName     *            the class name from a Jar file     * @return String the Java-style dotted version of the name     */"
// This 'other value' regex is deliberately weak, even accepting an empty string, to be useful when reporting malformed data. // $NON-NLS-1$
// Y Axis
// silent error, consider the curve is constant outside its range
//new Font("SansSerif", Font.PLAIN, 10)
// Ensure properties files don't use special characters
// enable embedded html resources
// ----------- get/set methods ------------------- //
// If the -j  or -l flag is set to LAST or LAST.log|LAST.jtl, then the last loaded file name is used to // generate the log file name by removing .JMX and replacing it with .log|.jtl
// sampleOccurred is called from multiple threads; not safe to write from multiple threads. // also decouples the file IO from sample generation
// ci (degree 1)
// Note: this is only used to implement TestIterationListener#testIterationStart // Since this is a frequent event, it makes sense to create the list once rather than scanning each time // The memory used will be released when the thread finishes
// For In build test case using this counter // create the new entry in the server
// Make sure decoding // follows input file
// Forget about all GUIs we've created so far: we'll need to re-created // them all!
// Find all jars in the search path
// annotation classes to check
// default is 1 // default is 0
// Support original property name // $NON-NLS-1$
// replace (update) attribute //$NON-NLS-1$ //$NON-NLS-2$ // add mobile phone number attribute //$NON-NLS-1$ //$NON-NLS-2$
// A CallableStatement can return more than 1 ResultSets // plus a number of update counts.
// TODO Charset ?
// record headers size to allow HTTPSampleResult.getBytes() with different options // $NON-NLS-1$ $NON-NLS-2$ // add 2 for a '\r\n' at end of headers (before data) 
// These are values for the TEST attribute above // $NON-NLS-1$
// $NON-NLS-1$ // end of TEST values
// In other GUI component, clearGUI resets the value to defaults one as there is one GUI per Element // With TestBeanGUI as it's shared, its default values are only known here, we must call setValues with  // element (as it holds default values) // otherwise we will get values as computed by customizer reset and not default ones
// a well-behaved browser is supposed to send 'Connection: close' // with the last request to an HTTP server. Instead, most browsers // leave it to the server to close the connection after their // timeout period. Leave it to the JMeter user to decide.
// Need to append something so delimiter is // added
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#createPopupMenu()     */"
// Must match _version property value in saveservice.properties // used to ensure saveservice.properties and SaveService are updated simultaneously // Expected version $NON-NLS-1$
// prepare highlighter to show text find with search command
// new search?
// Can occur at run-time // could be caused by the bsh Exceptions: // EvalError, ParseException or TargetError
// save search position
// put a warning if tika-app.jar missing (or some dependencies in only tika-core|parsers packages are using) // $NON-NLS-1$ $NON-NLS-2$ 
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#getMenuCategories()     */"
// read all sortedResults into memory so we can guarantee ordering
// Display not found message and reset search
// Resource keys cannot contain spaces, and are forced to lower case // $NON-NLS-1$ // $NON-NLS-2$
// must be done prior to sorting
// Read the header part, we will be looking for a content-length // header, so we know how much we should read. // We assume headers are in ISO_8859_1 // If we do not find such a header, we will just have to read until // we have to block to read more, until we support chunked transfer
// now set the individual categories (if any)
// $NON-NLS-1$ // No point trying these
"/*     * If non-null, then any object provided to invoke() is ignored.     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#getFileName()     */"
"/*     * Helper method to ensure that format is initialised if initializeLogging()     * has not yet been called.     */"
// saves current position in data List
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// If there's anything left ...
// assume it's senstive data
// should be a user provided class name
// Parent folder (or single message file)
// == ServerName from mail sampler
// Ensure any remaining contexts are closed
// ** These constants are used in the JMX files, and so must not be changed **
// String sampleLog = "C:/eclipse3/workspace/jmeter-21/bin/testfiles/sample_log1.jtl";
// key is the type to collect (usually long), value = count of entries
// N.B time pattern is passed to java.text.SimpleDateFormat
"/*         * Perform the sampling         */"
// Start timing
// treats last line specially // Last line // Allow for missing terminator
// Use the actual class so the name must be correct.
// special value
// Did sample succeed?
// For n values in an aggregate sample the average value = (val/n) // So need to add n * (val/n) * (val/n) = val * val / n
// Create empty properties
"/* (non-Javadoc)     * @see org.apache.log.LogTarget#processEvent(org.apache.log.LogEvent)     */"
// Requires JavaMail 1.4.2+
// Get session
// Get the store
// Get directory
// Don't save headers - they are already in the raw message
"/* (non-Javadoc)     * @see org.apache.jmeter.visualizers.request.RequestView#getPanel()     */"
// Save raw message
// Javadoc for the API says this is OK
// @GuardedBy("this") // Buffered reader
// Close connection
// not been set by any child samples
// Labels - don't make these static, else language change will not work
//Strip the response data before writing, but only for a successful request.
"/*     * Predefined format patterns, selected by the property log_format_type (see     * jmeter.properties) The new-line is added later     */"
"/*     * Helper method to set up the GUI screen     */"
// Cannot check the query string of the result, because the mirror server // replies without including query string in URL
// No need to log normally, as we set the status // $NON-NLS-1$ // $NON-NLS-1$
// default: 10 //$NON-NLS-1$
// $NON-NLS-1$ // may be null
// Used to separate attachment file names in JMX fields - do not change!
//-JMX file attribute names
// Process address lists
// create the certificate //rem ku:c=dig,keyE means KeyUsage:criticial=digitalSignature,keyEncipherment
// calculate message size
// Set up the sample result details
// inport the certificate
// Perform the sampling
// username / password incorrect
//+ JMX attributes - do not change the values // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// general exception
// process the sampler result
// throws ME
// throws IOE, ME
// import the signed CA cert into the store (root already there) - both are needed to sign the domain certificates
// ensure the application does not hang if it requests input
// Buttons
// when Enter is pressed, search start
"/*     * Permissible values:     *  true - match against headers     *  false or absent - match against body (this was the original default)     *  URL - match against URL     *  These are passed to the setUseField() method     *     *  Do not change these values!    */"
// default not visible
// short circuit traversal when found
// The DNAME which is used if none is provided // $NON-NLS-1$
// Search text in response data
// remove the g0,g1...gn vars
// strip the - // -- sequence .. it can either mean a change of state // to STATE_NO_OPTIONS or else a long option
// DocumentListener method
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#getPageTitle()     */"
// part is only needed if we // don't send an .eml-file
// getAllHeaders() is not yet genericised // throws ME
// desactivate or not specials regexp char
// throws ME // throws IOE, ME
// API not yet generic // throws ME
// Reset the status code if the message contains one
// All rows have this class
// we have at least one potential address
// Test sending data as UTF-8, with values that will change when urlencoded, and where // we tell the sampler to urlencode the parameter value
// local vars
//Synch is needed because a clear can occur while add occurs
"/*         * Server Settings         */"
"/*         * E-Mail Settings         */"
// Should behave the same for blank and LAST because success on input
// Better error than NPE
"/*         * Auth Settings         */"
// cached character == Integer.MAX_VALUE when invalid
"/*         * Security Settings         */"
"/*         * (non-Javadoc) Message Settings         */"
"/*         * Add the header panel         */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#reset()     */"
// Standard setup
"/*     * Low level invocation routine.     *     * Should only be called after any defaults have been applied.     *     */"
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Add the standard title
// expected
//p.add(makeButtonPanel(), BorderLayout.SOUTH);
// not compatible
// not compatible // must follow the checkbox setting
// ensure correctly set on initial display
// Might be NullProperty
//new Functor("setName"), // $NON-NLS-1$ // $NON-NLS-1$
// Thread pool Executor to get resources  // use a LinkedBlockingQueue, note: max pool size doesn't effect
// set properties using JAF
// handle body and attachments
// OK, because used in synchronised method
// i.e. mailBody is empty
// set from field and subject
// We have received one more sample
/*synchronousMode==true*/
// listener cannot be null here
// While (blank), previous sample failed - should run once
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#runReport()     */"
// OK, it has been supplied
"/* (non-Javadoc)     * @see java.lang.Runnable#run()     */"
// Methods used in creating the GUI
// could be <HTML lang=""> // $NON-NLS-1$
//private static ReportPlan plan;
// While (LAST), previous sample OK - should loop until false
// Helper method to get 1 ms resolution timing.
// Needs to be volatile as may be referenced from multiple threads // TODO see if this can be made final somehow
// Mongo is Thread Safe
// N.B. It seems that Opera needs a chain in order to accept server keys signed by the intermediate CA // Opera does not seem to like server keys signed by the root (self-signed) cert.
//there is no harm in trying to clear up
"/*    * Helper    */"
// - JMX names
// + JMX names, do not change their values
// default charset is deliberate here
// N.B. this will be a config element, so we cannot use the getXXX() methods
// Default to original behaviour, i.e. re-use connection
"/** * <p> * Super-class for TestElements that can be applied to main sample, sub-samples or both. * [Assertions use a different class because they use a different value for the {@link #getScopeName()} constant] * </p> * * <p> * Their corresponding GUI classes need to add the ScopePanel to the GUI * using the AbstractXXXGui methods: * <ul> * <li>createScopePanel()</li> * <li>saveScopeSettings()</li> * <li>showScopeSettings()</li> * </ul> * </p> */"
// N.B. this will be a config element, so we cannot use the setXXX() methods
"/*     * <p> Returns a <code>String</code> value for a character-delimited column     * value enclosed in the quote character, if required. </p>     *      * <p> If the value contains a special character, then the String value is     * returned enclosed in the quote character. </p>     *      * <p> Any quote characters in the value are doubled up. </p>     *      * <p> If the value does not contain any special characters, then the String     * value is returned unchanged. </p>     *      * <p> N.B. The list of special characters includes the quote character.     * </p>     *      * @param input the input column String, may be null (without enclosing     * delimiters)     *      * @param specialChars special characters; second one must be the quote     * character     *      * @return the input String, enclosed in quote characters if the value     * contains a special character, <code>null</code> for null string input     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#pageStarted()     */"
// Version information for test plan header // This is written to JMX files by ScriptWrapperConverter // Also to JTL files by ResultCollector // $NON-NLS-1$
//  Normal output //  ---- Debugging information ---- //  required-type       : org.apache.jorphan.collections.ListedHashTree //  cause-message       : WebServiceSampler : WebServiceSampler //  class               : org.apache.jmeter.save.ScriptWrapper //  message             : WebServiceSampler : WebServiceSampler //  line number         : 929 //  path                : /jmeterTestPlan/hashTree/hashTree/hashTree[4]/hashTree[5]/WebServiceSampler //  cause-exception     : com.thoughtworks.xstream.alias.CannotResolveClassException //  -------------------------------
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.JMeterGUIComponent#getLabelResource()     */"
// Catch errors and rethrow as ConversionException so we get location details
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#stopReport()     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.writers.PageSummary#setFileName(java.lang.String)     */"
// Don't use default for saving tristates //        element.setProperty(TCPSampler.CLOSE_CONNECTION, closeConnection.isSelected(), TCPSampler.CLOSE_CONNECTION_DEFAULT);
// Using index 0 is voluntary as child is removed in next step and added to new parent
// 5 columns size
// Insert a clone of the node, the original one will be removed by the exportDone method // the children are not cloned but moved to the cloned node // working on the original node would be harder as  //    you'll have to deal with the insertion index offset if you re-order a node inside a parent
// 3 columns size
// /** // * Creates one of the fields used to display the graph's current // * values. // * // * @param color the color used to draw the value. By convention // * this is the same color that is used to draw the // * graph for this value and in the choose panel. // * @param length the number of digits which the field should be // * able to display // * // * @return a text field configured to display one of the // * current graph values // */ // private JTextField createInfoField(Color color, int length) // { // JTextField field = new JTextField(length); // field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0)); // field.setEditable(false); // field.setForeground(color); // field.setBackground(getBackground()); // // // The text field should expand horizontally, but have // // a fixed height // field.setMaximumSize(new Dimension( // field.getMaximumSize().width, // field.getPreferredSize().height)); // return field; // }
// method called by add is synchronized //this is a different model from the one used by the result collector
//-- JMX file constants - do not change
//$NON-NLS-1$ 
//$NON-NLS-1$ //$NON-NLS-1$ // modal dialog box
// OK // should treat B as separate // Should have no arg
// These must not be static, otherwise Language change does not work // $NON-NLS-1$
// Set the position when next is first called, and don't overwrite // until reInitialize is called.
//$NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// $NON-NLS-1$ // reader = xmlFactory.newSAXParser().getXMLReader();
// may be null for PUT // In an application/x-www-form-urlencoded request, we only support // parameters, no file upload is allowed
// GraphAccumVisualizer obsolete, BSFSamplerGui now a TestBean // GraphAccumVisualizer obsolete, BSFSamplerGui now a TestBean // GraphAccumVisualizer now obsolete // CTT changed to use intProp for mode
// If blank, only check previous sample when at end of loop // $NON-NLS-1$
"/*             * GenericController controller = new GenericController();             * GenericController sub_1 = new GenericController();             * sub_1.addTestElement(new IfController(""10<100""));             * sub_1.addTestElement(new IfController(""true==false""));             * controller.addTestElement(sub_1); controller.addTestElement(new             * IfController(""false==false""));             *              * IfController sub_2 = new IfController(); sub_2.setCondition( ""10<10000"");             * GenericController sub_3 = new GenericController();             *              * sub_2.addTestElement(new IfController( "" \""a\"".equals(\""a\"")"" ) );             * sub_3.addTestElement(new IfController(""2>100""));             * sub_3.addTestElement(new IfController(""false==true""));             * sub_2.addTestElement(sub_3); sub_2.addTestElement(new             * IfController(""2==3"")); controller.addTestElement(sub_2);             */"
//++ JMX file constants - do not change //$NON-NLS-1$
////////////////////// Transaction Controller - additional sample //////////////////////////////
// Are we processing the first sample?
// used for handling interrupt
// The Loop Controller panel can be displayed standalone or inside // another panel. For standalone, we want to display the TITLE, NAME, // etc. (everything). However, if we want to display it within another // panel, we just display the Loop Count fields (not the TITLE and // NAME).
// Not in cache, so create new one and cache it
// For use by the server script
// Do stuff we cannot do as part of threadStarted()
// Don't wrap this error - display it as is
//is derived from properties only
// optional processing instruction for line 2; e.g. // <?xml-stylesheet type="text/xsl" href="../extras/jmeter-results-detail-report_21.xsl"?> // $NON_NLS-1$
"/*         *  Simple test with single Selection controller         *  Generic Controller         *  + Sampler ""before""         *  + Switch Controller         *  + + Sampler ""zero""         *  + + Sampler ""one""         *  + + Sampler ""two""         *  + + Sampler ""three""         *  + Sampler ""after""         */"
// Use the test element name for the label
"/*         * Generic Controller         * - before         * - While Controller ${VAR}         * - - one         * - - two         * - - Simple Controller         * - - - three         * - - - four         * - after         */"
// Calculate response time
// Property names to preload into JMeter variables:
// Cannot do this as part of threadStarted() because the Config elements have not been processed.
// List of active threads
// should we return original value?
// set the endtime for the Thread // Duration is in seconds
// N.B. we don't wait for the thread to complete, as that would prevent parallel TGs
// we call parse with 1 to get only one. // this also means if we change the implementation // to use 2, it would use every other entry and // so on. Not that it is really useful, but a // person could use it that way if they have a // huge gigabyte log file and they only want to // use a quarter of the entries.
// Trigger end of loop condition on all parent controllers of current sampler
// fetch in case gets nulled later
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$        
"/*     * This is called once for each occurrence in the test plan, before the     * start of the test. The super.clear() method clears the name (and all     * other properties), so it is called last.     */"
// Mail on userlist reported NPE here - looks like only happens if there are network errors, but check anyway
// InterleaveController in inner loop
// N.B. This is only called at the start and end of a thread, so there is not // necessary to cache the search results, thus saving memory
// protected fields: JMeterToolBar class can be use to create another toolbar (plugin, etc.)     //$NON-NLS-1$
// the data implementation
// Preserve sign on first byte
// Obtain a value of the appropriate type for this property.
// do we need to close byte array (or flush it?)
// The following three can be discussed: should they be from the // first request or from the final one? I chose to do it this way // because that's what browsers do: they show the final URL of the // redirect chain in the location field.
// Deliberate use of deprecated method
//    private static Configuration getConfiguration(AssertionResult assResult) { //        DefaultConfiguration config = new DefaultConfiguration(ASSERTION_RESULT_TAG_NAME, "JMeter Save Service"); // //        config.setAttribute(FAILURE_MESSAGE, assResult.getFailureMessage()); //        config.setAttribute(ERROR, "" + assResult.isError()); //        config.setAttribute(FAILURE, "" + assResult.isFailure()); //        return config; //    }
// see if this works // it did not, let's try some other formats
"/*     * Class to handle generating the delimited string. - adds the delimiter     * if not the first call - quotes any strings that require it     */"
// The outer sample and the inner loop samples
//$NON-NLS-1$ //$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$ //$NON-NLS-1$
// It is the sub sampler of the transaction that will be sampled
// Test to show current problem with InterleaveController // I am not sure if the expected order of the samples // below are correct, because I am not sure if it is // properly defined how the InterleaveController and // OnlyOnceController should function.
// Remote exit // Called by RemoteJMeterEngineImpl.rexit() // and by notifyTestListenersOfEnd() iff exitAfterTest is true; // in turn that is called by the run() method and the StopTest class // also called
// Process command line property definitions (can occur multiple times)
// Allow engine and threads to be stopped from outside a thread // e.g. from beanshell server // Assumes that there is only one instance of the engine // at any one time so it is not guaranteed to work ...
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
//private Set hosts = new HashSet();
// Use deprecated method, to avoid duplicating code
// Get the OutputWriter to use
// Allow TestResultWrapper to feed back the samples // This is effectively the same as saver.fromXML(InputStream) except we get to provide the DataHolder // Don't know why there is no method for this in the XStream class
// For converters to use
"/* (non-Javadoc)     * @see org.apache.jmeter.protocol.http.parser.HTMLParser#isReusable()     */"
// $NON-NLS-1$ //$NON-NLS-1$
// $NON-NLS-1$ // default: normal
// Set it
// make sure we log the error
"/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createSocket(org.apache.http.params.HttpParams)     */"
// API expects null, not empty array
// Save Location so resulting sample can be disabled
// the url matches the last redirect
// Set category
// Set root level
// The default title for the Menu bar
//+ JMX file attributes // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX file attributes
// Changing color for column
"/*     * The following array must agree with dateFormat     *     * It is used to translate the positions in the buffer to the values used by     * the Calendar class for the field id.     *     * Current format: MM/DD/YYYY HH:MM:SS 01234567890123456789 ^buffer     * positions     */"
// first lets draw the grid
"/*         * Here's where the test really starts. Run a Full GC now: it's no harm         * at all (just delays test start by a tiny amount) and hitting one too         * early in the test can impair results for short tests.         */"
// draw the X axis
"/* (non-Javadoc)         * @see org.xml.sax.helpers.DefaultHandler#error(org.xml.sax.SAXParseException)         */"
//ignore Setup and Post here.  We could have filtered the searcher. but then //future Thread Group objects wouldn't execute.
// now draw the bar chart
// The groups have all completed now                
// we sort the objects
// Fields table //$NON-NLS-1$ //not sure needs I18N? //$NON-NLS-1$ //$NON-NLS-1$
// Programming error: // bail out.
// ConcurrentHashMap does not need synch. here
// assume default charset is OK here //      <classpathentry kind="lib" path="lib/geronimo-jms_1.1_spec-1.1.1.jar"/> //      <classpathentry kind="lib" path="lib/activation-1.1.1.jar"/> //      <classpathentry kind="lib" path="lib/jtidy-r938.jar"/>
// calculate the height
// $NON-NSL-1$
// This used to be request.wait(timeout_ms), where 0 means forever // However 0 means return immediately for the latch
// reset previous result
// default: 3.0f //$NON-NLS-1$
// myRow = f.nextRow(); // assertEquals(0,myRow); // assertEquals(1,f.getNextRow());
// Check if LAF is a built-in one
// $NON-NLS-1$  // $NON-NLS-2$
// or a treenode from the same tree
// Only print final delta if there were some samples in the delta // and there has been at least one sample reported previously
// OnlyOnce inside InterleaveController
// Find and set the file for this recent file command
// @see getStaticLabel
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// file New operation may set to null, so just return app name
// FIrst make sure we save the content of the current GUI (since we // will flush it away):
// BeanInfo objects also contain locale-sensitive data -- flush them // away:
// Insert the workbench node
// JMenu reportMenu; // JMenuItem analyze;
"/*     * Allow functions etc to register for testStopped notification.     * Only used by the function parser so far.     * The list is merged with the testListeners and then cleared.     */"
// If the Add menu already exists, remove it.
// If we still can't find it, just try using all of the text
// Insert the Add menu as the first menu item in the Edit menu.
// main iteration
// There was a NPE being thrown without the null check here.. JKB
// Function does not exist, so treat as per missing variable
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#exit()     */"
"/* (non-Javadoc)     * @see org.apache.jmeter.report.engine.ReportEngine#configure(org.apache.jorphan.collections.HashTree)     */"
// This is required so that // @see org.apache.jmeter.gui.tree.JMeterTreeModel.getNodesOfType() // can find the Clearable nodes - the userObject has to implement the interface.
"/*         * (non-Javadoc)         *          * @see jodd.lagarto.EmptyTagVisitor#script(jodd.lagarto.Tag,         * java.lang.CharSequence)         */"
"/* (non-Javadoc)     * @see org.apache.http.conn.ssl.SSLSocketFactory#createLayeredSocket(java.net.Socket, java.lang.String, int, boolean)     */"
"/*     * (non-Javadoc)     *     * @see org.apache.jmeter.protocol.http.util.accesslog.LogFilter#excPattern(java.lang.String)     */"
// Find the action / form url
// if the height is less than one, we set it // to one pixel
// //////////////////////////////////////////////////////////// // // setter/getter - JavaDoc-Comments not needed... // // ////////////////////////////////////////////////////////////
// Detect functionName() so this does not generate empty string as the parameter
"/*     * If not running under AllTests.java, make sure that the properties (and     * log file) are set up correctly.     *      * N.B. In order for this to work correctly, the JUnit test must be started     * in the bin directory, and all the JMeter jars (plus any others needed at     * run-time) need to be on the classpath.     *      */"
// draw a red line for 90% point
//    Remaining implementations delegate to the wrapped key manager
// Names of JUnit3 methods //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// draw an orange line for 50% point
// This is used to keep track of local (non-remote) tests // The name is chosen to be an unlikely host-name // $NON-NLS-1$
// Process escaped characters // Store the \
// helper method - also used by constructor
//"<?xml "
// Skip the leading bytes (if any)
// Note: originally the code did use the ClientPool to "share" subscribers, however since the // key was "this" and each sampler is unique - nothing was actually shared.
// there is also a javax.swing.text.Document class.
// HELP MENU // $NON-NLS-1$
"/** * Generates Configure pop-up dialogue for Listeners from all methods in SampleSaveConfiguration * with the signature ""boolean saveXXX()"". * There must be a corresponding ""void setXXX(boolean)"" method, and a property save_XXX which is * used to name the field on the dialogue. * */"
// clear result tab on Ctrl-E
// throws HeadlessException
// OPTIONS MENU // $NON-NLS-1$ // $NON-NLS-1$
// N.B. setParameters is called before the test proper is started, // and thus variables are not interpreted at this point // So defer the file open until later to allow variable file names to be // used.
// Must return a valid node, or may generate an NPE
"/*         * Need to reset the containers for repeated runs; about the only way         * for functions to detect that a run is starting seems to be the         * setParameters() call.         */"
// RUN MENU // $NON-NLS-1$
// // Override the implementations of the superclass, forwarding all methods // from the CellEditor interface to our delegate. //
// EDIT MENU // $NON-NLS-1$ // From the Java Look and Feel Guidelines: If all items in a menu // are disabled, then disable the menu. Makes sense.
// strPathsOrJars - pathnames or jarfiles to search for classes // classNames - required parent class(es) or annotations // $NON-NLS-1$ // innerClasses - should we include inner classes? // contains - classname should contain this string // Ignore the classes which are specific to the reporting tool // $NON-NLS-1$ // notContains - classname should not contain this string // annotations - true if classnames are annotations
// FILE MENU // $NON-NLS-1$
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.action.AbstractAction#doAction(java.awt.event.ActionEvent)     */"
// $NON-NLS-1$ // file_merge.setAccelerator( // KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK));
// Prevent instantiation
// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
// Add all the child nodes of the node we are adding
// Connect to the http server, and do a simple http post with utf-8 // encoding of the body, which caused problems when reader/writer // classes were used in the HttpMirrorThread
// we can only move a single node
// Test if can instantiate parser using property name
//$NON-NLS-1$ //$NON-NLS-1$ // reduce font
// Commented as per sebb  // http://mail-archives.apache.org/mod_mbox/jmeter-dev/201307.mbox/%3CCAOGo0VZ0z3GMbfsq_gSB%2Bp7nTUqLng6Gy2ecvYbD8_AKb-Dt5w%40mail.gmail.com%3E
// maintain original behaviour
// Update menu items to reflect recent files
// Remove the last item from the list if it was a brand new file
// Spaces are not allowed in property names read from files
// // Modifying //
// When was the last sample seen?
// Do not allow a non-leaf node to be moved into one of its children
// Package access for use by Test code //$NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$
// Attributes for TestElement and TestElementProperty // Must all be unique //$NON-NLS-1$ // Also used by PropertyConverter classes // $NON-NLS-1$ // $NON-NLS-1$
//  private static final Logger log = LoggingManager.getLoggerForClass();
// samplerData attributes. Must be unique. Keep sorted by string value. // Ensure the Listener documentation is updated when new attributes are added //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$ // $NON-NLS-1$ // $NON-NLS-2$ $NON-NLS-3$
//$NON-NLS-1$ default: bottom //$NON-NLS-1$
"/*             * All done now ,so return the empty string - this allows the caller             * to append __CSVRead(file,next) to the last instance of             * __CSVRead(file,col)             *             * N.B. It is important not to read any further lines at this point,             * otherwise the wrong line can be retrieved when using multiple             * threads.             */"
// Don't try to instantiate these
// Don't clear the plan
// JFileChooser jfc = null;
// Add any files // Cannot retrieve parts once added to the MultiPartEntity, so have to save them here.
// same code as for default JMeter class
// Avoid NPE in resetPage()
// don't change name if merging
// These are not currently updated
// Clear the name of the test plan file
//@GuardedBy("this")
// $NON-NLS-1$ // $NON-NLS-2$  // $NON-NLS-1$
// Save parent node for later
// So elements can only be added as children
// this.graph.clear();
// log.info("classname:: " + strClassName);
// Match all
// compute the new Spline curve
// Check that bsh has read the file
// do nothing, wait for the next pile to complete
// made currentSample volatile
// Find JMeter home dir from the initial classpath
// special handling
// convertTree(tree);
// $NON-NLS-1$  // $NON-NLS-1$ 
// get the JComponent from the visualizer
// Get the string given from the choose and check // the file extension.
// i.e. no disabled icon found
// Must therefore set the enabled icon so there is at least some // icon
// put the gui object back // to the way it was.
// Container endWindow; // JPopupMenu pop;
// endWindow = window;
// Get the Main Frame.
// Close any Main Menu that is open
//transient private static final Logger log = LoggingManager.getLoggerForClass();
// boolean enabled = true;
// If icon has not been defined, then use GUI_CLASS property //
// mkdir() returns false if the directory was not created; could be because it exists
// Java on Mac OS can add a second entry to the initial classpath // $NON-NLS-1$
// There's only 1 test plan, so can cache the mode here
// Add standard jar locations to initial classpath
// Now eliminate any classpath entries that do not "match" the search
// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
// return the pagesize divided by 1024 to get kilobytes
// we add the entry
// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$
// we should make this configurable eventually
// now add the samples to the HashMap
// usesUNC
//Iterator itr = data.iterator();
// duplicates
// ClassFinder needs the classpath
// incompatable (blee/all)
// Check that optional args work woth long options
// ClassFinder needs this
// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
// Make the addURL method visible
// needed for ShutdownClient
// If the -t flag is to "LAST", then the last loaded file (if any) is used
// Restarts
// result.setResponseData - not set
// Check // delimiters // are // allowed
// should // detect // trailing // option
// Check // "-" // is // allowed // in // arg2
// "-Dstupid="
// "-Dstupid=","-c"
// "-Dstupid","-c"
// Canonical form
// Test optional arguments
// Convert between eclipse jar name and build.properties name
// remove docs-only jars
// This would be done by the run command
// Not present
// wrong
//Wrong
// Restart file
// run test in batch mode
// N.B. This needs to divert the log for SampleResult
// only accept jar files // $NON-NLS-1$
// condensed length (without \r) // Add \r for each header // Add \r for initial header // final \r\n before data
// Check random number
// This would be done by the run // command
// should remote engines be stopped at end of non-GUI test?
// Check option combinations
// needs to be initialised
// Also initialises JMeter logging
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //$NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// etc...
// Set some (hopefully!) useful properties
"/*             * IfController controller = new IfController(""12==12"");             * controller.initialize();             */"
// Should not enter the loop
// Check "Undefined" does not become a "reserved word":
// Test with SimpleController as first item
// Should not enter the loop next time
// Start the server
// most recent
// Should not enter the loop next time // But should continue to the end of the loop
// Update classloader if necessary
//bshinit,log);
//Do what would be done earlier
// SSL not supported, startTLS not supported, other messagingException
// Should not have any text arguments
// Match by name
// should not run any children // should match the default entry
// Selection controller with two sub-controllers, but each has only 1 // child
"/*         * N.B. Requires ApacheJMeter_functions.jar to be on the classpath,         * otherwise the function cannot be resolved.        */"
// Dummy for testing functions
// While LAST, previous sample failed - should not run
// While False, previous sample failed - should not run
// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$
// Set up the test plan
//for Httpclient //for Httpclient
// OnlyOnce samples
// Outer sample
// Inner loop
// Sample in inner loop
// Compute the expected sample names
// The only once samples
// Run entire test again
// Execute the test pan
"/*     * Checks for LAST or LASTsuffix.     * Returns the LAST name with .JMX replaced by suffix.     */"
"/*         * Additional Settings         */"
// most recent // $NON-NLS-1$
// OnlyOnce inside inner loop
// not Replaceable Controller
// Test skipped for now as behaviour is not yet properly defined
// Not enabled
// Sample in inner loop        
// Escaped dollar commma and backslash with no variable reference
// This test tries to emulate a http sample, with two // subsamples, representing images that are downloaded for the // page representing the first sample.
// Escaped dollar commma and backslash with variable reference
// N.B. Backslashes are removed before dollar, comma and backslash
// Not a TestElement
// Escaped dollar commma and backslash with missing variable reference
// Not a ReplaceableController
// Escaped dollar commma and backslash with missing function reference
//log.debug("domain property = " + element.getProperty("domain"));
// keep track of remote tests
// Set up the non-wild variables
//NOT YET USED private JMeter _parent;
// Should not clear this?
// Check when match fails
//_parent = unused;
// Now rerun with match fail
// it will be null unless remoteStop = true
// Allow listeners to close files
// $NON-NLS-1$ 
// Allow enough time for JVM to exit
// Has child, but child is empty
// Has no child
// No text
// Test fragment
// Now get its text
// There aren't any
// Try to get data from subresult // Needed for addSubResult()
// Get data from both
// get data from child
// Create the SplitFile function and set its parameters.
// \u00e7 = LATIN SMALL LETTER C WITH CEDILLA // \u00e9 = LATIN SMALL LETTER E WITH ACUTE
// Create the BeanShell function and set its parameters.
// Reset files
// Check some initial variables
// Check source works
// Check persistence
// Function objects to be tested
// Helper class used to implement co-routine between two threads
// Allow other thread to start
// open as *A
// open as *B
// col2 line 1
// col 1, line 2, *A
// *B next
// col2, line 2, *B
// XPathFileContainer tests
// Remove the disabled items // For GUI runs this is done in Start.java
// This cannot be a JMeter class variable, because properties // are not initialised until later.
// Use same XPath for both threads
//String s = 
// prevent accidental use of is below
// wrap-round check
// no wrap-round check
// Perform a sum and check the results
// trailing space
// Test with output variable name
// Only accept commands from the local host
// template // match number // ALL separator
// Needs to be public for tests
// Test with empty output variable name
// not full test plans
// needs to be public for testing
// start in new state
//suite.addTest(new TestLoad("checkGuiPackage"));
// Constructor for TestElement tests
// Defaults to caller URL
// Constructor for Serializable tests
// Constructor for Function tests
// Only show classpath once
// Allow the mimetype of the file to control the content type // This is not obvious in GUI if you are not uploading any files, // but just sending the content of nameless parameters
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
// used by TestAnchorModifier // used by TestAnchorModifier // used by TestSaveService
"/*     * Use a suite to allow the tests to be generated at run-time     */"
// The Locale used to instantiate the GUI objects
// Restore the original Locale
"/*     * Extract titles from component_reference.xml     */"
// Sample with no sub results, simulates an image download
// Not a true GUI component
"/*     * Extract titles from functions.xml     */"
// first time
// We don't mind if this is left over // Ditto, not a sampler
"/*     * Test GUI elements - create the suite of tests     */"
"/*     * Test Functions - create the suite of tests     */"
"/*     * Test GUI elements - run the test     */"
// So we can detect extra entries
// Is this a work in progress or an internal GUI component? // Will be "" for internal components
// Skip the example samplers ...
// Record in log as well
// For detecting extra entries
"/*     * Check that function descriptions are OK     */"
"/*     * Test GUI elements - not run for TestBeanGui items     */"
"/*     * Test serializable elements - create the suite of tests     */"
"/*     * Test serializable elements - test the object     */"
// Don't try to instantiate remote server
// Try with a parameter-less constructor first
// no luck. Ignore this class
// We won't test restricted-access classes.
// not thrown, so need to check here
// Only dump it once
// Used by findTestFile
// JMeterUtils assumes Unix-style separators
// Used to be done in initializeProperties
// needed for scripts
// Display actual encoding used (will differ if file.encoding is not recognised)
// Helper method to find a file
// Add the offset
// number of samples taken
// will only contain Argument or HTTPArgument
// same as above
// not same
// This is needed in order to set up the cookie policy
// Force the table to be at least 70 pixels high
// starts empty
// should not be stored
// Test session cookie is returned
// Test Old cookie is not returned
// Test duplicate cookie handling
// Assumes some kind of list is used
// Test cookie matching
// Cookies are ignored
// Cookies again ignored
// Show that maxlong now saved as 0
// Shutdown the http server
// Wait up to 1 second
// succeeded
// Connect to the http server, and do a simple http get
// Write to the socket
// Headers
// Close the connection
// Read the response
// Check that the request and response matches
// Write the start of the headers, and then sleep, so that the mirror // thread will have to block to wait for more data to appear
// Write the rest of the headers
// The content sent
// Connect to the http server, and do a simple http post
// Construct body
// Write the headers and body
// Write the headers, and then sleep
// Write the body
// Check that the request and response matches       
// $sid$
// No entry; check it is still present
// Test https works too
// These are some of the special characters
// Dummy as the file has no entries
// Relative filenames
// Hide Window on ESC
// Identify subtests
// This is OK
// change to false after the first insert
// Do update on Enter
// must be the start of the subtree
//            private TestData(String f, String b, String s) { //                this(f, b, s, null); //            }
// Convert both to Sets
// Get expected results as a List
// A HTTP GET request
// A HTTP POST request
// A HTTP GET request, with encoding not known
// A HTTP POST request, with content-type text/plain
// A HTTP GET request, with UTF-8 encoding 
// A HTTP POST request, with UTF-8 encoding
// A HTTP POST request, with unknown encoding
// A HTTP GET request, with UTF-8 encoding
// A HTTP POST request, with encoding not known
// for unit test code @see TestIfController
"/*     * Utility routine to get the connection from the pool.     * Purpose:     * - allows JDBCSampler to be entirely independent of the pooling classes     * - allows the pool storage mechanism to be changed if necessary     */"
// cnd may be null if next() called us // $NON-NLS-1$
// now evaluate the condition using JavaScript
// If-test is false, need to re-initialize indexes
// for getIterCount
// A HTTP POST request, with content-type text/plain; charset=UTF-8 // The encoding should be picked up from the header we send with the request
// Runtime is zero - no point staying around
// A HTTP POST request, with ISO-8859-1 encoding
"/*     * This is needed for OnceOnly to work like other Loop Controllers     */"
// A HTTP POST request, multipart/form-data, simple values,
// Only create the map if it is required
// no space after :
// spaces after :
// May be replaced by RandomOrderController
// Assume there's at least one file
// Description multipart
// incrementCurrent();
// File upload multipart
// Most browsers use ISO-8859-1 as default encoding, even if spec says UTF-8
// must be a controller
// No filters
// Empty filters
// Non empty filters
// can only match once
// Simple inclusion and exclusion filter
// Allow all but images
// i.e. "true"
// This must be the original (Java) HTTP sampler
// default true for compatibility
///////////////// Transaction Controller - parent ////////////////
// Check if transaction is done
// This transaction is done
// Sample the children of the transaction
// Most browsers use ISO-8859-1 as default encoding, even if spec says UTF-8 // TODO - charset?
// delete temporay file
// If we do not get any sub samplers, the transaction is done
// Gui Components
// Test sending UTF-8 data with ISO-8859-1 content encoding
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending file content as the only content of the post body     */"
// Check using default encoding
// Check using a different encoding
// File content is sent as binary, so the content encoding should not change the file data
"/*     * Test method for 'org.apache.jmeter.protocol.http.sampler.postWriter.sendPostData(URLConnection, HTTPSampler)'     * This method test sending only a formdata, as a multipart/form-data request.     */"
// Tell sampler to do multipart, even if we have no files to upload
// Test sending data as ISO-8859-1, with values that need to be urlencoded
// Test sending data as UTF-8, with values that needs to be urlencoded
// Assume success
// Check if it is the start of a new transaction // must be the start of the subtree
// use latency to measure connection time
// Must be the end of the controller
// We have sampled one of our children
// We must set res to null now, before sending the event for the transaction, // so that we can ignore that event in our sampleOccured method
// Check if we are still sampling our children
// Test sending data as UTF-8, with values that would have been urlencoded // if it was not sent as multipart
// HTTPSampler uses ISO-8859-1 as default encoding // HTTPSampler uses ISO-8859-1 as default encoding
// Accumulate waiting time for later
//log.warn("Constructor only intended for use in testing");
// Join the two multiparts
// ensure name is available for debugging
// The encoding used for http headers and control information
// replace all backslash with double backslash
// It is the JMeterThread which knows how to sample a real sampler
// Different from TestHTTPMirrorThread port and standard mirror server
// This is used to emulate @before class and @after class
// Another subsample for the transaction
// Add parameterised tests. For simplicity we assune each has cases 0-10
// Shutdown mirror server
// Set Response code of transaction
// Test sending data as UTF-8, with values that will change when urlencoded
// The transaction fails if any sub sample fails
// Replace the variables in the sampler
// Add the sub result to the transaction result
// Add current time to total for later use (exclude pause time)
// if selected, add duration of timers to total runtime
// Test sending data as UTF-8, where user defined variables are used // to set the value for form data
// Test sending data with ISO-8859-1 encoding
// Test sending data with UTF-8 encoding
// Test sending data as UTF-8, with values that changes when urlencoded
// Check the request
// Check post body from the result query string
// Skip the blank line with crlf dividing headers and body
// Check response headers
// Test sending data as UTF-8, with + as part of the value, // where the value is set in sampler as not urluencoded, but the  // isalwaysencoded flag of the argument is set to false. // This mimics the HTTPConstants.addNonEncodedArgument, which the // Proxy server calls in some cases
// Test sending simple HTTP get // Test sending data with default encoding
// Check method
// Check method, path and query sent
// Get folder
// Check the Request URI sent to the mirror server, and // sent back by the mirror server
// We should have a query string part
// We should not have a query string part
// TEXT FIELD // $NON-NLS-1$
// Check path
// Check query
// LOOP LABEL // $NON-NLS-1$
// Find the data sent to the mirror server, which the mirror server is sending back to us // We assume the headers are in ISO_8859_1, and the body can be in any content encoding.
// SECONDS LABEL // $NON-NLS-1$
// This check-box defines whether to save  WorkBench content or not
// No divider was found
// FOREVER CHECKBOX // $NON-NLS-1$
// Condition LABEL
// limit the changes to client only test elements
// The value is in the first group, group 0 is the whole match
// String domain = "localhost";
// Set the file upload data
// Parse arguments singly
// Parse arguments all at once
// test cases for making Url, and exercise method // parseArguments(String queryString)
// Ignore empty file specs
// Ignore trailing empty spec
// Ignore leading empty spec
// Show that can bypass encoding:
// The sample does not use a valid encoding
// by default, name/value are encoded on fetch 
// Avoid double-call if addSubResult was called.
// Use expression instead of Javascript // $NON-NLS-1$
// Evaluate All checkbox // $NON-NLS-1$
// $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Called by JMeter ListenToTest if remoteStop is true
// Sent later
// Should we create our own copy of the RMI registry?
// Trailing file
// Create this object using the specified port (0 means anonymous)
// Trailing directory
// file exclf inclf exclp inclp
// should perhaps be log.warn, but this causes the client-server test to fail
// odd chars
// invalid
// Throw an Exception to ensure caller knows ...
// Check illegal array lengths
// close window where another remote client might jump in
// messages.properties
// Read resource into ResourceBundle and store in List
// sets active = true
// Read resource file saving the keys
// Only relevant for messages
"/*     * Called by:     * - ClientJMeterEngine.exe() which is called on remoteStop      */"
// Store the key
// Helper method to construct resource name
// Tidy up any objects we created
// holds keys from file
// Look for duplicate keys in the file
// Help with garbage control
// Must be the default resource file
// Check all the keys are in the default props file
// The list of current thread groups; may be setUp, main, or tearDown.
// Also Check key is in default
// Fix up Windows paths
// May be null if called from Unit test
"/*     * Use a suite to ensure that the default is done first    */"
// load the default resource
// Don't try to check the default language
// e.g. not yet started
// leading comment
// End of code to allow engine to be controlled remotely
// Is testplan serialised?
// Can't use for loop here because we remove elements
// we totally failed to stop the test
// Change the original back again
// a and b should be equal
// a and b should not be equal
// Needs to be greater than the minimum to allow for boundary errors
// Re-increment
// temp test case for exploring settings
// Don't use nanoThread
// Sample that will get two sub results, simulates a web page load 
// Sample with no sub results, simulates an image download 
// Now add the subsamples to the sample
// TimeMillis has granularity of 10-20
// Check that calculator gets the correct statistics from the sample
// check default
// check null changes nothing
// check no charset
// Check unquoted charset
// Check quoted charset
// These tests should agree with those for JOrphanUtils.split() as far as possible
// Blank line
// Empty strings at EOF
// else will be done by threadFinished()
// testLoadAndSave test files
// Test files for testLoad; output will generally be different in size and line count
// THREAD PROPERTIES
// no point continuing
// Did a test fail?
// Make sure all the data is flushed out
// Test non-empty parameters
// Merge in any additional test listeners // currently only used by the function parser
// no longer needed
// for each thread group, generate threads // hand each thread the sampler controller // and the listeners, and the timer
// Unrecognised files are ignored
// Does not open file
//for each setup thread group
// Re-read 1st line
// should not be able to write to it ...
//wait for all Setup Threads To Exit
// does not remove the entry
// removes all entries
// still running at this point, i.e. setUp was not cancelled // for each thread group
// test code, intentional
//wait for all Test Threads To Exit
// errorDetected()
// NUMBER OF THREADS
// The groups have all completed now            
// Check that all keys in the bundle are also in the default bundle:
// Check that all necessary keys are there:
// wait for Post threads to stop
// displayName is always mandatory:
// Skip the rest of this test for alpha/experimental beans:
// ConcurrentHashMap does not need protecting
// Check for property- and group-related texts:
// Ignore TestElement properties which don't have an explicit // editor:
// Will be null if StopTest thread has started
// Done -- we're working with an editable property.
//throw new Error("No default bundle for class " + className);
// Needs to be run in a separate thread to allow RMI call to return OK
// tweak.
// Allow RMI to complete
// Test needs to run in this package in order to give access to AbstractTestElement.addProperty() 
// This test should work whether or not all Nulls are equal
// Give access to the method for test code
// TL - all
// RAMP-UP
// don't add the timer
// Created during class init; not modified thereafter 
// synchronize with FixedQueueExecutor
// ignore self
// JMSMessageID cannot be null
// Assume this thread only // 1 per second // Should delay for 1 second // 1 per milli-second // Should delay for 1 milli-second
// Store the content-type // RFC 822 uses ascii per default // Parse the content-type
// LOOP COUNT
// 10 per second // Should delay for 1 second // 10 per milli-second // Should delay for 1 milli-second
// 1000 per milli-second // Should delay for 1 milli-second
// Use old style
// probably needed to avoid NPEs with GUIs
// i.e. shutdown/stopped during main thread groups // re-enable for tearDown if necessary
// Must not convert TestElement.gui_class etc
// end of thread groups // No TGs found
// This should be enough to allow server to exit. // default is false
// Classnames must contain this string [.functions.] // $NON-NLS-1$ // Classnames must not contain this string [.gui.] // $NON-NLS-1$
// mainPanel.add(threadPropsPanel, BorderLayout.NORTH); // add(mainPanel, BorderLayout.CENTER);
// Check can cast for clone // Don't clone NoThreadClone unless honourNoThreadClone == false
// clone will produce correct type
// Dummy methods needed by Function interface
// For use by FunctionHelper
// Handle escapes
// tree1.add("a3");
// found "${"
// WebsphereMQ does not allow corr. id. to be set using setStringProperty() // $NON-NLS-1$
// save leading text
// set to start of string
// variable, or function with no parameter list
// ensure that setParameters() is called.
// end of buffer
// store the following character
// Normal exit occurs here
// Should not happen with StringReader
// Dropped out, i.e. did not find closing ')'
// needed for measuring sending time
// Needed for serialisation testing
// No duplicates when adding
// add duplicates
// add duplicates as per bug
// There was an object in map, destroy the temporary and return one in map (oldCtx)
// can't call invoke using super class
// Args will be provided later
// should use original object
// Check how Class definition behaves
// The application name // $NON-NLS-1$
// Allow display/hide LoggerPanel
// Transparent JButton with no border
// Allow display/hide toolbar
//Ignored
// private static final String ROOTDN = "rootDn"; // private static final String TEST = "tesT"; // private static String testValue="NNNN";
// Allow display/hide Log Error/Fatal counter
// Tests for split(String,String,boolean)
// enable drag&drop, install a custom transfer handler
// Empty string
// Tests for split(String,String,String)
// add the toolbar
// Empty default
// Empty delimiter
// Check for file lists specifically
// Multiple delimiters
// Delimiter same as splitter
// used by AbstractReportGui
// This stores the state of the TestElement
// Ensure we use default bundle
// Sampler error action buttons
// are we saving the whole tree?
// In a post request which is not multipart, we only support // parameters, no file upload is allowed
// Node node = tidy.parseDOM(new // ByteArrayInputStream(response.getResponseData()), null);
// N.B. originally called clear() // @see also Clearable
// Values for TEST_FIELD // N.B. we cannot change the text value as it is in test plans // $NON-NLS-1$
// In case parse fails // $NON-NLS-1$ // In case parse fails // $NON-NLS-1$
// $NON-NLS-1$ // Make it easier to enter a Tab // $NON-NLS-1$
// $NON-NLS-1$ // don't set empty to keep regexp // regexpField.setText(""); // $NON-NLS-1$ // $NON-NLS-1$
// allow for windows / chars in filename // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$
// set the window visible immediately
// $NON-NLS-1$ // define AWT WM_CLASS string
// Defaults to continue
// space between borders and text
// Target server panel
// Limit length of log content
// If LOGGER_PANEL_MAX_LENGTH is 0, it means all log events are kept
// The current node is now updated
// Probably a missing jar
// Should we allow directories?
// Enable file revert action if a file is used
// If saveWorkBench 
// Whether to skip the delete confirmation dialogue // $NON-NLS-1$
// Add this node
// Ensure the dialog is only created when it is first needed // In turn this avoids scanning the templates until first needed
// Make sure the file ends with proper extension
// Check if the user is trying to save to an existing file
// Condition LABEL // $NON-NLS-1$
// $NON-NLS-1$ i.e. boolean saveXXX() // $NON-NLS-1$ i.e. void setXXX(boolean) // $NON-NLS-1$ e.g. save_XXX property
// VK_PLUS + CTRL_DOWN_MASK did not work...
// Keep the '\' unless it is one of the escapable chars '$' ',' or '\' // N.B. This method is used to parse function parameters, so must treat ',' as special
// en // fr // de // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // ja // zh_CN // zh_TW
//@GuardedBy("LOCK") // Keep track of how many instances are active
// File name sequence number //@GuardedBy("LOCK")
// Instance fields are constructed by the client when the instance is create in the test plan // and the field values are then transferred to the server copy by RMI serialisation/deserialisation
// process special keys // $NON-NLS-1$
// If there are some recent files, we must make the separator visisble // The separator is the last item in the list
// Save (Selection) As // Save TestPlan As // Save
// Y // Y // Y // Y // sp // M // M // / // D // D // / // H // H // : // M // M // : // S // S // end
//OK // TODO ??
// Assume this thread only // 1 per second // Initialise
// Assumes some kind of list is use // If not using a list that retains the order, then the asserts would need to change
// Do not save, user does not want to overwrite
// Only update the stored copy of the tree for a full save // refetch, because convertSubTree affects it
// package protected to allow access from test code
// requires JMeterTreeNode
// move to the parent
// move as a child of the next sibling
// select the node
// We must ask the user if it is ok to close current project
// Load the file for this recent file command
// A HTTP POST request, multipart/form-data, simple values, // with \r\n as end of line, which is according to spec, // and with more headers in each multipart
// two jars same version // two jars same version
// myRow = f.nextRow(); // assertEquals(3,myRow); // assertEquals(0,f.getNextRow());
// Is this a work in progress ? // No, // not // a // work // in // progress // ...
// Create the menu item
// Use the index as the name, used when processing the action
// Set the KeyStroke to use
// Add the menu item
// Add separator as the last item
// pick up headers if failed to execute the request // httpMethod can be null if method is unexpected
// RFC 822 uses ascii per default
// Check if the new file is already in the recent list
// Add the new file at the start of the list
// Store the recent files
// Assume no recent files
// Update the menu items
// Nulls cannot be written using PrettyPrintWriter - they cause an NPE // $NON-NLS-1$
// Get the menu item
// N.B. JVMs other than Sun may return different instances each time // so we cache the value here (and avoid having to fetch it every time)
// href="#"
//+ JMX attributes - do not change // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //- JMX
// We only check the length of the result. Comparing the // actual result (out.toByteArray==original) will usually // fail, because the order of the properties within each // test element may change. Comparing the lengths should be // enough to detect most problem cases...
// At least one recent file menu item is visible
// write a OK reponse to browser, to engage SSL exchange // $NON-NLS-1$
// We use the page encoding where the form resides, as the // default encoding for the form
//+ action names // $NON-NLS-1$
// Set up list of potential targets and // enable listener
"/* (non-Javadoc)     * @see org.apache.jmeter.gui.action.AbstractAction#getActionNames()     */"
// .equals caused // NPE
"/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
// Limit the length of the menu text if needed
// If we are merging in another test plan, we know the test plan is dirty now
// Only check if we have not found any differences so far
// a well-bahaved browser is supposed to send 'Connection: close' // with the last request to an HTTP server. Instead, most browsers // leave it to the server to close the connection after their // timeout period. Leave it to the JMeter user to decide.
// Do search on Enter
// do search
// Process Apache HttpClient parameters file // $NON-NLS-1$
// Embedded URLs must match this RE (if provided) // $NON-NLS-1$
// Check if the user has loaded any file
// Mark Walsh 2002-08-03, modified to also parse a parameter name value // string, where string contains only the parameter name and no equal sign.
// Check if the header manager had a content type header // This allows the user to specify his own content-type for a PUT request
// Check if the user wants to drop any changes
// If the Multipart is repeatable, we can send it first to // our own stream, without the actual file content, so we can return it
// headerManager was set, so let's set the connection // to use it.
// Check if the user wants to revert
// Close the current project
// the document should only have one service node // if it doesn't it may not work!
// new WSDLHelper("http://localhost/WSTest/WSTest.asmx?WSDL"); // new WSDLHelper("http://localhost/AxisWSDL.xml"); //new WSDLHelper("http://localhost:8080/WSMyUpper.wsdl"); //new WSDLHelper("http://localhost:8080/test.wsdl");
// There's little point saving the manager between invocations // as we need to reset most of the beans anyway
// Reload the project
// / Only do the calculation if // it is needed
//++ Do not change these strings; they are used in JMX files to record the button settings // $NON-NLS-1$
// e.g. windows xp => windows
// Timeouts not active // How much left
// needs to be accessible from test code // Only contains LDAPArgument entries
// $NON-NLS-1$ jmeter.properties
// Minimal dimensions for dialog box
// Bottom buttons bar
// center position and 50% of screen size
// Created by XStream reading templates.xml
"/*         * N.B. Must use LinkedHashMap for field type         * XStream creates a plain HashMap if one uses Map as the field type.         */"
// templates i
"/*     * ------------------------------------------------------------------------     * Fields     * ------------------------------------------------------------------------     */"
// field TemplateManager#templates  // $NON-NLS-1$
// field Template#name  // $NON-NLS-1$
// for relative links
//      super(new JMeterTreeNode(new WorkBench(), null)); //      TestElement tp = new TestPlan(); //      initTree(tp, new WorkBench());
// The node can be added in non GUI mode at startup
// Remove the workbench and testplan nodes
// Insert the test plan node
// Init the tree // Assumes this is only called from GUI mode
// Let others know that the tree content has changed. // This should not be necessary, but without it, nodes are not shown when the user // uses the Close menu item
// The default is false, so we can remove the property to simplify JMX files // This also allows HTTPDefaults to work for this checkbox
// hold the nodes that should be removed on drop
// only allow a drag&drop inside the current jvm
// if child and a parent are selected : only keep the parent
//++ For TestBean implementations only // passed to file or script
// sort the selected tree path by row
// remove unneeded nodes
// errorLogging and successOnlyLogging are mutually exclusive // $NON-NLS-1$
// the tree accepts a jmx file 
// A TestBean is a Java Bean. Just define some properties and they will // automagically show up in the GUI. // A String property:
// Only try to format if there is a // number
// the copy is disabled
// Requires Java 7 // $NON-NLS-1$
//$NON_NLS-1$ // don't match the empty category
// Do not allow a drop on the drag source selections.
// TestPlan and WorkBench are the only children of the root
// re-use node association logic
// deal with the jmx files
// Get drop location and mode
// drop mode == DropMode.ON
// expand the destination node
// Request validation // $NON-NLS-1$
// If icon has not been defined, then use GUI_CLASS property
//+ JMX file attributes // $NON-NLS-1$
// this is not the result of a redirect // so break the chain
// may be null during startup
// Override in order to provide type safety
//+JMX file attribute names - do not change any values! // $NON-NLS-1$
// Just in case
"/*         * c.gridx = 1; c.gridy = 2; g.setConstraints(close, c);         * panel.add(close);         */"
// for use by test code only
// // Instance Variables //
// // Constructors //
// // Implementing the TreeCellEditor Interface //
// // Implementing the CellEditor Interface //
// // Protected EditorDelegate class //
// Datefields are not thread-safe // $NON-NLS-1$
// HELP MENU //$NON-NLS-1$
// OPTIONS MENU //$NON-NLS-1$ //$NON-NLS-1$
// Dummy constructor to allo JUnit tests to work
// Do nothing; the current time will be returned
"/*     * Convert position in buffer to Calendar type Assumes that pos >=0 (which     * is true for getCaretPosition())     */"
// if beyond the end // then set to the end
// Restore position
// List for recent files menu items
// Lists for remote engines menu items
// Called by MainFrame#setEditMenu() which is called by EditCommand#doAction and GuiPackage#localeChanged
// show the classname to the user
// This is used by the ChangeLanguage class to define the Locale
// Also used by org.apache.jmeter.resources.PackageTest
//Overrides superclass method
// From the Java Look and Feel Guidelines: If all items in a menu // are disabled, then disable the menu. Makes sense.
// Listener on model changes to maintain correct focusability
// Add the recent files, which will also add a separator that is // visible when needed
// override action behaviour
// This is also used by LookAndFeelCommand
// For testing only at present
// Mostly delegates to model
//Set default single model
// Next two methods implement new API by delegation to model
// Restore state display
//Listen for enable changes
//Convenience cast
// Assume that the UI has not changed since the checkbos was created
// Iterate state
// Overrides of superclass methods
// Fire ActionEvent
// force the events to fire
// Send ItemEvent
//Set internal state
// Send ChangeEvent
// Nimbus works - after a fashion - with this
//            drawCross(g, x, y);
"/*     * Create a set of default parameters from the ones initially created.     * This allows the defaults to be overridden if necessary from the properties file.     */"
"/*     *  Predefined strings for makeMenu().     *  These are used as menu categories in the menuMap Hashmap,     *  and also for resource lookup in messages.properties    */"
// Needed for all but Nimbus // Nimbus works - after a fashion - with this // Nimbus works - after a fashion - with this // reset
// paintIcon
// For use by test code only
// if type is unknown
// $NON-NLS-1$ // $NON-NLS-1$ // Don't try to instantiate these
// No point instantiating class
// Allow headless testing
// Don't add it again
// Empty box //$NON-NLS-1$
// Can't add a Workbench anywhere
// Force TestFragment to only be pastable under a Test Plan
// allow everything else
// AbstractThreadGroup is only allowed under a TestPlan
// Includes thread group; anything goes
// Samplers and Controllers need not apply ...
// All other
// Is any node an instance of one of the classes?
// Is any node an instance of one of the classes, but not an exception?
// Methods used for Test cases
// Close action dialog box when tapping Escape key
// otherwise proxy String fields may be null
// Prepare dialog box
// determine location on screen
// must be CLOSE or SAVE_CLOSE COMMANDS
// text backup
// double click
// view only
// double (pressed) click
// in main table (evt mousePressed because cell is editable) 
// add the button to the button group
// add the button
// implicit return empty toolbar if icons == null
// Get the standard toolbar properties
// already reported by IconToolbarBean
// in seconds
//this.setPreferredSize(new Dimension(400,150));
// i.e. bypass the Functors
// Mainly needed for unit test Serialisable tests
"/*     * Ensure that a report is not skipped if we are slightly late in checking     * the time.     */"
"/*     * This map allows summarisers with the same name to contribute to the same totals.     */"
//@GuardedBy("accumulators") - needed to ensure consistency between this and instanceCount
//@GuardedBy("accumulators") // number of active tests
//@GuardedBy("myTotals")
// Name of the accumulator. Set up by testStarted().
"/*     * Contains the items needed to collect stats for a summariser     *     */"
// copy the data to minimise the synch time
// stop double-reporting
// Only if we have updated them
// $NON-NLS-1$ // for intermediate use // output line buffer
// Rate is effectively infinite
// Avalon only
// rounded seconds // No point displaying decimals (less than 1% error) // decimal would be zero
// fractional seconds // This will round
// We're not done yet
// boolean autoScale = true;
// setup drawing area
// draw grid
// draw axis
// draw data lines
// e.g. in non-GUI mode
// This string is used to identify local test runs, so must not be a valid host name // $NON-NLS-1$
// Static variables
// Lock used to guard static mutable variables
//@GuardedBy("LOCK")
// Instance variables (guarded by volatile)
// Unfortunately AbstractTestElement does not call super.clone()
// successOnly and errorOnly cannot both be set
// No need for the hook now
// Only add the hook once
// No point reading the file if there's no visualiser
// probably Avalon format
// Only for use by CSVSaveService
// We are processing XML // Assume XStream
// Ensure that the sample save config is not shared between copied nodes // N.B. clone only seems to be used for client-server tests
// Find the name of the directory containing the file // and create it - if there is one
// TODO Charset ? // Get the first line, and see if it is XML
// Can't do it as a static initialisation, because SaveService // is being constructed when this is called
// Added in version 1.1 // $NON-NLS-1$
// returns false if directory already exists, so need to check again
// else if might have been created by another process so not a problem
// returns false if the file did not contain the terminator
// found the string
// reads to end of line OR end of file
// !saveAsXml
// Truncate the file
// should throw exception back to caller
// Used by: MonitorHealthVisualizer.add(SampleResult res)
//+ JMX property names; do not change
//- JMX property names
//NOTUSED private static final String DATABASE = "db"; // $NON_NLS-1$
// Associate sample with file name
// Mutable int to keep track of sample count
// Should we save the sample?
// finish processing samples
// Needed to avoid Class cast error in Clear.java
// client log file
// Not currently needed by any Remoteable classes // Anyway, would probably be too expensive in terms of network traffic //  // void testIterationStart(LoopIterationEvent event);
// ensure output is flushed
// server log file
"/** * Holds details of which sample attributes to save. * * The pop-up dialogue for this is created by the class SavePropertyDialog, which assumes: * For each field XXX * - methods have the signature ""boolean saveXXX()"" * - a corresponding ""void setXXX(boolean)"" method * - messages.properties contains the key save_XXX * * */"
//add(makeTitlePanel(), BorderLayout.NORTH);
// Initialise values from properties
// Save bytes read // $NON_NLS-1$
// Save URL // $NON_NLS-1$
// Save fileName for ResultSaver // $NON_NLS-1$
// Save hostname for ResultSaver // $NON_NLS-1$
// Don't save this, as it is derived from the time format
// Prepare for a pretty date
// Defaults from properties:
// reversed compare allows for null
// Don't save this, as not settable via GUI
// $NON_NLS-1$ // N.B. Remember to update the equals and hashCode methods when adding new variables.
// Give access to initial configuration
// We know we are comparing to another SampleSaveConfiguration
///////////////////// Start of standard save/set access methods /////////////////////
// as per 2.0 branch
// maintain relationship
// Defaults to empty;
// Used by old Save service
// Static fields are set by the server when the class is constructed
// Locate the statistical sample colector
// store the new statistical result collector
// add a new wrapper samplevent
// No need to log normally, as we set the status // $NON-NLS-1$
// Checking for and creating initial timestamp to check against
// The values. Entries may be null, but there will be the correct number.
// The hostname cannot change during a run, so safe to cache it just once
"/*     * Only for Unit tests     */"
// Needs to be accessible from Test code
/* The default used by {@link #setResponseData(String, String)} */
/* empty arrays which can be returned instead of null */
// Never return null
// e.g. text/html; charset=utf-8
// TODO timeStamp == 0 means either not yet initialised or no stamp available (e.g. when loading a results file)
// Allow for non-sample time
// Don't return null if not set
//@GuardedBy("this"")
// (is this really the character set?) e.g. // ISO-8895-1, UTF-8
// Allows override of sample size in case sampler does not want to store all the data
// Allow read-only access from test code
// How long between checks of nanotime; default 5000ms; set to <=0 to disable the thread
// $NON-NLS-1$;
// Make sure we start with a reasonable value
// Allow test code to change the default useNanoTime setting
// Allow test code to change the default useNanoTime and nanoThreadSleep settings
// Helper method to maintain timestamp relationships
"/*-------------------------------------------------------------------------     * Methods implemented from org.xml.sax.ContentHandler     *----------------------------------------------------------------------- */"
// Create unique object as marker for end of queue
//OK //OK //OK //OK // files is created automatically, and applies per instance //OK
// TODO ?? //OK //OK
// handle: ContentType: text/plain; charset=ISO-8859-1; format=flowed
// Check for quoted string // $NON-NLS-1$ // remove quotes
// List of types that are known to be binary
// List of types that are known to be ascii, although they may appear to be binary
"/*     * Helper methods N.B. setStartTime must be called before setEndTime     *     * setStartTime is used by HTTPSampleResult to clone the parent sampler and     * allow the original start time to be kept     */"
// how many times we had to wait to queue a sample
// Can now afford to wait a bit longer between checks
// created by client 
// created by server in readResolve method
// show what we did manage to retrieve
// client        
// For completeness
// how long we had to wait (nanoSeconds)
// for reading from CSV files // ignored currently
// returns null if nothing on queue currently
// Wait longer than a clock pulse (generally 10-15ms) // Catch an early clock pulse to reduce slop.
// OK because sampleStore is of type ArrayList<SampleEvent>
// Created by SampleSenderFactory
// we failed to add the element first time
// server        
// try to process as many as possible
// Compute bytes before stripping
// Configuration items, set up by readResolve
// Static fields are resolved on the server
// instance fields are copied from the client instance
// Set clonedSet;
// Server-only work item
// Extended property name // $NON-NLS-1$
// clonedSet = new HashSet();
// Need to maintain our own elapsed timer to ensure more accurate aggregation
// May be called by XStream
// Copy data that is shared between samples (i.e. the key items):
// Assume result is OK // because we add the sample count in later
// Add Sample Counter
// Add Error Counter
// Overrides SampleResult
// for reading CSV files
// superclass is not typed
// Names of DataHolder entries for JTL processing // $NON-NLS-1$ // $NON-NLS-1$
// Names of DataHolder entries for JMX processing // $NON-NLS-1$
// Override wrapMapper in order to insert the Wrapper in the chain
// Provide our own aliasing using strings rather than classes
// Translate to alias and then delegate to wrapped class
// superclass does not use types 
// was type, but that caused FindBugs warning
// The XML header, with placeholder for encoding, since that is controlled by property // $NON-NLS-1$
// Default file name // $NON-NLS-1$
// Property name used to define file name // $NON-NLS-1$
// Default to overall format, and then to version 2.2
// Define file format property names // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$
// Instantiate the sampler
// Holds the reverse mappings // Key: full class name Entry: primary alias
// This is written to JMX files by ScriptWrapperConverter // read from properties file; written to JMX files
// Helper method to simplify alias creation from properties
// Can have multiple aliases for same target classname
// Load the alias properties
// now create the aliases
// Remove the leading "_"
// Called by Save function
// Used by Test code
// Ensure terminated properly
// Used by ResultCollector.sampleOccurred(SampleEvent event)
// Used by ResultCollector#recordStats()
// Routines for TestSaveService
// Allow test code to check for spurious class references
//boolean OK = true;
// don't bother checking class is present if it is to be updated
// Extract version digits from String of the form #Revision: n.mm # // (where # is actually $ above)
// Check if we have a encoding to use from properties
// Used by ResultCollector when creating output files
// Write XML header if we have the charset to use for encoding
// we clean up the ResultCollector to make sure there's // no slow leaks
// Used by ScriptWrapperConverter
// Shared with TestElementSaver // $NON-NLS-1$ // $NON-NLS-1$
// Probably no point in converting this to return a SampleEvent
// just like the aggregate listener, we use the sample label to represent // a row. in this case, we use it as a key.
// Separate argument
// Used to be 'd谩bale', but caused trouble on Gump. Reasons // unknown.
// Check that calls to getResString use a valid property key name
// Called by SaveService.loadTree(InputStream reader) if XStream loading fails
"/*         * Controller         * + Before         * + Switch (cond)         * + + zero         * + + Controller sub_1         * + + + one         * + + two         * + + Controller sub_2         * + + + three         * + After         */"
// OK // $NON-NLS-1$
// Do upgrade translation:
// must always agree
// Create the property:
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-2$
// 1k - the previous 100k made no sense (there's tons of buffers // elsewhere in the chain) and it caused OOM when many concurrent // uploads were being done. Could be fixed by increasing the evacuation // ratio in bin/jmeter[.bat], but this is better.
// Called by ResultCollector#loadExistingFile() if XStream loading fails
// --------------------------------------------------------------------- // ADDITIONAL CSV RESULT FILE CONSTANTS AND FIELD NAME CONSTANTS // ---------------------------------------------------------------------
// Used to enclose variable name labels, to distinguish from any of the // above labels // $NON-NLS-1$
// Initial config from properties
// Date formats to try if the time format does not parse as milliseconds
// $NON-NLS-1$ (for compatibility, this is the original default)
// Enough to read the header column names // Get the first line, and see if it is the header
// not a valid header
// may change the format later // restart from beginning
// may be updated
// Save the name for error reporting
// method is only ever called from one thread at a time // so it's OK to use a static DateFormat
// can this happen?
// Strip off the trailing delimiter
// Map header names to set() methods
// These entries must be in the same order as columns are saved/restored.
// Try // default // delimiter
// now validate the // result
// failed to recognise the header
// We know the column names all exist, so create the config
// Check if the line is a header
// Check for Quoted variable names
// they are always last
// unknown column name
// out of order
// These methods handle parameters that could contain delimiters or // quotes:
// These methods handle parameters that cannot contain delimiters or // quotes
// Need both sample and error count to be any use
// add a message when no http sample //$NON-NLS-1$ //$NON-NLS-1$
"/*     * Private versions of what might eventually be part of Commons-CSV or     * Commons-Lang/Io...     */"
// double the quote char
// doubled quote => quote
// State of the parser
// Remove following \n if present
// while not EOF // EOF (or end of string) so collect any remaining data
"/* * This is not currently used by JMeter code. * As it uses Sun-specific code (the only such in JMeter), it has been commented out for now. */"
// Remove the JavaConfig class from the list since it only // implements the interface for error conditions.
// If a user has set parameters in one test, and then // selects a different test which supports the same // parameters, those parameters should have the same // values that they did in the original test.
// These are not useful yet, as have not found how to get updated values back //mgr.declareBean("ResponseCode", "200", String.class); // $NON-NLS-1$ //mgr.declareBean("ResponseMessage", "OK", String.class); // $NON-NLS-1$ //mgr.declareBean("IsSuccess", Boolean.TRUE, Boolean.class); // $NON-NLS-1$
// superclass does not use types
// rethrow other errors
// mainly for TestElementConverter
// Skip special properties if required
// remap the class name
// No need to check version, just process the attributes if present
// Only decode strings if inVersion = 1.0
// Names of properties that are handled specially
"/*     * Ensure that the required class variables are cloned,     * as this is not currently done by the super-implementation.     */"
// Don't save empty comments
// An additional note on using HashSets to store URLs: I just // discovered that obtaining the hashCode of a java.net.URL implies // a domain-name resolution process. This means significant delays // can occur, even more so if the domain name is not resolvable. // Whether this can be a problem in practical situations I can't tell, // but // thought I'd keep a note just in case... // BTW, note that using a List and removing duplicates via scan // would not help, since URL.equals requires name resolution too. // The above problem has now been addressed with the URLString and // URLCollection classes.
// Always decode
// default charset
// $NON-NLS-1$ // Must be same as Header.HNAME - but that is built // later
// Additional member names which are currently not written out // $NON-NLS-1$ // $NON-NLS-1$
// These are new fields; not saved unless true
// These fields are not currently saved or restored
// Save most things
// Save the new fields - but only if they are not the default
// Helper method to simplify marshall routine
// Maintain backward compatibility (bytes was not in the JMX file)
// Make sure decoding follows input file
//@GuardedBy("this") NOTE this also guards against possible window in checkForOpenFiles()
// volatile needed to ensure safe publication
// Cannot be instantiated
// checks for entries in use
// tidy up any unused entries
// Must first convert to absolute path names to ensure parents are available
// need to check if we are at EOF already
// already at EOF
// If file encoding is specified, write using that encoding, otherwise use default platform encoding
// package access for test code only
// Some known attribute names, just for convenience:
// Store the resource bundle as an attribute of the BeanDescriptor:
// Localize the property names and descriptions:
// we also provide the resource bundle
// i is used below
// We can't assign null to primitive types.
// Can occur running headless on Jenkins
// value was not provided, and this is allowed
// Not an expression (isn't or can't be), not null.
// The known tags are assumed to be valid:
// Was not a tag, so if we can't accept other values...
// setAsText failed: not valid
// setAsText succeeded: valid
// Check old values don't hang around: // fewer matches
/// final because called from ctor
// Localize the bean name // $NON-NLS-1$ // $NON-NLS-1$
// not an expression (isn't or can't be), not null.
// Provide an initial edit value if necessary -- this is an // heuristic that tries to provide the most convenient // initial edit value:
//not interested in this method.
// not an expression (can't be or isn't), not null.
// same as Parent
// Revert to the previous value:
// Get and sort the property descriptors:
// $NON-NLS-$
// Obtain the propertyEditors:
// Index is also used for accessing editors array
// Don't get editors for hidden or non-read-write properties:
// we check the class type above
// In case of BSF and JSR elements i want to add textAreaEditor as a listener to scriptLanguage ComboBox.
// Create the CSVRead function and set its parameters.
// Some editors do tiny transformations (e.g. "true" to // "True",...): // may throw IllegalArgumentException
// Initialize the GUI:
// acceptsNull // acceptsExpressions // acceptsOther
// Uninitialized -- set it to the defaults:
// Now set the editors to the element's values:
// for labels
// for editors
// for panels
// The minimum index of the tags in the combo box
// Check init file functioning
// The maximum index of the tags in the combo box
// only for use from test code
// Needs to be done before any GUI classes are instantiated
// Add a 0-sized invisible component that will take all the vertical // space that nobody wants:
// track where tags start ...
// col 1, line 1, *A
// ... and where they end
// Not a tag entry, return the original value
// will revert to last valid value if invalid
// Replace a string with its translation, if one exists
// not sure if null is passed in but no harm in setting it
// A quick verification, just in case:
// Get the beanInfo:
// Fetch data from screen fields
// Copy all property values from the map into the element:
// cannot be null
// Copy all property values into the map:
// handles hex as well
// col2, line 1, *B
// Create a panel containing the combo and the button:
// configure(element); // super.clear(); // set name, enabled. // put the default values back into the // new element
// We don't want to show expert beans in the menus unless we're // in expert mode:
// may be impossible, but no harm in // checking ...
// Add titles that don't need to be documented //guiTitles.put("Root", Boolean.FALSE);
//- JMX
// Get a WrapperEditor to provide the field or combo -- we'll delegate // most methods to it:
// acceptsNull // acceptsExpressions // acceptsOther // default
// assume it's string
//- JMX field names
// create transient item
// we set the classpath
/* Property name */
// Thread-specific variables saved here to save recalculation
// clone should never return null
"/*             * Only samplers have the thread context set up by JMeterThread at             * present, so suppress the warning for now             */"
"/* (non-Javadoc)     * @see org.apache.jmeter.samplers.RemoteThreadsListener#threadFinished()     */"
// this("Test Plan"); // setFunctionalMode(false); // setSerialized(false);
// setFunctionalMode(false); // setSerialized(false);
// Default implementation
// Moved from JMeter class
// lifecycle methods
// Use different XPath for both threads
// JMX property name: do not change
// value is the correct class
// value is of type Collection<JMeterProperty>
// private static StringProperty defaultProperty = new StringProperty();
// name cannot be null
// empty collection, local var is here to allow SuppressWarnings
// empty collection
// N.B. Other classes rely on this returning just the string.
// synch is probably not needed as only called before run starts
// Called from multiple threads
// Backward compatibility
// Expensive, so // do // once
// NOOP        
// based on this scheduler is enabled or disabled
// Gives access to parent thread threadGroup
// For access to stop methods.
"/*     * The following variables may be set/read from multiple threads.     */"
// may be set from a different thread
// threadContext is not thread-safe, so keep within thread
// Might be found by contoller.next()
// prevent any further interrupts
// make sure current interrupt is finished, prevent another starting yet
// Allow any pending interrupt to complete (OK because currentSampler == null)
// Find parent controllers of current sampler
// Check if we are running a transaction
// Find the package for the transaction
// Check if the transaction is done
// Get the transaction sample result
// Check assertions for the transaction sample
// Notify listeners with the transaction sample result
// recursive call
// Check if we have a sampler to sample
// Get the sampler ready to sample
// JMeterGUIComponent item = (JMeterGUIComponent) iter.next();
// Must not ignore this one // Make sure errors are output to the log file
// Tell the monitor we are done // Remove the ThreadLocal entry
// Perform the actual sample
// Do not send subsamples to listeners which receive the transaction sample
// Add the result as subsample of transaction if we are in a transaction
// Check if thread or test should be stopped
// Finish up
// Check if this instance is present in transaction listener list
// Check for the same instance
// listeners = controller.getListeners();
// set the scheduler to start
// call ThreadListener.threadStarted()
// If it was a HTTP GET request, then all parameters in the URL // has been handled by the sampler.setPath above, so we just need // to do parse the rest of the request if it is not a GET request
// call ThreadListener.threadFinished()
// Get the post data using the content encoding of the request
// probably not possible, but check anyway
"/*     * run the function test     */"
// Called by StandardJMeterEngine, TestAction and AccessLogSampler
// delay between checks
"/*     * Test GUI elements - run for all components     */"
"/*     * Test TestElements - implement the test case     */"
// if ! isPathExtension()
// Used by DebugSampler
// all implementations extend TestElement
// All implementations extend TestElement
"/*     * Test TestElements - create the suite     */"
// int
// Copy our name into that of the controller // otherwise name reverts
// 5 seconds
//+ JMX entries - do not change the string values
//- JMX entries
// Force a sensible start time
// Enables the scheduler
// maximum pause to use
// needs to be same time for all threads in the group
// set start and end time
// N.B. Context needs to be fetched in the correct thread
// Events often have this constructor
// Store context from Root Thread to pass it to created threads
// Copy in ThreadStarter thread context from calling Thread
// needs to be constant for all threads
// else start immediately
// set the endtime for the Thread
// ramp-up delay (except first)
// no point continuing beyond the end time
// Already waited
// ThreadStarter is daemon, but we don't want sampler threads to be so too
// return all the associated counts together
// set stop flag // interrupt sampler if possible
//@GuardedGy("this")
// Currently only used by JMeterThread
// Relative start-up time
// NOT USED
// Must be an old test plan
// Initialise the gui field values
// Maximum size to convert a document to text (default 10Mb)
// -1 to disable the write limit
// open the stream
// close the stream
// This assumes that the JMV treats a class file as a resource (not all do).
// Convert to URL for manifest
// default to plain version
// Not instantiable
// Allow reversion to original shared session context
// If we are using a single session // Otherwise
"/*             * Also set up HttpClient defaults             */"
//          HttpsURLConnection secureConn = (HttpsURLConnection) conn; //          secureConn.setSSLSocketFactory(this.getContext().getSocketFactory());
"/*     *     * Creates new SSL context     * @return SSL context     * @throws GeneralSecurityException     */"
// Now wrap the default managers with our key manager
// Get the default trust managers
// Wrap the defaults in our custom trust manager
// implementation moved to JmeterKeystore as only that has the keyType info
// file to source (overrides script)
// BSF/JSR223 language to use //-- For TestBean implementations only
// can be the empty string
// Save the actual socket
// Forward all the SSLSocket methods to the input socket
// Also forward all the Socket methods.
// Test New cookie is returned
// Must wrap non-scriptable objects before presenting to Rhino
// includes JavaScriptException, rethrows Errors
// Initialize context and global scope object
// Read-only access after class has been initialised
// ensure policy is picked up
// Calculate each time, as likely to be called for each add
// must follow the checkbox setting
// likely a wrapped exception from a LiveConnect call. // Display its stack trace as a diagnostic
//load additionnal name conversion rules from plugins
// names are Strings
// no point dividing by 1
// 1024=bytes per kb
// account for multiple samples // not yet intialised
// 1000 = millisecs/sec
// Conversions for milli and nano seconds
// Use actual class name for log
// Most subclasses will need these:
"/*     * Finds all classes that extend the classes in the listSuperClasses     * ArrayList, searching in the listAllClasses ArrayList.     *     * @param superClasses     *            the base classes to find subclasses for     * @param listAllClasses     *            the collection of classes to search in     * @param innerClasses     *            indicate whether to include inner classes in the search     * @return ArrayList of the subclasses     */"
// case we are measuring real time of spedition
// we have a file, read and process it
"/*     * Wraps the socket in a slow SSL socket if necessary     */"
// What host am I running on?
// Special flag for use in debugging resources
// Provide Random numbers to whomever wants one
// [sebb] assertEquals(item2, // clonedItem.getProperty(item2.getName()));
// for java sockets // for Commons Httpclient sockets
// Prompt is unnecessary
// $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ // For use in debugging: // $NON-NLS-1$
// Are we the default language?
// Keep existing settings
// Don't change locale from en_GB to en
// language change worked // Check if we at least found the correct language:
// no need to reset Locale
// Special mode for debugging resource handling
// Can be returned by headless hosts
// $NON-NLS-1$                
// Redisplay.
// Empty arrays are immutable
// End Method
// Empty value // $NON-NLS-1$
// If not empty then script in ScriptText will be compiled and cached
// LRUMap does not support generics (yet)
// For use in debugging:
// NOOP   
// Also handles read(byte[])
//-- For TestBean implementations only
// ensure variables are not null
// now temp2 has the lowest of the three components
// The response includes the headers from the mirror server, // we want to skip those, to only keep the content mirrored. // Look for the first CRLFCRLF section
// convert to telnet port
// Reset for other users
// Tell server that we are done
// Have we yet tried to load the truststore?
// Ensure not null
"/*     * The password can be defined as a property; this dialogue is provided to allow it     * to be entered at run-time.     *     * However, this does not gain much, as the dialogue does not (yet) support hidden input ...     *    */"
// we've tried ...
// empty if not provided // use the system property to determine the type // otherwise use the name
// Also handles write(byte[])
// Helper method to find a test path
// Temporary copies, so can set the final ones
// Script file to initialize the Interpreter with
// Logger to use during initialization and script run
// Can't instantiate
// Called from ctor, so must be private (or final, but it does not seem useful elsewhere)
// Do this before starting the script
// Check file so we can distinguish file error from script error
// Programming error
// Also programming error
// For use by Unit Tests
// configure the document builder factory
// default empty array to prevent NPEs
// No point checking an empty keystore
"/*         * Note: if is == null, the arrays will be empty         */"
// i.e. is == null
// This should be ignored, as there is no value
// number of samples in this entry
// No samples collected ...
// Better behaviour when howLong=0 or lastTime=0
// Test multi-cookie header handling
// Already failed
// this is our first sample, set the start time to current timestamp
// Connect to the http server, and do a simple http get, with // a pause in the middle of transmitting the header
// Connect to the http server, and do a simple http post, with // a pause after transmitting the headers
// Always update the end time
// = elapsed
// Appears not to be used - however it is invoked via the Functor class
// Only for use by test code
// Code duplicated from getPageSize()
// keep track of classes created
// (for instructional purposes only!)
// Do something here ...
"/*             * Set up the sample result details             */"
// End timimg
"/*     * Helper method     */"
// Specific setup
// The name of the property used to hold our data //$NON-NLS-1$
// Note: the file panel already includes the error logging checkbox, // so we don't have to add it explicitly.
// Arguments args = sampler.getArguments();
// Did sample succeed? // Sampler data
// Do something ...
// A String property:
// Number of parameters expected - used to reject invalid calls
// We have a default
// Throwable wanted
// Comment wanted
// Common output function
// Routine to perform the output (also used by __logn() function)
//$NON-NLS-1
// Thread method is potentially expensive
// Allow variable to be omitted
//++ These are JMX file names and must not be changed //$NON-NLS-1$
// vars can be null if run from TestPlan
// Remove initial empty entry
// $NON-NLS1$ // $NON-NLS1$
// did we find BeanShell?
// Mainly for bsh.EvalError
// Pass in some variables
// Execute the script
"/*     * Helper method for use by scripts     *     */"
// Can happen if called during test closedown
// Parameters are stored here
// For unit tests, see TestJexlFunction
// String or Integer
// List of parsers to test. Should probably be derived automatically
// A HTTP GET request, with encoding not known 
"/*             * N.B. Stop reading the file if we get a blank line: This allows             * for trailing comments in the file             */"
// Now evaluate the script, getting the result
// two delimiters in a row; add an empty String
// Lines in the file, split into columns
// 0-based
// name of the file
// Catch the trailing delimiter
"/*         * the beginning of the line is a ""delimiter"" so that ,a,b,c returns """"         * ""a"" ""b"" ""c""         */"
// will be null if function is used on TestPlan
// Does the order matter?
// Added to support external testing
// Only modified by static block so no need to synchronize subsequent read-only access
// May be null if function is used on TestPlan
// A HTTP GET request, with ISO-8859-1 encoding
// @GuardedBy("this") // needed for error messages
// @GuardedBy("this") // should we try to open the file?
// Have we used myCurrent yet? // Set to 1 if start number is missing (to allow for end without start)
// Low chances to be non numeric, we parse
// Don't process invalid numbers
// Don't process invalid numbers (including "")
// Has chances to be a var
// for next time
// EOF, re-open file
// Did we open the file?
// Are we processing a file // sequence?
// there is no variable name
// File was not opened successfully // Are we processing a file sequence?
// varName keeps its value and sum has not taken  // into account non numeric or overflowing number
// Split string provided
// We don't have a local copy
// Prevent separate instantiation
/* The cache of file packs - for faster local access */
// save the global copy
// There's no global copy either
// save our local copy
// Parameter list
"/*             * All done, so return             */"
// this may need mangling due to peeks
// what column // is wanted?
/* The cache of file packs - used to improve thread access */
//means platform default
// empty encoding, return to platorm default
"/*     * Only needed locally     */"
"/*     * This Map serves two purposes:     * - maps file names to  containers     * - ensures only one container per file across all threads     */"
"/*     * Called by CSVRead(x,next) - sets the row to nil so the next row will be     * picked up the next time round     *     */"
"/*     * called by CSVRead(file,alias)     */"
// First call
// Already logged
// Save in case needed later
// Not yet open
// we have a variable name
// set the required variables
// test invalid byte arrays
//means no restriction
// Only obtain and cast the return if needed
// empty chars, return to null
// Default to milliseconds
// vars will be null on Test Plan
//MAXINT = 2,147,483,647
// Only modified in class init
// We have a 3rd parameter
// Resolve any aliases
//$NON_NLS-1$ //$NON_NLS-1$
// Not synchronised, so can't be shared
// Allow for empty name
// Commons HttpClient only
// Original and clone should be equal
// Values for creating tokens
"/*     * Convert to a shorter String for test purposes     *     * @return the string value     */"
// Reached end of input arguments - perform final processing
// Key is String or Integer
// strip the null
// variables used while parsing options.
// Change the original
// Yes, so the second argument is missing
// should never get to here when stringIndex != 0
// Long optional arg must have = as separator
// consume stray character
// Are we about to start a new option?
// strip the -
// 2nd argument
// its a long option
// Parse the arguments that are not options
// if it is a short option then parse it else ...
// equivalent to new TreeMap((Comparator)null);
// Make sure the hashCode depends on the order as well
// super-class does not use generics
// Check sample increments OK
// This will only work with an Applet .class file. // Ideally, this should be upgraded to work with Objects (IE) // and archives (.jar and .zip) files as well.
// this occurs when id == 0 and user has not supplied a descriptor // for arguments
// if get to an arg barrier then return to normal mode // else continue accumulating options
// Used for the RuntimeException to short-circuit the traversal // $NON-NLS-1$
// N.B. The keys can be either JMeterTreeNode or TestElement
// do nothing - means object is found
// end method
// capture the output
// helper method to allow input and output to be changed for chaining
// capture the intermediate output
// not yet terminated
// not yet terminated // N.B. proc.destroy() is called by the finally clause in the run() method
// we are capturing output // Default charset is probably appropriate here.
// $NON-NLS-1$ (do not change) // $NON-NLS-1$ (Firefox and Windows) // $NON-NLS-1$ (Opera)
// $NON-NLS-1$ // $NON-NLS-1$ $NON-NLS-2$ // $NON-NLS-1$ $NON-NLS-2$
// i.e. does keytool support -gencert and -ext ?
// not instantiable
// Create cert for CA using root (requires Java 7 for gencert)
// Create the self-signed keypairs (requires Java 7 for -ext flag)
//rem generate cert for DOMAIN using CA (requires Java7 for gencert) and import it
// generate the request
// Export the Root CA for Firefox/Chrome/IE
// generate the certificate and store in output file
// generate the keypair for the host
// Copy for Opera
// alias // subject
// A temporary cache for the focus listener
// get the certificate request
// Add the sub components
// Functor count = 0 is handled specially
// Necessary to avoid NPE when testing serialisation
// if provided
// Compare if the value has changed, since we received focus.
// used by TableEditor
// We use 80% of height
// private JMenu menu;
// (Comment 16, Huw)
// uninstantiable
// Constructors
// NOTUSED Dimension dim = layoutSize(parent, false);
// work out the total size
// otherwise there's a vgap too many // Work out the anchor paint
// do layout
// closes reader as well
// non-instantiable - static methods only
// Further configuration
// Make sure same hierarchy is used
// This happens if the default log-target id-ref specifies a non-existent target
// We use a TreeMap because we need the entries to be sorted
// Running values, updated for each sample
// Set the top-level defaults //$NON_NLS-1$
// This can happen if a log-target id-ref specifies a non-existent target
// If the name contains at least one set of paired single-quotes, reformat using DateFormat
// remove the package prefix
// e.g. Long.MAX_VALUE
// Check blank lines are treated as EOF
// e.g. Long.MIN_VALUE
// use Math.round () instead of simple (long) to provide correct value rounding
// ignored. May happen occasionally, but no harm done if so.
// For n same values in sum of square is equal to n*val^2
// no need to divide by 1
// insert new value
//        p.add(makeMainPanel(), BorderLayout.CENTER); // Force a minimum table height of 70 pixels
// Methondname must always be provided.
"/*     * If non-null, then any argument list passed to invoke() will be ignored.     */"
"/*     * This depends on the class or invokee and either args or types;     * it is set once by doCreateMethod(), which must be the only method to access it.    */"
// If class not provided, default to invokee class, else null
// If types not provided, default to argument types, else null
// static only
// Check reflexive
// Should never happen
// Use constructor class if present // use invokee if provided // use argumenrs if provided
// parent classes to check // are inner classes OK?
// No need to check it again
// This is not a requirement
// It does not contain a required string
// It contains a banned string
// are inner classes OK?
// For each directory in the search path, add all the jars found there
// Should only be called with classes that extend annotations
// first get all the classes
//subClassList);
"/*     * Returns the classpath entries that match the search list of jars and paths     */"
// no need to look further
// $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$// $NON-NLS-2$
// might throw an exception, assume this is ignorable
// $NON-NLS-1$ // $NON-NLS-2$ // $NON-NLS-1$ // $NON-NLS-2$ // remove ".class"
// Recursive call
//assertEquals("1a:aa.",f1.invoke());// N.B. returns different result from before
// Remove trailing splitter
// Found splitChar at end of line
// This is the new length
// we saw a delimiter last time // so add the default
// "<?xml "
// EOF
// $NON-NLS-1$ add zero padding
// @see TestJorphanUtils for unit tests
// SingletonHolder idiom for lazy initialisation
// These are needed for invoking the method
// If we could not find the method, store the exception here
// Only invoked by IODH class
// get the platform beans
// should never fail // See if we can actually find the object // Should never happen
// Prevent useless dump attempts
// the string so far
// opened tags
// don't do anything
// java.util.Date d = null;
//-- JMX file attributes - do not change
// Don't instantiate class
//++ JMX file attributes - do not change
// i.e. no filter
// The TestCase to run
// the Method objects for setUp (@Before) and tearDown (@After) methods // Will be null if not provided or not required
// The method name to be invoked
// The wrapper used to invoke the method
// The name of the class containing the method
// create a new TestResult
// Convert JUnit4 failure to Junit3 style
// copy the original stack trace
// we should log a warning, but allow the test to keep running
// this should be externalized to the properties
// probably should not happen
// ensure correctly set on initial display // ensure correctly set on initial display
// if the string constructor is not null, we use it. // if the string constructor is null, we use the empty // constructor to get a new instance
// first we see if the class declares a string // constructor. if it is doesn't we look for // empty constructor.
// Must be final to create instance
// Convert JUnit4 AssertionError failures to JUnit3 style so // will be treated as failure rather than error.
// Dummy to ensure there is a test to run
// Generates expected Exception
// let bad input fail silently
// Succeeds only if Before method - verifyTwo() - is run.
// Fails to generate expected Exception
//or if you have assertions enabled
//should always fail
//should not fail
// Generate a test error
// will generate Divide by zero error
// Normal test failure
// Generate test error
// int spare = cntr.getThreadInfo().getMaxSpareThreads();
// loop to fetch desired connector
// default : get first connector
// CRLF blank line found
// e.printStackTrace();
// private MonitorModel DATA;
// log.warn("Only for use in unit testing");
// I18N: Contains fixed English text ...
// DATA = model;
// optional connector name prefix
// private List workerslist;
// the equations
// for now just swallow the exception
// Should be OK
// surl can be null if read from a file
// Check if target of merge is reasonable
// private boolean startDoc = false; // private boolean endDoc = false;
// this.startDoc = true; // Reset all work variables so reusing the instance starts afresh.
// this.startDoc = false; // this.endDoc = true;
// Note: the element is a ConfigTestElement, so cannot use FTPSampler access methods
// used for interrupting the sampler
// should probably come from the setup dialog
// Could not access file or other error
// TODO
// LF blank line found
// Does not appear to be used externally; called by #loadProjectFile()
// These are handled specially by addToTree
// Document doc = null;
// write to file
// The following used to be jacks_password, but the Arguments class uses // HashMap for which the order is not defined.
// Should the file data be saved in the response? // $NON-NLS-1$
// No need to close this // No need to close this
// The value is not encoded
// Get the filename
// Set the values retrieved for the file upload
// WEB SERVER PANEL
// need to clear because the
// 2 columns size
// WEB REQUEST PANEL
// Set false for AJP
// Body data
// Default changed in 2.3 and again in 2.4
// Concurrent resources download // $NON-NLS-1$
// Embedded URL match regex // $NON-NLS-1$
// don't automatically expand when merging
// If RAW data and Parameters match we allow switching
// Called by JMeter#startGui()
// Convert CRLF to CR, see modifyTestElement
// all sub-components with setFont(null) inherit this font
// Only display the port number if it is meaningfully specified
// Helper method to simplify code
// one builder for all requests in a thread
// Implementation
// PROTOCOL
// CONTENT_ENCODING
// may well happen
// should never happen
// Note: initialised with error = failure = false
// If there is no data, then switching between Parameters and Raw should be // allowed with no further user interaction.
// If there is data in the Raw panel, then the user should be  // prevented from switching (that would be easy to track).
// If the Parameter data cannot be converted to Raw, then the user should be // prevented from doing so raise an error dialog
// Cached value
// package-protected to allow access by unit-test cases
// helper method to save the cache entry
// if no-cache is present, ensure that expiresDate remains null, which forces revalidation
// the max-age directive overrides the Expires header,
// else expiresDate computed in (expires!=null) condition is used
// Helper method to deal with missing headers - Commons HttpClient
// Apache HttpClient
"/*     * Is the sample result OK to cache?     * i.e is it in the 2xx range?     */"
//+ JMX attributes, do not change values // $NON-NLS-1$ // $NON-NLS-1$ // $NON-NLS-1$ //-
// means counting from end
// i.e. not using Expires // Check that we are processing Expires/CacheControl
// cache the value
// echo back
// create a parser:
// Check if we have read all the headers
// We know when to stop reading, so we can allow the read method to block
// doc =
// use null for no expiry
// if everything went fine then xml schema validation is valid
// Store session cookies as well as unexpired ones
// Only set message if error not yet flagged
// Has its own debug log; removes matching cookies
// Helper method to construct SAX error details
// This means the cookie was wrong for the URL
"/*         * Can be caused by: - failure to read XSD file - xml does not match XSD         */"
// tweak diff HC3 vs HC4
"/*         * Can be caused by: - premature end of file - non-whitespace content         * after trailer         */"
// is the Sample the correct size?
// Use the name of the test element, otherwise cannot enable/disable debug from the GUI
// Check how much of the body we have already read as part of reading // the headers // We subtract two bytes for the crlf divider between header and body
// The reqest has no body, or it has a transfer encoding we do not support. // In either case, we read any data available
// We use multi-line mask so can prefix the line with ^ // $NON-NLS-1$ $NON-NLS-2$
// the signer certificate
"/*     * @param response @return     */"
// Needs to be package-protected to avoid problem with serialisation tests
// start off with a merged object as a copy of the local object
// has the Sample lasted too long?
// iterate thru each of the other headers
// find the same property in the local headers
// we have a match
// prefer values from the other object
// use the other object's value
// break out of the inner loop
// the other object has a new value to be added to the merged
//$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$ //$NON-NLS-1$ $NON-NLS-2$ //$NON-NLS-1$
// Saves the error if one occurs
// Pass request to new thread
// TODO Charset ? // $NON-NLS-1$
// Only used by GUI
// Ensure that there is always a collection available
// default level // allow override by system properties
//final int _ignored = 1;
//++ JMX tag values // $NON-NLS-1$
// ensure that the initial cookies are copied to the per-thread instances
//long max was used to represent a non-expiring cookie, but that caused problems
// only save unexpired cookies
// ensure data is set up OK initially
// no point in checking if we don't have anything to compare against
// do nothing, the cookie manager has to accept changes.
// Scan for any matching cookies
"/*     * Remove all the cookies.     */"
// Used by HttpMirrorServer
// create parser
// No need to call clear
// String md5Result = DigestUtils.md5Hex(resultData);
// Used for saving entries to a file
// evaluate result
/* TODO: MVW: Why is this not done in GEF? */
// TODO: This is a temporary crutch to use until all Figs are updated // to use the constructor that accepts a DiagramSettings object
// TODO: There is a cyclic dependency between SelectionRerouteEdge // and FigEdgeModelElement
// TODO: We need to rethrow this as some other exception // type but that is too much change for the moment.
// TODO: It's probably worthwhile to abstract and factor // this chooser and directory stuff. More file handling is // coming, I'm sure.
// TODO: complete this implementation - tfm
// TODO: This will vary based on the type of the TagDefinition
//setFontFamily("dialog"); /* TODO: Is this needed?*/
"/**     * TODO: Move this into the toolbar project.     */"
"/*     * TODO: This is a temporary method of making sure the model is updated     * on loss of focus of a combo box. In the long term we should attempt to     * update the model on each keypress.     *      * @see java.awt.event.FocusListener#focusLost(java.awt.event.FocusEvent)     */"
// These methods are based on the GraphEvents. These need replacing by // more specic meaningful requests of the diagram interface model
// TODO: All super constrcutors should take a GraphModel
// workaround for missing ability to parse "*"
// TODO: Needs to be tidied up after stable release. Graph model // should be created in constructor
// this is wrongly called with a null handle, // as a workaround we return an empty collection
// TODO: not navigable this direction? - tfm
// TODO: this doesn't look right - review - tfm
"/**     * @return the statemachine     *     * TODO: If this method is called by any of the Figs, it will introduce     * a dependency cycle.  It would be much better if they could just     * use {@link org.argouml.uml.diagram.ArgoDiagram#getOwner()} which does     * the same thing.     */"
// TODO: Need to clean up objectToId // (can we do it based on modelelement delete // notifications?)
"/**     * The constructor.     * TODO: Why does this method not handle all settings     * (KEY_DEFAULT_SHADOW_WIDTH is missing)?     */"
// TODO: Performance critical method
// TODO: Needs work. Must determine which Figs enclosed // in the pool are within the bounds of this Fig // and translate those.
// TODO: Optimize for root model case? - tfm
// TODO: Do we really need to do this? Carried over from old behavior
// TODO ElementOwnership is not in ModelSubsys!!
// TODO: This seems like a brute force workaround (and a very // indirect one at that).  It appears to be needed though until // we fix the problem properly. - tfm 20070904
// TODO: Is this really needed?
// TODO: UML 1.4 spec requires both client and supplier to be // in the same model - tfm
// TODO: Unused?
// These may not actually make any difference at present (the code // behind addTrigger needs more work).
// TODO: temporary - let tree expand implicitly - tfm
//TODO: split into an inherited attr critic and a local //attr critic
// TODO: Should throw if the string is not good?
// TODO Handle multiple top level packages
"/**  * A wizard which adjust the threshold for critics. <p> *  * TODO: Make the treshold setting adjustable without using the wizard,  * and make it persistent.  * Maybe by using the ""Configure"" button on the Browse Critics dialog. * * @see org.argouml.uml.cognitive.critics.AbstractCrTooMany * @author mkl * */"
// TODO: Better if we wrap in a ProfileException and throw that
// Create our bandbuffer which is just a small slice of the image // TODO: We used a fixed height buffer now, but we could be smarter and // compute a height which would fit in some memory budget, allowing us // to use taller buffers with narrower images, minimizing the overhead // of multiple rendering passes
// TODO support iterate declarator
"/**     * @return Returns the default stereotype view     * TODO: Enumeration here?     */"
//TODO: How about FigAssociationClass?
// TODO: This shouldn't depend on the current project, but for now // just make sure it's defined and that we have an undo manager
"/**     * Remove this diagram from existence.     *      * TODO: Move to GEF     */"
// TODO: This needs to be managing undo on a per-project basis // instead of using GEF's global undo manager
// TODO: define constants for magic numbers
"/** * This class gives critics access to parts of the UML model of the * design.  It defines a gen() function that returns the ""children"" * of any given part of the UML model.  Basically, it goes from * Project, to Models, to ModelElements.  Argo's critic Agency uses * this to apply critics where appropriate. * * TODO: This thinks it knows all the composition associations of the * the UML metamodel, but it is a) incomplete and b) not updated for * UML 1.4.  This should be done using information from the metamodel * rather than hardwired code. - tfm - 20070205 * * @see org.argouml.cognitive.Agency * @see org.argouml.cognitive.Designer * @author jrobbins */"
// TODO: consider inherited associations? // TODO: self loops are double counted
// TODO: Multiple associations between the same pair of elements // need to be special cased so that they don't overlap - tfm - 20060228
"/**     * Gets the current threshold.     *     * TODO: Should this be protected?     *     * @return The current threshold.     */"
//TODO: There is a cyclic dependency between this class and FigConcurrentRegion
// TODO: // Move to MMUtil or some other common place and merge with // UMLComboBoxEntry::findNamespace()
// needs more work: sending and receiving icons
"/** * An object tagged as being the owner of a FigEdgeNote. Has knowledge * about the source and destination of the FigEdgeNote. <p> * * The source and destination are ModelElements. * At least one of them is a Comment - but they may be both Comments. * * TODO: There's tons of special case code scattered around ArgoUML for this * one class since it is the only ""owner"" of a FigEdgeModelElement which is not * a UML element.  We should find a way to generalize this.<p> *  * TODO: Issue 3031 requires this class to be replaced by  * a similar mechanism as the n-ary association class:  * the node and the edges shall all have the same owner,  * i.e. the UML Comment object.  *  * @since Jul 17, 2004 * @author jaap.branderhorst@xs4all.nl */"
// TODO: Offenders need to be more strongly typed. - tfm 20070630
// if "expression" implements one of the combobox, select it // TODO ? Do it in eUML module project ?
"/**     * @return the set of offenders     *     * TODO: The return value needs to be more strongly typed. - tfm - 20070630     */"
// TODO: Do all these classes need to be in their own files? public?
// must be overridden to make sense // (I didn't want to make it abstract because it might not be required)
//TODO: should fire its own event and ProjectBrowser //should register a listener
// TODO: Use default value of appropriate type for TD
// Our superclass no longer has this method, so perhaps this whole // thing should be removed? - tfm  //        super.updateListeners(newOwner);
// TODO: // This is actually a hack! Some diagram types // (like the statechart diagrams) access the current // diagram to get some info. This might cause // problems if there's another statechart diagram // active, so I remove the current project, before // loading the new one.
// The following is specifically for Realizations // TODO: correction in GEF, it should use InterfaceRealization, not Abstraction
// TODO: still not used, because in ArgoUML String is "hardwired"
// TODO: In UML 2.x a TagDefinition has become a Property on a Stereotype // Anything that uses this will probably need to be reviewed/changed. // Just return Property for now.
// Language must be unique // TODO: do it in the model (if don't use the dialog, and // change the first)
// TODO: Cyclic dependency between PersistanceManager and here
// TODO: This should not be an instance variable. It should just be // created and discarded as needed.
// Check for duplicate name and rename if necessary
"/**     * Creates a new OCL critic     *      * @param oclConstraint ocl expression     * @param headline headline     * @param description description     * @param moreInfoURL the info url     * @param knowledgeTypes the knowledge types     * @param supportedDecisions the decisions     * @param priority the priority     * @throws InvalidOclException if the ocl is not valid     *      * TODO: Do these need to be Lists or can they be simple Collections?     */"
// TODO: why is this inside a block? Forgotten else branch?!? // Question by euluis @ 2009-08-16.
// TODO: maybe separate name
// TODO: A minimal update strategy would be better here to // minimize work and events firing, but it may be better to // deprecate the method and force calls to manage updates // themselves (since they probably usually want to just add // or remove a single element) - tfm 20061108
// TODO: What progressMgr is to be used here? Where does //       it come from?
"/* TODO: Here we should e.g. show the user a message that         * the loaded project was using a Notation that is not         * currently available and a fall back on the default Notation         * was done. Maybe this can be implemented in the         * PersistenceManager? */"
"/*     * TODO: This is the same as in parent - remove?     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateBounds()     */"
// TODO: Move magic number 10 to descriptive constant
// TODO: Should we handle <<access>> and <<import>> here?
// TODO: remove when code below in characters() is removed //    private static final String    RETURNSTRING  = "\n      ";
// TODO: This probably needs more qualification - tfm
// TODO: This method is obsolete.  Use getInputMap etc as below
// TODO: check semantics here - tfm
// TODO: Move to GEF
// TODO: Find a way to replace this dependency on Project
// TODO: this should be a configurable property
// and its stereotypes // TODO: Aren't stereotypes handled elsewhere?
//TODO: should fire its own event and ProjectBrowser //should register a listener - tfm
// TODO: Support more than one body/language
// TODO: Remove this old implementation after 0.22 if it's // demonstrated that it's not needed. - tfm
// TODO: Can we find a better way to do this than hard coding colour?
// TODO: There's a cyclic dependency between FigConcurrentRegion and // the actions ActionAddConcurrentRegion
//   public Object getGoalInfo(String goal) { //     return _goals.getProperty(goal); //     /* TODO: we need a better representation of goals */ //   }
// local variables - what do they do?
/* TODO: really should be a separate class */
"/**     * A modelelement has been changed.     * Now we give it priority to be checked by the critics ASAP.     *     * TODO: why is is synchronised?     * TODO: what about when objects are first created?     *     * @param dm the design material     * @param reason the reason     */"
// TODO: We could generalize this to initialize more stuff if needed
"/*     * TODO: Why is this here? Who is calling this?     *     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */"
// TODO: This probably belongs with the Diagram subsystem
// TODO: Change this to use an UndoManager instance per project when // GEF has been enhanced.
// hack for to do items only, should check isLeaf(node), but that // includes empty folders. Really I need alwaysLeaf(node).
/* TODO: Why was this next line in the code so long? */
// This method has insufficient information to call buildExtensionPoint. // Thus we'll need to create one, and pray that whomever called us knows // what kind of mess they got.
// TODO: Do we need to set the input encoding here? It was // done for ToDo parsing, but none of the other member types // InputSource inputSource = new InputSource( // new InputStreamReader(inputStream, Argo // .getEncoding()));
// TODO: Why is this not executed?  Remove if not needed - tfm
"/**     * Loads a project displaying a nice ProgressMonitor     *     * @param file      the project to be opened     * @param showUI    whether to show the GUI or not     *     * TODO: This needs to be refactored to be GUI independent - tfm     */"
// TODO: This doesn't belong here, but it's not a good time // to move it.  Find someplace less obtrusive than this // inner loop. - tfm
// TODO asArgument??
// TODO: What does the magic number 6000 represent here? // Put it in an explanatory literal! - tfm - 20071205
// TODO: This creates a dependency on the Critics subsystem. // Instead that subsystem should register its desired menus and actions.
// TODO: Get rid of magic numbers!  Figure out which represent line // widths vs padding vs offsets
// References to actions that we need for Mac hack
// TODO: Convert all to use standard factory registration
// TODO: should define a CompoundCritic
// TODO: This class is part of a dependency cycle with ProjectBrowser and
// hack in order to be able to compile in java1.3
// TODO: Won't our use of PathComparator take care of uniqueness?
// Andreas: just temporary for the uml2 pre-alpha versions!
// now get all classifiers imported from other packages // TODO: This should probably happen automatically in // getAllModelElementsOfKind() - tfm
// TODO: Add an "open most recent project" command so that  // command state can be decoupled from user settings?
"/*         * Install the trap to ""eat"" SecurityExceptions.         *         * NOTE: This is temporary and will go away in a ""future"" release         * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4714232         */"
// TODO: What are these magic numbers?
"/*     * Create a TaggedValue with a tag/type matching our source module     * filename and a value of the file's last modified timestamp.     *     * TODO: This functionality needs to be moved someplace useful if     * it's needed, otherwise it can be deleted. - tfm - 20070217     */"
"/**     * Choose the arrowhead style for each end. <p>     *     * TODO: This is called from paint(). Would it not better     * be called from renderingChanged()?     */"
// TODO: Why isn't this stuff managed by the nameFig itself?
// Andreas: just temporary: a warning dialog for uml2...
"/** * TODO: this class should be moved to package * org.argouml.uml.ui.behavior.common_behavior. */"
// If is a classifier role, it must return the sent messages. // In other cases, returns an empty list. // TODO: Must be the incoming messages or the sent ones?
"/**     * Initialize the ArgoUML application version, so that     * {@link ApplicationVersion#getVersion()} doesn't return null.     *     * @throws Exception if something goes wrong...     * TODO: move this to an helper class.     */"
"/**     * Create an Enumeration.     * @return Object new Enumeration     * @since UML 1.4     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
// TODO: Lets move this behind the model interface
// If is a classifier role, it must return the received messages. // In other cases, returns an empty list. // TODO: Must be the outgoing messages or the received ones?
"/** * ArgoEventPump is an event dispatcher which handles events that are global * in nature for the entire application. * <p> * TODO: DiagramAppearance and Notation events are not application-wide and will * be moved from here to someplace more specific in the future so that they can * be managed on a per-project or per-diagram basis. */"
"/**     * Create an empty but initialized instance of a UML Node.     *     * @return an initialized UML Node instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
// TODO: Once we have fixed all subclasses the title will // always be localized so this localization can be removed.
"/**     * Get the classifier (participant) of an AssociationEnd.     *     * TODO: Rename this getParticipant to align with UML spec - tfm - 20070331     * @param handle The AssociationEnd to get from.     * @return The classifier of the AssociationEnd.     */"
"/**     * Determine if the passed parameter has a RETURN direction kind.     *      * TODO: This is a duplicate of {@link #isReturn(Object)}     *      * @return true if it is a return direction kind     * @param handle the parameter     */"
// TODO: Is it appropriate the TemplateableElement as the client and a // list of TemplateParameterSubstitution as the list of parameters?
// TODO: ActionState, CallState, and SubactivityState have been replaced // in UML 2.0 by explicitly modeled Actions
// TODO: Silently ignore instead? //        return false;
"/**     * Find the Icon for a given model element.     *     * @return The Icon or <code>null</code> if there is no Icon.     * @param value The model element.     *     * TODO: This should not use string matching on classnames to do this     *       since this means that we have knowledge about how the model     *       elements are implemented outside of the Model component.     */"
// Initialze GEF's version of the loader too // TODO: We should probably be passing icons that we loaded ourselves // but there doesn't seem to be a way to do that with GEF - tfm
"/**     * Return the key (tag) of some tagged value.     *     * TODO: This does exactly the same as getTag(Object). Remove one of them.     *     * @param handle The tagged value.     * @return The found value as String.     */"
// TODO: Lots more types - Duration, Instance, Interval
// TODO: Can we get this from the metamodel? //$NON-NLS-1$
// TODO: How do we get the Connectors of an Association?
// TODO: Remove?  Can't be localized
// A Classifier can only have a single unnamed ClassifierRole, so // TODO: This probably belongs in a critic instead of here
"/**     * The part of the design this issue affects.     * <p>     * Each member is either a model element, a {@link Fig}, or a     * {@link Diagram}.     * <p>     * TODO: Offenders need to be more strongly typed. Because there is not a     * common supertype for these three types, we can't type this list. We     * should introduce a common supertype/interface. - tfm 20070630     * <p>     * The list of offenders is set once (e.g. by the constructor)     * and cannot change.     * <p>     */"
"/**     * Reply a Set of design material's that are the subject of this ToDoItem.     *     * @return the offenders     * TODO: Offenders need to be more strongly typed. - tfm 20070630     */"
// TODO: this could be a huge collection - find a more efficient way
// TODO: Generalize - assumes UML type names are unique // without the qualifying package names - true for UML 1.4
"/** * Models the designers goals in making this design.  Provides useful * control information to the Agency so that only critics relevant to * the designers goals are ever executed. * * TODO: Really this should be part of a domain extension * and not the kernel.  I have not developed this part of Argo very * much. * * @author Jason Robbins */"
// TODO: Do we need to worry about UmlClass, UmlPackage, etc?
// TODO: This should fetch the stereotype from our profile
// TODO: Encountering a deleted object during // any part of this traversal will // abort the rest of the traversal. // We probably should do the whole traversal // in a single MDR transaction.
"/**     * Return the default type for the return parameter of a method.     *      * @return a Classifier to use as the default type     * TODO: This belongs in ProjectSettings. - tfm     */"
// TODO: Hold lock for entire recursive traversal?
// TODO: Add EnumerationLiteral someplace
// TODO: This is well-formedness rule from UML1.4.2 // 4.5.3.20 [1] A root cannot have any Generalizations. // self.isRoot implies self.generalization->isEmpty
// TODO: Lets build this into a separate buildToolbar method
// TODO: This references the concrete factory // We need a factories factory
"/**     * Set the target anew.     *     * TODO: This method is never used. What is its intention? Remove it?     */"
// TODO: This first loop just to count the items appears // redundant to me - tfm 20070630
"/** Create a new panel for the given step. For example, When the     *  given step is 1, create the first step of the wizard. <p>     *     *  TODO: It might be convient to make a reusable     *  subclass of Wizard that shows all textual steps to guide the     *  user without any automation.  Such a Wizard could be easily     *  authored, stored in an XML file, and efficiently presented by     *  reusing a single panel with a single JTextArea.     *     *  @param newStep the number of the step to make a panel for.     *  @return a new panel for the given step     */"
// TODO: TabToDo should listen for an event that this fires so that we // can decouple from the ProjectBrowser. - tfm
// TODO: This is using internal knowledge of GEF.  It should // handle this itself. - tfm
"/**     * Copy a file from source to destination.     *     * TODO: Perhaps belongs in a utilities class of some sort.     *     * @param source the source file to be copied     * @param dest the destination file     * @return success status flag     */"
"/* TODO: This is using internal knowledge of GEF.  It should         * handle this itself. - tfm         * MVW: Move into something like Main.initGEF() */"
"/**     * For Locale selection.<p>     *     * TODO: Detect the available locales from the available files.     *     * @return Locales used in ArgoUML     */"
"/**     * Return the default type for an attribute.     *      * @return a Classifier to use as the default type     * TODO: This belongs in ProjectSettings. - tfm     */"
"/**     * Searches for a type/classifier with name s. If the type is not found, a     * new type is created and added to the current namespace.     * <p>     * TODO: Move to Model subsystem - tfm 20070307     *      * @param s     *            the name of the type/classifier to be found     * @return Classifier     */"
/* TODO: What if used elsewhere? */
"/**     * Searches for a type/classifier with name s. If defineNew is     * true, a new type is defined if the type/classifier is not     * found. The newly created type is added to the currentNamespace     * and given the name s.     * <p>     * TODO: Move to Model subsystem - tfm 20070307     *      * @param s the name of the type/classifier to be found     * @param defineNew if true, define a new one     * @return Classifier the found classifier     */"
"/**     * Moves some object to trash, i.e. deletes it completely with all     * dependent structures. <p>     *     * Deleting an object involves: <pre>     * - Removing Target history     * - Deleting all Fig representations for the object     * - Deleting the UML element     * - Deleting all dependent UML modelelements     * - Deleting CommentEdges (which are not UML elements)     * - Move to trash for enclosed objects, i.e. graphically drawn on top of     * - Move to trash subdiagrams for the object     * - Saveguard that there is always at least 1 diagram left     * - If the current diagram has been deleted, select a new one to show     * - Trigger the explorer when a diagram is deleted     * - Set the needsSave (dirty) flag of the projectmanager     * </pre>     *     * @param obj The object to be deleted     * @see org.argouml.kernel.ProjectImpl#trashInternal(Object)     * <p>      * TODO: This should just be named delete() or something which better      * tells what it does (since there really isn't a trash can).     */"
// Changed in UML 2.1 - Component with <<subsystem>> stereotype // TODO: We should deprecate this?
"/**     * Returns the root package.     *      * @return the Package which is the root     * @deprecated for 0.25.4 by tfmorris - use {@link #getRoots()} to     *             get packages/model elements which are at the top level.     *             <p>     *             TODO: We probably need a getDefaultNamespace() method or     *             something similar to replace some uses of this.     */"
"/**     * Updates the top level ModelElements for all projects. In UML2, each     * model knows it's root elements, so this could make setRoots(...)     * obsolete. E.g., applying a stereotype in UML2 adds a new root.     *      * TODO: This is redundant with setRoots/getRoots.  There are already too     * many ways this stuff is managed without adding an additional one.     * All current model subsystem implementations know their top level     * elements.  Responsibility can be moved to the model subsystem, but     * let's choose *one* way of managing this.     */"
"/** * A datastructure for settings for a Project. <p> * * Most getters return a string, since they are used by ""argo.tee"". * This is also the reason all these attributes * are not part of a Map or something. <p> * * TODO: The header comment is currently not used - this function * is not completely implemented yet. How do we store this in the project? * Where should the user enter his header comment? See issue 4813. * * @author michiel */"
"/** * Notation settings value object. Stores settings which control how text is * rendered on diagrams. * <p> * TODO: This needs to go on a diet. It's used everywhere, so is performance * sensitive. The current set of settings is the union of all those found in the * legacy code, but it's not clear that all of them are actually used. *  * @author Tom Morris <tfmorris@gmail.com> */"
"/**     * This does a calculation of where our ""ext"" directory is.     * TODO: We should eventually make sure that this calculation is     *       only present in one place in the code and not several.     */"
"/**     * In contrast to {@link #getZipName()} returns the member's     * name without the prepended name of the project     * (but with the extension). <p>     *      * TODO: This is not used anywhere - shall we remove it?     *     * @author Steffen Zschaler     *     * @return the member's name without any prefix or suffix     */"
// TODO: End up with multiple models here
// We're deleting the last diagram so lets create a new one // TODO: Once we go MDI we won't need this.
"/**     * Create a notation settings value object with all default values.     * <p>     * TODO: This class only has partial Undo support (basically just those     * members that had it as part of a previous implementation).     */"
/* This code was copied from ActionBooleanTaggedValue: */
//this is the temporary solution for issue 1011
"/**     * Parse a Message textual description.<p>     *     * TODO: - This method is too complex, lets break it up. <p>     *     * @param umlMessage the UML Message object to apply any changes to     * @param s   the String to parse     * @throws ParseException     *            when it detects an error in the attribute string. See also     *            ParseError.getErrorOffset().     */"
// this is the temporary solution for issue 1011
// TODO: AddOnly has been removed in UML 2.x, so we should phase out // support of it - tfm - 20070529
// Save the .argo entry // TODO: Cyclic dependency with PersistenceManager // move PersistenceManager..getProjectBaseName() someplace else
// If c2 is empty, then we're done (or there is a // cycle in the message graph, which would be bad) If // c2 has more than one element, then the model is // crappy, but we'll just use one of them anyway
"/**     * Utility method to encode a String in a way that allows it to be     * saved properly in an XML file and regained filtering out any noice     * that an XML framework might have seen fit to add.     *     * TODO: Why are we doing this ourselves?  Surely encoding information     * for XML serialization is a well known task - tfm     * I have never understood why this is being done. I think we should remove     * any usage - bob     *     * @param	str	The String to encode.     * @return	The encoded String.     */"
//hence a less elegant workaround that works:
// This should probably be inside xmiReader.parse // but there is another place in this source // where XMIReader is used, but it appears to be // the NSUML XMIReader.  When Argo XMIReader is used // consistently, it can be responsible for loading // the listener.  Until then, do it here.
"/** * A critic to suggest using the facade stereotype. <p> * * TODO: At the moment only a dummy implementation, * see issue 3093.*/"
/* TODO: Is this needed? */
// Could this be some other type of internal error that we want // to handle differently?  Don't think so.  - tfm
"/**     * Create and register diagrams for activity and statemachines in the     * model(s) of the project. If no other diagrams are created, a default     * Class Diagram will be created. ArgoUML currently requires at least one     * diagram for proper operation.     *     * TODO: Move to XmiFilePersister (protected)     *     * @param project     *            The project     */"
// Load .xmi file before any PGML files // FIXME: the following is loading the model before anything else. // Due to the Zargo containing the profiles, currently we have // removed this hack in UmlFilePersister and I think it should be // removed from here also.
"/** * A BufferInputStream that is aware of XML structure. * It searches for the first occurrence of a named tag * and reads only the data (inclusively) from that tag * to the matching end tag or it can search for the first * occurrence of a named tag and read on the child tags. * The tag is not expected to be an empty tag. * <p> * TODO: This is hardwired to assume a fixed single byte * character encoding.  It needs to be updated to handle different * encodings, including multi-byte encodings. - tfm 20070607 * * @author Bob Tarling */"
// TODO: Attempt to move the following code to GEF
// TODO: Use stylesheet to convert or wait till we use Fig // factories in diagram subsystem. // What is the last version that used FigNote?
// TODO: Move to Diagram subsystem?
"/**     * Set the fig style attributes.     * <p>     *     * TODO: This should move into the render factories as described in issue     * 859.     *     * @param fig the fig to style.     * @param attributeMap a map of name value pairs     */"
"/* TODO: Without this, we fail to draw e.g. a Class.                 * But is this a good solution?                  * Why is the Layer not set in the constructor? */"
// TODO: we really want to be able replace the initial content handler // which is passed to SAX, but we can't do this without cloning a // whole bunch of code because it's private in the super class.
// If no Fig was created by the code above then we must go // look for the old style constructor that should have fallen // into disuse by now. // Fig(Object, Rectangle, DiagramSettings) // All of these constructors should have been deprecated // at least and replaced with the new signature. This is // here for paranoia only until all Figs have been reviewed.
// A FigNodeModelElement with no owner should match here // TODO: This is a temporary solution due to FigPool // extending // FigNodeModelElement when in fact it should not do so.
"/**     * Translate the visibility flag of a Fig to the PGML ""visibility"" attribute     * value.     * The PGML values are 0=hidden and 1=shown.     * If not specified then 1 is the default so we return null for this to     * prevent redundent data being written to PGML.     * TODO: Remove on GEF release after 0.11.9 as it will be provided there.     *      * @param f The Fig     * @return ""0""=hidden, null=shown     */"
"/** * The file persister for the UML model. * TODO: This is empty.  What is its purpose? - tfm * @author Bob Tarling */"
"/*             * TODO: Not sure we need to do this, but just to be safe for now.             */"
"/**     * Open a ZipInputStream to the first file found with a given extension.     *     * TODO: Remove since this is a duplicate of ZipFilePersister method     * when we have refactored the Persister subsystem.     *     * @param url     *            The URL of the zip file.     * @param ext     *            The required extension.     * @return the zip stream positioned at the required location.     * @throws IOException     *             if there is a problem opening the file.     */"
"/** * TODO: this doesn't need a full ProfileReference since it uses the * reader handed in the constructor. It doesn't make much sense to make * its callers init the path to some name which it doesn't need... * * @author Luis Sergio Oliveira (euluis) */"
// TODO: Seems like overkill to load the model just to get the display // name, but that's where it's stored currently - tfm
// TODO: This appears unused.  If it's needed, the Model API should // be enhanced to provide a method that does this directly.
// TODO: Is this (critics embedded in comments) actually used by anyone?
// TODO: All this profile loading/handling needs to // move someplace in model subsystem probably
// TODO: We need a specific exception type here.
//TODO: this profile isn't used anymore, see getModel()
// TODO: This is an absurdly long method! Break it up.
// TODO: This code is cloned over and over again! - tfm
"/** * Settings dialog tab panel for layout options.<p> * * TODO: This class contains a lot of references to org.argouml.uml.ui. * It would probably be better to move it there. *  * TODO: This class breaks too many dependency limitations.  * And it is not used anywhere. So I (MVW) disabled its functionality.  * * @author Linus Tolke */"
"/*         * TODO: We could also support other flavors here,         * e.g. image (then you can drag modelelements directly into         * your wordprocessor, to be inserted as an image).         */"
// TODO: Why isn't this done in save?
// TODO: The following handling of multiselection is just a local // solution for the line color, better find a more general solution: // (I don't know if it's undoable this way - thn)
// TODO: The following handling of multiselection is just a local // solution for the fill color, better find a more general solution: // (I don't know if it's undoable this way - thn)
// TODO: We need to get the model/extent (and package?) associated with // the current diagram so that we can create the new element in the // right place.
"/** * The dialog that allows the user to go to any diagram in the project * by doubleclicking on it.<p> * * This dialog is not modal, and can stay open while the user * is working on the model. It is even possible to open multiple * of these dialogs, although the purpose of such useraction eludes me.<p> * * TODO: This dialog should have multiple tabs named ""Help"", ""Diagram"", * ""Classifier"", ""StateVertex"", etc. Which would allow the user to go to other * things than diagrams. * * @author MVW * */"
// TODO: Bob says - tabs that listen for target changes // should register themselves not expect DetailsPane to // listen and pass on the event. Otherwise these tabs // always rely on DetailsPane. TabToDoTarget and TabProps // currently listen directly.
"/* TODO: Some parts of ArgoUML have preliminary support for multiple     * details panels, but we currently only support     * the default South (bottom) panel     */"
// TODO: Check that this is correct
"/**     * Flag to indicate if we are the main application     * or being integrated in another top level application such     * as Eclipse (via the ArgoEclipse plugin).     * TODO: This is a temporary measure until ProjectBrowser     * can be refactored more appropriately. - tfm     */"
"/**     * Try to save the project.     * @param overwrite if true, then we overwrite without asking     * @param file the File to save to     * @param pmw       the ProgressMonitor to be updated;     * @return true if successful     *     * TODO: Separate this into a Swing specific class - tfm     * @deprecated in 0.29.1 by Bob Tarling use trySaveWithProgressMonitor     */"
"/*     * TODO: Work in progress here to allow multiple details panes with     * different contents - Bob Tarling     */"
// TODO: This causes a cyclic depencency with ActionSaveProject
"/**     * TODO: this needs work so that users can set the font     * size through a gui preference window.     */"
"/**     * Loads a project displaying a nice ProgressMonitor     *     * @param overwrite if true, the file is going to be overwritten     * @param file      the target file     *     * TODO: Separate this into a Swing specific class - tfm     * @param exit if true: exit ArgoUML when done     */"
// TODO: Bob says - // We're looking at focus change to // flag the start of an interaction. This // is to detect when focus is gained in a prop // panel field on the assumption editing of that // field is about to start. // Not a good assumption. We Need to see if we can get // rid of this.
"/** * This class represents a Pool of Swimlanes for Activity diagrams. This is * exists only to act as the GEF style encloser. Other nodes in the same * must be placed entirely within or outside the boundaries of this Fig * but cannot intersect with the boundary. <p> * TODO: There is no actual model element being represented here so we are * inheriting a lot of behaviour from FigNodeModelElement that we don't want. * We require to split FigNodeModelElement to separate the code that requires * a model element owner. See issue ... <p> * Remark mvw: Why not give it an owner instead? The ActivityGraph  * is the obvious candidate, or maybe the top state. * * @author mkl */"
"/** * Manages a ProgressMonitor dialog. *  * NOTE: Users of this class should use the type of the interface * {@link org.argouml.taskmgmt.ProgressMonitor} wherever possible to * maintain GUI independence. *  * @author andrea_nironi@tigris.org *  * TODO: Bob says: I don't like the naming of this class. Its confusing that * its called ...Window and yet it is not a window. Lets rename once we have * it hidden. */"
"/**     * Loads the project file and opens all kinds of error message windows     * if it doesn't work for some reason. In those cases it preserves     * the old project.     *     * @param file the file to open.     * @param showUI true if an error message may be shown to the user,     *               false if run in commandline mode     * @param pmw       the ProgressMonitor to be updated;     *                          if not needed, use null     * @return true if the file was successfully opened     *     * TODO: Separate this into a Swing specific class - tfm     */"
// TODO: This should listen for file save events - tfm
"/**     * Loads the project file and opens all kinds of error message windows     * if it doesn't work for some reason. In those cases it preserves     * the old project.     *     * @param file the file to open.     * @param showUI true if an error message may be shown to the user,     *               false if run in commandline mode     * @param pmw 	the ProgressMonitor to be updated;     * 				if not needed, use null     * @return project the project that was created based on the file that was     *                 successfully opened     *     * TODO: Separate this into a Swing specific class - tfm     */"
// TODO: Can we move this knowledge behind model facade rather than have a condition here?
"/** * A command to set selected figs to their minimum size. <p> * Despite its name, really the minimum size is selected here! <p> *  * TODO: Rename this class. * * @author Markus Klink */"
"/**     * This Fig is never placed on a diagram. It is only used by the call     * renderer so that pick list items look like diagram Figs.     * TODO: This Fig does not represent a model element and so it     * should not extend FigNodeModelElement. We should split     * FigNodeModelElement in two, one for base functionality for all nodes     * and one that is truly for model elements.     */"
// TODO: Why is this code even getting called for a FigGeneralization?
"/** * Class to manage Project related actions which need to be (or historically * have been) managed as singletons. *  * TODO: It's unclear to me whether all of these actually have to be managed as * singletons, but for now I've just moved them from ProjectBrowser as is. - tfm *  * @author Tom Morris */"
// TODO: This shouldn't know the internal form of type names, // but I'm not sure what GEF's PredicateType does, so I'm fixing it // here - tfm
// TODO: Move to different class?
// I hate this so much even before I start writing it. // Re-initialising a global in a place where no-one will see it just // feels wrong.  Oh well, here goes.
// Kludge required by GEF's use of HashMap in the API // TODO: This can be removed if they ever fix GEF to use // Maps
// critique menu // TODO: This dependency should be inverted with the Critics subsystem // registering its desired shortcuts with us - tfm
"/** * GenericArgoMenuBar defines the menu bar for all operating systems which do * not explicitly ask for a different kind of menu bar, such as Mac OS X. * <p> * * Menu's and the mnemonics of menu's and the menuitems are separated in the * PropertyResourceBundle <em>menu.properties</em>. * <p> * * menu items are separated in the PropertyResourceBundle * <em>action.properties</em>. * <p> * * The key's in menu.properties have the following structure: * * <pre> *   menu:                    [file].[name of menu] *    e.g:                    menu.file * *   mnemonics of menu's:     [file].[name of menu].mnemonic *    e.g:                    menu.file.mnemonic * *   mnemonics of menuitems:  [file].[flag for item].[name of menuitem].mnemonic *    e.g:                    menu.item.new.mnemonic * </pre> * * TODO: Add registration for new menu items. * @deprecated in 0.29.2 by Bob Tarling. This class will be moved and made * private in future. Use MenuBarFactory.createApplicationMenuBar */"
"/**     * forwards this event to the tree model.     *     * @param element the modelelement to be changed     *     * TODO:  This shouldn't be public.  Components desiring to     * inform the Explorer of changes should send events.     */"
// TODO: Delete should be available on any combination of model // elements and diagrams. // TODO: Shouldn't be creating a new instance here. We should // hold the delete action in some central place.
"/**     * Adds the entry to the mru list.     *     * @param filename     *            of the project     *     * TODO: This should listen for file save events rather than being called     * directly - tfm.     */"
// TODO: Make sure this shouldn't go into a previous // condition -tml
// TODO: Shouldn't be creating a new instance here. We should // hold the delete action in some central place.
"/**     * The tree structure has changed significantly.     * Inform the associated tree model.     *     * TODO:  This shouldn't be public.  Components desiring to     * inform the Explorer of changes should send events.     * @deprecated by mvw in V0.25.4. Use events instead.     */"
// TODO: We really only care about events which affect things that // are visible in the current perspective (view).  This could be // tailored to cut down on event traffic. - tfm 20060410
"/**     * The singleton instance.     *     * TODO: Why is this a singleton? Wouldn't it be better to have exactly     * one for every Explorer?     */"
// TODO: Rather than specifically ignore some item maybe it would be better // to specifically state what items are of interest. Otherwise we may still // be acting on other events we don't need
// TODO: We need a factory pattern for GoXXX classes that can determine if they are required
// TODO: Can this be made more restrictive? // Do we care about any attributes other than name? - tfm
// This is carried over from previous implementation // not sure why we don't want contents of package - tfm - 20060214
// TODO: Any Namespace can contain other elements.  Why don't we allow // this? - tfm
// TODO: Really should be Element/ModelElement, but we don't // have a type which is portable for this
// TODO: This method can be replaced by getClass().getSimpleName() // when Argo drops support for Java versions < 1.5
"/**     * @see org.argouml.cognitive.Critic#setHeadline(java.lang.String)     *     * Set up the locale specific text for the critic headline     * (the one liner that appears in the to-do pane)     * and the critic description (the detailed explanation that     * appears in the to-do tab of the details pane).     *     * MVW: Maybe we can make it part of the constructor CrUML()?     *     * FIXME: why override if nobody uses?     */"
"/**     * Set the threshold.     *     * TODO: Should this be protected?     *     * @param threshold The threshold to compare to.     */"
//TODO: split into one critic for inherited problems and //one for problems directly in this class.
// TODO: Do we need this Generalization is not a named element
// // needed?
"/**     * Find all the Figs that visualise the given model element in     * this layer, or null if there is none.     *      * TODO: once GEF includes this same method in Diagram then this can go     *      * @see org.tigris.gef.base.Diagram#presentationsFor(java.lang.Object)     */"
// TODO: This uses a "last one wins" algorithm for registration // We should warn if a factory is being overwritten.
"/**     * Gets font name. If it doesn't exist in configuration it creates new     * entries in configuration for appearance.     *     * TODO: Why create in a getter?     *     * @return the name of the configured font     */"
// TODO: What is this trying to do? It's never going to get called - tfm // really dirty hack to remove unwanted listeners
// TODO: This shouldn't be referencing the current project.  Instead // the appropriate UndoManager should have already been retrieved from // the correct project.
// TODO: we should be given an Undo manager to use rather than looking // for a global one
"/* TODO: Replace the next deprecated call. This case is complicated          * by the use of parameters. All other Figs work differently. */"
"/** * Class to display graphics for a UML Choice State in a diagram - the circle. * * TODO: This should really be renamed FigChoiceState.  It's the * last vestige of the UML 1.3 name. * * @author pepargouml */"
// TODO: What is this needed for? - tfm
"/* The next 4 lines fix the 2nd half of issue 5638.         * Is there no better way? */"
"/**     * Return a list of gravity points around circle which is enclosed     * in the bounding box.  Convenience method for use by FigInitialState     * and FigFinalState.     * TODO: As this method is not required by all sub classes,     * it would seem sensible to extend FigStateVertex with FigCircleVertex     * and only have the relevant concrete Figs extend that and gain this     * functionality.     * @return a List of Points     */"
"/**     * To resize only when a new concurrent region is added,     * changing the height.     * TODO: Probably shouldn't     * exist as this class should be listening for added concurrent regions     * and call this internally itself.     *     * @param h the new height     */"
// TODO: Aren't our items always strings? - tfm 20100917
"/**     * Actually instanciate the NetNode and FigNode objects and     * set the global next mode to ModePlace     * TODO: should call super, reduce code volume!     *     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */"
// TODO: This logic may well be worth moving into the model component. // Provide a similar grid to the connectionsGrid
// TODO ? if this class listen the model, it will be able to // change in live as it is done in the figs (diagram)
// TODO : Redo it (curBody should be as long as curLanguage+button)
"/**	 * When we change the type, we need to create a new Initial Value. And	 * to display the Panel	 *	 * TODO: if we select the same type that the current, do nothing.	 */"
// TODO: We definitely don't want to react to addition and // removal of transitions. Can't we be more specific when // we register ourselves as a listener.
"/**     * The target model element     * In UML1.x this is the element that owns the expression.     * In UML2.x this is the expression itself     * TODO: This makes behaviour different enough that separate subclasses     * should be considered.     */"
"/**     * Field TODO: TextArea or TextField     */"
// TODO: Rather than specifically ignore some item  // maybe it would be better to specifically state  // what items are of interest. Otherwise we may still // be acting on other events we don't need
// TODO: This can be a mess... There are any better solution?
"/**     * TODO: Use it notify Set to true to forward events to model. Only one of     * Language and Body fields should have this set to true.     */"
"/* TODO: If this is an ordered list, then you have to                                    add in the right location! */"
"/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     *     * TODO: This should be reviewed to see if it can be improved with a view     * towards removing some of the overrriding methods used as workarounds for     * differences between NSUML and MDR - tfm - 20060302     */"
// TODO: This is a redundant invocation
// Get all classifiers in our model // TODO: We need the property panels to have some reference to // the project they belong to instead of using deprecated // functionality
"/**         * TODO: Copied from UmlDiagramRenderer.         *         * Get the FigNode from the given layer that represents the given         * model element.         * The FigNode portion of an association class is returned in preference         * to the FigEdge portion.         * If no FigNode is found then a FIgEdge is searched for and the FigNode         * that acts as its edge port is returned.         * @param lay the layer containing the Fig         * @param modelElement the model element to find presentation for         * @return the FigNode presentation of the model element         */"
// TODO: build a return parameter
// TODO: getAllPossibleSubvertices and getAllSubStates are duplicates - tfm
// TODO: how to merge multiple inheritance? Necessary? // This currently copies the common ancestors multiple times
// TODO: This can't depend on ProjectBrowser.  Alternate below
// TODO: This is a composite association, so these will get deleted // automatically.  The only thing we need to do is check for any // additional elements that need to be deleted as a result.
// TODO: This is well-formedness rule from UML1.4.2 // 4.5.3.20 [2] No GeneralizableElement can have a parent // Generalization to an element that is a leaf. // self.parent->forAll(s | not s.isLeaf)
// Check arguments against parameters for type and number // TODO: Perhaps move this to a critic instead? - tfm - 20070326
// TODO: Add standard stereotype?  Set is open ended, but // predefined names include: call, create, instantiate, send
// TODO: Is there anyway we can determine this size at runtime?
// TODO: Taken from FigClassifierBoxWithAttribute to handle events // on an attribute. All this event handling should eventually be moved // to the compartment Fig for attributes
"/**     * We are getting events we don't want. Filter them out.     * TODO: Can we instruct the model event pump not to send these in the     * first place? See defect 5095.     * @param event the event     */"
"/*             * modelImpl.getFacade().getRootElements()  gets all root elements             * in the UML repository, including available profiles that are not             * part of the current project (degrades performance).             *             * ProjectManager.getManager().getCurrentProject().getRoots() only             * returns user model roots, and no profiles.             *             * ProjectManager.getManager().getCurrentProject().getModels() gets             * all root models, but no root namespaces.             *             * TODO: Which is best? Is there any other way?             */"
"/*     * TODO: As currently coded, this actually returns all BehavioralFeatures     * which are owned by Classifiers contained in the given namespace, which     * is slightly different then what's documented.  It will not include any     * BehavioralFeatures which are part of the Namespace, but which don't have     * an owner.     */"
// TODO: Performance. Consider instantiating this just // once outside the for loops and clear at this point // instead.
"/*     * Delete a model element.  Implements 'cascading delete' to make sure     * model is still valid after element has been deleted.<p>     *     * The actual deletion is delegated to delete methods in the rest of the     * factories. For example: a method deleteClass exists on CoreHelper. Delete     * methods as deleteClass should only do those extra actions that are     * necessary for the deletion of the modelelement itself. I.e. deleteClass     * should only take care of things specific to UmlClass.<p>     *     * The delete methods in the UML Factories should not be called directly     * throughout the code! Calls should always refer to this method and never     * call the deleteXXX method on XXXFactory directly. The reason that it is     * possible to call the deleteXXX methods directly is a pure implementation     * detail.<p>     *     * The implementation of this method uses a quite complicated if/then/else     * tree. This is done to provide optimal performance and full compliance to     * the UML 1.4 metamodel. The last remark refers to the fact that the     * UML 1.4 model uses multiple inheritance in several places.     * This has to be taken into account.<p>     *     * TODO: The requirements of the metamodel could probably be better     * determined by reflection on the metamodel.  Then each association     * that a deleted element participates in could be reviewed to make sure     * that it meets the requirements and, if not, be deleted. - tfm<p>     *     * Extensions and its children are not taken into account here. They do not     * require extra cleanup actions. Not in the form of a call to the remove     * method as is normal for all children of MBase and not in the form of     * other behaviour we want to implement via this operation.     *     * @param elem     *            The element to be deleted     *     * @see org.argouml.model.UmlFactory#delete(java.lang.Object)     */"
// Don't allow connections to be created from a read only // model element to any other // TODO: This should be considered a workaround.  It only works // because, by default, we place newly created relationships in // the namespace of the fromElement.  The correct behavior in // the presence of read-only elements really depends on the type of // connection as well as the writeability of both ends.
"/**     * An array of valid connections, the combination of connecting class and     * node classes must exist as a row in this list to be considered valid.     * <ul>     * <li>The 1st column is the connecting element.     * <li>The 2nd column is the ""from"" element type.     * <li>The 3rd column is the ""to"" element type.     * The 3rd column is optional, if not given then it is assumed to be     * the same as the ""from"" element.     * <li>The existence of a 4th column indicates that the connection is valid     * in one direction only.     * </ul>     * TODO: This encodes not only what is legal in UML, but also what ArgoUML     * knows how to create, so not all legal connections are included. Probably     * should be split into two pieces: 1) legal UML (here) and 2) supported (in     * ArgoUML application someplace) - tfm - 20060325<p>     * See also issue 3863.<p>     *     * Most of these are subtypes of Relationship which includes Association,     * Dependency, Flow, Generalization, Extend, and Include. Dependency     * includes Binding, Abstraction, Usage, and Permission. AssociationRole and     * AssociationClass are Associations. The remaining items (Link, Transition,     * AssociationEnd, Message) are non-Relationship types which ArgoUML treats     * as connections/edges.     */"
// TODO: check for duplicates (is this possible???)
// TODO: We also have code registering for the names of // a tagged value like "derived"
"/**     * Recursive method to get all subtypes.     *     * TODO: Does this have a scalability problem?     */"
// TODO: Bob says - we should not be listening here for // addition and removal of attributes. This should be done in // FigAttributesCompartment.
// Don't wait on ourselves, we'll deadlock! // TODO: We might want to throw an exception here
// TODO: Must we calculate the whole list?
// TODO: replace this recursive function by a loop like in getRoot:
// TODO: Because we get called on each and every change event, when // the model is in a state of flux, we'll often get an // InvalidElementException before we finish this collection. The // only saving grace is that we're called SO many times that on the // last time, things should be stable again and we'll get a good set // of elements for the final update.  We need a better mechanism.
"/**     * Updates a compartment box. Called from updateLayout if there is     * a model event effecting the attributes/operations and from     * renderingChanged in all cases.     * TODO: The above statement means that the entire contents of the     * compartments are being rebuilt whenever an add/remove     * of an attribute, operation or a reception is detected. It would be     * better to have compartments listen for add and remove events     * and make minimum change rather than entirely rebuild.      * Remark MVW: This is a bit exaggerated, since the populate()      * method is already heavily optimized.     */"
// TODO: Reconfigure exception handling to distinguish between errors // that are possible due to bad input data and those that represent // unexpected processing errors.
// TODO: Callers will need to be refactored to work around the // change in the way multiplicities work - tfm
// TODO: Some elements such as Generalization are // no longer named.  For a transitional period we'll // return a String so debug can continue, but the // calling code should probably be fixed. - tfm 20070607 // Bob says - these are the comments that were in // FacadeEUMLImpl.getName. Same trick is needed here // for now.
"/**     * Map of which resources are read-only.     * <p>     * TODO: This needs to be managed per EditingDomain.     */"
"/**	 * TODO: mvw: Would it not be better if this code	 * would go in startTextEditor(), not overruling mouseClicked().	 * But we made this fig not editable,	 * to stop it from reacting on key-presses.	 * Anyhow - this is a hack - abusing a FigText - GEF does	 * not really support double-clicking on a Fig to trigger some action.	 */"
// TODO: Does CoreHelper#getExtendingClassifiers(Object element) means // all direct and indirect extending classifiers or only the direct // extending classifiers?
// TODO: This code appears to be designed to jump to the diagram // containing the contents of the package that was double clicked // but it looks like it's always searching for the name "main" // instead of the package name. // TODO: But in any case, it should be delegating this work to // to something that knows about the diagrams and they contents -tfm
// TODO: What is the behavior of this in the case of nested models?
// TODO: Is this returning extended elements or base classes?
// TODO: InstanceSpecification -> Classifier association isn't // navigable in this direction
// A model element has been removed from this packages namespace // If the Fig representing that model element is on the same // diagram as this package then make sure it is not enclosed by // this package. // TODO: In my view the Fig representing the model element should be // removed from the diagram. Yet to be agreed. Bob.
// TODO: seems to work only with both loops, check why.
// TODO: This needs to be double checked. - tfm
"/**     * USED BY PGML.tee.     * @return the class name and bounds together with compartment     * visibility.     * TODO: Is this not duplicate with the parent?     */"
"/** * This node cannot be dragged and manipulated in the same way as other * FigNodes in ArgoUML. It is actually an optional child fig (or more precisely * a path item) of a FigEdgeModelElement. * This allows the dashed edge of an association class to connect the * association edge and allows the dashed edge of a comment edge to attach a * comment to some other edge type. * GEF can only attach edges to nodes, by making this fig both a node and * containing it as a child of an edge we push the rules to allow edge to edge * connections. * TODO: We are inheriting a lot of functionality here that we don't really * require. We should attempt to make FigEdgePort extend FigNode. * * @author Bob Tarling */"
"/**     * Searches for a stereotype just like the given stereotype in all     * given models (and their sub-namespaces).     * The given stereotype can not have its namespace set yet;     * otherwise it will be returned itself!     *     * TODO: This function should not take a stereotype object as parameter,     * but a name and a baseclass. <p>     * TODO: Currently only works for stereotypes with only one baseclass. <p>     * TODO: Should it only search for stereotypes owned by the Model object?      *     * @param models a collection of models     * @param stereo is the given stereotype     * @return Stereotype     */"
"/**     * Finds a stereotype in a given namespace,      * and all those in any sub-namespace of the given namespace.     * Returns null if no such stereotype is found.     * <p>     * TODO: What if stereo.getName() or stereo.getBaseClass() is null?     * Then you know immediately that none will be found, but is that the     * correct answer?     * Currently, null is returned in these cases. <p>     *      * TODO: This function should not take a stereotype object as parameter,     * but a name and a baseclass. <p>     * TODO: Currently only works for stereotypes with only one baseclass. <p>     * TODO: Currently only works for stereotypes where the baseclass is      * equal to the given one - inheritance does not work.     *      * @return the stereotype found or null.     * @param ns is the namespace.     * @param stereo is the stereotype.     */"
"/**     * Creates a UML model element of the given type.     * This only works for UML elements. If a diagram contains     * elements of another type then it is the responsibility     * of the diagram manage those items and not call this     * method. It also only works for UML model elements that     * are represented in diagrams by a node.     *     * @param elementType the type of model element to build     * @return the model element     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Builds a compositestate as top for some statemachine.<p>     * TODO: Confusing name: this method should better     * be named buildTopStateOnStateMachine.     *     * @param statemachine The given statemachine     * @return MCompositeState The newly build top state     * @see #buildCompositeState(Object)     */"
// TODO: MVW: This needs rethinking/rework! I have the following questions: // Why does it not search for a stereotype in the namespace using // properties and only create a new stereotype if it will actually be used? // Ie, why is there not a getStereotype(String name, String baseClass)? // (edited by d00mst)
"/**     * TODO: This functionality is in the worn place. We should be able to     * call setVisible on the compartment itself and then this class should     * react to that event.     * Improvements will follow in later releases.     * Hence this method should not be considered stable for module developers.     * @param compartment the compartment to be changed     * @param isVisible true if the attribute compartment is visible     */"
"/**     * TODO: This should become private and only called from constructor     *     * @see org.argouml.uml.diagram.ui.FigCompartment#populate()     */"
"/* Remove all items in the group,         * otherwise the model event listeners remain:         * TODO: Why does a FigGroup not do this? */"
// TODO: In UML 2.0, ClassifierRole, AssociationRole, and // AssociationEndRole have been replaced by the internal // structure of the Collaboration
// TODO: The above populate works but seems rather heavy here. // I can see something like this is needed though as events // won't manage this quick enough. Could we make // FigEditableCompartment.createModelElement() create // the new child Fig instance? It may also be useful // for it to return the new model element rather than // the current void return - Bob.
"/*         * TODO: Is this needed/correct?         * For when all compartments are hidden?         */"
"/**     * This tag is set on elements that are generated by reference when     * importing.     * If it is set, then the critics could ignore those objects if they want.     *      * TODO: This is really belongs in a higher level utility class     * that uses the Facade's tagged value methods.  Also, it needs to     * be updated to use a UML 1.4 TagDefinition instead of a simple String.     */"
"/**     * Recognizer for N-ary Association.     *     * TODO: This is not a recognizer for some type. Rename to     * isNaryAssociation?     *     * @param handle candidate     * @return true if handle is an Association     */"
"/**     * Builds an interface with a given name.     *     * @param name is the given name.     * @return Interface     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Builds a default implementation for an interface. The interface     * is not owned by any model element by default. Users should not     * forget to add ownership.     *     * @return Interface     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
// Check if labels etc have been hit // Apparently GEF does require PathItems to be "annotations" // which ours aren't, so until that is resolved...
"/**     * Create an empty but initialized instance of a UML TemplateParameter.     *     * @return an initialized UML TemplateParameter instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Builds a default implementation for a class. The class is not owned by     * any model element by default. Users should not forget to add ownership.     *     * @return newly created Class     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Usage.     *     * @return an initialized UML Usage instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Permission.     *     * @return an initialized UML Permission instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     * @deprecated for 0.27.3 by tfmorris.  Renamed in UML 2.x to PackageImport.     * Use {@link #createPackageImport()}.     */"
"/**     * Create an empty but initialized instance of a UML Permission.     *     * @return an initialized UML Permission instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/** * Action to add a stereotype to a model element. *  * TODO: Appears to be unused? *  * @author Bob Tarling * @deprecated for 0.27.2 by tfmorris.  Use  * {@link org.argouml.uml.ActionAddStereotype}. */"
"/**     * Returns the destination of a relation or link. The destination of a     * relation is defined as the ModelElement that receives this     * relation.  If there are more then 1 destinations, only the     * first is returned.  If there is no destination, null is     * returned.  Examples of sources include classifiers that are     * types to associationends, usecases that are bases to extend and     * include relations and so on.  In the case of an association,     * the destination is defined as the type of the second element in     * the connections list.<p>     *      * TODO: move this method to a generic ModelHelper     *     * @param relationship is the relation     * @return object     */"
"/**     * Return the source of a relation or Link. The source of a relation is     * defined as the ModelElement that propagates this relation. If     * there are more then 1 sources, only the first is returned. If     * there is no source, null is returned. Examples of sources     * include classifiers that are types to associationends, usecases     * that are bases to extend and include relations and so on. A     * source is always the start from the arrow in the fig, the     * destination the end.<p>     *      * TODO: move this method to a generic ModelHelper     *     * @param relationship is the relation     * @return Object     */"
"/**     * Sets the language of an expression.     *     * TODO: This operation is fooling the user     * in thinking that the body of the object is changed.     * Instead, a new object is created.     * There is no other way: a MExpression can not be altered,     * once created!     * So, this operation returns a newly created object instead.     *     * @param handle The expression.     * @param language The new language.     * @return The newly created Object.     */"
// TODO: Remove the casting to DiagramFactoryInterface2 // as soon as DiagramFactoryInterface is removed.
// TODO: Having Critics actions here introduces an unnecessary // dependency on the Critics subsystem.  Have it register its // desired actions using an extension mechanism - tfm
"/**     * True if an instance is allowed to be     * invisible. This is currently only set true by FigEdgePort.     * TODO: FigEdgePort should be removed from the FigNodeModelElement     * hierarchy and so the need for this removed.     */"
// TODO: We really want this class to have package scope however the reflection
// TODO: There are lots and LOTS of magic numbers used in calculating // positions and sizes.  Any time you see Figs being placed at 10,10 use // these constants instead.  If you can reliably interpret calculations, // you can factor them out of there as well.  Add additional constants // as needed to express other common factors - tfm 20081201
// Name is set to the empty string (yuck!) by default - fix it
// TODO: Note copy/paste code in FigExitPoint - where is this code // better placed in GEF?
"/**     * Find a model element in modelElements which name is equal to name.     *     * @param name the name of the model element to find. It can't be null.     * @param modelElements the {@link Collection} of model elements in which     * to find a model element with name.     * @return the model element if found or null.     *     * TODO: maybe should be moved to a helper class that deals with Model     * related stuff.     */"
// TODO: We should really set up our own profile instead of depending // on the default. // This depends on the default profile configuration containing the // type Integer to test properly.  Otherwise it will get created in // the main project, defeating the purpose
"/**     * Called by propertyChanged when it detects that a stereotype     * has been added or removed. On removal the FigNode removes its     * listener to that stereotype. When a new stereotype is detected     * we add a listener.     * TODO: Bob says: In my opinion we shouldn't be doing this here.     * FigStereotype should always be listening to change of its     * owners name.     * FigStereotypesCompartment should always be listening for add     * or remove of Stereotypes to its owner.     * Those classes will need to pass some event to the FigNode on     * the AWT thread only if a change results in a change of size     * that requires a redraw.     * <p>NOTE: Runs at the Model (MDR) Thread </p>     * @param event the UmlChangeEvent that caused the change     */"
// TODO: Do we want the top level package here instead of the immediate // parent?
// TODO: This creates a dependency on the Critics subsystem. // We need a generic way for modules (including our internal // subsystems) to request addition of actions to the popup // menu. - tfm 20080430
"/**     * This is a template method called by the ArgoUML framework as the result     * of a change to a model element. Do not call this method directly     * yourself.     * <p>Override this in any subclasses in order to change what model     * elements the FigNode is listening to as a result of change to the model.     * </p>     * <p>This method is guaranteed by the framework to be running on the same     * thread as the model subsystem.</p>     * TODO: Lets refactor this at some time to take UmlChangeEvent argument     *     * @param event the UmlChangeEvent that caused the change     */"
// TODO: Generalize extension and remove critic specific code
"/*     * TODO: Is this required? Why would the fig already be dashed?     *      * @see org.tigris.gef.presentation.FigEdge#setFig(     *      org.tigris.gef.presentation.Fig)     */"
"/**     * Prevent underline events if underline does not change.     * TODO: GEF should manage this after GEF 0.13.4 is included.     */"
// TODO: Generalize extension and remove critic specific stuff
// There shall not be a dependency from ... to ...
"/**     * TODO: Use the following function to have a dropdown set of tools:     * ToolBarFactory.addItemsToToolBar(buttonPanel, actions, true);     * Instead, this temporary solution:     *     * @param buttonPanel the toolbar     * @param actions an array of actions representing the tool layout     */"
// TODO: We shouldn't need this reflection any more once we have // convinced ourselves that everything with a getItemUID method // is implementing IItemUID
// TODO: Figure out when this is getting thrown //            throw new UnsupportedOperationException();
"/*     * Constraint: This code only deals with 1 supplier per dependency!     * TODO: How to support more?     *      * @see org.argouml.uml.ui.AbstractActionAddModelElement#doIt(java.util.List)     */"
// TODO: the namespace of created events is currently the model. // I think this is wrong, they should be // in the namespace of the activitygraph! //        vec.addAll( //                Model.getModelManagementHelper().getAllModelElementsOfKind( //                        Model.getFacade().getNamespace(getTarget()), //                        Model.getMetaTypes().getEvent()));
"/**     * Changes the font for all Figs contained in the given FigGroup. <p>     *     *  TODO: In fact, there is a design error in this method:     *  E.g. for a class, if the name is Italic since the class is abstract,     *  then the classes features should be in Plain font.     *  This problem can be fixed by implementing     *  the updateFont() method in all subclasses.     *     * @param fg the FigGroup to change the font of.     */"
// TODO: the namespace of enlisted events is currently the model.  // I think this is wrong, they should be // in the namespace of the activitygraph! //        vec.addAll(Model.getModelManagementHelper().getAllModelElementsOfKind( //                Model.getFacade().getNamespace(getTarget()), //                Model.getMetaTypes().getEvent()));
"/**     * TODO: Move this in FigGroup (in GEF).     *     * @param scb The suppressCalcBounds to set.     */"
// update the titleLabel // MVW: This overrules the icon set initiallly... Why do we need this?
"/**     * TODO: This function attempts to optimize the more generic     * code in the parent, which also works correctly in this case.     * Is this a good idea?     */"
"/**     * Creates a new checkbox menu item attached to the specified     * action object and appends it to the end of this menu.     * TODO: This is almost a duplicate of ArgoJMenu.addCheckItem must find a     * way to merge.     *     * @param     a     the Action for the checkbox menu item to be added     * @return          the new checkbox menu item     */"
// TODO: 21/12/2008 dthompson mouseClicked(me) above consumes the  // mouse event internally, so I suspect that this line might not be  // necessary.
"/*** ActionAddExistingNode enables pasting of an existing node into a Diagram.** @author Eugenio Alvarez* Data Access Technologies.* TODO: Why do we have this class as well as ActionAddExistingNodes?*/"
"/**     * The constructor.     * TODO: The ""name"" parameter is used for the icon and for the tooltip.     * This makes i18n of the tooltip impossible.     *     * @param modeClass the next global editor mode     * @param modeArgs arguments for the new mode     * @param name the name of the command that is the tooltip text.     */"
"/**     * Fix up bad figs.     * <p>     * Due to errors in earlier releases of argouml it can happen that there is     * a generalization without a child or parent.     * <p>     * TODO: Move into XSL. We should not remove from the graph model while     * we're writing to it or we have a possible cause of concurrent     * modification exception.     *      * @param owner     */"
// TODO: The above doesn't work reliably in a constructor. // We need a better way of getting default fig settings  // for the owning project rather than using the  // project manager singleton. - tfm
"/** * Defines the methods to generate source code from the model. Each class * providing code generation functionality must implement this to be recognized * by ArgoUML as a code generator. * <p> * TODO: A GUI-independent mechanism to pass settings to the code generator is * needed similar to what we have for reverse engineering.  See * {@link org.argouml.uml.reveng.ImportInterface#getImportSettings()} and * {@link org.argouml.uml.reveng.SettingsTypes} *  * @since 0.20 when it replaced the FileGenerator interface. */"
// Hack: don't show first column, where the model element object is // placed.
// TODO: It doesn't matter what these get set to because GEF can't // draw anything except 1 pixel wide lines
// TODO: Workaround for GEF redraw problem // Force all child figs into the same layer
"/* This should NOT be looking for a NamedElement,         * since this is not always about the name of this         * modelelement alone.*/"
"/**     * <p>Determines if the FigEdge is currently connected to the correct     * FigNodes, if not the edges is the correct FigNodes set and the edge     * rerouted.     * <p>Typically this is used when a user has amended from the property     * panel a relationship from one model element to another and the graph     * needs to react to that change.     * <p>e.g. if the participant of an association end is changed.     * <p>Calls a helper method (layoutThisToSelf) to avoid this edge     * disappearing if the new source and dest are the same node.     *     * TODO: This method is called far too frequently. It should only be called     * when a specific event is received. It seems to be currently called whenever     * any event is received from the owner.     *     * @return boolean whether or not the update was sucessful     */"
"/** * TODO: this class should be moved to package * org.argouml.uml.ui.behavior.common_behavior */"
// TODO: Dependency cycle between FigNodeModelElement and FigEdgeME // Is this needed?  If so, introduce a Removable interface to decouple
"/**     * FigMyCircle is a FigCircle with corrected connectionPoint method:     *   this methods calculates where a connected edge ends.<p>     *        *   TODO: Once we are at GEF version 0.13.1M4, this whole class can be      *   removed, since it was taken over by GEF.     */"
"/**         * Compute the border point of the ellipse that is on the edge         *   between the stored upper left corner and the given parameter.<p>         *            *   TODO: Once we are at GEF version 0.13.1M4, this method          *   and in fact the whole class can be          *   removed, since it was taken over by GEF in revision 1279.         *         * @param anotherPt  The remote point to which an edge is drawn.         *         * @return           The connection point on the boundary of the         *                   ellipse.         */"
"/** * Class to display graphics for N-ary association (association node), * i.e. the diamond. <p> *  * TODO: Improve the location of the stereotypes! * * @author pepargouml@yahoo.es */"
"/**     * The constructor.     * TODO: The ""name"" parameter is used for the icon and for the tooltip.     * This makes i18n of the tooltip impossible.     *     * @param modeClass the next global editor mode     * @param arg the name of a new argument for the new mode     * @param value the value of a new argument for the new mode     * @param name the name of the command that is the tooltip text.     */"
// TODO: Send an event instead of calling Explorer directly
"/**     * Sets the target of the property panel. The given target t     * may either be a Diagram or a modelelement. If the target     * given is a Fig, a check is made if the fig has an owning     * modelelement and occurs on the current diagram.     * If so, that modelelement is the target.     *     * @deprecated As of ArgoUml version 0.13.5,     *         the visibility of this method will change in the future,     *         replaced by {@link org.argouml.ui.targetmanager.TargetManager}.     *         TODO: MVW: I think this should not be deprecated.     *     * @param target the new target     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */"
// TODO: This needs to use a different method than that used by the // constructor if it wants to allow the method to be overridden
// TODO: Can we delegate this to a specialist FigName class?
// TODO: Replace magic numbers with constants
"/** * Information about a source unit and its content, whether * it exists only in memory or it's stored in a file. *  * TODO: Making this an interface instead of a class would allow  * more flexibility in dealing with non-file-based resources. - tfm *  * @author aslo */"
// TODO: Without the null check the following throws a NPE so many // times when it is called from FigEdgeModelElement.modelChanged(), // we need to think about it.
// TODO: This should be managed by the DetailsPane TargetListener - tfm // remove the following line
// TODO: This can't depend on ProjectBrowser.  It needs to get // the current drawing area from the Diagram subsystem or GEF
"/**     * Create the main draggable label for the association.     * This can be overridden in subclasses to change behaviour.     * TODO: Consider introducing this to FigEdgeModelElement and     * using throughout all edges.     *     * @param owner owning uml element     * @param settings rendering settings     */"
"/* MVW: for this case, I had to move the                     * call to setSelectedItem() outside the ""buildingModel"",                     * otherwise the combo does not update                     * with the new selection. See issue 5418.                     **/"
"/* MVW: for this case, I have to move the             * call to setSelectedItem() outside the ""buildingModel"", otherwise             * the combo does not update with the new selection.             * The same does probably apply to the cases above! */"
"/** * The Fig for a permission, which is a form of dependency. * <p> * TODO: In UML 2.x, the import and access Permissions have become * PackageImports with public visibility and non-public visibility respectively. * (ArgoUML only supports the <<import>> Permission currently). The friend * Permission has been dropped. Also the type hierarchy has been reorganized so * that PackageImport is not a subtype of Dependency. *  * @author Markus Klink */"
// TODO: How does the pressed cancel become a java.lang.Exception?
"/** * Action to trigger code generation for one or more classes. * <p> * In fact, only all named classes and interfaces * on the active diagram are generated. * Or, if this delivers an empty collection, all selected classes, interfaces * and the contents of selected packages are generated * (independent if they are named or not). <p> * TODO: Implement a more logical behaviour. */"
// TODO: Bob says - if the model element is not named we could // generate a name. e.g. a generalization becomes "Class A -> Class B"
// hack to make sure that the right height is // applied when no icon is used.
// TODO: this should be more extensible... may be only // "findPanelFor(target)" if there is a panel why not show it?
"/**     * Utility function to localize the given string with help text, and show it     * in the status bar of the ArgoUML window. This function is used in favour     * of the inline call to enable later improvements; e.g. it would be     * possible to show a help-balloon.     * <p>     * TODO: This code is also present in other root Figs...     *      * @param s the given string to be localized and shown     */"
"/** * Add a concurrent region to a concurrent composite state * <p> * This action can be executed with either * the composite concurrent state selected, * or one of its concurrent regions. * <p> * TODO: Move all the magic numbers to constants * * @author pepargouml@yahoo.es */"
// TODO Improve extensibility of this!
// TODO: make the "magic numbers" configurable
"/**     * Helper method for changeConnectedNode.     * TODO: This should probably be in superclass. Associations can be on     * several diagram types.     */"
"/**     * Returns the current target.     * @deprecated As of ArgoUml version 0.13.5,     * the visibility of this method will change in the future, replaced by     * {@link org.argouml.ui.targetmanager.TargetManager#getTarget()     * TargetManager.getInstance().getTarget()}.     * TODO: MVW: I think this should not be deprecated.     *     * @return the target     * @see org.argouml.ui.TabTarget#getTarget()     */"
"/**     * Reroutes the connection to the old node to be connected to     * the new node.     *     * delegates to rerouteXXX(,,,) for each of the 4 possible edges in     * a class diagram: Association, Dependency, Generalization, Link.     * TODO: This should probably be in superclass. Many Figs can be on     * several diagram types.     *     * @param newNode this is the new node that one of the ends is dragged to.     * @param oldNode this is the existing node that is already connected.     * @param edge this is the edge that is being dragged/rerouted     * @param isSource tells us which end is being rerouted.     */"
"/**     * Prevent bold events if bold does not change.     * TODO: GEF should manage this after GEF 0.13.4 is included.     */"
"/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     * TODO: From ComboBox javadoc - ""This method is public as an      * implementation side effect. do not call or override.""     * We should find some other way to implement this.     */"
// TODO: This shouldn't know about the specific type of Fig that // is being displayed.  That couples it too strongly to things it // shouldn't need to know about - tfm - 20070924
"/** * The model for the table with the tagged values. Implementation for UML 1.4 * and TagDefinitions. * * TODO: This currently only supports TaggedValues with a TagDefinition which * has a type of String. */"
// TODO: Use our extension registration mechanism for our internal // classes as well, so everything is treated the same
// TODO: We should really be passing the default settings to // the diagram factory so they get set at creation time
// idem, e.g. for a generalization with leaf/root object // TODO: but showing the message in the statusbar would help // TODO: IllegalArgumentException should not be used for // events we expect to happen. We need a different way of // catching well-formedness rules.
"/**     * The connect method specifying a connection     * type by class is unavailable in the ArgoUML implementation.     * TODO: This should be unsupported. Use the 3 Object version     *     * {@inheritDoc}     */"
// TODO: We'd like these to not be filled, but GEF won't let us // select them if we do that. //        setFilled(false);
///////////////// GEF Methods //////////////////////////// // TODO: These should really be picked up automatically from // some GEF interface that we extend, but there is no such // thing.  NOTE: We've only added methods used by ArgoUML, // so it's possible that external consumers need other methods.
"/** * Abstract class that is the parent of all actions adding diagrams to ArgoUML. * The children of this class should implement createDiagram to do any specific * actions for creating a diagram and isValidNamespace that checks if some * namespace is valid to add the diagram to. <p> * * ArgoUML shall never create a diagram for a read-only modelelement.<p> * * TODO: This class should be merged with ActionNewDiagram. * * @author jaap.branderhorst@xs4all.nl */"
"/**     * TODO: MVW: I am not completely sure of the following:<p>     * The ""namespace"" of the diagram is e.g. used when creating new elements     * that are shown on the diagram; they will have their namespace set     * according this. It is NOT necessarily equal to the ""owner"".      *      * @return the namespace for the diagram     */"
// TODO: Use default value of appropriate type here
"/**     * Set the fig style according to attributes. <p>     *      * TODO: This is never used! Can we remove?     *     * @param fig the fig to style.     * @param attributeMap a map of name value pairs     */"
"/**     * We hang our heads in shame. There are still bugs in ArgoUML     * and/or GEF that cause corruptions in the model.     * Before a save takes place we repair the model in order to     * be as certain as possible that the saved file will reload.     * TODO: Split into small inner classes for each fix.     *     * @return A text that explains what is repaired.     */"
"/**     * TODO: The reference to the method     * org.argouml.uml.ui.VetoablePropertyChange#getVetoMessage(String)     * was here but the class does exist anymore. Where is it?     * This method is never used!     *     * @param propertyName is the name of the property     * @return a message or null if not applicable.     */"
"/**     * Execute this action from the command line.     *     * TODO: The underlying GEF library relies on Acme that doesn't allow     * us to create these files unless there is a window showing. For this     * reason I have had to split the performing of commands in     * {@link org.argouml.application.Main#main(String[])} so that we can,     * by not supplying the -batch option, run these commands     * with the window showing. Hopefully this can eventually be fixed.     *     * @see org.argouml.application.api.CommandLineInterface#doCommand(String)     * @param argument is the file name that we save to.     * @return true if it is OK.     */"
//TODO: make the explorer listen to project member property //changes...  to eliminate coupling on gui.
// TODO: associationclasses fit both of the next 2 cases
// needed?
// TODO: We can probably use this instead of all of the above // legacy UML 1.3 code - tfm - 20070915
// TODO: Fonts shouldn't be handled any differently than other // rendering attributes
// TODO: No one should be sending the deprecated event // from outside ArgoUML, but keep responding to it for now // just in case
"/**     * forwards this event to the tree model.     *     * @param element the modelelement to be added     *     * TODO:  This shouldn't be public.  Components desiring to     * inform the Explorer of changes should send events.     */"
// TODO: This should not need to know about ProjectSettings - tfm
// TODO: Why can't we use ActionAddExistingNodes here? Bob.
// TODO: We'd like to test this in its new guise as PackageImport, but // we don't have a good way to do it currently
"/*     * Constraint: This code only deals with 1 supplier per dependency!     * TODO: Do we need more?     *      * @see org.argouml.uml.ui.AbstractActionAddModelElement#doIt(java.util.List)     */"
"/** * Abstract action to trigger creation of a new diagram. <p> * * ArgoUML shall never create a diagram for a read-only modelelement. * <p> * TODO: Bobs says, can we merge ActionAddDiagram with this class? * * @author michiel */"
// First of all, let's set up the duplicate hash. This hash contains // all the duplicate key for another key. // // TODO: every duplicate.put() is done twice - but how to avoid this?
// TODO: This should get the containing project from the list of // targets, not from some global
"/**         * TODO: Bob says - This is a really nasty horrible hack.         * ShadowFig should not extend FigNodeModelElement. Instead         * we require a base class FigNode with common behaviour of ALL         * nodes in ArgoUML. ShadowFig should extend that and         * FigNodeModelElement should extend that same base class adding         * common functionality for FigNode that represent model element.         * @see org.argouml.uml.diagram.ui.FigNodeModelElement#setShadowSize(int)         */"
"/** * A window that displays an exception to the user if we can't handle it * in any other way. *  * TODO: This has been partly converted to be a generic error dialog  * rather than something specific to exceptions.  This should be renamed * when that process is complete. */"
// TODO: Don't use hardcoded colors here - tfm
"/** * @author jaap.branderhorst@xs4all.nl * @since Jan 29, 2003 *  * TODO: For UML 2.x this needs to be changed to just a toggle which  * represents ReadOnly (frozen) or not (changeable). */"
"/**     * Save the project.     * @param file the File to save to     * @param pmw       the ProgressMonitor to be updated;     * @return true if successful     *     * TODO: Separate this into a Swing specific class - tfm     */"
"/*         * Work in progress here to allow multiple details panes with different         * contents - Bob Tarling         */"
// TODO: The following is MDR specific.  We need something generic // to all Model subsystems - tfm 20070716
"/** * This is the ""main"" class for the GUI subsystem.<p> * * Users of the GUI subsystem, i.e. components that are to place themselves * in any of the GUI components, register themselves in this class.<p> * * TODO: Add the rest of the registers to this. * * @author Linus Tolke * @since 0.21.3 */"
"/**     * The constructor.<p>     *     * TODO: Is this constructor used? What is the purpose with it?     *     * @param n the name to be localized     * @param subs the go rules     */"
// TODO: We shouldn't need this reflection any more once we have // convinced ourselves that everything with a setItemUID method // is implementing IItemUID
// TODO support nested let expressions !
// This is needed for a CommentEdge ... // TODO: Why doesn't CommentEdge implement IItemUID and be // handled with the mechanism above.
"/**     * Sets the directory name where the profiles can be found. Initially,     * 'uml14' is used. TODO: Intermediate solution for UML 2.x support,     * please implement a better solution.     *      * @param dir Name of the directory for the profiles     */"
// TODO: This is in the wrong place.  It's not profile specific. // It needs to be moved to main XMI reading code. - tfm 20060326
// This can be made public to allow others to extend their own persisters
// Once all edges are connected do a compute route on each to make // sure that annotations and the edge port is positioned correctly // Only do this after all edges are connected as compute route // requires all edges to be connected to nodes. // TODO: It would be nice not to have to do this and restore annotation // positions instead.
"/**     * @param project the ArgoUML {@link Project} to save in file.     * @param file the {@link File} in which an ArgoUML {@link Project} will     * be persisted.     * @return the persister used and usable for file.     * @throws SaveException if saving the file goes wrong.     * @throws InterruptedException if an interrupt occurs while saving.     * TODO: move this to an helper class.     */"
"/** * TODO: This whole class needs to be updated to remove use of deprecated * methods and (hopefully) test multi-root and multi-project methods. *  * @since Nov 17, 2002 * @author jaap.branderhorst@xs4all.nl */"
// Method 2: (assign data immediately, see end of file). // TODO: if we ever want to extend PathItemPlacement, // we should modify this, so that we also recognise any // subclass of PathItemPlacement. // Is the class name a PathItemPlacment? // TODO: Use class reference to make this dependency obvious
// TODO: There are cyclic dependencies between ActionStereotypeView* // and FigNodeModelElement.  Register these actions opaquely since // we don't what they are. - tfm
// TODO: Do we care?
// TODO: break into 3 main member types // model, diagram and other
"/**     * Get an {@link AbstractFilePersister} for file.     *     * @param file the {@link File} in which an ArgoUML {@link Project} will     * be persisted.     * @return the appropriate persister for file or null if the file's     * extension doesn't match a supported persister.     * TODO: move this to an helper class.     */"
"/**     * Finds a type in a model by name     *     * FIXME: duplicated from the method with the same name in     * org.argouml.profile.internal.ModelUtils.     *     * @param s the type name     * @param model the model     * @return the type or <code>null</code> if the type has not been found.     */"
"/** * This class manages the projects loaded in argouml, * and what the current project is. <p> * * Classes in ArgoUML can ask this class for the current * project and set the current project.  Since we only have one * project in ArgoUML at the moment, this class does not manage a list * of projects like one would expect. This could be a nice extension * for the future of ArgoUML.  As soon as the current project is * changed, a property changed event is fired. <p> * * TODO: Move everything related to the creation of a project * into the ProjectFactory. * * @since Nov 17, 2002 * @author jaap.branderhorst@xs4all.nl * @stereotype singleton */"
"/**     * TODO: Is this used in places other than on Diagrams?  If so, it needs to     * stay in ProjectSettings (as well as being a DiagramSetting).     *      * @return Returns <code>true</code> if we show stereotypes in the explorer     */"
"/**     * @throws SAXException when things go wrong with SAX     * @throws IOException when there's an IO error     * @throws ParserConfigurationException when the parser finds wrong syntax     *      * TODO: Unused?     */"
"/*         * Since this is (hopefully) a temporary solution, and nobody ever looks         * at the type of notation event, we can simplify from sending every         * existing event to one event only. But since there is no catch-all         * event defined, we just make one up. Rationale: reduce the number of         * total refreshes of the drawing.         */"
"/**     * Prefix identified as an implementation specific class.     * TODO: This should be generalized so it doesn't have to be changed     * each time a new implementation is created - tfm 20051109     */"
// TODO: This is temporary.  We need a new list for UML 2.x // The following UML 1.4 elements are not in UML 2.x
"/** * TODO: This is currently just a mechanical merge of the tests in * from the generic Model test and the NSUML tests.  They need to be * reviewed & merged. * * @author euluis * @since 0.19.2 * @version 0.00 */"
"/**     * Finds a classifier with a certain name.<p>     *     * Will only return first classifier with the matching name.     *     * TODO: Move to Model subsystem - tfm 20070307     *      * @param s is short name.     * @param ns Namespace where we do the search.     * @return the found classifier (or <code>null</code> if not found).     */"
"/*         * The UML 2.x package structure is *entirely* different, so we have to         * remap a bunch of stuff. Names without embedded colons (:) indicate         * that the entire package is remapped. e.g. Kernel->Core As a matter of         * fact the only package which did NOT get renamed or moved is UseCases.         *          * TODO: This section is very incomplete. - tfm         */"
"/**     * Set the URI for this project. <p>     *      * Don't use this directly! Use instead:     * {@link org.argouml.persistence.PersistenceManager     * #setProjectURI(URI, Project)}     * <p>     * TODO: Why isn't this deprecated or private if it is not to be used?     *      * @param theUri The URI to set.     */"
// TODO: ProjectBrowser doesn't need to mediate this conversation // Use an event listener in the ToDoPane to communicate instead. - tfm
"/** * The Project interface encapsulates all information about a designer's * project. It contains the list of diagrams and UML models, various project * properties such as the author's name, and defaults for various settings. * <p> * TODO: This interface was mechanically refactored from the implementation * class {@link ProjectImpl}. It needs to be reviewed and cleaned up, * eliminating methods which should be part of the public API and splitting the * interface into smaller function specific (e.g. TrashCan) interfaces. *  * @author Tom Morris <tfmorris@gmail.com>, Thomas Neustupny * @since 0.25.4 when it replaced the concrete class of the same name */"
// TODO: This should listen for new target events  // fired by WizStep.updateTabToDo so that we // can decouple it from the ProjectBrowser.
//TODO: should fire its own event and ProjectBrowser //TODO: should register a listener
"/** * Agency manages Critics.  Since classes are not really first class * objects in java, a singleton instance of Agency is made and passed * around as needed.  The Agency keeps a registry of all Critics that * should be applied to each type of design material. When a * design material instance is critiqued it asks Agency to apply all * registered Critic's.  In the current scheme there is a thread that * proactively, continuously critiques the Design at hand, even if * the user is idle! This is simple and it works.  The disadvantage * is that _all_ active critics related to a given design material are * applied, regardless of the reason for the critiquing and a lot of * CPU time is basically wasted.  <p> * * TODO: I am moving toward a more reactionary scheme in * which specific design manipulations in the editor cause critics * relevant to those manipulations to be applied.  This transition is * still half done.  Triggers are the critiquing requests.  The code * for triggers is currently dormant (latent?).<p> * * TODO: There is a strong dependency cycle between Agency and Designer.  They * either need to be merged into a single class or partitioned differently, * perhaps using an interface to break the cycle.  The Designer singleton gets * passed to almost every single part of the Critic subsystem, creating strong * coupling throughout. - tfm 20070620 * * @author Jason Robbins */"
"/**     * Reply true iff this Critic is relevant to the goals that the     * Designer is trying to achieve. By default, all Critic's are     * relevant regardless of the GoalModel. Really this is something for a     * ControlMech to compute, but if a subclass of Critic encapsulates     * some information you may need to override this method. <p>     *     * TODO: I would like a better default action, but goals     * are typed and their values must be interpreted by critics. They     * are not as generic as the DecisionModel.     *     * @param dsgr the designer     * @return true if relevant     */"
"/* TODO:  THIS IS A HACK.	 * A much better way of doing this would be not to start	 * the critic in the first place.	 */"
"/**     * Return true iff the given ToDoItem is still valid and should be     * kept in the given designers ToDoList. Critics that are not     * enabled should always return false so that their ToDoItems will     * be removed. Subclasses of Critic that supply multiple offenders     * should always override this method. <p>     *     * By default this method basically asks the critic to again     * critique the offending Object and then it checks if the     * resulting ToDoItem is the same as the one already posted. This is     * simple and it works fine for light-weight critics. Critics that     * expend a lot of computational effort in making feedback that can     * be easily check to see if it still holds, should override this     * method. <p>     *     * TODO: Maybe ToDoItem should carry some data to make     * this method more efficient.     *     * {@inheritDoc}     */"
"/** * The DecisionModel is part of the state of the Designer.  It * describes what types of decisions, or design issues, the Designer * is thinking about at the current time.  Critics that are relevant to * those decisions are made active, Critics that are not relevant are * made inactive. * * TODO: There is some notion that each decision has a * certain importanance at a certain time, but I have not followed * through on that because I don't have good examples of how to * quantify the importance of a decision. * * TODO: Right now the individual decisions are just * Strings, maybe they should have some non-atomic structure? * * @author Jason Robbins */"
// How much control should critics have over when they are relavant? // Does doing that in code instead of declaratively limit reasoning? // How does using more semantically rich method calls impact // componentization?
"/** * This class models the designer who is building a complex design in * some application domain and needs continuous feedback to aid in the * making of good design decisions.<p> * * <strong>This area needs work, especially as it is a * central idea of Argo.</strong><p> * * Currently (almost) everything is hardcoded. What can be configurable??<p> * * The ToDoList is dependent on this class, * i.e. each designer has its ToDoList.<p> * * Each designer has his own Agency, * which is the only class that knows all the critics.<p> * * This class listens to property changes from ...?<p> * * A designer can create ToDo Items, just like the critics. Hence the designer * implements the Poster interface.<p> * * TODO: There is a strong dependency cycle between Agency and Designer.  They * either need to be merged into a single class or partitioned differently, * perhaps using an interface to break the cycle.  The Designer singleton gets * passed to almost every single part of the Critic subsystem, creating strong * coupling throughout. - tfm 20070620 * * @author Jason Robbins */"
"/**     * Return the default type for a parameter.     *      * @return a Classifier to use as the default type     * TODO: This belongs in ProjectSettings. - tfm     */"
// TODO: at the moment setSelectedComponent doesn't take into account // the rather complex tab selection mechanism of DetailsPane. The tab // selection mechanism must be refactored.
"/**     * ToDoItems that the designer has explicitly indicated that (s)he considers     * resolved.     * <p>     * TODO: generalize into a design rationale logging facility.     */"
// TODO: setText in GEF should call setBounds instead of directly // changing x, y, w, h - then we will have an event generated // correctly in GEF
"/**     * Handle firing a notation event.     * <p>     * TODO: This needs to be managed on a per-diagram or per-project basis.     *     * @param event The event to be fired.     * @param listener The listener.     */"
"/**     * Indicates the end of the range for notation events.<p>     *      * TODO: Remove this - not used anyway.     *     * @return the last id reserved for events.     */"
"/**     * Handle firing a diagram appearance event.     * <p>     * TODO: This needs to be managed on a per-diagram or per-project basis.     *     * @param event The event to be fired.     * @param listener The listener.     */"
// TODO: This is currently duplicated from MetaDataCache - must find a // common place in model facade
// Andreas: this is just temporary for the uml2 pre-alpha versions.
"/**     * Sets the body of an expression.     *     * TODO: This operation is fooling the user     * in thinking that the body of the object is changed.     * Instead, a new object is created.     * There is no other way: a MExpression can not be altered,     * once created!     * So, this operation returns a newly created object instead.     *     * @param handle The expression to modify.     * @param body The body to set.     * @return The newly created expression.     */"
// TODO: This should happen in GEF
// TODO: Remove listeners for add/remove events
"/**     * Prevent italic events if italic does not change.     * TODO: GEF should manage this after GEF 0.13.4 is included.     */"
// TODO: Move an empty implementation to FigGroup in GEF
// TODO: Note copy/paste code in FigEntryPoint - where is this code // better placed in GEF?
// // !! TODO: All code below here is duplicated in FigBaseNode. The reason // is the GEF defect - http://gef.tigris.org/issues/show_bug.cgi?id=358 // Once we have taken a release of GEF with that fix we can remove this // code. //
"/** * Mode to create a link between two FigClassifierRoles. * TODO: Provide a ModeFactory and then this class can become package scope. * @author penyaskito */"
// Mark the contain FigPoly as complete. // TODO: I think more work is needed in GEF to either do this // automatically when both ends are set or at the very least // Give a setComplete method on FigPolyEdge that calls its // contained poly
// TODO: this shouldn't be hardcoded // 20 is the height of the spline // 50 is the default activation height
// TODO: Move the magic number 4 to a descriptive constant
"/** * Brooms all the message which y coordinate is upper than the position * of the broom. * TODO: Provide a ModeFactory and then this class can become package scope. * @author penyaskito */"
"/* This is a temporary hack until the notation provider         * for a SD Message will be able to parse successfully when the sequence         * number is missing.         * Remove this method completely then.*/"
// TODO: calcBounds is called by SelectionManager when the Fig is // dragged. This code is needed to reposition any self message // as they are become detached from their classifier role // (see issue 5562). The cause of the detachment is not yet // understood. // Unfortunately calcBounds is called from several other places // so the code here is not optimal but is the best workaround until // ArgoUML can provide its own replacement SelectionManager for // sequence diagram requirements // See - http://gef.tigris.org/issues/show_bug.cgi?id=344
"/**     * The default behaviour from FigEdgeModelElement is not correct     * here. See issue 5005. TODO: We must determine what to do here but for     * now doing nothing is better. I'm not sure why the super method would     * not work as I would expect that to do nothing if the ends are already     * correct.     * @return true at all times for now     */"
"/**     * Create an empty but initialized instance of a UML Parameter.     *     * @return an initialized UML Parameter instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
// Convert to bounding box // Very screwy!  GEF sometimes uses center and sometimes upper left // TODO: GEF also positions text at the nominal baseline which is // well inside the bounding box and gives the overall size incorrectly
"/** * This is the interface for registering interest in events sent from * the model component.<p> * * Neither the registration or unregistration, nor the events themselves * contain any reference to the model implementation.  Instead they * use the {@link java.beans.PropertyChangeListener}, * {@link java.beans.PropertyChangeEvent} to * deliver events.<p> * * The reference to the listener is a WeakReference so you don't need to * call removeWHATEVERListener, you can just forget about your listener * and it is eventually finalized and removed. This also means that you * will have to keep a reference to your listener while it is active. * Since the garbage collecting mechanism is not really deterministic * a forgotten about listener might still receive events. Unless it can * handle them in a harmless way, this approach should not be used. * * TODO: (Is this still true or does it refer to the NSUML * implementation? - tfm 20051109) * (This is part of the contract that is established between the Model * subsystem and its users. If that is not fulfilled by the current * implementation, then the current implementation is incorrect. * Linus 20060411).<p> * * TODO: What event names? * The event names generated are {@link String}s and their values and * meanings are not really well documented. In general they are the * name of an an association end or attribute in the UML metamodel.<p> * * Here are some highlights:<ul> * <li>""remove"" - event sent when the element is removed. * </ul> * * @author Linus Tolke */"
"/**     * Create an empty but initialized instance of a UML Method.     *     * @return an initialized UML Method instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Binding.     *     * @return an initialized UML Binding instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Returns names of all metamodel value elements including datatypes,     * enumerations, and primitive types.     *      * TODO: This method rightly belongs in a separate interface dealing     * with instances of MOF types as opposed to UML types like all the     * rest of the methods here do.     *      * @return Collection containing Strings with names of all metatypes     */"
"/**     * Returns names of all metatypes in metamodel.     *      * TODO: This method rightly belongs in a separate interface dealing     * with instances of MOF types as opposed to UML types like all the     * rest of the methods here do.     *      * @return Collection containing Strings with names of all metatypes     */"
"/**     * Create an empty but initialized instance of a UML Class.     *     * @return an initialized UML Class instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML AssociationClass.     *      * @return an initialized UML AssociationClass instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of an Artifact     *      * @since UML 1.4     * @return an initialized Artifact instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML AssociationEnd.     *     * @return an initialized UML AssociationEnd instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Abstraction.     *      * @return an initialized UML Abstraction instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Attribute.     *     * @return an initialized UML Attribute instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Operation.     *     * @return an initialized UML Operation instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML DataType.     *     * @return an initialized UML DataType instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Called by the constructor to create the Figs at each end     * of the association.     * TODO: This is temporary during refactoring process. We should     * override setDestFigNode and setSourceFigNode and create the ends there.     * That will allow the same pattern to work for UML2 where we cannot assume     * the connection order.     *     * @param sourceAssociationEnd     * @param destAssociationEnd     * @param settings     */"
"/** * Add a new package at the top level, i.e. a model.<p> * * TODO: ArgoUML currently only supports one model. */"
"/**     * Create an empty but initialized instance of a UML Comment.     *     * @return an initialized UML Comment instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**    * Create an empty but initialized instance of a UML Dependency.    *    * @return an initialized UML Dependency instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.    */"
"/**     * Create an empty but initialized instance of a UML Component.     *     * @return an initialized UML Component instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Constraint.     *     * @return an initialized UML Constraint instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an EnumerationLiteral.     * @return Object new Enumeration     * @since UML 1.4     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML ElementResidence.     *     * @return an initialized UML ElementResidence instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Interface.     *     * @return an initialized UML Interface instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create an empty but initialized instance of a UML Flow.     *     * @return an initialized UML Flow instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create a UML PrimitiveType.     *      * @since UML 2.1.1     * @return an initialized UML Primitive instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Builds a manifestation of an element for an artifact.     *     * @param utilizedElement is the packageable element     * @return manifestation     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Create a UML TemplateArgument.     *      * @since UML 1.4     * @return an initialized TemplateArgument instance.     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
// This checks the order in addition to the contents // Is that really what we want here? - tfm 20070603
"/**     * Builds a class with a given name.     *     * @param name the given name     * @return Class     * @see #buildClass()     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Builds a method with a given name.     *     * @param name is the given name     * @return method     * TODO: This needs an extra parameter to specify the model/extent where     * the new element should be created.     */"
"/**     * Recognizer for primary objects. A primary object is an object that is     * created by the parser or by a user. Object that are created as a side     * effect of importing some other object are not.     * <p>     * TODO: This doesn't belong in the Facade. It's a higher level function     * used specifically for certain reverse engineering operations. - tfmorris     *      * @param handle     *            candidate     * @return true if primary object.     */"
"/**     * Recognizer for Parameter's with a DirectionKind of Return.     * TODO: This is a duplicate of {@link #hasReturnParameterDirectionKind(Object)}     * @param handle candidate parameter     * @return true if handle is a return parameter.     */"
"/**     * Recognizer for ModelElements with package visibility.     *     * TODO: This method name was chosen for compatibility with     * the existing naming scheme, but has the potential of      * clashing with some future use.     *      * @param handle candidate     * @return true if handle has package visibility     */"
"/**     * Recognizer for ModelElements which have the <<singleton>> Stereotype     * applied.     * <p>     * TODO: Moved this out of the Facade to someplace elese since it's not     * Model subsystem specific - tfm 20070607     *      * @param handle     *            candidate     * @return true if handle is a singleton.     */"
// this should be moved to a ui action.
"/**     * Return the tagged value with a specific tag. <p>     *      * Warning: this method returns only the first TaggedValue found     *  with the given name. Hence, this method is a simplification of      *  the real problem and should be avoided.     *     *  TODO: What should be done about the above problem?  Options are     *  to deprecate the method, throw an exception if the name is ambiguous,     *  or leave the caller to figure it out themselves.     *       * @param handle The model element the tagged value belongs to.     * @param name The tag name.     * @return The found tag, null if not found     */"
// TODO: Is this removed from UML2 ?
// TODO: Some of these magic numbers probably assume a line // width of 1.  Replace with appropriate constants/variables.
// TODO: This needs to be managed on a per-project or per-model/extent // basis
"/**     * Returns all states that can be recursively contained by the given State.     * <p>     * TODO: {@link #getAllPossibleSubvertices(Object)} and     * {@link #getAllSubStates(Object)} are duplicates as implemented for MDR.     * It isn't clear from the Javadoc or usage whether they should do different     * things or this just happened because no one noticed we already had     * another method.     *      * @param oState     *                the Composite state we are searching the states for,     * @return Collection the collection with found states     */"
"/**     * Add a path to the list of paths to be searched when looking for XMI files     * to resolve external references with. The list is maintained in a static     * structure shared by all instances.     * <p>     * TODO: It's desirable to have separate search paths for separate files,     * but more work is required in ArgoUML so that it knows how to maintain     * separate contexts for the profiles and user models.     *      * @param path     *                a directory path to add to the search path     */"
"/** * The buttons on selection for a Stereotype. <p> *  * TODO: Find a way to hide the OperationsCompartment  * on the FigClass of the created metaclass. *  * @author michiel */"
"/** * A ChangeCommand that updates its label. * <p> * The label of this command can contain the character '#' that will be replaced * with information about an object when the label is returned. * <p> * TODO: Switch this to use Java string formatting instead of private # notation? *  * @author Bogdan Pistol */"
// TODO: This is probably related to the SendEvent that is sending the // Signal, but the association is not navigable in that direction
// TODO: ActionState, CallState, and SubactivityState have been // replaced in UML 2.0 by explicitly modeled Actions
"/**     * TODO: see if protected or need to be present in each subclass     */"
// TODO: We don't want to do this once we have dropped UML1.3 // Map UML 1.4 names to UML 1.3 equivalents
// TODO: Comment by A- Rueckert: I don't think it makes much // sense to query interactions from a Collaboration in UML2, // since this diagram does no longer exist and // an Interaction means something different in UML2.
//TODO:  Comment by A. Rueckert <a_rueckert@gmx.net> : // I think, the handle holding the collaboration implementation, should // rather be a CollaborationUse in UML2. // But as a workaround for now, I'll try to get // a Collaboration representation (CollaborationUse) and // then try to get the owning Classifier from there...
// TODO: This probably can't be implemented in a way that will make // the UML 1.4 UI happy.  Needs to be generalized to UML 2 semantics.
// TODO: What do we want to use as an equivalent here?
// TODO: Is there an option we can use to save our ArgoUML version?
// TODO: just a guess, probably not right - tfm //        return handle instanceof LinkEndData;
// TODO: this doesn't belong in the implementation specific piece - tfm
// TODO: The UML 1.4 concept of a Multiplicity & Multiplicity Range has // been replaced by a single element
// TODO: Not sure the semantics are an exact match here between // UML 1.4 Aggregate and UML 2.x Shared.
// TODO: Changed in UML 2.x to special type of Property?
// TODO: TagDefinitions are gone from UML 2 // they are now Properties of Stereotypes;
// TODO: Moved this out of the implementation-specific piece - tfm // everything is primary for now (ie not reverse engineered)
"/**     * This keeps track of the editing domain that is used to track all changes     * to the model.     * <p>     * TODO: This probably needs to be a set of EditingDomain so that we can     * manage an EditingDomain per project.     */"
// TODO: This method is mostly (entirely?) redundant - tfm
// TODO: The javadoc specifies that null should be returned if 'from' or // 'to' are null or if there are no associations between them. We should // return an empty collection instead and the javadoc should be changed.
// TODO: This isn't right
// TODO: Does CoreHelper#getExtendedClassifiers(Object element) means // all parents (direct and indirect) or only the direct parents?
// TODO" What is the purpose of this? Why do we hide buttons here? // Presumably if so we should not assume SelectionClass
// TODO: We currently delete the old values before setting // to something new. This is a workaround to issue 6056. // We should consider giving an API to get the lower and // upper values so that controls can listen directly to // those rather than the element containing those values.
// TODO: In UML2.x Event has no parameters. The Event metaclass in // UML1.x corresponds to the Trigger metaclass in UML2.x (see UML // Superstructure page 456).
// TODO: This should be built by reflection from the metamodel - tfm //       Update for UML 2.x metamodel if not replaced by reflection
// Don't implement - deprecated method in interface.
// TODO: BooleanExpresion is removed from UML2.x, is it OK to use // ValueSpecification?
// TODO: This will need to be adapted to send undo/redo commands back // to our consumer (e.g. ArgoUML) if a new undo mechanism is implemented // for the Model subsystem - tfm
"/**     * This sets up the editing domain for the model editor.     *     * TODO: We probably need an EditingDomain per Argo project so that we can     * keep the ResourceSets separate.     */"
// TODO: Model implementation independent
"/*         * TODO: mvw: do we really look into super-types of the stereotype, or         * should we be looking into super-types of the baseclass?         */"
// TODO: Do we really want stereotypes from nested packages?
// TODO: this should call the single namespace form // getStereotype(it2.next(); stereo);
"/**     * An array of valid connections, the combination of connecting class and     * node classes must exist as a row in this list to be considered valid.     * <ul>     * <li>The 1st column is the connecting element.     * <li>The 2nd column is the ""from"" element type.     * <li>The 3rd column is the ""to"" element type.     * <li>The 3rd column is optional, if not given then it is assumed to be     * the same as the ""to"" element.     * <li>The existence of a 4th column indicates that the connection is valid     * in one direction only.     * </ul>     * TODO: This encodes not only what is legal in UML, but also what ArgoUML     * knows how to create, so not all legal connections are included. Probably     * should be split into two pieces: 1) legal UML (here) and 2) supported (in     * ArgoUML application someplace) - tfm - 20060325<p>     *     * Most of these are subtypes of Relationship which includes Association,     * Dependency, Flow, Generalization, Extend, and Include. Dependency     * includes Binding, Abstraction, Usage, and Permission. AssociationRole and     * AssociationClass are Associations. The remaining items (Link, Transition,     * AssociationEnd, Message) are non-Relationship types which ArgoUML treats     * as connections/edges.     */"
// TODO: Can we get this info from UML2 plugin? // Perhaps collect all References in the metamodel, filter for those // which represent containments and find the types on either end - tfm
// TODO: Use getModelElementContainer for transition
// TODO: We shouldn't actually have to do all this work
// TODO: Hook this creating of a new resource in to someplace more // more appropriate (perhaps createModel() ?) // Better yet add a new method to Model API to create a new top level  // project/model/xmi file so we don't depend on side effects
// TODO: Check for Resource to hold this and create if necessary? // This is a discrepancy between MDR which does it here and eUML which // does it as part of setRootModel
// TODO: get/setRootModel aren't specific to the Model implementation // they could probably be moved elsewhere - tfm - 20070530
// I think that the synchronized access to idToObjectMaps is // required in order to respect the thread safe nature of the // object. // FIXME: maybe this should be moved into XmiReferenceResolverImpl, // because it depends on internal implementation details of it.
// TODO: We can choose between something which matches UML 1.4 in name // or something that matches in functionality.  We've chosen // functionality for now, but this will create a name conflict during // the migration process. - tfm
// TODO: Change to throw exception when uses are fixed //        throw new NotImplementedException(); //$NON-NLS-1$
"/*     * A near clone of this code works fine outside of ArgoUML, but throws a     * null pointer exception during the transform when run within ArgoUML I     * think it's something to do with the class libraries being used, but I     * can't figure out what, so I've done a simpler, less efficient stepwise     * translation below in serialTransform     */"
// TODO: Bob says - Coding by use of side effect here. // Maybe this should be done in a clearer way but it fixes // http://argouml.tigris.org/issues/show_bug.cgi?id=4978 // It seems that when loading an XMI that is not contained in a zip // file then the InputStream given as the argument to this method // can't be reused as it is at the end of the stream. In that case // systemId appears to be none-null at this stage. // So if systemId is not null we recreate the InputSource.
// Create temporary file for output // TODO: we should be able to chain this directly to XMI reader
"/** * XmiWriter implementation for MDR. * * This implementation is clumsy because the specified Writer interface wants * characters, while the XmiWriter wants an OutputStream dealing in bytes. We * could easily create a Writer from an OutputStream, but the reverse is not * true. * * TODO: The old Writer based interface can be removed when the deprecated * ModelImplementation.getXmiWriter is removed. * * @author lmaitre * */"
// TODO: Return empty collection on null input or throw IllegalArgument?
// TODO: An Iterator filter would be nice here instead of the // mucking around with the Collection.
// TODO: Doing this violates the minimal cardinality of 1 // if we allow it we at least need a critic to warn about it
// apply <<profile>> stereotype to make it a "profile" (our convention) // (hack: create that stereotype instead using the UML 1.4 profile)
// If systemId is a valid URL, simply use it. // TODO: This causes a network connection attempt for profiles
"/* TODO: Make this work when the given stereotype     * has more than one baseclass.     * TODO: Currently only works for stereotypes where the baseclass is     * equal to the given one - inheritance does not work.*/"
"/* TODO: mvw: do we really look into super-types of the stereotype,             * or should we be looking into super-types of the baseclass? */"
// TODO: Using just the last piece of the ID leaves the potential for // name collisions if two linked files have the same name in different // directories
// TODO: This should use a minimal update strategy instead of // removing all and then adding all - tfm - 20070806
// TODO: What type of validation can we do here on tagType?
// TODO: this can be simplified to just //((Include) extend).setBase((UseCase) base);
// Anything not found is newly created, so return a null SystemID // indicating that it is in the parent document.  // TODO: This assumption will be invalid if/when we allow editing of // linked sub-models
// TODO: Distinguish between deferred resolution and things which // are unresolved at end of load and should be reported to user.
// TODO: this assumes ranges are sorted. Is this true? - tfm
// TODO: Is this adequate for finding profiles in Java WebStart jars? //       - tfm
// TODO: Check whether this is really needed.  I think it's // left over from an incomplete understanding of the MagicDraw // composition error problem - tfm
// TODO: Not sure whether the above is better in some cases, but // the code below is better for both Java Web Start and Eclipse.
// TODO: this returns a Collection, not a single Object // Is this what the callers expect?
"/*             * TODO: This code manually processes the ElementImports of a             * Package, but we need to check whether MDR already does something             * similar automatically as part of its namespace processing.             * - tfm - 20060408             */"
// TODO: This has different semantics than everything else
// TODO: This does not belong here - use getImportedElement.
// TODO: Rationalize this with getModelElementContainer
// TODO: Temporary stopgap for EnumerationLiteral
// TODO: More is required here to support referenceValues
// TODO: What other non-ModelElement types do we need to handle here?
// This causes problems. It can make multiple return messages // refer to the same activator even if not returning to the same // classifier role as the activator emenates from. // I'm not sure that changing the activator of one message // should amend any other messages but this is certainly changing // too many - Bob.
// TODO: I18N This needs to be localized, but we don't // have any localization capabilities in the model subsystem //                    Object[] args = { typeName, elemName, alias }; //                  misc.name.element-import.alias = Imported {0}: {1} alias {2} //                    return Translator.localize( //                            "misc.name.element-import.alias", args);
"/**     * Register a listener for metamodel Class (and all its     * subclasses), optionally qualified by a list of     * property names.     *     * TODO: verify that property/event names are legal for     * this class in the metamodel     */"
// TODO: Do we want to construct an artificial name here?
// TODO: Implement support for types other than String
// TODO: This should be done after all events are delivered, but leave // it here for now to avoid last minute synchronization problems
// Only do verification if debug level logging is on // TODO: Should we leave this on always? - tfm
"/*     * TODO: MVW: This needs rethinking/rework! I have the following questions:     * Why does it not search for a stereotype in the namespace using properties     * and only create a new stereotype if it will actually be used? Ie, why is     * there not a getStereotype(String name, String baseClass)? (edited by     * d00mst)  <these comments imported from NSUML implementation - tfm>     *      * @see org.argouml.model.ExtensionMechanismsFactory#buildStereotype(java.lang.Object, java.lang.Object, java.lang.Object)     */"
// TODO: the type of the model element used in a type parameter // (ie the formal) needs to match the actual parameter that it // gets replaced with later.  This code is going to restrict that // to always being a Parameter which doesn't seem right, but I // don't have time to debug it right now. - tfm - 20090608
// TODO: This should be built by reflection from the metamodel - tfm //       Update for UML 1.4 metamodel if not replaced by reflection
// TODO: This should use a minimal update strategy instead of // removing everything and adding it again. - tfm
// TODO: this actually returns permissions with stereotypes // of both <<access>> and <<import>> when the spec calls for // only the former, but that seems to give different semantics // to the way package imports work.  Review to see which is wrong.
// TODO: Do we want to <<friend>> stereotypes too? //                        || Model.getExtensionMechanismsHelper().hasStereotype( //                        permission, ModelManagementHelper.FRIEND_STEREOTYPE)
// TODO: We have multiple string representations for multiplicities // these should be consolidated. This form is used by // org.argouml.uml.reveng
"/**     * Get ElementResidences.     *     * TODO: Unused.  Should be added to Facade? - tfm     *     * @param handle A modelElement     * @return Collection The ElementResidence for this model element     */"
// TODO: This is ambiguous as to whether it should be adding a container // or resident.
// TODO: This should either be extended to support all AggreationKinds // or it should be simplified/removed from the API - tfm - 20070331
// TODO: It doesn't really make sense that a namespace would be // returned as part of its own contents, but that's the historical // behavior.
// TODO: Perhaps use a HashSet or other collection with faster lookup // performance in case our callers are doing naive .contains() lookups
// TODO: Try reusing the same set on every recursion
// Check that the two elements aren't already linked the opposite way // TODO: This is a part implementation of well-formedness rule // UML1.4.2 - 4.5.3.20 [3] Circular inheritance is not allowed. // not self.allParents->includes(self)
// TODO: This is a part implementation of well-formedness rule // UML1.4.2 - 4.5.3.20 [3] Circular inheritance is not allowed. // not self.allParents->includes(self)
"/* TODO: This is not according the contract for this function, but             * it is used in several places, and I (MVW) presume that             * we need this generally.             * This part (1) is about drawing an <<import>> permission             * between packages.             * The part (2) below is about ModelManagement.ElementImport. */"
// TODO: Should we handle <<access>> and <<import>>?
// TODO: ?delete Instances which have this as their classifier? // or should we leave them since they contain so much state that the // user would have to recreate?? //        nsmodel.getUmlHelper().deleteCollection( //                nsmodel.getUmlPackage().getCommonBehavior() //                        .getAInstanceClassifier().getInstance(cls)); // TODO: ?delete ObjectFlowStates which have this as their type? //        nsmodel.getUmlHelper().deleteCollection( //                nsmodel.getUmlPackage().getActivityGraphs() //                        .getATypeObjectFlowState().getObjectFlowState(cls)); // TODO: ?delete ClassifierInStates which have this as their type?
// TODO: This should probably throw an exception if it gets // invalid arguments rather than just returning null
// TODO: Delete old multiplicity? Why is "copy" using hard coded value? - tfm
"/*     * TODO: As currently implemented, this expects a list of     * MultiplicityRanges. Is this an interface change from the NSUML     * implementation? I suspect it used to accept a list of Integers. - tfm     *     * @see org.argouml.model.DataTypesFactory#createMultiplicity(java.util.List)     */"
"/**         * TODO: Copied from UmlDiagramRenderer.         *         * Find the Figs in the given layer that should be the source and         * destination and attach these to either end of the FigEdge         * @param layer the layer to look for the FigNodes         * @param newEdge The edge to attach         */"
"/*         * TODO: This is probably not the right location         * for switching off the ""filterNewlines"".         * The setting gets lost after selecting a different         * ModelElement in the diagram.         * BTW, see how it is used in         * javax.swing.text.PlainDocument.         * See issue 1812.         */"
// TODO: This can be a mess... There are any better solution?        
"/**     * The list of operations shall contain     * all operations of all classifiers     * contained in the same package as the callaction itself. <p>     *     * TODO: In fact, we also should include operations of imported     * clasifiers.     *     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */"
"/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.     * DocumentEvent) TODO: Are the 3 methods uses ?     */"
"/**     * Creates a new field that selects the language for an expression.     *     * @param m Expression model, should be shared between     * Language and Body fields     * @param n Only one of Language and Body fields should     * forward events to model     * TODO: MVW: I do not understand that.     */"
// TODO: Why do we need this as well as control? Why is it // instantiated when its not always needed.
"/**     * The constructor.     *     * @param expressionModel     *            Expression model, should be shared between Language and Body     *            fields     * @param notify     *            Set to true to forward events to model. Only one of Language     *            and Body fields should have this set to true.     *            TODO: MVW: I do not understand that.     */"
"/**     * To simplify implementation, we list all associations     * found with any of the Classifiers     * represented by the linked Instances. <p>     *     * TODO: Make a foolproof algorithm that only allows selecting associations     * that create a correct model. Also take into account n-ary associations     * and associationclasses. This algo best goes in the model subsystem, e.g.     * in a method getAllPossibleAssociationsForALink().     *     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */"
"/**     *     * TODO: Try to use valueField.getComponent()     */"
// TODO : ?? use an other CheckBox (defines in Argo and extends // JCheckBox )
// TODO: consider a conditional feature in the xml panel def for this:
"/**     * TODO: Is is really used ?     *     * @see javax.swing.JComponent#removeNotify()     */"
// TODO: Bob says the reflective code following should be replaced // with something more specific like this commented out code. // This would mean we need sType changed to a meta type Object // rather than a String.
"/*     * TODO: Are the 3 methods uses ?     */"
"/** * An OpaqueExpression can have n body n language *  * When display to user, we only show one body. A ""..."" button is enabled for * edit other. *  * TODO: Can we, by Import XMI, have 0 language/body ? *  * @author Laurent Braud */"
// TODO: We have some quirk that the a baseClass addition or // removal from a steroetype comes back as an AttributeChangeEvent // rather than an AssociationChangeEvent. This needs further // investigation to see if this can be made consistent.
"/* TODO: This needs work...         * We also need to listen to addition/removal         * of states to/from a ClassifierInState.         */"
// TODO: We may want to restrict the list to parameters which  // conform to the following WFR: //              parameter.type = ofstype //              or (parameter.kind = #in //              and ofstype.allSupertypes->includes(type)) //              or ((parameter.kind = #out or parameter.kind = #return) //              and type.allSupertypes->includes(ofstype)) //              or (parameter.kind = #inout //              and ( ofstype.allSupertypes->includes(type) //              or type.allSupertypes->includes(ofstype))))
// TODO: getAllModelElementsOfKind should probably do this // processing of imported elements automatically
// TODO Part of this is copied from ActionDeleteModelElement. We // maybe need some subclass for common code.
// TODO: We should really test the model instead for this // but we have no API yet. // Can we just check if the collection to build the JList // control implements the List interface?
// TODO: I18N
// not needed
// TODO: maybe should stop at first, or find highest priority.
// TODO how to implement this method properly?
// TODO: i18n
// TODO: Make this final asap.
// Now we know that this critic is still valid. What we need to // figure out is if the corresponding to-do item is still valid. // The to-do item is to be replaced if the name of some offender // has changed that affects its description or if the contents // of the list of offenders has changed. // We check that by creating a new ToDoItem and then verifying // that it looks exactly the same. // This really creates a lot of to-do items that goes to waste.
// TODO:  What should we do here?
// The following debug line is now the single most memory consuming // line in the whole of ArgoUML. It allocates approximately 18% of // all memory allocated. // Suggestions for solutions: // Check if there is a LOG.log(Level.FINE,String, String) method that can // be used instead. // Use two calls. // For now I (Linus) just comment it out. // LOG.log(Level.FINE, "applying critic: " + _headline);
// TODO: Why do we need this when we can just change the font and // achieve the same effect?
// TODO: This work should be deferred until actually  // needed for display
// TODO: Is it removed from UML2 ?
// TODO: Should we be doing anything on deleted elements? // This throws an exception on remove events. - skip for now - tfm
// TODO: implement
// TODO:  Allow other configuration handlers.
// If we weren't given a system ID, attempt to use the URL for the // JAR that we were loaded from.  (Why? - tfm)
// TODO: Register listener for target ToDo item changes // and for new showStep() requests
// TODO: Review - priority of public ID vs system ID has been reversed // from original implementation
// TODO: This shouldn't require two passes through the list - tfm
"/**     * Compute which critics should be active (i.e., they can be     * applied by applyAllCritics) for a given Designer. <p>     *     * Note: I am setting global data, i.e. the     * isEnabled bit in each critic, based on the needs of one designer.     * I don't really support more than one Designer.     * Which is why each designer     * (if we would support more than one designer)     * has his own Agency.     *     * TODO: should loop over simpler list of critics, not CompoundCritics     *     * @param d the designer     */"
// TODO: Why is this disabled always?
// TODO: should have an image of a wizard or some logo
"/* TODO: These buttons for future enhancement:	buttonPanel.add(configButton);	buttonPanel.add(networkButton); */"
// TODO: check type!
"/** * TODO: For UML 2.x, powertypes are accessed indirectly through the  * GeneralizationSets that contain a Generalization. *  * @since Nov 3, 2002 * @author jaap.branderhorst@xs4all.nl */"
// Unused currently //            StringBuffer taggedValuesSb = getTaggedValues(modelElement);
// TODO: Placeholder implementation until support for tracking on // a per-project basis is implemented //        return dirty;
// Empty implementation.
// TODO: Why is this a special case? - tfm
"/**     * Flag to indicate we are creating a new current project.     * TODO: This isn't a thread-safe way of doing mutual exclusion.     */"
/* TODO: Indicate the direction! */
// TODO: We need a way to set the line color and width here, but // TestDependencies thinks this creates a dependency cycle //        Fig line = new ArgoFigLine(snapX, snapY, snapX, snapY,  //                ArgoFig.LINE_COLOR); //        line.setLineWidth(ArgoFig.LINE_WIDTH);
// Apparently, this method is never called.
// TODO: This code can be removed when getCurrentProject is removed
// TODO: Can we just do this every time, no need for else - Bob
// TODO: Tentative implementation. Do we want something that updates // the list of open projects or just simple open and close events? -tfm
// TODO: Add empty placeholder here?
// TODO: Needs completing - stub implementation only! - tfm
// TODO: needs I18N
// TODO: Why aren't we throwing an exception here? // Returning null results in NPE and no explanation why.
// TODO: We expect an association end here -  // check more carefully? - tfm
// TODO: This should only be checking for the top level package // (if anything at all)
// Use a little trick to find out where Argo is being loaded from. // TODO: Use a different resource here. ARGOINI is unused and deprecated
// TODO: Placeholder implementation until support for tracking on // a per-project basis is implemented
// TODO: It is a performance drain to load all classes at startup time. // They should be lazy loaded when needed.  Instead of scanning all // classes for ones which implement our loadable module interface, we // should use a manifest entry or a special name/name pattern that we // look for to find the single main module class to load here.  - tfm
// Enable it. // TODO: This by default selects all modules that are found. //       Eventually we would rather obey a default either from the //       modules themselves, from how they are found, and also //       have information on what modules are selected from the //       configuration.
// If it's a jar, clean it up and make it look like a file url
// We also show tagged values for UML 1 // TODO: what to do for UML2 here?
// TODO: Mark diagram/project as dirty?
// TODO: Do we have any potential consumers of the unversioned name outside // of the notation subsystem?
"/**     * The constructor.     * TODO: Why does this method not handle all settings?     */"
// TODO: These defaults need to be checked against historical ones
// TODO: Shouldn't we do something here?
// TODO: handle parse error
"/* TODO: This try-catch will be needed          * once the code below is improved. */"
"/**     * TODO: This name of the expression language should be     * configurable by the user. <p>     *     * According to the UML standard,     * the expression language should be the same     * for all elements in one diagram. <p>     *     * UML is not a sensible default - usually this is some pseudo-language.     *     * @return the name of the expression language     */"
// TODO: Do we need to control separately for attributes and operations?
"/* We need to extend the ExtensionMechanismsFactory so that                  * we can replace the above deprecated call with something like this: */"
"/* TODO: This needs more work!          * We simply throw the new extension point away? */"
// TODO: Find a better default language // TODO: We should know the notation language, since it is us
/* TODO: Can we put the static block within the init()? */
// TODO: Reuse the offender List.
"/*TODO: In the next line, I should use buildGuard(),                 * but it doesn't show the guard on the diagram...                 * Why? (MVW)                 */"
"/* TODO: Is this a good way of handling nested notation?                     * The following fails the tests:                     * new TransitionNotationUml(t).parse(line);                     */"
/* TODO: Is this a good way of handling nested notation? */
// TODO: add stereotype application (eCore AnyType?)
// TODO: Do we want isaUMLElement here?
// TODO: Any special handling for null names? append will use "null"
"// TODO: This DTD doesn't exist, so we can't tell readers to // look for it //		w.println(""<!DOCTYPE profile SYSTEM \""profile.dtd\"" >""); // but we need a 2nd line to make the funky UML persister work // remove this line if the above is uncommented"
/* TODO: Add implementation. */
// TODO: We need the project specific diagram settings here
// ignored - it shouldn't have been in the project in the 1st place
// TODO: add recent patterns
"/**     * TODO: These can not simply be translated...     */"
// TODO is it possible to use more than one variable?
// TODO support other name kinds
// TODO: Allow .zargo as profile as well?
// TODO: check if it's OK to just get the first zip entry // since the zip file should contain only one xmi file - thn
// TODO: profile dependencies for UML2
// TODO support real types
// XXX: hypotheses no qualifiers (I don't know)
// TODO check types!
"/** * StylePanel class which provides additional parameters for changing Text * elements provided by GEF. *  TODO: i18n */"
// TODO implement iterate() // TODO implement sortedBy() // TODO implement subSequence()
// how to handle empty target lists? // probably the TabText should only show an empty pane in that case
// TODO investigate the "unnamed opposite end"
// TODO support real numbers
// TODO investigate: Abstraction.mapping is not in the Model Subsystem
// TODO implement OCLExpression
// TODO implementationLocation??
// TODO check this
// TODO implement the difference between oclIsKindOf and oclIsTypeOf
// TODO: This should really be coded the other way round, // to only act on associations which are important for // representing the current perspective (and to only act // on a single end of the association) - tfm
// TODO: Do we want to use the Project here instead of just its name?
// TODO: This could be made more efficient by working with iterators // directly and creating a composite iterator made up of all the  // various sub iterators.
// TODO: This is going to cause the color to be reset on a refresh
// TODO presentation??
// For tagged values, use their containing ModelElement since they // don't have property panels of their own // TODO: May want to do this for other types too?
// reorder submenu // TODO: I think this requires I18N, but not sure - tfm
//  Empty implementation - not used.
// TODO: Add a button to force garbage collection
// TODO: Only fetch names and defer fetching panels until needed
// Hide save action during load. Otherwise we get the // * appearing in title bar and the save enabling as models are // updated // TODO: Do we still need this now the save enablement is improved?
"/* TODO: Replace the functioncall in the next line                 * by .requestFocusInWindow() once                 * we do not support Java 1.3 any more.                 */"
/* TODO: Beautify the 2nd part of this string: */
// the text box containing the problem messages // TODO: This should be hidden by default, but accessible on  // via a "details" button or tab to provide more info to the user.
// TODO: I18N required
// TODO: A better implementation would be to batch events into // logical groups and update the tree one time for the entire // group, synchronizing access to the model repository so that // it stays consistent during the query.  This would likely // require doing the updates in a different thread than the // event delivery thread to prevent deadlocks, so for right now // we protect ourselves with try/catch blocks.
"/* TODO: The copy function is not yet                                     * completely implemented - so we will                                     * have some exceptions here and there.*/"
// TODO: Do we want all enabled tabs to listen or // only the one that is selected/visible? - tfm
"/**     * The drag gesture listener is notified of drag gestures by a recognizer.     * The typical response is to initiate a drag by invoking     * DragSource.startDrag().     * <p>     *     * TODO: find a way to show a different image when multiple elements are     * dragged.     *     * @param dragGestureEvent     *            the DragGestureEvent describing the gesture that has just     *            occurred     * @see java.awt.dnd.DragGestureListener#dragGestureRecognized(java.awt.dnd.DragGestureEvent)     */"
// TODO: consider inherited attributes?
"/* TODO: support other types of drag.         * Here you set the owner by dragging into a namespace.         * An alternative could be to drag states into composite states...         */"
"/**     * Returns a set (union) of all unique applicable stereotypes for a given     * collection of model elements. TODO: This is not optimized for     * performance.     *      * @param elements the given collection of model elements     * @return the set with stereotype UML objects     */"
// TODO: handle n-way Associations
// TODO: Ignore and report exception until getTop // implemented.
"/*     * Called after the diagram font gets changed. <p>     *     * TODO: Do we need to do anything here?     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
// Don't know what to do otherwise
// TODO: not implemented
// Do we have 2 connection ends?
// TODO: We need to be more specific here about what to build
// additional cleanup needed, because // this would not be removed by ext.destroy():
"/**     * A specialist Selection class for FigPartitions.     * This ensures that all swimlanes are the same length (ie height).     * TODO: Make sure that all swimlanes appear side by side (UML spec     * states ""separated from neighboring swimlanes by vertical solid     * lines on both sides"".     * TODO: Allow drag of the west and east edge to resize both the selected     * Fig and the fig connected to that side.     * TODO: Show NorthWest and SouthWest handle only on leftmost swimlane.     * TODO: Show NorthEast and SouthEast handle only on rightmost swimlane.     * @author Bob     */"
"/** * The Activity diagram.<p> * * TODO: Finish the work on subactivity states. */"
// This may not actually make any difference at present (the code // behind addTrigger needs more work).
// TODO: Do we have anything to add here?
"/* TODO: We may return the following when the         * relocate() has been implemented. */"
// TODO: Before adding a new region make the last region // its minimum size (smallest size that will still // contain all enclosed)
// TODO: Do we really need to be listening for both of these events?
// TODO: This comparison is very suspect, it should use equals // method. The code within the block is in fact never executed. // I hesitate to change this now as it will trigger code has never been // used before and am not aware of any problems that it usage may // introduce. // I do think that we need to be able to find a different way to // implement the intent here which seems to be to correct edge drawings // that should actually not be allowed - Bob
// TODO: After removing a region reset the overall // size of the node.
// Associations not supported, yet // TODO: Create appropriate ClassdiagramEdge
// TODO: Make another pass to deal with overlaps?
"/* TODO: We may return something useful when the         * relocate() has been implemented, like         * all StateMachines that are not ActivityGraphs. */"
"/** * Stylepanel which adds a checkbox to show or hide the stereotype.<p> * TODO: i18n. * * @author mvw@tigris.org */"
// TODO: To enable models and subsystems, change this flag // Work started by Markus I believe where does this stand? - Bob.
// TODO: ToDoItem stuff should be made an opaque extension
// TODO: for UML 2.x this is isStatic
/* TODO: Why do I need to do this? */
// TODO: This needs to be modified for UML 2.x
// For backward compatibility everything is above and right // TODO: Do in polar domain?
// TODO: It would be better here to continue the loop and try to // build the rest of the compartment. Hence try/catch should be // internal to the loop.
// TODO: Why are these different colors? - tfm
"/* TODO: how to handle changes in shadowsize         * from the project properties? */"
// TODO: Add "unnamed" or "new" or something? (Localized, of course)
// TODO: Should we require a GraphModel in the constructor since // our implementations of setNamespace are going to try and set // the namespace on the graphmodel as well?
// Perhaps something like the following would work instead //            Rectangle drawingArea = //                Globals.curEditor().getJComponent().getVisibleRect();
// TODO: This must happen on the AWT thread
// TODO: We need a better algorithm.
// TODO: Use this event mechanism to update // the checkmark on the Presentation Tab:
// TODO: If this turns out to be a performance bottleneck, we can  // probably optimize the common case by caching our iterator and current // position, assuming that the next request will be for a greater index
//assert Arrays.asList(properties).contains( //    event.getPropertyName()) //  : event.getPropertyName(); // TODO: Do we really always need to do this or only if // notationProvider is null?
// let's test which situation we have. 3 Possibilities: // 1. The nodes are already on the diagram, we can use //    canAddEdge for this. // 2. One of the nodes is already on the diagram. The other //    has to be added. // 3. Both of the nodes are not yet on the diagram. // For the time being we will only implement situation 1. // TODO: implement situation 2 and 3.
// TODO: A more strongly typed data structure could be used here.
"/*     * Perform re-routing if src/dest nodes have changed.     *     * <p>This method needs to be 'armed' by a previous mouseDragged()     * to avoid the situation where the user just clicks on the node     * then clicks on some unrelated Fig, without moving the edge...     *     * <p>TODO: improve the fig finding algorithm to find the top most fig     * in the layer. will be useful for nested states in a statechart.     *     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */"
"/** * A window that shows the progress bar and a cancel button. As a convenience to * callers which may be executing on a thread other than the Swing event thread, * all methods use SwingUtilities.invokeLater() or * SwingUtilities.invokeAndWait() to make sure that Swing calls happen on the * appropriate thread. *<p> * TODO: React on the close button as if the Cancel button was pressed. */"
"/**     * write TODO: Check if sections are not used within the file and     * put them as comments at the end of the file.     * Hint: use a second Map to compare with the used keys.     *    * @param filename the file name     * @param indent the current indentation     * @param outputLostSections true if lost sections are to be written     */"
// TODO: UML2 - what do we do here?
// TODO: implement this - show some documentation?
// TODO: These have been used for most instances of new FigFoo(X0, Y0, ... // but additional work is required to extract the constant from // calculations, etc.
// TODO: work here !
// TODO: What does the output directory have to do with the class path? // Project p = ProjectManager.getManager().getCurrentProject(); // entries.add(p.getProjectSettings().getGenerationOutputDir());
"/* TODO: This next line prevent loading a UseCase          * with a stereotype to grow. Why? */"
"/**     * Utility function to localize the given string with help text,     * and show it in the status bar of the ArgoUML window.     * This function is used in favour of the inline call     * to enable later improvements; e.g. it would be possible to     * show a help-balloon. TODO: Work this out.     * One matter to possibly improve: show multiple lines.     *     * @param s the given string to be localized and shown     */"
// _compileCheckBox = new JCheckBox(); // nameButton(_compileCheckBox, "checkbox.compile-generated-source"); // TODO: Implement the compile feature. For now, disable the checkbox. // _compileCheckBox.setEnabled(false); // southPanel.add(_compileCheckBox, BorderLayout.SOUTH);
"/**     * Save the source language in the model.     * <p>     * TODO: Support multiple languages now that we have UML 1.4 tagged values.     *     * @param node     * @param language     */"
"/*         * TODO: This transformation is Java specific. We need a more         * language/notation scheme for specifying qualified names.         * Possible algorithm - replace all punctuation with our         * internal separator, replace multiple separators with a single         * instance (for languages like C++).  What about I18N? - tfm         */"
// TODO: Need to add FileChooser 
// TODO: this needs to be improved // even for nongui calling, the config panel needs to be initialized:
// TODO implement additional operations in 4.5.3.5
"/**     * Return the fully qualified name of a model element in Java (dot     * separated) format.     * <p>     * TODO: We really need a language independent format here. Perhaps the list     * of names that form the hierarchy? - tfm     */"
// TODO: Need UML 2.x equivalent
"/**     * The list with objects that should be shown in the combobox.     * TODO: Using a list here forces a linear search when we're trying to add     * a new element to the model which can be very slow for large models.     */"
"/**     * Generates a new unique ID and returns it as a String. The contents     * of the String is supposed to be unique with respect to all Strings     * generated by other instances of this class.     * TODO: We should consider using java.util.UUID for this instead.     *     * @return	A String with unique content.     */"
// TODO: I18n
// TODO: Add Up/Down buttons to control the ordering of items
// TODO Add all top level packages
"/**     * If the property that this comboboxmodel depicts is changed in the UML     * model, this method will make sure that the changes will be     * done in the combobox-model equally. <p>     * TODO: This function is not yet completely written!     *     * {@inheritDoc}     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
// TODO support other kinds of tail
// TODO: is this the right range here?
// how to handle empty target lists? // probably the wizstep should only show an empty pane in that case
"/** * This class provides a text field that can be used to display * the text of all Comments associated with an annotated ModelElement. * * TODO: This could use more work.  Currently it returns all * Comment.name or Comment.body attributes concatenated together * into a single read-only document. * * @since 1 Nov 2005 * @author Tom Morris (tfmorris@gmail.com) */"
// TODO: We should assert this never happens before removing // panels should control their own listeners
/* TODO: Implement this! */
// TODO: This is updating model on a per character basis as // well as unregistering/reregistering event listeners every // character - very wasteful - tfm
// TODO: The project should be bound to the action when it is created?
// TODO: It would be better to defer this initialization until the panel // actually needs to be displayed. Perhaps optimistically always return // true and figure out later if we've got something to display - tfm - // 20070110
"/** * This panel contains radio buttons that represent the Changeability * of an asssociation-end. * * @author jaap.branderhorst@xs4all.nl * @since Jan 4, 2003 *  * TODO: For UML 2.x this needs to be changed to be just ReadOnly (frozen) * or not (changeable). */"
//TODO: what to do with the return value?
// TODO: property name will need to be updated for UML 2.x // Unfortunately we can specify two property names here
// TODO: do we want to fire targetRemoved here or is it enough to just // stop updating the targets?
// TODO Expression and InstanceValue (how) // If anyone have an example.
// not implemented yet
"/** * A mock ModelImplementation.<p> * * The Facade, the ModelEventPump, the Factories and Helpers are all * created as mock objects using EasyMock. For each of them, there * should also be a possibility to access their {@link MockControl} * object. * TODO: Create the rest of the getters for the control objects. * * @author Linus Tolke */"
// TODO: what shall we do with the exception?
// TODO: with new reference resolving scheme, the model sub-system will // cache the systemId of the profile, open it and resolve the profile  // on its own. Thus, the java.util.List will be found and the return  // value will be present again... //assertNotNull(returnParamType);
//TODO: I suspect this isn't needed call isn't needed but don't remove // till out of alpha/beta stage
"/**     * The UML 1.4 model elements to test.     *      * TODO: This needs to be updated with a version for UML 2.x.     */"
// TODO: Do we need this? Is this the same as emptyFig.getHeight()?
// TODO: Use reflection against the test case to ensure that it // does not import non-ArgoUML classes
//TODO: What can we do with other kind of actions?
// TODO: Maybe a return message already exists. Check first and // and if the first found has no activator then set this call // message as the activator and skip the code below.
// TODO: why do we need to remove then add the Fig?
"/**          * TODO: minimum height should not be calculated every time, but only           * when an FigMessage has been added or removed.          * Currently doing that doesn't work because of an unknown problem.           * How to test: create only two CRs and a create message between them.           * Then move the create message to the bottom!          * Until that is fixed the workaround is to call updateMinimumHeight()          * every time the minimum size is needed          */"
// TODO: Implement
"/**     * Finds the operation to which a CallEvent refers, based on the given      * transition. This function determines the context of the statemachine      * that contains the given transition. If the context is a Classifier, then      * all operations of this classifier are candidates. If the context is a      * BehavioralFeature, then all operations of the owner Classifier are      * candidates. The first operation of which the name matches is the result.     * For Activity diagrams: If the context is a Package, then     * all Operations of all Classifiers in the package are candidates.     * TODO: This function works for the most normal cases,     * but needs some testing for rare cases, e.g. internal transitions,...     * TODO: The Parameters of the candidates are ignored. Maybe this      * method should return a set of matching operations.     *     * @author MVW     * @param trans Object of type Transition     * @param opname the name of the operation sought     * @return Object the operation with the given name, or null     */"
"/**     * Get the innermost containing Model of a ModelElement.     * <p>     * If no containing Model can be found, the outermost containing     * ModelElement is returned (which could be the original element itself if     * it has no owner).     * <p>     * This method is intended to return the innermost     * containing Model, but there are circumstances where one may     * really expect the outermost containing Model or root package to     * be returned (e.g. where     * it's being used to test if two elements are from disjoint namespace     * hierarchies). Hence, there are two separate methods     * with different semantics. The method {@link #getRoot(Object)}     * returns the outermost containing object.      * <p>     * TODO: Note also that some code uses     * org.argouml.kernel.Project#getRoot() to navigate down from the top     * instead of up from the bottom. We need to use a consistent algorithm for     * this. - tfm 20070724     *      * @param handle     *                to the model element.     * @return model for the model element.     */"
// there's more to be handled, which still need to be implemented:
"/**     * Builds an actor in the same namespace as the given actor. If     * the object is not and actor nothing is built.<p>     *      * TODO: This shouldn't just silently fail if it is passed a bad     * argument.  This contract will change. - tfm 20070607     *     * @param model The namespace.     * @param actor the given actor     * @return Actor the newly built actor     */"
// List<Transition> result = new ArrayList<Transition>(); // TODO: not complete - how to retrieve the transitions?
// TODO: First implementation will be to call buildPopop // and extract all the contained actions. The toolbar will // be built to the same structure. // The toolbar will be displayed to the left of the JList // under the label.
// TODO: implement remaining supported types
// TODO: gone in UML 2.1
// TODO: unfinished implementation
"/** * Eclipse UML2 implementation of XmiWriter. *  * TODO: We need facilities for writing and reading stable IDs to/from either * xmi.id or xmi.uuid. *  * @author Tom Morris */"
// TODO: All build/create methods need Undo support - tfm
// TODO: Bob says - how can we auto-generate this list?
"/* TODO: correctly implement next function                 * in the model subsystem for                 * issue 1942: */"
// A language must be unique // So, select the current empty language. // TODO ? Alert
// TODO: review the tool tips ? // stringField.setToolTipText(Translator.localize("label.body.tooltip"));
"/** * The panel that shows a value specification for an other UML element. * * * TODO: Do we need to implements ChangeListener If yes => ok If no => Can't be * use without *Optional class, or the *Optional don't need to ! * */"
// TODO: else : alert
"/* TODO: Enhance the isValidNamespace function so         * that this never happens.         */"
// TODO: not complete
/* TODO: Not all namespaces are useful here - any WFRs? */
// TODO: Should be anything allowed by current diagram
"/**     * TODO: this is not done yet. Eventually this will also     * feed the rational log.     */"
// TODO: This will need to change when we support multiple // user models.
// TODO: 2nd next() for single hasNext()
// TODO: Fully implement this!
// TODO: Implement following WFR for GeneralizableElements // [4] The parent must be included in the Namespace of the //     GeneralizableElement. //       self.generalization->forAll(g | //           self.namespace.allContents->includes(g.parent) ) //        return ModelManagementHelperMDRImpl.getContents(ns).contains( //                gen.getParent());
// TODO: Before allowing this, we should really check that // TemplateParameter.defaultElement is defined
// TODO: Not implemented
"/**         * Identifier for addonly changeability.         * TODO: Note this should not be in UML2 version         */"
// Make a read-only copy of the listeners list so that reentrant calls // back to add/removeListener won't mess us up. // TODO: Potential performance issue, but we need the correctness - tfm
// TODO: Review all callers to make sure that they localize the title // In process by Harold Braun 20070912
// TODO: Once the default constructor is deleted we only set dirty flag
// TODO: All super constructors should take a GraphModel
// TODO: Get Project or other necessary context from source?? // e.getSource();
// TODO: Make this more efficient for large I/Os
// TODO: We failed to resolve URL - signal error
// TODO: Count/report unresolved references
// TODO: Implement support for multiple TaggedValues
// TODO: treat Message
// TODO: Why would this be null?
// TODO: Rework to use UML 1.4 TagDefinitions - tfm
// TODO: Needs undo support
// TODO: This is a linear search of a list that contain many // thousands of items (one for every Fig in the entire project)
// TODO: Check if this is ok (this is literally adapted from NSUML)
/* FIX: set the application name for Mac OS X */
// TODO: Use the SVGWriter2D implementation //            cmd = new SaveSVGAction2(Translator.localize("action.save-svg"));
"/*     * TODO: Not implemented yet. The idea is that some     * problems identified by Critic's can be fixed with certain design     * manipulations (or transforms) that can be applied automatically     * to resolve the problem. This method replies true iff the given     * problem can be fixed. The fixIt() method actually does the fix.     *     * @see org.argouml.cognitive.Poster#canFixIt(org.argouml.cognitive.ToDoItem)     * Also     * @see Critic#fixIt     */"
"/**     * TODO: Not implemented yet. If the given ToDoItem can     * be fixed automatically, and the user wants that to happen, then do     * it. Obviously, this depends on the specific Critic and     * problem. By default this method does nothing.     *     * @param item the todo item     * @param arg the design material (?)     */"
"/**     * List of ChecklistStatus:es.     *     * Indexed on the model element itself.     * TODO: Should use weak references so that this is forgotten about     * when the object is removed.     */"
// TODO: Maybe the exception strings should be internationalized
// TODO understand qualifiers
// TODO: Convert this to some sensible logging
"/**     * Reply the ToDoItem that the designer should see iff predicate()     * returns true. By default it just fills in the fields of the     * ToDoItem from accessor methods of this Critic. Critic Subclasses     * may override this method or the accessor methods to add computed     * fields to the ToDoItem.     *     * TODO: Critic's may want to add new fields to a     * ToDoItem to make stillValid more efficent.     *     * @see Critic#critique     *     * @param dm the offender     * @param dsgr the designer     * @return ToDoItem     */"
// TODO implementation?
// TODO: Removed from UML 2.x
"//            Category.getRoot().getLoggerRepository().setThreshold(Level.OFF); // TODO: Find the proper implementation in java.util.logging API	    "
// TODO: Review all callers to make sure that they localize the title
"/**     * Removes a listener, eventtype pair from the listener list.     *     * TODO: replace the listener implementation with a EventListenerList     * for better performance     *     * @param event the event to which the listener will not listen any more     * @param listener the listener to be removed     */"
"/**     * Check the offenders.<p>     *     * This is called from the constructors where the offenders are given.     *     * TODO: Why do we only care about checking the first 2 offenders above?     * @param offs The offenders.     */"
// add Figs to the FigNode in back-to-front order
"/*     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */"
//make port invisible unless mouse enters
"/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()     */"
//////////////////////////////////////////////////////////////// // event handlers - MouseListener implementation
"//	fireNodeRemoved(node);"
//      The following does not seem to work - centered the Fig instead. //        getNameFig().setJustificationByName("center");
// Only show actions for associations not already on diagram
// get the widest of all textfigs // calculate the total height
/* 4.5.2.24 Generalization */
// Create the new FigAssociation edge to replace the node
// Make sure we don't try to set things smaller than the minimum
"/* Center the NameFig, since center justification          * does not seem to work. */"
// Do nothing, this rect will always be transparent
// If we're about to upgrade the file lets take an archive // of it first.
"/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */"
// Actions specific to the use case diagram toolbar
// update any text, colors, fonts, etc.
// update the relative sizes and positions of internel Figs
"/*     * @see org.argouml.uml.diagram.layout.Layouter#layout()     */"
// popupAddOffset should be equal to the number of items added here:
// Loop through the associations, counting the ends with aggregations
// Add stereotypes submenu
// The fix
// We handle and consume editing events
// Now we can remove ourself (which will also remove the // attached association ends edges)
/* (MMessage) */
"/*     * List of model element listeners we've registered.     */"
"/* We want to maintain a minimum width for the fig. Also, add the border         * dimensions to the minimum space required for its contents:         */"
// Added this part to load the extra menu content
// and the stereotypes of its features
/* Owner related todo items: */
// A binary association is not a node so reject.
/* Fig related todo items: */
// intentional: if there is nonsense in the field, // we do not set the value
// parse the text that was edited
// intentional: if there is nonsense in the field, // we return false
// Pass everything except editing events to superclass
// stereotype fig covers the name fig:
"/* If the source of the event is an UML object,             * then the UML model has been changed.*/"
// Lazily create the event:
// Default implementation is to do nothing
// The source of an association end should not // be the classifier. If it is the user has drawn the wrong way // round so we swap here.
"/*     * @see java.lang.Object#equals(java.lang.Object)     */"
// TODO: Update setting
/* end class CrUnnavigableAssoc */
//////////////////////////////////////////////////////////////// // accessors
// The <<extend>> label. // It's not a true stereotype, so don't use the stereotype support //int y = getNameFig().getBounds().height;
// Set the tooltip string:
"/*     * @see org.tigris.gef.persistence.pgml.PGMLStackParser#setAttrs(     * org.tigris.gef.presentation.Fig, org.xml.sax.Attributes)     */"
"/*         * Since body ever looks         * at the type of the diagram appearance event, we can simplify from         * sending every existing event to one event only. But since there is no         * catch-all event defined, we just use one. Rationale: reduce the         * number of total refreshes of the drawing.         */"
// Note that "multiplicity" is what is the notation is listening // for in UML1.4 "uppervalue" are listened to in UML2. It is not // currently why it is not required to register for "lowerValue" // also.
"/*         * A use case has an external separator.         * External means external to the compartment box.          * This horizontal line sticks out of the box,          * and touches the ellipse edge.         */"
// fail silently as we expect users to accidentally drop // on to wrong component
// Required for MouseListener interface, but we only care about clicks
"/*             * The diagram are always owned by the model             * in this first implementation.             */"
"/*     * @see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel,     *      Action)     */"
// 4. Make sure the only FigGroups on a diagram are also //    FigNodes // The report
// No need to update if model element went away
"/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */"
// Required for KeyListener interface, but not used
"/**     * Private utility routine to work out the (positive) x coordinate of a     * point on an oval, given the radii and y coordinate.<p>     * TODO: Use this to calculate the separator lines!     *     * @param a  radius in X direction     * @param b  radius in Y direction     * @param y  Y coordinate     * @return   Positive X coordinate for the given Y coordinate     */"
// Both ends must be defined and nodes that are on the graph already.
// Link the new include relationship in to the ends
//////////////////////////////////////////////////////////////// // internal methods
// FigAssociationRole figassociationrole = new FigAssociationRole();
//newFC = _content;
// number of goals should now be 0
// GEF sets a different Fig than the one that we had at construction // time, so we need to set its color and width
// Mark this as newly created. This is to get round the problem with // creating figs for loaded comments that had stereotypes. They are // saved with their dimensions INCLUDING the stereotype, but since we // pretend the stereotype is not visible, we add height the first time // we render such a comment. This is a complete fudge, and really we // ought to address how comment objects with stereotypes are saved. But // that will be hard work.
// place the edge on the layer and update the diagram
// update the priority of the critic to be the same priority as the // decision
/* end computeRoute */
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */"
//TODO: Does this help?
// snooze and verify its been enabled
// If this is not a circle to circle edge we default to let GEF // calculate edge route.
// test with a class and class diagram
// ? two iterations of refinement, maybe should be a for-loop
"/*     * Recursively place all nodes pointed to by outgoing transitions.     *      * Because of the recursive algorithm multiple outgoing transitions     * will end up very lopsided because one entire subgraph will be done     * before dealing with the other transition(s).     *      * @param seen set of nodes seen so far     * @param node the node to collect neighbors for     */"
// Get the two ends of any valid edge
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#clone()     */"
// Only allow binary associations
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateNameText()     */"
/* Set the drop location in the case of D&D: */
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */"
// TODO: assumes public
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object)     */"
/*(MElementImport)*/
"/*     * @see GUISettingsTabInterface#getTabKey()     */"
// Modifiers ...
"/*     * @see java.util.Collection#remove(java.lang.Object)     */"
/* This sets the lineWidth of all in the group: */
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */"
// If the line angle is less than 3 degrees then snap the line // straight
//TODO: AssociationRole
// A dependency potentially has many clients and suppliers. We only // consider the first of each (not clear that we should really // accept the case where there is more than one of either)
// Add the node, check that it is an actor or use case and add it to // the model namespace.
"/*     * @see org.argouml.uml.diagram.state.ui.FigStateVertex#makeSelection()     */"
// Tell GEF its changed
"/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */"
// Add the element and place it in the namespace of the model
"/*     * @see org.argouml.uml.diagram.activity.ui.FigActionState#getNotationProviderType()     */"
// Tell GEF
// TODO -> settings
// Everything else is OK
"/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */"
// Remove a node
"/*     * @see org.argouml.uml.diagram.layout.Layouter#getObject(int)     */"
// Remove an edge
// Something was added - nothing for us to worry about
"/* If it is concurrent and contains concurrent regions,        the bottom region has a minimum height*/"
// Invoke the parent constructor first
"/*     * This makes dragging connected edges very smooth.     *     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */"
// Invoke the parent refresh first
// Give up if the assocation ends don't have a type defined
/* end class StylePanelFigUseCase */
// The vertex was dropped onto the diagram. // Get the region as the first Region in the StateMachine. // If there is no region in the StateMachine then create one.
// initialize any other Figs here
"/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */"
// Only the head should be filled (not the text)
"/*         * Notation settings are different since, we know that, at a minimum,         * the isShowPath() setting can change because with implement         * PathContainer, so we make sure that we have a private copy of the         * notation settings.         */"
//      name updating
// Make all the parts match the main fig
"/*     * Text fig to hold the <<include>> label     */"
// 2. the profile configuration, holding noneditable applied profiles
// The <<include>> label. // It's not a true stereotype, so don't use the stereotype support
/* do nothing */
/* TRY SOME ACTION ERRORS */
// the text will be set later
/* Check if multiple items are selected: */
// If the element import is in the old owned, it means it must have // been removed. Make sure the associated model element is removed.
// TODO: Use per-project undo manager, not global
// By default we don't show the attribute check box. Mark this object // as a listener for the check box.
// verify the name property was correctly updated
// add Figs to the FigNode in back-to-front order // Put this rectangle behind the rest, so it goes first
// TODO: We should be able to just call renderingChanged on the child // figs here instead of doing an updateOperations...
// Make the line dashed
"/*     * List of objects.     *      * NOTE: This methods which read/write this don't appear to be used.     */"
// Add an arrow with an open arrow head
// This module will still register as enabled for UML1.4 but it won't // actually do anything.
// Make the edge go between nearest points
"/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */"
// Create a new version of the relevant fig
// If default Namespace is not already set
// The nodes at the two ends
// The next if-clause is important for the Deployment-diagram // it detects if the enclosing fig is a component, in this case // the container will be set for the owning Interface
// The figs for the two end nodes
"/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */"
// Link the new dependency in to the ends
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */"
/* Side effect: This creates the fig: */
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */"
// by default, do not show extension points:
"/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */"
/* Use arbitrary dimensions for now. */
/* Now we are sure dm is a State. */
// Get the parent vector first
"/*     * @see tudresden.ocl.check.types.Type#conformsTo(tudresden.ocl.check.types.Type)     */"
// Formula for a is described in the overall class description.
/*(MAssociationEnd)*/
/* For an ellipse, we can put the box in the middle:  */
"/* If dm is the top state of the statemachine, then it is              * not supposed to have incoming transitions. */"
"/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */"
// super returns -1 if any of GEFs buttons was hit // (but maybe one of the not-GEF-buttons)
// Now we're into processing each specific path // item strategy. // At the moment, we only know PathItemPlacement
// Add menu to add an extension point or note. Placed one before last, // so the "Properties" entry is always last.
"/*	 * @see javax.swing.table.TableModel#getColumnClass(int)	 */"
// Modifier menu. Placed one before last, so the "Properties" entry is // always last.
// Mutators hold write lock & will deadlock if use is not thread safe
// Work out the radii of the ellipse, a and b. The top right corner of // the ellipse (Cartesian coordinates, centered on the origin) will be // at (x,y)
/* Now we are sure dm is a StateVertex. */
// Result as integers, rounded up. We ensure that the radii are // integers for convenience.
// Only for associations
"/*     * Use the code from the FigCircle, not the one from Fig.     */"
/* end class CrInstanceWithoutClassifier */
"/* Let's register for events from all modelelements         * that change the name or body text:          */"
"/* Register for name changes, added extensionPoints             * and abstract makes the text italic.             * All Figs need to listen to ""remove"", too: */"
/* Now we are sure dm is a Composite State. */
// register for extension points:
/*(MAssociation)*/
// Set bounds will be called from our superclass constructor before // our constructor has run, so make sure this gets set up if needed.
// In DeploymentDiagrams the situation is not the // same as in other diagrams only classes, // interfaces and objects can intersect each other // while they are not the EnclosingFig, so you // have to prouve only these elements.
// Set up FigText to hold the condition.
"/*                     * Distribute the extra height over the visible                     * compartments:                     */"
// Join all into a group
// New style importers don't create diagrams, so we'll do it // based on the list of newElements that they created
// UML spec for Extend doesn't call for name nor stereotype
"/*     * @see javax.swing.JComponent#setVisible(boolean)     */"
// Make sure the line is dashed
"/*     * @see junit.framework.TestCase#setUp()     */"
/* Set up the property panels for use case diagrams: */
// If we're using a fixed offset, just add it and return // No collision detection is done in this case
// The renderer should be a singleton
"/*     * @see org.argouml.uml.diagram.activity.ui.SelectionActionState#getNewNodeType(int)     */"
"/*     * Allow all Packages and Classifiers..     */"
// Two points for line segment used to compute slope of path here // NOTE that this is the average slope, not instantaneous, so it will // give screwy results near bends in the path
/* TRY THE PREDECESSORS */
/*(MCompositeState)*/
// private constructor to enforce singleton
/* end class CrNavFromInterface */
// TODO: This is using the default platform character encoding // specifying an encoding will produce more predictable results
// cp1252 is often the default, but windows-1252 is the name listed // by Charset.availableCharsets
// Let the group recalculate its bounds and then tell GEF we've // finished.
"/*     * The clone method that should clone the JGraph with it's contents and     * the toolbar with it's contents. Since both JGraph as the toolbar are     * coming from the GEF framework, cloning them will be hard work and should     * actually not be placed here but in a clone method of the JGraph and the     * Toolbar.     * @see java.lang.Object#clone()     */"
/* We accept a Package, but not a Model or a Subsystem. */
"/* If we do not exclude a Model here, then dropping the                 * Model on a UseCase diagram causes a package                 * to be drawn. */"
// empty list
"/*	 * @see TargetListener#targetSet(TargetEvent)	 */"
// Although we register for notification of diagrams being // deleted, we currently depend on the TargetManager to assign // a new target when this happens // When we implement MDI and have our own list of open diagrams // we can ressurect the use of this
// some convenience methods
// Optimize for the normal case to minimize target changes
// read until the end section is found, discard // generated content
// Class Table
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */"
// Select Buttons
// The next AssociationEnd
// Output Directory
"/* No further listeners required in this case - the rest is handled         * by the notationProvider and sub-Figs. */"
// Compile Checkbox
// TODO: the last argument (recursive flag) should be a // selectable option
// skip backup files. This is actually a workaround for the // cpp generator, which always creates backup files (it's a // bug).
// TODO: The following is carried over from setOwner, but probably // isn't needed //        renderingChanged(); // It does the following (add as needed): //        updateNameText(); //        updateStereotypeText(); //        updateStereotypeIcon(); //        updateBounds(); //        damage();
// TODO: This is using the default platform character // encoding.  Specifying an encoding will produce more // predictable results
// TODO: Get saved default directory // outputDirectoryComboBox.getModel().setSelectedItem(savedDir);
// Generate Button --------------------------------------
// Iterate over all the AssociationEnds. We only have a problem if 1) // there is an end connected to an Interface and 2) an end other than // that end is navigable.
// remove trailing /
// container state / composite state
// classify nodes by base path
// End at an Interface? // Navigable other end?
// else ignore
"/* The following is a possible future improvement         * of the modelChanged() function.         * Michiel: Propose not to do this to keep architecture stable. */"
// generate the files
"/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */"
// Doesn't really matter what set we use.
// TODO: Changed from UML 1.4
// Show Filechooser to select OutputDirectory
// Only look at Associations
/* end class ClassGenerationDialog */
"/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */"
/* end class TableModelClassChecks */
"/*     * @see javax.swing.filechooser.FileFilter#accept(java.io.File)     */"
/* Try Changing the direction of m7 */
"/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */"
// ////////////// // TableModel implementation
// both ends must be classes, otherwise there is nothing to merge
//        ArgoEventPump.fireEvent( //                new ArgoImporterEvent(ArgoEventTypes.IMPORTER_ADDED, gen));
// Check if this diagram already exists in the project
// TODO: Should be improved so that it's recognized whether there is something selected that can actually be generated // Nothing selected in the diagram
// Otherwise create a new classdiagram for the package.
"/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */"
"/*     * Overridden to set Argo-specific RenderingHints to determine whether     * or not antialiasing should be turned on.     *     * @see org.tigris.gef.base.Editor#paint(java.awt.Graphics)     */"
// the class is in the diagram // so we are on a second pass, // find the fig for this class can update its visible state.
"/*     * @see java.io.InputStream#read(byte[], int, int)     */"
// add edges // for a 2-pass r.e. process we might have already added the // class but not its edges
// For some reason, this alleged directory is a single file // This could be that there is some confusion or just // the normal, that a single file was selected and is // supposed to be imported.
// "Java" is the default module for historical reasons, // but it's not required to be there
//stores the action command into the UMLPlainTextDocument //class which is also used //for setProperty and getProperty
// the previous line helps, but we better check again:
// There is no need to test if classes is empty because // the shouldBeEnabled mechanism blanks out the possibility to // choose this alternative in this case.
// not a SuffixFilter selected, so we take all
// a runtime exception that occurs when some // internal test fails
// filter out all unchanged files
"/* Take canvas scrolling into account.             * The implementation below does place the element correctly             * when the canvas has been scrolled.             */"
// set the lastModified value
// we can delete figs like figrects now too
//return Arrays.copyOf(selectedFiles, selectedFiles.length);
/* end class SourcePathDialog */
"/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */"
// Roughly equivalent to and derived from old Import.doFile()
"/*         * @see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)         */"
"/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
//            LOG.debug("is a Base or Multiplicity");
/* end class CrMultiComposite */
// both ends must be navigable, otherwise there is nothing to merge
"/*         * @see javax.swing.JFileChooser#approveSelection()         */"
"/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */"
"/*         * @see javax.swing.JFileChooser#cancelSelection()         */"
// Add the non-associationend edges (such as comment edges) that were // originally attached to this and attach them to the new // FigAssociation and make sure they are positioned correctly.
// Do layout even if problems occurred during import
"/* The EnumerationLiteral uses a dedicated notation that supports          * parsing ""name1;name2;name3"" and stereotypes.          * Also supports deleting a literal by erasing text. */"
// Add messages from caught exceptions
// Update the discriminator if it changed
// Select the correct diagram (implicitly creates it)
// Add the element to the diagram
"/*     * Print an exception trace to a string buffer     */"
"/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */"
// TODO: Get the list of extended settings from the current // language importer and add those too
// level 0 import detail
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */"
// level 1 import detail
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */"
// level 2 import detail
// If the user has selected ModePlace either by a diagram // tool or AddToDiagram then we don't want to show the // toolbelt items.
// build the configPanel:
// select the level of import // 0 - classifiers only // 1 - classifiers plus feature specifications // 2 - full import, feature detail
// super implementation found a hit
"/*     * Get the extension panel for the configuration settings.     */"
/* end class CrAlreadyRealizes */
// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
// this is because of the (senseless?) "All files" FileFilter
"/*     * @see javax.swing.DefaultListModel#addElement(java.lang.Object)     */"
// Parsing file x of z.
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */"
// progress bar
// no title looks better
"/*     * @see java.util.Collection#size()     */"
// Get the contents of the directory
// The following test can cause trouble with // links, because links are accepted as // directories, even if they link files. Links // could also result in infinite loops. For this // reason we don't do this traversing recursively.
// no need for trigger on "specialization"
// If this file is a directory
// TODO: Add filename ?
"/*         * Crazy numbering scheme at work here.  Here's how the handle numbers         * are laid out.  Values 0-7 are defined by GEF and go left to         * right, top to bottom (ie not clockwise or counterclockwise).         * Values 10-14 zigzag North, South, West, East, Southwest.         * If you can correctly guess where 15 will go, you should buy         * a lottery ticket immediately.         *  <pre>         *            10         *     0-------1-------2         *     |               |         *  12 3               4 13         *     |               |         *  14 5-------6-------7         *            11         * </pre>         */"
// can't remove the last file
"/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */"
// can't remove from existing one so create new one.
"/*     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */"
// Error/warning messageArea
//        gbc.gridheight = 10;
// cancel/close button
"/*     * @see java.awt.event.ComponentListener#componentMoved(java.awt.event.ComponentEvent)     */"
"/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */"
//////////////////////////////////////////////////////////////// // constructors
// normal model elements are not allowed to have spaces, // but for States we make an exception
"/*	 * @see	 * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent	 * )	 */"
/* end class CrMergeClasses */
"/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */"
// the introducing label
"/*     * @see java.beans.PropertyChangeListener#propertyChange(     *         java.beans.PropertyChangeEvent)     */"
// User closing the progress window is interpreted as cancel request
"/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */"
// panel for controls
//nothings left, disable firing.
// Most likely cause of this is that someone deleted our // target with the event pump turned off so we didn't // get notification.  Nothing we can do about it now and // we are changing targets anyway, so just log it.
//Select an index.
// When this is called from PGMLStackParser.attachEdges, we finished // the initialization of owning pseudo element (CommentEdge)
//removed item in last position
// Just quit
// the text box containing the problem messages
// continue and abort buttons
"/*     * @see org.argouml.uml.diagram.layout.Layouter#getObjects()     */"
// listeners
"/*     * @see org.argouml.uml.diagram.layout.Layouter#getMinimumDiagramSize()     */"
// TODO: this seems to be called at startup only so no check so far
// Add an invisible button to be used when everything is off
// I am only prepared to go this far.
"/*|  //removed to workaround problems with autosplit                     OCLEditor.OPTIONMASK_AUTOSPLIT*/"
"/**     * ADDONLY_COMMAND determines a changeability kind.     * TODO: Removed from UML 2.x.  Phase out of UI - tfm - 20070529     */"
//TabModelTarget interface methods
// warn about inherited name conflicts, different critic?
// Process the listeners last to first, notifying // those that are interested in this event
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()     */"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()     */"
"/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */"
// Guaranteed to return a non-null array
/*(Classifier)*/
// It's illegal in UML to have multiple elements in a namespace with // the same name, but if it happens, keep them distinct so the user // has a chance of catching the error.  Pick an arbitrary, but stable, // collating order. // We don't call them equal because otherwise one will get eliminated // from the TreeSet where this comparator is used.
// first element is e.g. the class, but we need to have its namespace // to recompute the offenders.
// Update our model with our saved target
"/*     * @see org.argouml.uml.diagram.layout.Layouter#add(org.argouml.uml.diagram.layout.LayoutedObject)     */"
//List classes = getCandidates(); //return classes.size() > 0;
// Loop through the associations, looking for one with aggregation
// Our first button is invisible.   // Selecting it deselects all visible buttons.
//$NON-NLS-1$ //$NON-NLS-1$ // Make sure we have a recognized file extension //$NON-NLS-1$
// Set editor's model
// code generation
// check ocl parsing constraints
"/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
// do not create a constraint:
// verify the items were correctly added
// Parse and check specified constraint.
// utility is a namespace collection - also not strictly // required to have variables.
// Split constraint body, if user wants us to
/* end class CrZeroLengthEdge */
// the constraint _must_ be owned by a namespace
// add some test data
// If the eUML.resources system property is defined then we are in a // stand alone application, else we're in an Eclipse plug in. // The eUML.resource should contain the path to the // org.eclipse.uml2.uml.resource jar plugin. //$NON-NLS-1$
// Store constraint body
// New constraint, first time setData is called
//checkAssignIDToObject(figassociationrole, true, true);
// Check name for consistency with spec
// This throws  // org.argouml.model.XmiException: Unknown element in XMI file : Model // because the UML 1.3->1.4 converter can only handle XMI 1.0, not 1.1
// Set name
/* end class CrTooManyAttr */
// Also set name in constraint body -- Added 03/14/2001
// replace name
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */"
// TODO: Why is this ignored? - tfm - 20070110
//////////////////////////////////////////////////////////////// // critiquing API
/* TRY PREDECESSORS */
//Forks have their own outgoing transitions critic
"/*     * Create a new tagged value with the given type and value     * and add it to a ModelElement.     */"
// Delete the model and make sure everything inside goes with it
// Not in UML1.4
"/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */"
// We have no model event listeners, so no need to do anything
// initialize new ToDoItem
// store wizard?
/* dm is a transition */
"/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */"
"/*     * @see org.argouml.uml.diagram.state.ui.FigHistoryState#getH()     */"
/* Do nothing by default. */
/* the source of the transition is a pseudostate */
"/*     * @see java.awt.datatransfer.Transferable#getTransferData(     *         java.awt.datatransfer.DataFlavor)     */"
// TODO: I18N // Don't use the empty string for this or it won't show in the list
/* TODO: Here too? */
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */"
"/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     * java.lang.Object)     */"
/* This should not be necessary, but let's be sure: */
// Remember the system id of our root document so that we can write // out profiles and linked models to a different file if requested
// end of interval
"/*                     * this call could easily fall if there is e.g. no public                     * default constructor. If it fails tweak the if/else tree                     * above to accommodate the parameter or check if we need to                     * test the particular method at all.                     */"
// start of interval
/* Remove old listeners: */
"/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */"
// in middle of interval
// This is the XMI version used to encode the metamodel.  We could // parse deeper to pull out the actual UML version.  The UML 1.4 // version is at XMI/XMI.header/XMI.model[@xmi.version].  The UML 2.1.1 // metamodel doesn't actually seem to contain its version.
// Allow listening to other elements:
/* One of everything */
/* Add new listeners: */
"/*     * @see org.tigris.gef.presentation.FigText#setTextFilled(boolean)     */"
/*  MVW: This can never happen, isn't it? */
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#removeOtherModelEventListeners(java.lang.Object)     */"
// makes sure we can select 'none'
"/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */"
// Don't try to test this if we're removing the element
// check that the model was initialized with the unspecified goal
// we tried to remove a value
//        NotationProviderFactory2.getInstance().addNotationProvider(1234,  //                name, MyNP.class); //        NotationProvider notationProvider = //            NotationProviderFactory2.getInstance().getNotationProvider( //                    1234, new Object()); //        assertTrue("Test notation provider for 1234 not found",  //                notationProvider != null);
// Object[] args = { newValue };
"/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */"
"/* If a message has a name and a named operation          * and a script with parameters but without name,         * then show the operation name: */"
// reuse change event:
// This swaps the direction of m3:
/* TRY MOVING IN A SIMPLE MANER */
"/*     * @see TargetListener#targetAdded(TargetEvent)     */"
// try creating a string from the generated modelelements:
"/*     * @see TargetListener#targetRemoved(TargetEvent)     */"
// Set the child components to the heights in the array list // calculating the height of any proportional component on the // fly.
"/*         * The following UML 1.4 elements have been removed from UML 2.x, so we         * don't bother testing them.         */"
"/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */"
// Do not set buildingModel = false here, // otherwise the action for selection is performed.
// This swaps the direction of m3 back: // the colon is obliged, but the / not and the 2nd dot also not
// catch callers attempting to use one without other
"/* If a message has a name and a named operation          * and an expression with no script,         * then show the operation: */"
"/* If a message has a name and a named operation and a script,         * then show the script: */"
"/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */"
/* Upper / Lower case */
"/*     * @see javax.swing.table.TableModel#getRowCount()     */"
// we want the b: Foo attribute, that is the second in the list
// may only occur as child of the model or in a package
"/*         * For those things which we've already migrated to UML 2.x syntax         * we need to map them back to their UML 1.4 equivalents during the         * migration period.         */"
// //    if event source is unknown or //       the event source is the container's target //          then update the field
"/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */"
// //   check the possibility that this is a promiscuous event
// Remap specific classes
// a deployment diagram shows something about the whole model // according to the UML spec, but we rely on the caller to enforce // that if desired.
// a deployment diagram shows something about the whole model // according to the uml spec
// Clean up our two models and the extent that we read profile in to
// ns is a namespace, but not a package
// TODO: the following cleans up left overs from previous tests, but, // preferably we shouldn't have to do this...
// ommit root package name; it's the model's root
"/*     * @see java.awt.dnd.DragSourceListener#dragExit(java.awt.dnd.DragSourceEvent)     */"
// there is a selection
// If we have a model but no list then build the list with // preferred constructor. Eventually all lists should be built // this way.
/* end class ActionCopy */
"/*     * @see java.awt.datatransfer.ClipboardOwner#lostOwnership(     *      java.awt.datatransfer.Clipboard, java.awt.datatransfer.Transferable)     */"
/* Add a predicate for ArgoUML's default capabilities: */
// TODO: User defined profile support untested currently //        + "\t\t<userDefined>\n" //        + "\t\t\t<filename>\n" //        + "foo.profile\n" //        + "</filename>\n" //        + "\t\t\t<model>\n" //        + "foo.profile.package\n" //        + "\t\t\t</model>\n" //        + "\t\t</userDefined>\n"
// remove from the model
// It is a UML element that is not a ModelElement
"// ProjectBrowser exposes functionality, not components. //	assertNotNull(pb.getTabProps()); //	assertNotNull(pb.getStatusBar());"
// lets see if this diagram has some figs on it
// no content of diagram
// we cannot delete the last diagram
"/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */"
// we cannot delete the model itself
"/*         * commented out next piece to remove failure of testcase. The testcase         * is probably correct but the implementation of DetailsPane is not        pane.getTabs().setSelectedComponent(docPane);        pane.targetSet(e);        assertEquals(docPane, pane.getTabs().getSelectedComponent());        */"
//////////////////////////////////////////////////////////////// // static variables
"/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */"
//TODO: We should also test that the object //have been removed from their namespace. //Collection c = Model.getFacade().getOwnedElements(p.getRoot());
"/*     * @see javax.swing.text.Document#remove(int, int)     */"
// TODO: the following fails due to the XMI writing saving all top level // model elements and because even if there was no empty project, by // creating a class, the undo mechanism in the project manager will // force the creation of an empty project. //        assertEquals(1, profileModels.size());
// test for return parameters. they can ALSO fail!
// same name, same participants, two offenders
//ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram(); //return (activeDiagram instanceof UMLClassDiagram);
// simply create 3 usecases and an actor in a package with individual names
// usage of other sureRemove method is legacy. They should be // integrated.
// Multiplicity, MultiplicityRange, and all Expression subtypes // don't have 0-argument create methods, so we special case them.
// the diagram contains figs so lets ask the user if // he/she is sure
// build extend // these parameters seem to be in correct order // add an extend. We do not need an assoc on the extending use case
// TODO: This catch block needs to be narrower and do something // with the caught exception - tfm 20071120 // Ignore
"/*     * @see javax.swing.table.TableModel#getColumnCount()     */"
// OK Button ------------------------------------------
// It would be better if we didn't need the container to get // the target. This constructor can have zero parameters as // soon as we improve targetChanged.
// Delete Button
"/*     * Get a node's name along with the name of its parent (which we'll use to     * find the factory to create it with.     */"
// procede with the deletion in the model
"/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */"
// confirm with the user that he wants to delete, presenting the // list of settings to delete
// If the component is a JLabel which has another // component assigned then position/size the label and // calculate the size of the registered component
// Mutators hold write lock & will deadlock // if use is not thread-safe
// Handle the simple cases // Anything very exotic will fail, but that will be our clue // that the test needs to be extended
/* The user cancelled! */
"/*         * This needs to be a concrete metatype, so we can't use         * the general, but abstract, Classifier.  Replace with its         * concrete subtypes.         */"
//Custom button text:
"/*     * @see junit.framework.TestCase#tearDown()     */"
"/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */"
"/*     * @see TestCase#setUp()     */"
// Tests used to be coded to assume immediate event delivery. // They've been modified to use flush() where needed. - tfm //oldEventPolicy = MFactoryImpl.getEventPolicy(); //MFactoryImpl.setEventPolicy(MFactoryImpl.EVENT_POLICY_IMMEDIATE);
/* TRY SOME PREDECESSOR ERRORS */
"/*     * @see java.lang.Runnable#run()     */"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()     */"
// The following will bring up a dialog box, so can't be run headless //        actionSupplier.actionPerformed(new ActionEvent(this, 0, "foo"));
// setup a user defined profile which isn't loaded by the model // subsystem and contains a stereotype and this contains a // tag definition
// If no project was entered on the command line, // try to reload the most recent project if that option is true
/* Try adding the extension from the chosen filter. */
// adding project files icon
//        Object icon = ResourceLoaderWrapper.lookupIcon(s); //        putValue(Action.NAME, Translator.localize(s)); //        putValue(Action.SMALL_ICON, icon); //        // Set the tooltip string: //        putValue(Action.SHORT_DESCRIPTION, Translator.localize(s));
//////////////////////////////////////////////////////////////// // main methods
"/*	 * @see javax.swing.table.TableModel#getValueAt(int, int)	 */"
/* end class ActionOpenProject */
"/*     * The property value has changed so rebuild our view.     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
// TODO: see if the new target has a TV that we can proxy
/* Try adding the default extension. */
// We only have this here until we have stereotypes // list on property panel
/* end class ActionSaveProjectAs */
// only need to this from super()
"/*     * @see org.argouml.uml.ui.UMLComboBox#UMLComboBox( UMLComboBoxModel,     *      Action, boolean)     */"
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel#isValidElement(java.lang.Object)     */"
"/*     * This action performs the layout and triggers a redraw of the editor pane.     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
"/*     * @see     * org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders     * (java.lang.Object)     */"
"/**     * Constructor.     * <p>     * TODO: Correct?     *     * @param nodes The UML elements, typically classifiers, to generate.     * @param inModel <code>true</code> if the path is in the model.     */"
// verify the priority was correctly updated
"/*             * MDR has a hardcoded printStackTrace on all exceptions,             * even if they're caught, which is unsightly, so we handle             * unknown elements ourselves rather than letting MDR throw             * an exception for us to catch.             *             * org/netbeans/lib/jmi/util/Logger.java             *             * This can be uses to disable logging.  Default output is             * System.err             * setProperty(""org.netbeans.lib.jmi.Logger.fileName"", """")             *              org.netbeans.mdr.Logger             *             * The property org.netbeans.lib.jmi.Logger controls the minimum             * severity level for logging             */"
"/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */"
/* Testing: does not fire. */
/////////////////////////////////////////////////////////////////////// // Proxy methods for real UMLModelElementTaggedValue ///////////////////////////////////////////////////////////////////////
// Only do this for classifiers
// Rearrange the diagram layout
// Compound critics
// make this thread interruptible, if called from SwingWorker
// A problem if we found more than 1 aggregation
// targets ought to be UML objects or diagrams
"/*     * @see org.argouml.model.CommonBehaviorHelper#setNodeInstance(java.lang.Object,     *      java.lang.Object)     */"
// TODO: We shouldn't need this as well as the above.
// Check here if there are no incoming call actions // if not then create an activation at the top of the lifeline
//      Guaranteed to return a non-null array
"/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */"
/* end class TabProps */
"/*             * UML 1.4.2 Spec section 4.5.3.20 [5]             * A GeneralizableElement may only be a child of             * GeneralizableElement of the same kind.             */"
// Not currently present as token in Model.getFacade(). // NIF: runTruthTest(Model.getFacade().isAElement(o), //                   Model.getFacade().ELEMENT); // NIF: runTruthTest(Model.getFacade().isAExpression(o), //           Model.getFacade().EXPRESSION); // NIF: runTruthTest(Model.getFacade().isAExtensionPoint(o), //           Model.getFacade().EXTENSION_POINT); // NIF: runTruthTest(Model.getFacade().isAFeature(o), //                   Model.getFacade().FEATURE);
// If our map has any entries for this type, it's a connection type
// We have found a non-static one that is not initialized.
// See if there's a pair in this list that match the given // model elements
/* end class CrIllegalName */
"/*     * @see TargettableModelView#getTargettableModel()     */"
// Ignore any error.  The transaction may already have // been unwound as part of exception processing by MDR
"/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */"
// If we don't have it, find the trigger. If this fails it will keep // its default value of null
"/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     *      java.lang.Object)     */"
// includes the "/" // the "seq_expr" from the header javadoc // the ":" is not included in "number" - it is always present
"/*     * @see org.argouml.model.CommonBehaviorHelper#setReceiver(java.lang.Object,     *      java.lang.Object)     */"
// put everything together
// If the model repository doesn't manage a DI model // then we must generate our Figs by inspecting PGML
// make lists
// Give the resolver.getIdToObjectMap() entries // priority over entries with the same UUID from // resolver.getIdToObjectMaps() because entries // in resolver.getIdToObjectMaps() are historic.
// make buttons
//@Override //public final void setHeadline(String s) { //setupHeadAndDesc(); //}
// ignored this event
// Get the assocations and connections. No problem (there is a separate // critic) if this is a binary association or is an association role.
// make buttons layout
// make listeners
"//    private Property	prpTodo; //    private Property	prpProperties; //    private Property	prpDocumentation; //    private Property	prpStyle; //    private Property	prpSource; //    private Property	prpConstraints; //    private Property	prpTaggedValues;"
// Build namespace hierarchy like this: //   g     a //         /\ //        b  c //           /\ //          d  e f
"/*     * @see javax.swing.Action#isEnabled()     */"
// Enumerate declaring class
"/*         * @see javax.swing.ComboBoxEditor#setItem(java.lang.Object)         */"
// TODO: constraints // TODO: required tags
"/*         * @see javax.swing.ComboBoxEditor#getEditorComponent()         */"
// NOTE: Although it's not shown in the UML 1.4 spec, a TemplateArgument // appears to be a datavalue (like MultiplicityRange) and can not be // reused in multiple instances.  The UML diagrams don't show it as a // composition, but it effectively is.
"/*         * @see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)         */"
// Get the next non-return parameter. Null if non left.
//            GridBagConstraints gridBagConstraints3 = new GridBagConstraints(); //            gridBagConstraints3.gridx = 2; //            gridBagConstraints3.anchor = GridBagConstraints.NORTHWEST; //            gridBagConstraints3.insets = new Insets(5, 5, 0, 0); //            gridBagConstraints3.gridy = 3; //            GridBagConstraints gridBagConstraints2 = new GridBagConstraints(); //            gridBagConstraints2.gridx = 0; //            gridBagConstraints2.anchor = GridBagConstraints.NORTHWEST; //            gridBagConstraints2.insets = new Insets(5, 5, 0, 0); //            gridBagConstraints2.gridy = 3;
/* end of SourcePathControllerImpl class definition */
// This is not a well formed model in a strict sense. // See the multiplicity in UML 1.3 Figure 2-5.
// Always select properties panel if defaultToProperties is true, // and if properties panel is appropriate for selected perspective
//sb.append((String) Model.getFacade().getBody(c));
// A parameterized class can only be the client of a single binding
/*MModelElement*/
// Add to the collection and round to look at the next one
// next statement is necessary to update the textfield // if the selection is equal to what was allready // selected
"/*             * ActionPaste.getInstance().setEnabled( Globals.clipBoard             * != null && !Globals.clipBoard.isEmpty());             */"
// For now just skip registering this and ignore the request, // but the real issue is that MagicDraw serializes the same // object in two different composition associations, first in // the referencing file and second in the referenced file
// The workarea is all the visible space except the menu, // toolbar and status bar.  Workarea is laid out as a // BorderSplitPane where the various components that make up // the argo application can be positioned.
"/*         * @see javax.swing.ComboBoxEditor#selectAll()         */"
"/*         * @see javax.swing.ComboBoxEditor#getItem()         */"
// we don't want to show some nasty gray background // color, now do we?
"/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */"
"/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */"
"/*     * @see org.argouml.cognitive.critics.Critic#addKnowledgeType(java.lang.String)     */"
// Check against "" is needed for backward // compatibility.  Don't remove without // checking subclasses and warning downstream // developers - tfm - 20081211
// necessary to create distance between // the textfield and the icon.
// Compare against all earlier operations. If there's a match we've // found the problem
//make new column with LabelledLayout
// create the return message modelelement with the interaction // and the collaboration
// Comment.name text field - editing disabled
"/*     * @see javax.swing.table.TableModel#getColumnName(int)     */"
// Comment.body text field - editing disabled
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     * org.argouml.cognitive.Designer)     */"
// Only change the background colour if it is supplied by the LAF. // Otherwise leave look and feel to handle this itself.
"/*     * @see org.argouml.cognitive.Poster#getClarifier()     */"
// In this case, the bounds are determined by the FigEdge
"/*     * @see org.argouml.cognitive.Poster#getSupportedGoals()     */"
// In this case, the bounds (of the box) are determined // by the FigClassAssociationClass
// A newly created AssociationClass may not have all its parts // created by the time we are called
"/*             * The following calls are ORDER DEPENDENT. Not sure why, but the             * layer add must come before the model add or we'll end up with             * duplicate figures in the diagram. - tfm             */"
// TODO: Defer most of this work if the panel isn't visible - tfm
"/*     * Get the generic clarifier for this designer/poster.     *     * @see org.argouml.cognitive.Poster#getClarifier()     */"
// needs to be updated for changes in Notation subsystem - tfm //            String nameStr = Notation.generate(this, getOwner()).trim(); //            getNameFig().setText(nameStr);
"/*     * @see TargetListener#targetSet(TargetEvent)     */"
"/*     * Just returns false.     *     * @see org.argouml.cognitive.Poster#canFixIt(org.argouml.cognitive.ToDoItem)     */"
"/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */"
"/*     * @see tudresden.ocl.check.types.Type#hasState(java.lang.String)     */"
// If there's only a single child (and we're it's only parent), // set a hint for where to place it when we get to its row
//          Guaranteed to return a non-null array
"/*     * @see javax.swing.ListModel#getElementAt(int)     */"
// chooser.setSelectedFile(new File(fileName));
// if the y coordinate is before the classifier role y, // we place the start in the corner of the fighead.
/* So, let's do it the hard way: */
// We know this is a return action now. It must be pointing the // opposite way to the activator.
// If the diagram is empty, GEF won't write anything, leaving us with // an empty (and invalid) file.  Handle this case ourselves to prevent // this from happening.
// Java SE 6 has a native GIF writer, but it's not in Java 5.  One // is available in the JAI-ImageIO library, but we don't currently // bundle that and at 6+ MB it seems like a heavyweight solution, but // I don't have time to produce a stripped down version right now - tfm // https://jai-imageio.dev.java.net/
// Anything else is handled the normal way
// The FigMessage that triggered this FigActivation into existence
// Create an image which will do deferred rendering of the GEF // diagram on demand as data is pulled from it
// TODO real numbers not yet supported //assertEquals(DefaultOclEvaluator.getInstance() //.evaluate(null, null, "1.5"), 1.5);
// NOTE: GEF's GIF writer uses Jeff Poskanzer's GIF encoder, but that // saves a copy of the entire image in an internal buffer before // starting work, defeating the whole purpose of our incremental // rendering.
//        LayerPerspective layer = DiagramUtils.getActiveDiagram().getLayer();
// Correct Exception was thrown.
"/** * Action to save a diagram as a GIF image in a supplied OutputStream. * * TODO: This requires Java 6 in its current state, so don't use. * * @author Tom Morris <tfmorris@gmail.com> */"
// The purpose of this method is not explained and it give give // NPE depending on z order of figs as they are read. For now // ignore if null but for future lets delete this.
// Convert max x/y to width/height
// Get a DOMImplementation
//////////////////////////////////////////////////////////////// // VetoableChangeListener implementation
// Create an instance of org.w3c.dom.Document
"/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */"
// we actually are computing max x & max y, not width & height
// If we have a currentAct object that means have reached the end // of the lifeline with a call or a create not returned. // Add the activation to the list after setting its height to end // at the end of the lifeline.
"/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */"
// Create an instance of the SVG Generator
// make it stretch vertically
// Skip the 2 lines //<?xml version="1.0" encoding="UTF-8" ?> //<!DOCTYPE pgml SYSTEM "pgml.dtd">
"/* Correct lazy initialization of static field              * without further updates: */"
"/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */"
// Look for a TagDefinition matching the given name
//////////////////////////////////////////////////////////////// // ToDoListListener implementation
"/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */"
// if is a message, it must return the sender // and the receiver of the message.
"/**     * Return just the comment edges for a specific layer.     * TODO: Document: Diagram / layer?     *     * @param diagram The diagram.     * @return a {@link List} with the edges.     */"
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
"/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */"
// Request that we be made visible if we're not? // topLevelTabbedPane.setSelectedComponent(t);
// if the added edge is a Create Message it will affect the position // of the ClassifierRole so it should be repositioned
"/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */"
// handle multivalued tagged value
"/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */"
//super(Model.getFacade().getName(op), null);
// Target has been deleted
"/*     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */"
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */"
// If the row is past the end of our current collection, // return an empty string so they can add a new value
"/*     * Utility function to add a listener for a given property name     * and remember the registration.     *     * @param element     *            element to listen for changes on     * @param property     *            name of property to listen for changes of     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener,     *      Object, String)     */"
// keep nagging until the user solves the problem: // This seems a nice way to nag:
// tagValue = true;
// There are one or more regions so find the one that the //vertex was dropped in
// for debugging
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */"
/* end class ToDoByOffender */
"/*     * Override FigNode implementation to keep setOwner from getting called.     */"
// We really shouldn't add it until after it is set up, but we // need it to have an owner for the following method calls
//////////////////////////////////////////////////////////////// // constants //////////////////////////////////////////////////////////////// // instance variables
"/* This next argument may be used to switch off     * the generation of sequence numbers - this is     * still to be implemented.     * They are less desired in sequence diagrams,     * since they do not add any information.     * In collaboration diagrams they are needed,     * and they are still optional in sequence diagrams. */"
// Since we aren't sure of ordering, fire event for whole table
"/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */"
"/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */"
// no way, we have to give up
"/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */"
"/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */"
// The diagram already exists in this project. Select it // as the current target.
"/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */"
// Do nothing during the deprecation period, then it can be removed.
// if the classifier is not in the current diagram, add it:
//////////////////////////////////////////////////////////////// // event handlers
// for performance, we check if this is a selfmessage // if it is, we have just updated the activations
//fireTreeNodesChanged(this, path, childIndices, children);
"/*     * @see tudresden.ocl.check.types.Type#navigateQualified(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */"
// This is done for compatibility with previous version: // Move the argo.user.properties // written before 0.25.4 to the new location, if it exists.
// TODO: assumes public, user pref for default visibility?
"/*     * @see javax.swing.DefaultListModel#contains(java.lang.Object)     */"
"/*     * @see java.lang.Object#hashCode()     */"
"/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */"
"/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */"
"/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */"
// There is a bug in GEF where positioning nodes can affect // edge positions. We need to do 3 iterations to protect // against that.
"/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorAdded(org.argouml.application.events.ArgoGeneratorEvent)     */"
"/*     * Add an element listener and remember the registration.     *     * @param element     *            element to listen for changes on     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)     */"
// MultiplicityElement is now an interface implemented // by element types that support multiplicities - tfm
/* end class ActionImportFromSources */
// Self messages act differently so it is needed to move them separetly. // Only self messages of selected CR should be horizontally translated.
// Don't test changed element if it was deleted
"/*     * @see org.argouml.ui.AbstractArgoJPanel#spawn()     */"
// this is never downlighted...
// This one should work except Java is not registered by default //        assertTrue(settings.setNotationLanguage("Java")); //        assertEquals("Java", settings.getNotationLanguage());
// Only specified format are allowed.
"/*     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()     */"
"/* Implementation Note:    * Unlike many of the interfaces to the model there is no control to force    * a single instance of an XmiReader. This is to allow work objects generated    * by the implementation to be garbage collected when an XmiReader instance    * falls out of scope.    */"
"/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */"
"/*     * Populate our namespace hierarchy to the requested depth.  Total number     * of created elements is children^maxLevel, so be careful not to increase     * parameters too much.     */"
// Try changing namespace of element and make sure results track
"/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#getProperty(     *         org.omg.uml.diagraminterchange.DiagramElement)     */"
// by default the build already builds one default EP
"/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */"
// Set the tooltip of the arrow to open combined tools:
// Create a generalizable element with an element without children.
"/* Set the minimum and preferred equal,         * so that the size is fixed for the labelledlayout.         */"
// reopen the project and assert that the MetaProfile isn't part of  // the profile configuration, including the fact that the stereotype  // <<Critic>> isn't found
// This will add a new ModelElement event listener // after update is complete
/* We presume that the container equals this PropPanel. */
// in UML2, the tag definition is the attribute itself
// Refresh the target for all our children which weren't getting // while not visible
"/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */"
"/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */"
"/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */"
"/*     * @see java.io.InputStream#read()     */"
"/* This works - we do get an event - and now              * refresh the UI: */"
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */"
// to manage the case there are no label/component // pairs but just one component
"/*     * @see org.argouml.notation.providers.NotationProvider#parse(     * java.lang.Object, java.lang.String)     */"
// Assumes the next child is the labelled component
// Make sure the component width isn't any greater // than its maximum allowed width
// assert that the model element that depends on the profile is  // consistent
// If a preferred height is not given or is // the same as the minimum height then fix the // height of this row.
// TODO: what about ObjectNode? //        return org.eclipse.uml2.uml.ObjectNode.class;        
//Project p = ProjectManager.getManager().getCurrentProject(); //Collection elems = //ModelManagementHelper.getHelper() //    .getAllModelElementsOfKind(MClassifier.class);
//    /** //     * Construct an exception with a message and a causing exception. //     * //     * @param message the message //     * @param c the cause of the exception //     */ //    public XmiReferenceException(String message, Throwable c) { //        super(message, c); //    }
// Allow listening to other elements: //                removeOtherModelEventListeners(listTarget);
/* TRY SOME MORE COMPLEX MOVING */
// The only way a region is set to null is if we're deleting // the vertex in which case we do nothing special so that // the removal of the state triggers a delete event.
// Implements backspace functionality
//make a nice little target area:
"/* In this case, either the container was not set,         * or it was not contained in a statemachine.         */"
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */"
"/*     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */"
"/*     * @see org.argouml.uml.notation.NotationProvider#parse(java.lang.Object, java.lang.String)     */"
// A composite state contains at least one region
// TODO: gone from UML 2
// TODO: Not exact, but close
"/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.HashMap,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */"
/* end class ActionCut */
// create a new project and assert that it has the MetaProfile  // as part of the project's profile configuration
// Allow listening to other elements: //                addOtherModelEventListeners(listTarget);
//      if there is a selection on the clipboard
// get localised strings once only
"/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */"
// setting the icon
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationChanged(org.argouml.application.events.ArgoNotationEvent)     */"
// setting the tooltip to type and name
"/*     * @see org.argouml.profile.ProfileManager#lookForRegisteredProfile(java.lang.String)     */"
"/*     * @see org.argouml.persistence.SAXParserBase#handleEndElement(     *         org.argouml.persistence.XMLElement)     */"
"/* In the next line, replacing makeEmptyProject         * by getCurrentProject fails the test,         * except when run in Eclipse.         * MVW: I have no idea why.*/"
"/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */"
"/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */"
"/*     * @see org.argouml.persistence.MemberFilePersister#getMainTag()     */"
"/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */"
"/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */"
"/*     * @see org.argouml.persistence.MemberFilePersister#load(org.argouml.kernel.Project, java.io.InputStream)     */"
// Stop updating model when we're not visible
// in UML2, a td is a property of a stereotype in a profile
"/*     * @see org.argouml.ui.TabTarget#refresh()     */"
// Only update our model if we're visible
"/* This target is a statemachine,              * for which no diagram exists yet,              * so, let's use it. */"
"/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */"
/* end class TabTaggedValues */
// setEnabled((Globals.clipBoard != null && // !Globals.clipBoard.isEmpty()) || // !isSystemClipBoardEmpty());
/* end class ActionPaste */
"/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabPanel()     */"
/* The target is a valid context. */
"/*     * Style panels only apply when a Fig is selected.     *     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */"
"/*         * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(         * org.argouml.ui.targetmanager.TargetEvent)         */"
"/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */"
"/*     * @see org.argouml.application.api.CommandLineInterface#doCommand(java.lang.String)     */"
// must not be used in UML2; we model a method as a // OpaqueBehavior object that already has a body, so there is no need // to have an intermediate expression object
// as write in UML specification, we have size(bodies)==size(langs) // we must have tabValues.length%2==0
// Try to get the corresponding body and set it // to the current body // This _should_ work, if all the bodies // were stored with their corresponding languages.
// Specify design issue category and knowledge type
"/* Let's just build a Statemachine,              * and put it in a suitable namespace. */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *         org.argouml.ui.targetmanager.TargetEvent)     */"
"/*     * the model structure has changed significantly, eg a new project.     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#structureChanged()     */"
// buttonBox.add(Box.createRigidArea(new Dimension(0, 20)));
"/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementChanged(java.lang.Object)     */"
// String title = getUI().getDialogTitle(this);
// TODO: Since there may be multiple top level elements in // a project, this should be using the default Namespace (currently // undefined) or something similar
// button action:
// Detach any non-associationend edges (such as comment edges) already // attached before this association node is removed. // They'll later be re-attached to the new FigAssociation
/* end class CrOppEndConflict */
"/*     * Report a progress to the ProgressMonitor window.     * @see org.argouml.application.api.ProgressMonitor#updateProgress(int)     */"
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */"
// If its an interface we have an interface end, otherwise its // something else and we should see if it is navigable. We don't // check that the end is a Classifier, rather than its child // ClassifierRole, since we have effectively eliminated that // possiblity in rejecting AssociationRoles above.
"/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */"
// Make sure it's parseable as an number
"/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */"
/*(MExtend)*/
"/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */"
// initialize basic parameters that are // different from Decision.UNSPEC
"/* This next line presumes that the 1st fig with this owner             * is the previous port - and consequently nullifies the owner             * of this 1st fig. */"
// Get the Association and its connections. // Iterate over all the AssociationEnds and check that each connected // classifier is in the same sub-system or model
// repair action for possible NP after load
/* (MClassifier) */
/* TRY SOME MORE ERRORS */
"/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeaturePrimaryExpression(tudresden.ocl.parser.node.AFeaturePrimaryExpression)     */"
/* (MModelElement) */
//to be able to remove dependencies later
// TODO: Removed from UML 2.x - phase out usage - tfm 20070530
"/*             * @see             * java.awt.event.ActionListener#actionPerformed(java.awt.event.             * ActionEvent)             */"
// copy to new file and let the regular load code // do the actual load
/* end class ActionAddAttribute */
// Apparently this object had no getItemUID
// since UML2 it's easier: TDs only via stereotypes
// Just mark for rebuild next time since we use lazy loading
"/*     * If the user double clicks on any part of this FigNode, pass it     * down to one of the internal Figs. This allows the user to     * initiate direct text editing.     *     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */"
// A stereotype got applied or removed // Just mark for rebuild next time since we use lazy loading
"/*     * @see Namespace#pushNamespaceElement(NamespaceElement)     */"
// no concrete subclasses defined, this class is "useless"
"/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */"
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */"
//////////////////////////////////////////////////////////////// // issue resolution
// All strings collate before all UML elements
// The attribute 'targetScope' of an AssociationEnd in UML1.x is no // longer supported in UML2.x
// and then by their enclosing path to fully distinguish them
// Elements are collated first by name hoping for a quick solution
// Keep track of first non-equal comparison to use in case the // case-insensitive comparisons all end up equal
// Add the action to the component
// stop desiring the goal which should remove it from the model
// If the strings differed only in non-primary characteristics at // some point (case, accent, etc) pick an arbitrary, but stable,  // collating order.
// first verify that the set goal priority did not add an extra goal
/* {transient=false, volatile=false} */
// Argo customization
// prohibit instantiation
// KeyEvent.isActionKey() method
// Apparently this object had no getUUID
"/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */"
// Apparently it had a getItemUID, // but we're not allowed to call it
// Apparently this object had no setItemUID
// Apparently it had a setItemUID, // but we're not allowed to call it
// class preloading, so packages are there...
// ...getPackage() can return null's, so we have to // cater for this:
"/*     * @see java.lang.Throwable#printStackTrace(java.io.PrintStream)     */"
"/* Switch the value back off, so that we will                     * get notified again next time.                     */"
// Ignore any nested exceptions. We don't want infinite loop.
// Didn't work.
// First step. Create the panel if not already done and options are // available. Otherwise it retains its default value of null.
// Likely a NoSuchMethodException or an IllegalAccessException loading/invoking eawt.Application methods
"/*     * @see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()     */"
// If the target method returns a boolean, use that as a hint
// For eclipse setup
// For ant setup
// When running from maven
"/*     * @param node     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAStandardDeclarator(tudresden.ocl.parser.node.AStandardDeclarator)     */"
// If we're setting a handler, enable the Preferences menu item by calling // com.apple.eawt.Application reflectively
"/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()     */"
// Override OSXAdapter.callTarget to send information on the // file to be opened
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */"
// Ignore if the directory does not exist. // This error will throw when running from the Eclipse setup.
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAMultiplicativeExpressionTail(tudresden.ocl.parser.node.AMultiplicativeExpressionTail)     */"
"/*     * @see org.argouml.cognitive.ToDoItem#deselect()     */"
// There was a comment saying that the below has no cycles, but // Classycle thinks there's a cycle here too, so I believe there // really is one - tfm 20070702 //            "org.argouml.uml.cognitive.critics",
// Just completed the first step where we make our choices. First // see if we have a choice. We always should, so print a rude // message if we don't
//TODO:{"org.argouml.ui", "org.argouml.cognitive.ui"},//fails due to subpackages //TODO:{"org.argouml.cognitive", "org.argouml.cognitive.critics"},
"/*     * @see org.argouml.cognitive.checklist.CheckItem#expand(java.lang.String,     *      java.lang.Object)     */"
//{"org.argouml.kernel", "org.argouml.uml.diagram.ui"},//why does this fail?
"/*     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()     */"
// do nothing by design
//TODO: different critic or special message for classes //that inherit all ops but define none of their own.
// Obey the contract ourselves!
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */"
// register all of the event listener trackers
"/*     * @see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)     */"
// remove all of the listeners
// fire all of the diagram events
// success
// fire all of the generator events
// no good trigger
// fire all of the help events
// fire all of the notation events
"/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */"
// keep track of total events fired
// keep track of which events fired
"/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */"
// initialize the event listener trackers which // verify that all of the proper events were fired
"/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */"
// Display events are fired on the Swing event thread. // We need to wait for them to be dispatched // NOTE: if more display events are added to this test, this one // needs to be last
"/* TODO: MVW: I think this has to be:                 * clone.nameFig = (FigSingleLineText) cloneFig;                 * but have not the means to investigate,                 * since this code is not yet used.                 * Enable the menu-items for Copy/Paste to test...                 * BTW: In some other FigNodeModelElement                 * classes I see the same mistake. */"
// counts each bit that has been fired
/* ResolvedCritic(String, List) */
/* ResolvedCritic(Critic, ListSet) */
// The interface realization will be created in the client namespace // (client is a namespace)
/* ResolvedCritic(Critic, ListSet, boolean) */
"/* testmc should now have an ItemUID so we should be able to         * create without adding a new ItemUID */"
// verify isRelevant returns true
// set enabled to false and check the opposite condition
// verify isRelevant not is false
// NotSnoozedCM isRelevant checks if the critic is snoozed // snooze the critic to verify isRelevant returns false
// unsnooze the critic to verify the critic is not relevant
// verify isRelevant is true
// verify isRelevant is still false
// isRelevant should now be true
//    private static final StereotypeView[] stereotypeViewMap; //     //    static { //        stereotypeViewMap = new StereotypeView[3]; //        StereotypeView. //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_TEXTUAL] =  //            StereotypeView.TEXTUAL; //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_BIG_ICON] =  //            StereotypeView.BIG_ICON; //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_SMALL_ICON] =  //            StereotypeView.SMALL_ICON; //    }
// isRelevant should still be true
"/*     * @see org.argouml.model.UmlHelper#getDestination(java.lang.Object)     */"
// initialize test data
// initialize the ToDoList
// add a ToDoItem
// if the current shortcut has been set but is void, then the // current shortcut is not set --> then the default value does not // change
// redundantly add item again which should be ignored
// size should be 1 since addition of second item would have been ignored
"/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */"
// retrieve item
"/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     * int, int)     */"
// remove item
// size should be 0 since item was removed
// initialize the GoalModel
"/* If the source of the event is an UML object,             * e.g. the owner of this Fig (but not always only the owner             * is shown, e.g. for a class, also its attributes are shown),             * then the UML model has been changed.             */"
// change priority of unspecified goal so we can verify it was updated
// check that the model correctly updates a goal's priority
// test the removal of a goal
// start desiring a goal which should add a goal and bump the size to 1
// number of goals should now be 1
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     * java.lang.Object, org.argouml.cognitive.Designer)     */"
//        UMLSequenceDiagram seqdiag = new UMLSequenceDiagram();
// This test calls ToDoList.addElement which requires the // Model.  We are able to get away with using the Mock model.
//        checkAssignIDToObject(seqdiag, true, true);
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */"
// FigEdgeNote has no UUID
//////////////////////////////////////////////////////////////// // Cmd API
//checkAssignIDToObject(fighistorystate, true, true);
//checkAssignIDToObject(figstate, true, true);
// TODO: This could just work off the names in the UML profile // TODO: It doesn't look like it matches what's in the UML 1.4 spec
// initialize a decision object with parameters
// We moused over an object just as it was deleted // transient condition - doesn't require I18N
// verify parameters were initialized correctly by the constructor
// No more we can do here on failure
// set the priority to a different value
// if we have only one return value and without type, // the return param string is ": ,", we remove it
// set the name to a different value
"/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */"
// following the update the priority should be // equivalent to Decision.UNSPEC
// test that properties were correctly initialized by the constructor
"/*     * @see java.awt.Component#getMinimumSize()     *     * sets minimum size to 120,100     */"
// initialize the Checklist
// verify the size of the list
// The trySave method results in the save taking place in another thread. // If that completes without error the ProjectBrowser.exit() method will // be called which will actually exist the system.
"/* The text the user has filled in the textfield is first checked             * to see if it's a valid multiplicity. If so then that is the              * multiplicity to be set. If not the input is rejected. */"
// test that the category and description are correct
// create a new list to test the addAll
// add all of the test items from the first list
/*MMessage*/
// verify the size of the new list
"/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */"
// initialize the ChecklistStatus
// Construct a CheckItem 
"/*    * @see org.argouml.profile.Profile#getProfileIdentifier()    */"
// reset the values to something different
// (2) Construct another CheckItem
//////////////////////////////////////////////////////////////// // comments
// test that the properties were correctly initialized
// initialize SnoozeOrder
// unsnooze and verify its been disabled
// test with a class in a package
// test with a class and an inner class
// It is quite possible that the cause of the problem has by now // been deleted, in which case we will throw an exception if we try // to change things. Catch this tidily.
// try with Statediagram
/* Nothing yet. Later maybe something like: */
/* Put the statemachine in the namespace of the class: */
// test with a package and a class and activity diagram
/* end class ProjectMemberModel */
// the name of this type of Object
// build the Activity Diagram
// Attempt to save this project under a new name.
"/* We no longer send individual events,             *  so next code is obsolete: */"
// CurDecisionCM isRelevant checks to see if the critic has // any decisions that have a priority > 0 and less than the // priority of the critic.  By default the critic has no // decisions so isRelevant should return false.
/* We initialised Java Notation, so let's activate it: */
/* Needed for initialisations: */
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */"
// set MetaProfile as a default profile
// create a dependency from the project's model to the MetaProfile
// remove the MetaProfile from the project's profile configuration
// save the project into a new file
// adds all stereotypes defined at the profiles applied to the // current namespace
// setup a user defined profile
/* TRY GUARD/ITERATOR SYNTAX */
// assert that the project's model element that had a dependency to  // the MetaProfile doesn't get inconsistent
// assert that the project's model elements that had a dependency to  // the UML profile for Java are consistent
"/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */"
// add it to the project configuration
// maybe UML2 has these as constants somewhere
// create a dependency between the project's model and the user defined  // profile
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */"
// save the project
// Notation events are fired on the Swing event thread. // We assume that serializing on the final call is sufficient
// load the project
// remove the user defined profile and the directory where it is
// Success - expected exception
// Clean up after ourselves by deleting profile model
// Test both forms of addBaseClass
// Test remaining form of removeBaseClass
//$JUnit-BEGIN$
//$JUnit-END$
// we put the targets 'backwards' in the history // since the first target in the addedTargets array is // the first one selected.
"/*     * Sets the value of an element#s property (tagged value). This method     * makes sure that a Collection of values is set if and only if the     * property is multivalued (upper multiplicity value greater 1), so passing     * a collection is safe.     *      * @see org.argouml.model.ExtensionMechanismsHelper#setValueOfTag(java.lang.Object, java.lang.Object, java.lang.Object)     */"
"/*     * @see org.argouml.kernel.AbstractProjectMember#getType()     */"
// Flag to enable performance testing - off by default
// initialize the model and profile subsystems to simulate a fresh  // ArgoUML session
// not implementable in UML2, because property is missing
// 20 sec.
// Add one child.
// If the target has changed notify the third party listener if it // exists and dispatch a new element event listener to // ourself. Otherwise dispatch a target reasserted to ourself.
// Performance testing parameters
// EnabledCM isRelevant checks if the critic is enabled // initialize this to true to verify isRelevant returns true
// Add grandchild.
// Check periodically to see if we've exceeded time limit
"/*         * Convert the string (e.g. ""aaa,bbb,ccc"") into separate         * stereotype-names (e.g. ""aaa"", ""bbb"", ""ccc"").         */"
// Add another child.
// Tree is created depth first, so this should be at the bottom
/* TRY SOME GUARD/ITERATOR ERRORS */
// See if the other copy was just a lucky shot
// Layout
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getOwner()     */"
"/*     * @see junit.framework.TestCase#TestCase(String)     */"
// Make sure we have a root model for TagDefinitions to get put in.
// create the tree of objects
// only targets we didn't have allready count
// copy package p1 into p2 package
// Extend, but only between two use cases. Remember we draw from the // extension port to the base port.
// change the structure in p1 package
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)     */"
// verify the copied package
// verify the copied class
// verify the copied nested package and the copied interface
// verify the copied attribute
// See if we can copy a class right off
// Change things
"/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */"
// Scale everything up
"/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */"
// Assert that the copy isn't modified when the source changes
"/*     * @see javax.swing.tree.TreeModel#getRoot()     */"
// TODO: For large lists, this is doing a linear search of literally thousands of elements
"/*     * @see org.argouml.uml.diagram.layout.Layouter#remove(org.argouml.uml.diagram.layout.LayoutedObject)     */"
// See if two copies look like copies of eachother
"/*     * Nothing is editable, since a Link takes its identity      * from the Association.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(     * org.tigris.gef.presentation.Fig)     */"
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#initNotationProviders(java.lang.Object)     */"
// See if we can copy a datatype right off
// // This function will, by design, contain long lists of i18n keys. // It might be tempting to shorten these by constructing them from // the parts but please then consider that we might loose the // possibility to build tools to statically check the property files // against this file. //
// See if two copies look like copies of each other
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getDependentElement()     */"
// See if we can copy an interface right off
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */"
"/*     * Update an existing tagged value on a model element.     */"
// verify all events were fired correctly
// See if we can copy a package right off
// See if we can copy a stereotype right off
// Ignore non-existent and empty names
// Expected
// Is the name already in the list of those seen, if not add it // and go on round.
"//	""Permission"","
// Check to see if association still exists
"/*        * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)        */"
// Expected IllegalArgumentException seen
// exception expected - test success
// specifies valid elements for an Interface to contain
// expected - test success
// Create a new arg list with a different set of args (but same types)
"/*     * If the new encloser is null, and the old one is a Component,     * then the ""enclosed"" Fig has been moved on the diagram.     * This causes the model to be adapted as follows:     * remove the elementResidence     * between the ""enclosed"" and the oldEncloser.     *     * @see org.argouml.ui.ArgoDiagram#changeFigEncloser(org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode)     */"
// not static
"/*     * The Transition has a name text box. It contains:     * <ul>     * <li>The event-signature     * <li>The guard condition between []     * <li>The action expression     * </ul><p>     *     * The content of the text box is generated by its own notationProvider.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */"
// Test passed
"/*     * @see org.argouml.uml.diagram.UMLMutableGraphSupport#isRemoveFromDiagramAllowed(Collection)     */"
//The source was one of the referenced state's path which // has got a new name.
// NOT UML1.4
"/*     * Update the text labels and listeners.     *     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
// non existent in UML1
// specifies valid elements for a Package to contain
//Place the comment Fig on the nicest spot on the diagram
// not in UML1.4
// returns List
// TODO: We don't currently have any settings that can change on a // per-fig basis, so we can just use the project/diagram defaults //        settings = new DiagramSettings(renderSettings);
// specifies valid elements for a Region to contain
// Deleting the stereotype should cascade to the TagDefinition, // then the TaggedValue
"/*     * @see org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders(java.lang.Object)     */"
// Must be called after setImplementation.
// Enumerate fields
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#calculateWeight()     */"
// Enumerate constructors
"/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */"
// Indicate that the test was validated
// TODO: Look up class in truth table
"/*     * Listen also to the association, of which the link is an instantiation,      * since we want to update the rendering when      * the association name changes.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(     * java.lang.Object, java.lang.Object)     */"
// Check superclass. //Make sure this class does not extend or reference non-ArgoUML classes
// valid elements for a Stereotype to contain
// Enumerate methods // Enumerate method arguments
// A list of valid connections between elements, the // connection type first and then the elements to be connected
// NIF: runTruthTest(Model.getFacade().isAInteraction(o), //           Model.getFacade().INTERACTION);
"// NIF: unTruthTest(Model.getFacade().isAMethod(o), //	Model.getMetaTypes().getMethod());"
/* end class WizMEName */
// specifies valid elements for a Use Case to contain
// NIF: runTruthTest(Model.getFacade().isAStructuralFeature(o), //          Model.getMetaTypes().getStructuralFeature()); // NIF: runTruthTest(Model.getFacade().isATaggedValue(o), //          Model.getMetaTypes().getTaggedValue());
"/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)     */"
// Call methods that exists for all objects and that always return // something meaningful
// specifies valid elements for an Operation to contain
//        LOG.log(Level.FINE, "getData returning raster = " + translatedRaster);
// Find the create method in the offical API
/* MMessage */
// Now get the factory implementation method to be invoked
// Here it is another object sent to the test.
"/*     * @see org.argouml.uml.diagram.ui.StereotypeContainer#isStereotypeVisible()     */"
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateStereotypeText()     */"
// abstract
"/** * Rule for Project->Root (Top level) Elements. *  * TODO: As currently implemented it returns all top level elements in  * the model repository, not just those in a given project.  Since we * only support a single project at a time currently, these are equivalent * but this will need to be enhanced with additional bookkeeping in  * Project when we support multiple open projects - tfm. * * TODO: I changed it to get the roots from the project. It was showing * the profiles that were loaded but were not applied to the current project * - maurelio1234. *  * @author Tom Morris <tfmorris@gmail.com> */"
"/*     * Listen for a RemoveAssociationEvent between the comment     * and the annotated element. When recieved delete the CommentEdge     * and this FigEdgeNote.     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
// Make sure we start off clean
"/*     * @see org.argouml.uml.ui.PropPanel#shouldBeEnabled(java.lang.Object)     */"
// The association should have same namespace as from class
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */"
// Only one end should be navigable
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAIntegerLiteral(tudresden.ocl.parser.node.AIntegerLiteral)     */"
//        "UseCaseInstance",  // Gone in UML 2.x & unused by ArgoUML
// Set up reader to be first filter in chain
// Set namespace so buildAssocationRole works
/* end class WizNavigable */
"/*     * If we're drawing to an edge then only allow if the start is a comment     * @see org.argouml.uml.diagram.ui.ModeCreateGraphEdge#isConnectionValid(org.tigris.gef.presentation.Fig, org.tigris.gef.presentation.Fig)     */"
/* end class CrFinalSubclassed */
// Build an activity graph with a single action state // the way the GUI would
/* end class CrNameConflictAC */
// This is a private method in Model.
/* end class CrMultipleAgg */
// Handling methods that doesn't return
"/*     * @see org.argouml.uml.reveng.ImportSettings#getInputSourceEncoding()     */"
// Handling the isInitiated method
"/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabKey()     */"
// Handling the initialise method
"/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()     */"
// Handle methods which return opaque objects
// one of the expected errors, just ignore
"/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */"
// Could not find model.
// We shouldn't get here, but just in case... // We want a wide exception catcher to make sure our // transaction always gets ended
// Handle UML 1.4 metamodel which is a MOF 1.3 model
// UML 1.4
"/*     * @see org.argouml.ui.explorer.Relocatable#isRelocationAllowed(java.lang.Object)     */"
// XMI 2.1
"/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */"
// UML 2.x
"/*     * @see org.argouml.model.ModelImplementation#getCoreHelper()     */"
// XMI 1.1
"/*     * The only thing we need to deal with is updating is the condition text.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
// Only remap package if we didn't remap specific class
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)     */"
"/*         * A few of our factories are slightly different than as declared in the         * UML 1.4 metamodel, so we remap them here.  <metamodel, argouml>         */"
"/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */"
// Packages to be remapped
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */"
// Subsystem has been removed from UML 2.x
/* TRY THE ACTIONS */
"/*     * @see org.tigris.gef.undo.UndoableAction#isEnabled()     */"
"/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */"
// case 1
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameFig()     */"
// Because UML 1.4 & 2.1 metamodels are organized differently we need // to traverse the hierarchy looking for our owning Package.
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */"
// Specific classes to be remapped //      remap.put("", "");
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outARealLiteral(tudresden.ocl.parser.node.ARealLiteral)     */"
// Go the other way to lookup an element by path 
"/*     * @see org.argouml.uml.reveng.ImportCommon#isMinimiseFigsChecked()     */"
"/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isDescendSelected()     */"
"/*         * @see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#getDefaultValue()         */"
"/*     * @see org.argouml.uml.reveng.ImportCommon#isDescendSelected()     */"
// ActivityGraphs
// WFR Transitions, OMG UML 1.3
// Instance (in UML 1.4) and Classifier are abstract and not tested
"/*     * @see org.argouml.application.api.ProgressMonitor#updateSubTask(java.lang.String)     */"
"/*         *  Extend, Include, UseCaseInstance & ExtensionPoint not implemented         */"
"/*         * We return a new List with the options instead of the options themself         * because we don't want the user to be able to change the options.         *          * @see org.argouml.uml.reveng.SettingsTypes.UniqueSelection#getOptions()         */"
// reuse time event:
// Do nothing.
"/*         * State is concrete in UML 1.3, but becomes abstract in UML 1.4, so we         * never allow it to be created (and don't test creation)         */"
//        new InitProfileSubsystem().init();   
// Calling connect() will add the edge to the GraphModel and // any LayerPersectives on that GraphModel will get a // edgeAdded event and will add an appropriate FigEdge // (determined by the GraphEdgeRenderer).
// This should work now that they both have names
// If method not supported ignore failure
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */"
// Fine!
"/*     * @see org.argouml.uml.ui.SourcePathController#setSourcePath(org.argouml.uml.ui.SourcePathTableModel)     */"
// Translate & clip graphic to match region of interest
// Sequence diagrams are not shown as children of the // collaboration that they show but as children of the // classifier/operation the collaboration represents. // Statediagrams and activitydiagrams are shown as children // of the statemachine or activitygraph they belong to.
"/*     * @see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel2,     *      Action, boolean)     */"
// CommonBehaviorFactory // DataTypesFactory // ExtensionMechanismsFactory // ModelManagementFactory
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatCollection(java.util.Iterator)     */"
// set up all parameters. Some methods are invoked with // primitives or collections, so we need to create them // accordingly
// The following should fail
// and leave things unchanged
"/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */"
"/*         * Constructor.         */"
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#getModelElement()     */"
"/*         * Constructor.         *           * @param me an Object         */"
/* Everything fine... */
"/*     * @see org.argouml.ui.TabTarget#getTarget()     */"
// reuse signal event:
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildPopup(javax.swing.JPopupMenu, int)     */"
// reuse call event:
"/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */"
//try creating a TimeEvent
//try changing the triggertype to ChangeEvent
"/*     * @see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()     */"
// nested class:
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *         org.argouml.ui.targetmanager.TargetEvent)     */"
/* No need to check any further if we fail the 1st part. */
"/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()     */"
/* START TESTING STUFF */
"/*         * Set the storage id for our repository so that MofIds will be unique         * (they are composed as ""storageId"":""serialNumber""). NOTE: The storage         * manager only looks for a few property names such as the         * StorageFactoryClassName. Everything else needs to be prefixed with         * ""MDRStorageProperty."" which gets deleted from the property name         * before it and its associated value are copied to an *internal*         * property table separate from the system property table.         */"
/* TRY SOME ERRORS */
"/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */"
// For a Transition use indirection through source StateVertex
// If we can't find a model, return the outermost // containing model element
"/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */"
"/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(java.lang.Object)     */"
"/*     * @see org.tigris.gef.presentation.FigNode#getPortFig(java.lang.Object)     */"
"/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */"
"/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsHelper()     */"
// Notation allows to add or modify things, not remove. // Hence, this does nothing:
/* end class CrCircularInheritance */
// The expected exception is thrown.
/* Both diagram types shall show sequence numbers when requested: */
/* But the collaboration diagram refuses to leave them out: */
"/*     * @see org.argouml.uml.util.namespace.Namespace#popNamespaceElement()     */"
/* If the message has a name, but no action, then show the name: */
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#setSelectedItem(java.lang.Object)     */"
"/* If a message has a name and a named operation,         * then show the operation: */"
/* TODO: Should there really be () here? */
"/*     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String)     */"
"/* If a message has a name and a named operation and an empty script,         * then show the operation: */"
"/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */"
"/* If a message has a name and a named operation          * and a named script with parameters,         * then show the script: */"
"/*     * @see org.argouml.model.ModelImplementation#getCopyHelper()     */"
"/* TODO: Why is there a space before the ( here,          * and not in case of the operation name? */"
"/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorHelper()     */"
/* The action still has the argument from above. */
//this is not a very useful transition
"/*     * @see org.argouml.model.ModelImplementation#getVisibilityKind()     */"
/* Mixed case */
"/*     * @see org.argouml.uml.util.namespace.Namespace#isEmpty()     */"
/* A complex internal transition */
"/*     * @see org.argouml.model.ModelImplementation#getPseudostateKind()     */"
/* These are NOT entry/exit/do activities! */
/* Long list of internals */
"/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */"
// or should the 1 be 0 ?
"/*         * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()         */"
// deleting it all
"/*     * @see org.argouml.model.ModelImplementation#getMessageSort()     */"
/* If there is no script, then the language should not be maintained. */
//        ret.setIsLeaf(false); //        ret.setIsRoot(false);
"/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */"
"/*     * @see org.argouml.model.ModelImplementation#getUmlFactory()     */"
"/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsFactory()     */"
// Create file
"/*     * @see org.argouml.model.ModelImplementation#getModelManagementHelper()     */"
// This is the normal case.
"/*     * Overridden purely to keep our superclass from removing the listener     * that we just added.     *     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */"
// Load a project which contains links to it
// test project readable files
"/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object)     */"
// Standard UML 1.4 profile
"/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String[])     */"
// Create a default profile and record its contents
"/*     * @see java.util.Collection#containsAll(java.util.Collection)     */"
// Write the profile out to a temp file
"/*     * @see org.argouml.cognitive.ui.Wizard#getNumSteps()     */"
// Read it back in to a new empty project
// specifies valid elements for an SimpleState to contain
// setting up the dependent profile creation
"/*     * @see org.argouml.model.CollaborationsHelper#getAllClassifierRoles(java.lang.Object)     */"
// actual call that executes everything
"/*     * @see org.argouml.model.CommonBehaviorHelper#getSource(java.lang.Object)     */"
// verifications
"/*     * Returns the value of an element's property (tagged value). This method     * makes sure that a Collection of values is returned if and only if the     * property is multivalued (upper multiplicity value greater 1).     *     * @see org.argouml.model.Facade#getValueOfTag(java.lang.Object, java.lang.Object)     */"
"/*     * @see org.argouml.model.VisibilityKind#getPackage()     */"
"/*     * @see org.argouml.model.PseudostateKind#getJunction()     */"
// create profile model
"/*     * @see org.argouml.model.DirectionKind#getInParameter()     */"
"/*     * @see org.argouml.model.PseudostateKind#getShallowHistory()     */"
// save the profile into a xmi file
"/**     * @see org.argouml.model.CopyHelper#copy(java.lang.Object, java.lang.Object)     *     * Make a copy of element in the given namespace.<p>     *     * This function is a dispatcher that calls the     * copyElement(Element,Namespace) function from XXXFactory.<p>     *     * This function may fail and return null for any of the following reasons:     * <ol>     * <li>No copy function is known for element's type.     * <li>The copy function fails or throws.     * </ol>     *     * @param anelement     *            is the element to copy.     * @param ans     *            the namespace     * @return a copy of element, or null.     *     * @throws IllegalArgumentException     *             if element is null.     */"
// Called during teardown
// remove leftovers from other tests
// There is a bug in the version of MDR (20050711) that // we use  that causes it to fail to delete aggregate // elements which are single valued and where the // aggregate end is listed second in the association // defined in the metamodel. For the UML 1.4 metamodel, // this affects a StateMachine's top StateVertex and // a Transition's Guard.  See issue 4948 & 5227 - tfm // 20080713
// There seems to be cases where we don't erase the profile. // Let's make sure it is deleted.        
"/*             * For a Namespace:             * <pre>             * [2] The operation allContents results in a Set containing             * all ModelElements contained by the Namespace.             *   allContents : Set(ModelElement);             *   allContents = self.contents             * where             *   contents = self.ownedElement -> union(self.namespace, contents)             * </pre><p>             */"
// [euluis] Using Windows style initial path, don't know if this fails  // in *nixes.
"/*         * The following from the original NSUML implemenetation was attempting         * to implement WFR #1 from section 2.5.3.32 of the UML 1.4 spec, but if         * there is an owner set, no namespace is valid. The checks for this         * WFR, if desired, need to go in setOwner() and setType() - tfm         */"
// ensure that model subsystem implementation doesn't remember the // profiles by changing their names and directories
//////////////////////////////////////////////////////////////// // static accessors
// but, lookout, it doesn't work both ways
"/*             * For a Package:             * <pre>             * [3]  The operation allContents results in a Set containing             * the ModelElements owned by or imported             * by the Package or one of its ancestors.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union(             *     self.parent.allContents->select(e |             *          e.elementOwnership.visibility = #public or             *          e.elementOwnership.visibility = #protected))             *             * where the required operations are defined as :             *             * [1] The operation contents results in a Set containing the             * ModelElements owned by or imported by the Package.             *   contents : Set(ModelElement)             *   contents = self.ownedElement->union(self.importedElement)             * [2] The operation allImportedElements results in a Set containing             * the ModelElements imported by the Package or one of its parents.             *   allImportedElements : Set(ModelElement)             *   allImportedElements = self.importedElement->union(             *     self.parent.oclAsType(Package).allImportedElements->select(             *                   re | re.elementImport.visibility = #public or             *                        re.elementImport.visibility = #protected))             * </pre>             */"
//        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi, //                "x.oclIsKindOf(Classifier)"), true);               
// on a headless system (without display) this will crash
// private JPanel propertyPane;
// contains instances of each modelelement // used for testing so that we only use each modelelement // once
// The next 3 restrictions for Abstraction seem to be Argo specific // not something the UML spec requires - tfm - 20070215 // There is no need for these because they arn't used by buildConnection() - b00__1 //        {Abstraction.class, org.eclipse.uml2.uml.Class.class, org.eclipse.uml2.uml.Class.class, null, }, //        {Abstraction.class, org.eclipse.uml2.uml.Package.class,org.eclipse.uml2.uml.Package.class, null, }, //        {Abstraction.class, Component.class, Interface.class, null, },
// propertyPane = /*TabProps */
// currently this is in this try block as it does not work // _propertyPanel always has size 0,0
// Make sure this test happens on the AWT event thread
//        JPanel docPane = pane.getTab(TabDocumentation.class);
// The target list is empty, re-emptying it again  // should not generate any events:
// new target is of type object, refresh should not be called
"/*     * @see org.tigris.swidgets.Orientable#setOrientation(Orientation)     */"
// new target is a fig, refresh should be called
"/*     * @see java.util.List#add(int, java.lang.Object)     */"
// Setting one target should generate one event:
// new target is of type UMLClassDiagram, refresh should not be called
// handles all children of relationship including extend and // include which are not members of core
// TODO: We could check that the contents of the files differ.
// NOTE: If we switch to a persistent repository like the b-tree // repository we'll want to keep the old extent(s) around
// new target is a modelelement, refresh should not be called
//testing with subset of targets
// set same target again should not generate new events:
//TabProps gets selected! //So, 2nd time right
// adding same targets list again should not generate new events:
"/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */"
// adding same target again should not generate new events:
/* end class CrInterfaceOperOnly */
//reverse order
// check for more literals (';' separated):
// now remove one target by setting subset:
/* If the destination is a DataType, then reject: */
// Ignore if the directory does not exist. // This error will throw when running from the ant setup.
// NOTE: we have to do this due to leftovers from other tests // being causing strange errors when running in Eclipse.
// all tests should consider the threshold as inclusive value
// Normally the extent should exist already, but in the case of // making an empty project, we may not have an extent yet, so // create a default extent
// this test is a bit stupid, but nevertheless...
// {A, A} are offenders
// remove the first prefix because it may be an archive // (like magicdraw)
// everything ok
//"org.argouml.notation.providers",//fails because sub-packages fail (?) //"org.argouml.notation.providers.java", //"org.argouml.notation.providers.uml", //"org.argouml.notation",//fails because sub-packages fail (?) //"org.argouml.notation.ui",
// same name, different classes, everything ok
"/* The user-DropActions are:                 * Ctrl + Shift -> ACTION_LINK                 * Ctrl         -> ACTION_COPY                 * Shift        -> ACTION_MOVE                 * (none)       -> ACTION_MOVE                 */"
// {A,A,B,B} are offenders
"/* Testcase: drag something from another             * application into ArgoUML,             * and the explorer shows the drop icon, instead of the noDrop.             */"
// {} no offenders
// generalizations are not required to have unique names within a // namespace
"/* And remember where we are about to draw                     * the new ghost image:                     */"
// All use cases and actors require associations // hence all predicates evalulate to true
"/*     * @see org.argouml.uml.ui.SourcePathController#getSourcePathSettings()     */"
// build association // build association between actor and top use case.
"/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */"
// NOTE: This listener needs to always be active // even if this tab isn't visible
"/*     * @see java.util.List#set(int, java.lang.Object)     */"
// Arbitrary settings - not used used for testing
"/*     * @see java.util.Collection#addAll(java.util.Collection)     */"
"/*     * @see java.util.Collection#toArray(java.lang.Object[])     */"
// the graph should stay the same.
// build include // it seems that the parameters for build include are just the other way // round // add an include: we do not need to have associtions on one
// setup
"/*     * @see java.util.List#subList(int, int)     */"
// real test
"/*     * @see java.lang.Object#hashCode()     *     * This is a rather bad hash solution but with the {@link #equals(Object)}     * defined as below, it is not possible to do better.     */"
// Some arbitrary bounds and settings - unused in test
// Make sure everything created gets deleted
"/*     * @see java.awt.event.MouseListener#mouseReleased(     *          java.awt.event.MouseEvent)     */"
// setup the Project due to its use in SourcePathTableModel ctor
// create a class model element
"/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()     */"
// Return a package to use as the Namespace.
// Disable event delivery during model load
// restore original event policy - not supported by MDR - tfm //MFactoryImpl.setEventPolicy(oldEventPolicy);
// Make sure we always have a default extent. // The old extent will get deleted as part of creating the // new extent.
//cont.setTarget(elem);
// Testing with more than one, since it failed with a manual test I  // made.
// The following will bring up a dialog box, so can't be run headless //        actionClient.actionPerformed(new ActionEvent(this, 0, "foo"));
"/*     * Refresh the table when a critique is enabled/disabled     *     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */"
// create a new empty project
// Inconclusive
// add the profile stereotype to the class
// add the profile to the project configuration
// Use a transaction to avoid the performance penalty (3x) of // MDR's autocommit mode
// This works when running the test from within Eclipse. // Apparently Eclipse runs the tests using a class-loader that // has the tests Folder among the URL:s.
//disable the buttons for now, since no selection has been made yet
// create a class in the project model
// check that the tag definition is returned by // {@link UMLTagDefinitionComboBoxModel#getApplicableTagDefinitions(Object)}
// If we're setting a handler, enable the About menu item by calling // com.apple.eawt.Application reflectively
// Set the screen layout to what the user left it before, or // to reasonable defaults.
//////////////////////////////////////////////////////////////// // instance variables
"//  Autoscroll Interface... //  The following code was borrowed from the book: // 		Java Swing // 		By Robert Eckstein, Marc Loy & Dave Wood // 		Paperback - 1221 pages 1 Ed edition (September 1998) // 		O'Reilly & Associates; ISBN: 156592455X // //  The relevant chapter of which can be found at: // 		http://www.oreilly.com/catalog/jswing/chapter/dnd.beta.pdf"
//      calcBounds();
"/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object, java.lang.Object)     */"
// For classifiers
//////////////////////////////////////////////////////////////// // constants
"/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(     *         java.awt.datatransfer.DataFlavor)     */"
// case 4 // erase it
//////////////// // event handlers
//////////////////////////////////////////////////////////////// // TreeModel implementation
// case 1 // after(...)
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALiteralCollection(tudresden.ocl.parser.node.ALiteralCollection)     */"
// We have the path provided from the build script.
// Check the localized parts.
// Wait for all Model subsystem events to be delivered
// Wait for all AWT events to be dispatched and processed
"/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */"
"/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */"
// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
"/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */"
// This is null as until // the first stereotype declaration is seen. // After that it is non-null.
//newOp.setOwnerScope(op.getOwnerScope()); // //not needed in case of operation
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALetExpression(tudresden.ocl.parser.node.ALetExpression)     */"
//                Model.getExtensionMechanismsFactory().buildTaggedValue( //                        tagName, new String[] {"true"}, Model.getFacade().getRoot(umlObject));
// MClassifiers // cannot be Bag
"/*     * @see org.argouml.model.ModelImplementation#getDataTypesHelper()     */"
// Read xsltStream into a temporary file // Get url for temp file. // openStream from url and wrap in StreamSource
"/*     * This function only sets the color of the divider line      * (since that is the only visible part), and can be used to make      * the divider line invisible for the top region in a composite state.     *      * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */"
// if the object does not have a name, // than no problem
"// tree // value // isSelected	(dont want a colored background) // isExpanded // isLeaf // row	(not important for rendering) // hasFocus (dont want a focus rectangle)"
// Only work for associatins
// We need to find the stereotype with the name // "create" and the base class BehavioralFeature in // the model. If there is none then we create one and // put it there.
//- RedrawManager.unlock(); //- _redrawer.repairDamage();
// if this composite state is not attached to a statemachine // it is not the toplevel composite state.
// If this was an association then there will be relevant // information to fetch out of the mode arguments.  If it // not an association then these will be passed forward // harmlessly as null.
// find selected rows and make a list of the model elements // that are selected
//////////////////////////////////////////////////////////////// // TreeCellRenderer implementation
// always fire changes in the case something has changed in the // composition of the taggedValues collection.
// Build up an array list of the heights of each label/component pair. // Heights of zero indicate a proportional height.
//            CmdPaste cmd = new CmdPaste(); //            cmd.doIt();
// Ignored: Highly unlikely, and what would we // do anyway?  log it
// stereotypes applied to the target mostly control which TDs // (but see below for other listeners too)
"/*     * Overridden to make it possible to include a stateVertex in a composite     * state.     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */"
// TODO: Add referenceValue for tagged values  // which have a non-primitive type
// add a decision but set the critic priority to 0 so isRelevant // should still be false
// Because the notation events get dispatched on the Swing // event thread, we need to use invokeAndWait to make sure that we // don't return until they've been delivered
// Parent is Element, but it has no attributes or associations to check // checkElementCopy(e1, e2);
"/*     * @see tudresden.ocl.check.types.Type2#navigateParameterizedQuery(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */"
// Extra careful now, not to keep any references to the // second argument.
"/*	 * @see javax.swing.table.TableModel#isCellEditable(int, int)	 */"
// Auto-create a return message for a call message
"/*     * @see tudresden.ocl.check.types.ModelFacade#getClassifier(java.lang.String)     */"
// get the source of the return message
// get the dest of the return message
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCallParameters(tudresden.ocl.parser.node.AFeatureCallParameters)     */"
//            Fig spf = null; //            Fig dpf = null; //            FigNode sfn = null; //            FigNode dfn = null;
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAAdditiveExpressionTail(tudresden.ocl.parser.node.AAdditiveExpressionTail)     */"
// If the event originated from the window w/glass pane, consume  // the event
"/*     * @see java.lang.Throwable#printStackTrace(java.io.PrintWriter)     */"
// Add GUI-internal stuff. // GUI-internal stuff is panes, tabs, menu items that are // part of the GUI subsystem i.e. a class in the // org.argouml.ui-package. // Things that are not part of the GUI, like everything that // has any knowledge about UML, Diagrams, Code Generation,  // Reverse Engineering, creates and registers itself // when that subsystem or module is loaded.
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAPostfixExpressionTail(tudresden.ocl.parser.node.APostfixExpressionTail)     */"
// This is perfectly normal and happens among other things // within the call to setDiagram (below).
// iterate through the tabbed panels to determine whether they // should be enabled.
//        tabs.addTab(Translator.localize("dialog.find.tab.name-and-location"), //                nameLocTab);
"/*     * @see java.lang.Object#clone()     */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outABooleanLiteral(tudresden.ocl.parser.node.ABooleanLiteral)     */"
// if the current shortcut has not been set, then the actual // shortcut value is the default one
// if the user cancelled the operation, // we don't have to save anything
"/*     * @see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)     */"
// Generate and register the OSXAdapter, passing the methods // we wish to use as delegates for various // com.apple.eawt.ApplicationListener methods
// TODO: no Links in UML 2
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAExpressionListOrRange(tudresden.ocl.parser.node.AExpressionListOrRange)     */"
// nothing we can do about veto, so just ignore it
//        LOG.log(Level.FINE,result.x + ", " + result.y //                + " theta = " + theta * 180 / Math.PI //                + " dx = " + dx + " dy = " + dy);
//////////////////////////////////////////////////////////////// // event handling
"/*     * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)     */"
//////////////////////////////////////////////////////////////// // Fig accessors
"/*     * @see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)     */"
// the UML object // wrong end of the edge
"/*     * Tests if enter is pressed in the _bbodField so we need to set the target     * bounds.     *     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */"
// We are going to add the ones still valid & new ones // in the right sequence:
"/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */"
//////////////////////////////////////////////////////////////// // events
// this is safe because getName always returns a string of some type
// if the new edge implements the MouseListener // interface it has to receive the mouseReleased() event
//////////////////////////////////////////////////////////////// // user feedback
//////////////////////////////////////////////////////////////// // GraphFactory implementation
// adapted from SelectionWButtons from line 280 // calls a helper method to avoid this edge disappearing // if the new source and dest are the same node.
// Give up if we are already on the graph. This is a bit inconistent // with canAddNode above.
"/*     * @see javax.swing.AbstractAction.AbstractAction(java.lang.String)     */"
// Link the new extend relationship in to the ends. Remember we // draw from the extension use case to the base use case.
// next line does give user.home back but this is not // compliant with how the project.uri works and therefore // open and save project as give different starting // directories.  String directory = // Globals.getLastDirectory();
// Correct the activator value
"/*     * @see java.awt.Window#dispose()     */"
// Although we've historically written out the DOCTYPE, the DTD doesn't // actually exist and this line will get stripped by the .uml file // persister //        + "<!DOCTYPE profile SYSTEM \"profile.dtd\" >\n"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()     */"
// REMEMBER to change this if you change the number of MEs with source // path settings
"/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */"
// put the x at the right side of the activation if needed
"/*     * @see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)     */"
// Make sure there is the minimum gap above the message being drawn
// Make sure there is the minimum gap below the message being drawn
//////////////// // actions for toolbar
"/*         * @see javax.swing.ListCellRenderer#getListCellRendererComponent(         *         javax.swing.JList, java.lang.Object, int, boolean, boolean)         */"
// Get the region as the first Region in the State. // If there is no region in the StateMachine then create one.
"/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */"
// Create the layer
// Create the renderer
// If we're not provided a namespace then get it from the diagram or // the root
"/* Force the line-width to 0, since the FigGroup that contains the      * stereotype may want to show a border, but we don't. */"
// Link the previous/next reference of the swimlanes // according to the x order.
"/*     * Catches a mouseevent and calls mySingleClick and myDoubleClick if a tab     * is clicked which is selected.     * @see java.awt.event.MouseListener#mouseClicked(MouseEvent)     */"
//////////////////////////////////////////////////////////////// // GraphModel implementation
// make space for the clarifier // for vertical symmetry // margin between text and border
//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
//////////////////////////////////////////////////////////////// // contructors
//////////////////////////////////////////////////////////////// // event processing
"/*     * @see org.argouml.model.ModelImplementation#getStateMachinesFactory()     */"
//////////////////////////////////////////////////////////////// // fig accessors
"/*     * @see org.tigris.gef.graph.GraphListener#edgeRemoved(org.tigris.gef.graph.GraphEvent)     */"
// can't have a connection between 2 interfaces: // get the 'other' end type
// Only work for associations
// Use "aSize" to build up the minimum size. Start with the size of the // name fig and build up.
"/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */"
"/*     * @see javax.swing.event.MenuListener#menuDeselected(javax.swing.event.MenuEvent)     */"
// Our angle theta is arctan(opposite/adjacent) // Because y increases going down the screen, positive angles are // clockwise rather than counterclockwise
// if we are the dest and is a call action, create the  // activation, but don't add it until the height is set.
// if we are the destination of a create action, // create the entire activation
// if we are the target of a destroy action // the figlifeline ends here and we add the activation
// if we are the source of a return action // the activation ends here.
"/*     * @see java.util.List#remove(int)     */"
// we do nothing. No call to the parent
"/*     * Compares obj1 and obj2 sorting by user object type, then name. Diagrams     * are sorted first, then packages, then other types. sorts by name within     * type groups. Nulls are sorted first for names.     *      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)     */"
// we don't recalculate activations, just move them
// if is a classifier role, it must return all the related messages.
// Comments from anywhere in the model are allowed
// argument can be an instanceof a Fig which we ignore
// All other types of elements must be in this namespace
// (1) test that the properties were correctly initialized
"/*     * This is not the correct location to set the cursor.     * The commented out code illustrates the calculation     * of coordinates.     *     * @see java.awt.dnd.DragSourceListener#dragOver(java.awt.dnd.DragSourceDragEvent)     */"
// No problem if this is an association role.
// we initialize the coordinates.
// limit our retries in case its too hard to get free
// we do nothing
"/*     * Do string compare of names of UML objects.  Comparison is     * case insensitive using a primary strength collator in the user's     * locale.     *      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)     */"
// manage if cursor x is less than lastX1 
"/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */"
// manage if cursor x is more than lastX2 
// manage changes of direction...
"/*                 * Alternatively, we could reduce the height of the Fig by the                 * height of this one hidden compartment. But that would not be                 * possible for the width - so we better return to minimal                 * dimensions overall.                 */"
// I have no direction yet
"/*     * @see org.tigris.gef.base.PathConv#applyOffsetAmount(java.awt.Point, java.awt.Point, int, java.awt.Point)     */"
// we move down or up the messages that are downward the broom
// we recalculate all the activations
// we draw a cross
"/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */"
// we don't let the user move the messages horizontally.
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *         java.lang.Object, org.argouml.cognitive.Designer)     */"
// if the edge is near the bottom of the classifier roles, // we enlarge all the FigClassifierRoles in the diagram.
// we need the edge to be complete
// the initial x is the left side of the activation
"/*     * @see org.argouml.model.ModelImplementation#getUseCasesFactory()     */"
// if the y coordinate is inside the head, // the x must be in the border of the headFig.
"/*     * @see org.tigris.gef.presentation.FigGroup#addFig(Fig)     */"
"/*         * @see java.awt.dnd.DropTargetListener#dropActionChanged(java.awt.dnd.DropTargetDragEvent)         */"
"/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     *     * Override setBounds to keep shapes looking right.     */"
/* Use a different notation as Messages on a collaboration diagram: */
"/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */"
// Operations ...
"/*     * @see org.tigris.gef.graph.GraphListener#nodeAdded(org.tigris.gef.graph.GraphEvent)     */"
//TODO: add logging, but this will never happen and is handled
// If possible we determine this by checking the destination // and source Figs are the same. If this is not possible // because the edge is not yet connected then we check the // model.
// we update the activations...
"/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */"
// This call seems not very robust. Yet to determine cause.
"/*     * Override setBounds to keep shapes looking right.     * The classifier and state Figs are nicely centered vertically,     * and stretched out over the full width,     * to allow easy selection with the mouse.     * The Fig can only be shrunk to half its original size - so that     * it is not reducible to a few pixels only.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */"
// this constructor is needed for PGMLStackParser to load // saved diagrams. It does nothing, because  // PGMLStackParser will call setPoints later.
"/*     * TODO: Support commentEdges.     * TODO: Support associations to self.     *     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
// vertical resizing
// Set up the target and its model element variant.
"/*     * Return true if the given object is a valid edge in this graph.     *     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */"
"/*     * Return all ports on node or edge.     *     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */"
"/*     * Return all edges going to given port.     *     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */"
// There are no regions so create one and place the vertex //there.
"/*	 * @see javax.swing.table.TableModel#setValueAt(	 *         java.lang.Object, int, int)	 */"
"/*     * @see     * org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */"
// c.insets = new Insets(1, 1, 1, 1);
"/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */"
"/*     * @see org.argouml.uml.ui.SourcePathController#getAllModelElementsWithSourcePath()     */"
// in this event we do nothing, // only stop drawing the broom.
"/*     * Return true if the two given ports can be connected by a     * kind of edge to be determined by the ports.     *     * @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object,     * java.lang.Object)     */"
// 1. Remember current message paths
// 2. Reposition and resize nodes
// 3. Now reposition messages based on their original position
// Compute the initial center position of the CR
// The name of the meta type is the class name (after the last .) // and before the next $ or end of class name.
// horizontal resizing
// Compute the final center position of the CR
// Create the graph model
// Y position of the new CR should match existing CRs Y position
"/*     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */"
// Init the sequence diagrams from the module
// debugging and looking at fig.headFig.figs[1]._currText  // I can see that it's working, but how to test it?       
// Operations that work on elements:
"/*     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */"
// Operations that work on classes of objects:
"/* The box for the compartments is somewhere         * inside the outside bounds: */"
"/*     * @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object,     *      java.lang.Object)     */"
//    Object getImportedPackage(Object element);
//    Object getIncludingCase(Object handle);
//////// Javadoc reviewed above this point - tfm /////////////
//    Object getImportingNamespace(Object element);
"/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */"
//Object createStereotype();
// ADiagramElementProperty delegate methods
"/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#add(     *         org.omg.uml.diagraminterchange.DiagramElement,     *         org.omg.uml.diagraminterchange.Property)     */"
"/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#exists(     *         org.omg.uml.diagraminterchange.DiagramElement,     *         org.omg.uml.diagraminterchange.Property)     */"
//easy interface to properties
// Just swap order of arguments to get to new form
// Here follows the interfaces that contain the enums of different // kinds in the UML meta-model.
// Flow is not in UML 2.x - don't implement
//additional support for tagged values
"/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAListExpressionListOrRangeTail(tudresden.ocl.parser.node.AListExpressionListOrRangeTail)     */"
//////////////////////////////////////////////////////////////// // public methods
/* end class UUIDManager */
"/*     * @see java.awt.dnd.DropTargetListener#dragExit(     *         java.awt.dnd.DropTargetEvent)     */"
// Write out something for us to read back in
// Now read it and check the results.
"/*     * @see org.tigris.gef.presentation.Fig#isSelectable()     */"
// Silently ignore anything specified by caller attempt to continue
// Create an empty file and try to read it
"/*     * If the user double clicks on any part of this FigNode, pass it     * down to one of the internal Figs.  This allows the user to     * initiate direct text editing.     *     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */"
// Depends on implementation: 
// verify that the equivalence test works
// maybe next test is going to change in future
// TODO: 
// The netbeans SAXParser sets line number // and column number to -1.
// The xerces SAXParser sets line number // and column number to 1.
"/*     * Updates the modelelement container if the fig is moved in or     * out another fig. If this fig doesn't have an enclosing fig     * anymore, the namespace of the diagram will be the owning     * modelelement. If this fig is moved inside another     * FigNodeModelElement the owner of that fignodemodelelement will     * be the owning modelelement.     *     * @see org.tigris.gef.presentation.FigNode#setEnclosingFig(org.tigris.gef.presentation.Fig)     */"
// Not true in general, but should be true for our test models
// TODO:
"/*     * Necessary since GEF contains some errors regarding the hit subject.     *     * @see org.tigris.gef.presentation.Fig#hit(Rectangle)     */"
// If the region is changed to another region then // we make sure that a delete event is not fired // as a result. //$NON-NLS-1$
"/*     * Need to 'arm' the rerouting capability with mouseDragged().     * <p>     * Don't arm if the edtior's current mode is a figedge create mode,     * because once a new edge has been created it is not deselected,     * therefore on the next create an unwanted reroute is performed.     *     * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)     */"
"/*     * @see org.tigris.gef.base.SelectionButtons#getNewNode(int)     */"
"/*     * Makes sure that the edges stick to the outline of the fig.     * @see org.tigris.gef.presentation.Fig#getGravityPoints()     */"
// In UML a message could have an Action. In UML2 it never does.
"/*         * @see java.beans.PropertyChangeListener#propertyChange(         *         java.beans.PropertyChangeEvent)         */"
// No body found.
"/*     * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,     *      java.lang.Object, int, boolean, boolean)     */"
// oops we already have the body
//        return handle.stringValue();
"/*     * @see java.awt.event.MouseListener#mouseClicked(     *          java.awt.event.MouseEvent)     */"
//        public Collection<Element> getExtendedElements(Object handle) {
"/*     * @see javax.swing.text.Document#render(Runnable r)     */"
"/*     * Perform recursive search of subtree rooted at 'node', selecting all nodes     * which have a userObject matching one of our targets.     */"
// Gone from UML 2.x //        throw new NotImplementedException();
// Get all the relationships, that this model element has. // and filter everything, that is not an import.
// Can't be done in the general case of federated repositories, // but at least get what we can find for the current resource set
// should be Element not EObject really
"/*     * @see     * org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.     * beans.PropertyChangeEvent)     */"
/* Classifier powerType = */
// TODO: Signal -> Receptions association not navigable in this // direction
// usage differs from UML1
// Transitions can have multiple Triggers now
// Gone in UML 2.x
"/*     * @see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(     *      javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int,     *      boolean)     */"
// ActionState, CallState, and SubactivityState have been replaced // in UML 2.0 by explicitly modeled Actions
"/*     * @see     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
// TODO: Double check - tfm
"/*     * This method is overridden in order to ignore change of the y coordinate     * during dragging.     *     * @see org.tigris.gef.presentation.FigNode#superTranslate(int, int)     */"
// TODO: gone in UML 2
"/*         * @see PropertyChangeListener#propertyChange(PropertyChangeEvent)         */"
// TODO: Gone in UML 2
// We have already confirmed the connection is valid
// MDR classes may have a UML or Uml prefix which should be removed.
// TODO: double check - tfm
// below for UML 1.4 compatibility
// TODO: changed for UML 2.x
// has <<subsystem>> stereotype
// && ((Action) handle).get
"/*     * Here we are actually violating the test independance since we keep     * the DetailsPane from test to test. The reason to do this is to make     * it possible to run the tests with less memory requirements.     *     * Hopefully someone might eventually fix the DetailsPane so that it is     * garbage collected properly and this is no longer needed.     *     * @see junit.framework.TestCase#setUp()     */"
// Not in UML2
// OK, so that didn't work out... Just ignore // any problems and don't set the name in the // constraint body better had log it.
// Even though this is not relevant for UML2 we have // code calling this that expects it for UML1.4 // and we must handle it gracefully.
//        return ((RedefinableElement) handle).isRoot(); // TODO: One part of UML 2.1.1 spec says that this is as above, // but it appears to be gone - tfm
// All of the ApplicationListener methods are void; return null regardless of what happens
// Place in the middle of the line and ensure the line is dashed.  Add // an arrow with an open arrow head. Remember that for an extends // relationship, the arrow points to the base use case, but because of // the way we draw it, that is still the destination end.
"/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *      org.argouml.cognitive.ui.Wizard)     */"
// an AssociationEnd is now a Property owned by an Association
"/*         * @see org.argouml.uml.ui.UMLComboBoxModel#addElement(java.lang.Object)         */"
//        throw new NotImplementedException( //            "This is not a UML2 element"); //$NON-NLS-1$
"/*     * @see java.awt.dnd.DropTargetListener#drop(     *         java.awt.dnd.DropTargetDropEvent)     */"
// JMenuItem cutItem = edit.add(ActionCut.getInstance()); // setMnemonic(cutItem, "Cut"); // setAccelerator(cutItem, ctrlX); // // JMenuItem copyItem = edit.add(ActionCopy.getInstance()); // setMnemonic(copyItem, "Copy"); // setAccelerator(copyItem, ctrlC); // // JMenuItem pasteItem = edit.add(ActionPaste.getInstance()); // setMnemonic(pasteItem, "Paste"); // setAccelerator(pasteItem, ctrlV); // // edit.addSeparator();
"/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */"
// TODO: Exception has been removed for UML 2.x // just return Signal for now - tfm
// Gone in UML 2.x - just Classifier now
// only association end has an aggregation option box
// TODO: Not really the same thing, but close
// Delete CollaborationInstanceSets where // this is the last participatingInstance
// The name of the meta type is the class name (after the last .) // and before the "Impl" or end of class name.
// TODO: Gone in UML 2.x // Return place holder for now
/* the source of the transition is a choice */
// TODO: no separate SyncState in UML 2.1 - tfm
"/*     * @see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)     */"
/*ActionSequence.class*/
// Comment out when we are ready to release undo/redo //        JMenuItem undoItem = edit.add( //                ProjectActions.getInstance().getUndoAction()); //        setMnemonic(undoItem, "Undo"); //        ShortcutMgr.assignAccelerator(undoItem, ShortcutMgr.ACTION_UNDO); // //        JMenuItem redoItem = edit.add( //                ProjectActions.getInstance().getRedoAction()); //        setMnemonic(redoItem, "Redo"); //        ShortcutMgr.assignAccelerator(redoItem, ShortcutMgr.ACTION_REDO); // //        edit.addSeparator();
// Find the target in the project browser. We can only do anything if // its a use case.
/*Argument.class*/
"/* The ""Close window"" shortcut (ALT+F4) actually can't             * be registered as a shortcut,             * because it closes the configuration dialog! */"
/*AttributeLink.class*/
// Access should be fast
// Detach any edges (such as comment edges) already attached // to the FigAssociation before the FigAssociation is removed. // They'll later be re-attached to the new FigNodeAssociation
// Iteration should be fast
// Only reset the text if the two are not the same (i.e the fig // has // moved, rather than we've just edited the text, when // setTargetBBox() // will have made them the same). Note that styleBounds could // be null, // so we do the test this way round.
// i.e. eventType == Notification.REMOVE
///////////////////////////////////////////////////// ////////// Begin AndroMDA Code ////////////////////// /////////////////////////////////////////////////////
/*implements CommandStack*/
// Not in UML 2.x (or metatypes) //        type.addItem(PredicateMType.create( //                Model.getMetaTypes().getActivityGraph()));
// Subtract the the offset of the click, to take account of user // having not initially clicked in the centre.
//LiteralSpecification //list.add("LiteralNull");//When other ok
// if a default action was voided then we have to save it
//list.add("LiteralInteger");//When other ok
// If the edge is from a circle to a circle (e.g. between use // cases) we have our own implementation overriding GEF. Which // attempts to keep the edges perpendicular if the edge is already // close to perpendicular.
//list.add("LiteralUnlimitedNatural");//When other ok
"/*     * Return the node or edge that owns the given port.     *     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */"
// TODO else => Exception !
// delete Messages which have this as sender or receiver
// Can't be changed
//rewrite it after change setExpression ?
// as write in UML specification, we have size(bodies)==size(langs) // we must have tabValues.length%2==0 
// Can't be set
"/*     * @see org.netbeans.lib.jmi.xmi.XmiContext#getReference(java.lang.String, java.lang.String)     */"
// Suggest that actors may not connect (see JavaDoc comment about // this).
// A Link is an Assocation in UML2.x
// We need a method (operation implementation) // to store the method body.
// The 4-arg version of this method depends on this ordering. // Don't change it!
// Maybe this operation already has a method, that fits our purpose? // In this case, try to reuse it, instead of creating a new // implementation.
// CHECKSTYLE:OFF - ignore too many parameters since API is fixed by MDR
// Check, if we have to create a new implementation.
// Create a new implementation.
/* This will contain the Figs that we do not need anymore: */
// And set the specification to the current operation.
// Add it to the operation's methods.
// Look, if there's already a java implementation
// Job done.
// TODO: Get default output directory from user settings // Project p = ProjectManager.getManager().getCurrentProject(); // p.getProjectSettings().setGenerationOutputDir(path);
// It seems, there was no implementation of // our current target language, so we just add one.
"/*     * Compare path of two elements in reverse order (inner to outer)     * using a primary strength text collator.      * This will collate e, E, 锟? 锟?together, but not eliminate non-identical     * strings which collate in the same place.     *      * @return equivalent of list1.compareTo(list2)     */"
// We cannot set the body of this model element type.
// Removed from UML 2.x
"/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */"
// also parse 1_* or 0_N etc.
// WARNING - This has containment side effects! // Eclipse UML2 will move the Property from the Classifier to // the Association when the navigability is changed.
"/**     * @param item the todo item     * @param reason the reason TODO: Use it!     * @return <code>true</code> if the argument was a component of this list;     *         <code>false</code> otherwise     * @throws UnresolvableException unable to resolve     */"
// UML 2.x only
// The Machine State has got a new name
// Where there is more than one supplier or client, take the first // element in each case. There really ought to be a check that // there are some here for safety.
// for other xmi files with further namespaces:
// The boundary box as held in the target fig, and as listed // in the boundary box style field (null if we don't have  // anything valid)
// eclipse namespaces:
// For the .uml files in the eclipse jar files, we need this:
// Only add MOF elements, not primitive datatypes
"/* TODO: Verify this.             * IIUC, then this triggers the CompountStateFig             * to draw itself correctly.             * Hence, there was a reason to wait this long             * to make the state concurrent. */"
// Notation events are likely to cause GEF/Swing operations, so we // dispatch them on the Swing event thread as a convenience so that // the receiving notationChanged() methods don't need to deal with it
// We clear the save-required flag on the Swing event thread // in the hopes that it gets done after any other background // work (listener updates) that is being done there
// Not needed currently for UML 2
// Make the result inmediately visible in case of apply:
// an error that can be corrected by the user, so no stack // trace, but instead an explanation and a hint how to fix
// Create a proxy object around this handler that can be reflectively added as an Apple ApplicationListener
// There are various details panes all of which could hold // different tabs pages according to users settings. // Place each pane in the required border area.
// final Object scope,
// Remove the old project first.  It's wasteful to create a temp // empty project, but too much of ArgoUML depends on having a // current project
///////////////////////////////////////////////////////////////////////// // TargetListener methods implemented so notified when selected // diagram changes. Used to update the window title.
"/* mvw: Indeed. The intention of the constructor parameter is to prove         * that there is a valid UML object to bind the notation to.          * So, the next statement should fail on a null parameter,          * and on anything that is not an object of which          * we can retrieve the multiplicity. */"
"/*     * @see org.argouml.model.UmlHelper#getSource(java.lang.Object)     */"
"//        prpTodo = createProperty(""label.todo-pane"", positions, TabToDo.class); //        prpProperties = //            createProperty(""label.properties-pane"", //                    positions, TabProps.class); //        prpDocumentation = //            createProperty(""label.documentation-pane"", //                    positions, TabDocumentation.class); //        prpStyle = //            createProperty(""label.style-pane"", //                    positions, TabStyle.class); //        prpSource = //            createProperty(""label.source-pane"", //                    positions, TabSrc.class); //        prpConstraints = //            createProperty(""label.constraints-pane"", //                    positions, TabConstraints.class); //        prpTaggedValues = //            createProperty(""label.tagged-values-pane"", //                    positions, TabTaggedValues.class); // //        Property[] propertyList = new Property[] { //            prpTodo, prpProperties, prpDocumentation, prpStyle, //	    prpSource, prpConstraints, prpTaggedValues, //        }; //        Arrays.sort(propertyList); // //        top.add(new JScrollPane(new PropertyTable( //						  propertyList, //						  paneColumnHeader, //						  positionColumnHeader)), //		BorderLayout.CENTER);"
"/*         * Initialize the module loader. At least the plug-ins that provide         * profiles need to be initialized before the project is loaded,         * because some of these profile may have been set as default         * profiles and need to be applied to the project as soon as it has         * been created or loaded. The first instance of a Project is needed         * during the GUI initialization.         */"
// create an anonymous class as a kind of adaptor for the cognitive // System to provide proper translation/i18n.
// in UML2, we model a method as a Behavior (initially OpaqueBehavior)
// Extent ignored for eUML2 implementation (required for NetBeans MDR)
// add listener to get notified when active diagram changes
"/* We need to verify that ns is a Package,         * if not - find its parent package!         * Otherwise this causes an exception when creating         * a sequence diagram for a ClassifierRole.*/"
"/*     * @see org.argouml.model.ExtensionMechanismsHelper#getCommonTaggedValueTypes()     */"
"/*         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)         */"
// also apply subprofiles:
"/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.Map,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */"
// eliminate Classifiers which already have an unnamed role
// This needs to iterate to fill entire output raster if implemented //        return image.copyData(outRaster);
"/* Now let's check if the new line is already present in             * the old list of internal transitions; if it is, then             * mark the old one to be retained (i.e. do not create a new one),             * if it isn't, continue with parsing:             */"
// we only need to add the classloader once // and if and only if there is at least a profile // in the JAR
// remove base class by destroying the extension
// consider the property multiplicity
// no state with the given name is found, so we have to // reject the complete user's input
// Search all attributes found to those expected. // If any don't match then turn off the found flag // so that we search for the next matching tag.
// too bad, we choose to take the first value
// ready to set the value finally
// TODO: isStatic in UML 2.x
// in case of a tagged value, the type shouldn't be set here
// also unapply subprofiles:
// also define subprofiles:
//        {AssociationRole.class,  ClassifierRole.class, },
/* 4.5.2.13 Constraint */
// because we're listening for stereotypes being added and removed // but we're really interested in their owned tag definitions, // the default implementation won't work for us
//        {Link.class, Instance.class, }, //        {Transition.class,       StateVertex.class, },
//        {Message.class, ClassifierRole.class },
/* end class StartCritics */
// Note for UML2 the aggregation ends are swapped
// in UML2 subsystem is a Component with <<subsystem>> stereotype // so this must occur after the metaTypes.getComponent() case
// initialized in static initializer block below
// find the passed in container in validContainmentMap
// determine if metaType is a valid element for container
"/* This double 'for' loop may be optimised as follows:             * - Use arrays in stead of a Set for bases             * - Have the second loop start from the element after base1             * ... but I chose not to do this, since the gain is small,             * and this is only used for a lazily filled combo.             * BTW: This is also used by Notation.*/"
"/*     * @see org.tigris.gef.graph.GraphFactory#makeEdge()     */"
"/** * This class represents all Diagrams within ArgoUML. * It is based upon the GEF Diagram.<p> * * It adds a namespace, and the capability * to delete itself when its namespace is deleted. <p> * * TODO: MVW: I am not sure of the following:<p> * The ""namespace"" of the diagram is e.g. used when creating new elements * that are shown on the diagram; they will have their namespace set * according this. It is NOT necessarily equal to the ""owner"". <p> * * MVW: I doubt all following: * The ""namespace"" of the diagram is e.g. used to register a listener * to the UML model, to be notified if this element is removed; * which will imply that this diagram has to be deleted, too. <p> * * Hence the namespace of e.g. a collaboration diagram should be the * represented classifier or, in case of a represented operation, the * classifier that owns this operation. * And the namespace of the statechart diagram should be * the namespace of its statemachine. */"
"/**     * Constructor for a {@link FigClass} during file load.<p>     *     * Parent {@link org.argouml.uml.diagram.ui.FigNodeModelElement}     * will have created the main box {@link #getBigPort()} and its     * name {@link #getNameFig()} and stereotype     * (@link #getStereotypeFig()}. This constructor     * creates a box for the attributes and operations.<p>     *     * The properties of all these graphic elements are adjusted     * appropriately. The main boxes are all filled and have     * outlines.      * TODO: which is wrong, since the bigPort is filled, too.     *      * @param element model element to be represented by this fig.     * @param bounds rectangle describing bounds     * @param settings rendering settings     */"
// valid elements for a Profile to contain
"/*     * @see org.tigris.gef.base.Selection#dragHandle(int, int, int, int,     * org.tigris.gef.presentation.Handle)     */"
// specifies valid elements for a class to contain
// specifies valid elements for a classifier to contain
// specifies valid elements for a Signal to contain
// specifies valid elements for an Actor to contain
// specifies valid elements for a Component to contain
"/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */"
// specifies valid elements for a Node to contain
"/* Test-case for the above code:          * Draw a class.          * Create a stereotype for it by clicking on the prop-panel tool, and          * name it.         * Remove the class from the diagram.         * Drag the class from the explorer on the diagram.         * Select the stereotype in the explorer, and change         * its name in the prop-panel to something longer.         * The longer name does not make the class Fig wider          * unless the above code is added.*/"
// If there isn't a 3rd column then this represents a connection // of elements of the same type.
// If there is a 3rd column then this represents a connection // of between 2 different types of element.
"/*     * @see org.tigris.gef.presentation.Fig#damage()     */"
// If the array hasn't been flagged to indicate otherwise // swap elements the elemnts and add again.
// specifies valid elements for a DataType to contain
"/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */"
// valid elements for an Action to contain
// trying to get a built-in standard profile from eclipse UML2
// Removed from UML 2
// Start interception UI interactions
// Perhaps something like the following would workd.  If not, then // traverse up the component hierarchy to a MultEditorPane //        Rectangle drawingArea = //            Globals.curEditor().getJComponent().getVisibleRect();
// Only interested in the "ownedElement" property. Either something has // been added to the namespace for this model, or removed. In the // latter case the "something" will be in the old value of the // property, which is the collection of owned elements, and the new value // will be the element import describing the model element and the // model from which it was removed
// Roll back transaction to remove any partial results read
/////////////////////////////////////////////////////////////////////////// // // Methods that implement the MutableGraphModel interface // ///////////////////////////////////////////////////////////////////////////
// If we can find a nested SAX exception, it will have information // on the line number, etc.
"/*     * @see org.tigris.gef.presentation.Fig#setLayer(org.tigris.gef.base.Layer)     */"
// Ignore if the extent never got created or has been deleted
//            pce = (PropertyChangeEvent) rxdEvent.getSource(); //            assertTrue("Wrong event name", //                    pce.getPropertyName().equals( //                            DiagramAppearance.KEY_DEFAULT_SHADOW_WIDTH.getKey())); //            String value = (String) pce.getOldValue(); //            int i = Integer.parseInt(value); //            assertTrue("Wrong old event value", i == 4); //            assertTrue("Wrong new event value", //                    ((String) pce.getNewValue()).equals("2"));
// InputSource xformedInput = chainedTransform(transformFiles, pIs);
"/**     * TODO: The next text was copied - to adapt.     *      * Sets the target. If the old target is an UML Element, it also removes     * the model from the element listener list of the target. If the new target     * is an UML Element, the model is added as element listener to the     * new target. <p>     *     * This function is called when the user changes the target.      * Hence, this shall not result in any UML model changes.<p>     *      * This function looks a lot like the one in UMLComboBoxModel2.     * <p>     * As a possible future extension, we could allow listening to      * other model elements.     *      * @param theNewTarget the new target     */"
"/*     * @see org.argouml.model.XmiReader#getXMIUUIDToObjectMap()     */"
"/*         * This comment was included in a previous version (before 1/2005)         * of the test which had this assertion commented out:         * ------         * Interaction should not be removed when removing ClassifierRole...         * maybe if the last message is removed from the interaction but even         * then it's doubtfull since it will probably lead to backward         * compatibility problems in save formats.         * ------         * but my reading of the UML 1.4 specification is that an Interaction         * without at least one message is definitely illegal, so MDR is         * doing the right thing by removing it in this case where we only         * have a single message, which then gets deleted. - tfm         */"
// Set up source for style sheet
// Create & set up temporary output file
// In UML2.x there is no metaclass named Method, but we use the // 'method' association of BehavioralFeature
"/* If action comes in with *no* modifiers, it is a pure                 * keyboard event (e.g. spacebar), so do it.  Anything else                 * is probably a mouse event, so ignore it. Mouse events are                 * dealt with by mousePressed() instead (see bottom of page).                 */"
// Create filter for each style sheet and chain to previous // filter/reader
//            jContentPane.add(getJchbBold(), gridBagConstraints2); //            jContentPane.add(getJchbItalic(), gridBagConstraints3);
// Create transformer and do transformation
// Set up for next iteration
// we presume the stream is encoded using the default char encoding
// Delete the old extent first
//                LOG.log(Level.WARNING, "Unable to find extent " + extent);
// Connect to the repository
// find and add all subdirectories
// Create an extent and read in our metamodel (M2 model)
// Create and start event pump first so it's available for all others
"/*     * @see org.argouml.model.ModelImplementation#getDiagramInterchangeModel()     */"
"/*         * @see javax.swing.table.TableModel#setValueAt( java.lang.Object, int,         * int)         */"
"/*     * @see org.argouml.model.ModelImplementation#getFacade()     */"
"/*         * @see javax.swing.table.TableModel#getColumnName(int)         */"
"/*     * @see org.argouml.model.ModelImplementation#getModelEventPump()     */"
"/*     * @see org.argouml.model.ModelImplementation#getDirectionKind()     */"
"/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsFactory()     */"
/* The default (16) puts the icons too close together: */
"/*                 * If the name is too long or multi-line (e.g. for comments)                 * then we reduce to the first line or 80 chars.                 */"
// If we've got a streaming input, copy it to make sure we'll // be able to rewind it if necessary
// to rupdate the diagram set the stimulus name again // TODO: Explain that this really works also in the // MDR case. Linus is a sceptic.
// If a UML 1.3 file, attempt to upgrade it to UML 1.4
// Save project at slightly lower priority to keep UI responsive
// Roll back transaction from first attempt & start new one
// Clear the associated ID maps & reset starting collection
"/*         * @see javax.swing.table.TableModel#getColumnCount()         */"
// DataTypes is next so it's available for Kinds, ModelManagement, // & Extensions
// Initialize remaining factories and helpers // (but defer heavyweight ones until needed)
/* end class CrDisambigStateName */
// Create a default extent for the user UML model. This will get // replaced if a new model is read in from an XMI file.
"/*     * @see org.argouml.model.ModelImplementation#getCollaborationsFactory()     */"
"/*     * @see org.argouml.model.ModelImplementation#getOrderingKind()     */"
"/*     * @see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)     */"
"/*     * @see org.argouml.model.ModelImplementation#getCoreFactory()     */"
// //  as long as they aren't both null //   (or a really rare identical string pointer)
"/*     * @see org.argouml.model.ModelImplementation#getDataTypesFactory()     */"
//        savePosition(prpTodo, TabToDo.class); //        savePosition(prpProperties, TabProps.class); //        savePosition(prpDocumentation, TabDocumentation.class); //        savePosition(prpStyle, TabStyle.class); //        savePosition(prpSource, TabSrc.class); //        savePosition(prpConstraints, TabConstraints.class); //        savePosition(prpTaggedValues, TabTaggedValues.class);
// Alphabetic order!
"/*     * @see org.argouml.model.ModelImplementation#getModelManagementFactory()     */"
"/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */"
"/*         * @see javax.swing.table.TableModel#getValueAt(int, int)         */"
"/*     * @see org.argouml.model.ModelImplementation#getStateMachinesHelper()     */"
"/*     * @see org.argouml.model.ModelImplementation#getUmlHelper()     */"
"/*     * @see org.argouml.model.ModelImplementation#getUseCasesHelper()     */"
"/*     * @see org.argouml.model.ModelImplementation#getChangeableKind()     */"
"/*     * @see org.argouml.model.ModelImplementation#getAggregationKind()     */"
"/*     * @see org.argouml.model.ModelImplementation#getScopeKind()     */"
"/*     * @see org.tigris.gef.presentation.FigNode#hitPort(int, int)     */"
"/*     * @see org.argouml.model.ModelImplementation#getConcurrencyKind()     */"
"/*         * @see javax.swing.table.TableModel#getRowCount()         */"
// Elements created after file load won't have index entries
"/*     * Private constructor for common work needed by both public     * constructors.     */"
// end our transaction
"/*     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()     */"
"/*     * @see org.argouml.model.ExtensionMechanismsHelper#getAllPossibleStereotypes(java.util.Collection, java.lang.Object)     */"
/* end class CrInvalidSynch */
// there is nothing to do in UML1.4
//        loadPosition(prpTodo, TabToDo.class); //        loadPosition(prpProperties, TabProps.class); //        loadPosition(prpDocumentation, TabDocumentation.class); //        loadPosition(prpStyle, TabStyle.class); //        loadPosition(prpSource, TabSrc.class); //        loadPosition(prpConstraints, TabConstraints.class); //        loadPosition(prpTaggedValues, TabTaggedValues.class);
// forbid instantiation
// Loop through all the ends, comparing the name against those already // seen (ignoring any with no name). // No problem if there are no connections defined, we will fall // through immediately.
// If this is not overridden it will revert to the old behavior // All internal subclasses have been updated, but this if for // compatibility of non-ArgoUML extensions.
"/*     * @see org.argouml.model.MetaTypes#getAbstraction()     */"
// Delete Stimulii which have this as their dispatchAction
// Delete Messages which have this as their action
"/*     * Override paint so we can set a flag the first time we're called     * and notify any waiting threads that the splash screen has been     * painted.     * @see java.awt.Component#paint(java.awt.Graphics)     */"
// Delete LinkEnds
// Create an event for the other end of the association
// Delete AttributeLinks where this is the value
// Ask to be notified of any changes to TagDefinitions so that we // can track new ones, name changes, etc
// binary link
"/*     * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()     */"
// Delete all SendActions which have this as signal
// and a change event for that end
// Delete all SignalEvents which have this as the signal
"/* These 3 steps are only needed for          * the 2 cases indicated with a X below. */"
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()     */"
// Text was stored in name in UML 1.3
// will always be null
// Delete InteractionInstanceSets where // this is the last participatingStimulus
//to be able to remove dep's later
"/*     * Updates the button if the current row changes     *     * @see javax.swing.event.TableModelListener#tableChanged(javax.swing.event.TableModelEvent)     */"
// this doesn't support I18N or multiple states,  // but it's just a default
// Partitions are composite elements and will get deleted implicitly // Partition contents don't need to be deleted or checked
// specifies valid elements for a Enumeration to contain
"/*     * @see org.netbeans.api.xmi.XMIReferenceProvider#getReference(javax.jmi.reflect.RefObject)     */"
// Well formedness rule 4.12.3.1 CompositeState // [4] There have to be at least two composite substates in a // concurrent composite state. // If this is broken by deletion of substate then we delete the other // remaining substates.
// Look for an existing reference matching our MofID
// only add all if there are some to add.
// probably redundant - just in case
// Helper interfaces and methods.
"/*     * @see javax.swing.tree.TreeNode#isLeaf()     */"
// CHECKSTYLE:ON
// specifies valid elements for an AssociationRole to contain
// Shorthand notation for convenience
// Quick exit if it's a transaction event // (we get a lot of them and they are all ignored)
// InteractionInstanceSets will get deleted automatically // because they are associated by composition
"/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()     */"
// If this is the only message contained in the Interaction // we delete the Interaction
// Object from a different file, register with superclass so it // can resolve all references
// if the model URL has a suffix of '.zip' or '.jar', get // the suffix without it and store it in the urlMap
// Several tries to construct a URL that really exists.
// If systemId is publicId previously mapped from a systemId, // try to use the systemId.
"/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */"
// Try to find suffix in module list.
"/*     * @see javax.swing.ComboBoxModel#getSelectedItem()     */"
// search the classpath
// ignored - we only care about open/closing
// Give up and let superclass deal with it.
// TODO: Probably really want to cancel editing //((FigTextEditor) focusOwner).cancelEditing();
// We've got a profile read pending - handle it ourselves now
"/*     * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)     */"
// shouldn't happen
"/*         * @see javax.swing.table.TableModel#getColumnClass(int)         */"
// Otherwise if it's not something we've already read, just // punt to the super class.
// Unfortunately the MDR super implementation throws // DebugException with just the message from the causing // exception rather than nesting the exception itself, so // we don't have all the information we'd like
// specifies valid elements for an CallState to contain
// specifies valid elements for an ActionState to contain
// For Transition use indirection through target StateVertex
// TODO: We don't have any settings that can change per-fig currently // so we can just use the default settings; //        settings = new DiagramSettings(renderSettings);
// Get all (UML) metaclasses
"/*     * @see org.tigris.gef.ui.IStatusBar#showStatus(java.lang.String)     */"
//                    Object[] args = { typeName, elemName }; //                  misc.name.element-import = Imported {0}: {1} //                    return Translator //                            .localize("misc.name.element-import", args);
// Although this only handles one level of package, it is // OK for UML 1.4 because of clustering // Get the right UML package in the extent
// Return the metatype proxy
// we must find out if the activator itself does not have // message as it's activator
"/*     * Called when the user has pressed Cancel. Performs ""Cancel"" in all Tabs.     */"
// An activator can't also be a predecessor of a message
// An Association can only have a single unnamed ClassifierRole, so
// if we are unnamed eliminate all classifiers which are already // the base of some role
// WFR 2.10.3.3 #4
// No initialization currently
//|| context instanceof Collaboration //|| context instanceof Model
"/*     * @see org.netbeans.lib.jmi.xmi.XMIHeaderProvider#writeHeader(java.io.Writer)     */"
"/*     * @see java.beans.PropertyChangeListener#propertyChange(PropertyChangeEvent)     */"
// NOTE: The <XMI.header></XMI.header> is provided for us
// Not implemented in MDR 
// If the user selects an Action that is already selected in sticky // mode (double clicked) then we turn off sticky mode and make sure // no action is selected.
"/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object)     */"
"/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object)     */"
"/*     * @see org.argouml.model.AbstractModelEventPump#addClassModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */"
// Clean up index entries
"/*     * @see javax.swing.text.Document#getText(int, int)     */"
"/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.     * PropertyChangeEvent)     */"
// Create a change event for the corresponding property
"/*     * @see org.tigris.swidgets.Orientable#setOrientation(org.tigris.swidgets.Orientation)     */"
// Empty implementation - we only care about keyTyped
// No longer abstract to allow subclasses to remove, so we provide a // null default implementation
"/*     * Return all edges going from given port.     *     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */"
// Create a change event for the associated property
"/*     * @see javax.swing.text.Document#getDefaultRootElement()     */"
// Cut down on debugging noise
"/*     * @see javax.swing.ListCellRenderer#getListCellRendererComponent(     * javax.swing.JList, java.lang.Object, int, boolean, boolean)     */"
// Unregister deleted instances after all events have been delivered
// If we don't have a fig for this UML object, we'll need to add // one. We set the bounds, but they will be reset later.
// Any given listener is only called once even if it is // registered for multiple relevant matches
// This will include all subtypes registered
/*(LOG.isDebugEnabled()*/
// Put all the bits together, suppressing bounds calculations until // we're all done for efficiency.
// For debugging you probably want either this // OR the logging for every event which is fired - not both
// This enforces the following well-formedness rule. // <p>Well formedness rule 4.12.3.1 CompositeState // [4] There have to be at least two composite // substates in a concurrent composite state.<p> // If this is broken by deletion of substate then we // change the parent composite substate to be not // concurrent.
/*LOG.isDebugEnabled()*/
// TODO: Need named Tags and Constraints compartments here //        addFig(tagsFig); //        addFig(constraintsFig);
// Fetch the key before going in synchronized mode
// LOG.log(Level.FINE, " Class " + name + " has subtypes : " // + names.get(name));
// Temporary start //    private static final Color[] COLOR_ARRAY = { //        Color.RED, Color.BLUE, Color.CYAN, Color.YELLOW, Color.GREEN}; //    private int nextColor = 0; // Temporary end
// convert classname to RefObject
// If we don't have a MofClass, see if we can get one from the // instance
// If we still don't have a MofClass, something's wrong
//                    throw new IllegalArgumentException("Property '" //                            + attribute + "' doesn't exist in metamodel");
// Save the model (current)
"/*     * If the Operation/Reception is abstract,      * then the text will be set to italics.     */"
"/*     * @see org.argouml.model.ChangeableKind#getAddOnly()     */"
// Lookup primary key, creating new entry if needed
"/*     * @see javax.swing.text.Document#getLength()     */"
// If there are no subkeys, register using our special value // to indicate that this is a primary key only registration
"/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.     * PropertyChangeEvent)     */"
// Create a new TagDefinition if none found
// Clear target so that multiple copies have no effect  // (other than inefficiency)
// TODO: Add Tags & Constraints //        addMenu.add(TargetManager.getInstance().getAddAttributeAction()); //        addMenu.add(TargetManager.getInstance().getAddOperationAction());
// Delete all TaggedValues with this type
"/*     * Used by the copy functions. Do not call this function directly.     *      * @param source     *            The stereotype to copy from.     * @param target     *            The object becoming a copy.     */"
// "Element");
/* TODO: Check the name for validity. */
// The effect will get deleted automatically by MDR, unlike the Guard.
// Although Usage & Permission are Dependencies, they need to // be include separately because of the way lookup works
// The following is specifically for Realizations
"/*     * @see AbstractAction#actionPerformed(ActionEvent)     */"
// The next 3 restrictions for Abstraction seem to be Argo specific // not something the UML spec requires - tfm - 20070215
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatElement(java.lang.Object)     */"
// specifies valid elements for a Model to contain
"/*     * @see org.tigris.gef.presentation.FigEdge#setDestFigNode(org.tigris.gef.presentation.FigNode)     */"
"/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */"
// ignored - we just skipped inserting it in our document
// specifies valid elements for a Operation to contain
// specifies valid elements for an Event to contain
"/*  The operation specificationPath results in a set containing                     * all surrounding Namespaces that are not instances of                     *  Package.                     *  specificationPath : Set(Namespace)                     * specificationPath = self.allSurroundingNamespaces->select(n |                     *    n.oclIsKindOf(Subsystem) or n.oclIsKindOf(Class))                     **/"
"/*     * Update the text labels.     *     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
"/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(     *         java.lang.Object)     */"
// specifies valid elements for an State to contain
// Since this is a complex polygon, there's no easy way to resize it.
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */"
// specifies valid elements for an SubactivityState to contain
// the last one needs extra space below it
"/* Remove the commentedge.             * If there are more then one comment-edges between             * the 2 objects, then delete them all. */"
// supports implementation of some special elements not // supported by buildNode
"/*                 * NOTE: Although WFR #3 in section 2.11.3.5 UseCase of the                 * UML 1.4 spec says ""A UseCase cannot contain any                 * Classifiers,"" the OCL is actually self.contents->isEmpty                 * which would seem to imply it can't contain any elements                 * - tfm - 20060416                 */"
// the list of namespaces to return
/* 4.5.2.27 ModelElement */
// Get the list of valid model item pairs for the given connection type
/* 4.5.2.37 StructuralFeature */
/* If the base was not changed, then only set the name: */
// Begin a transaction - we'll do a bunch of reads first // to collect a set of elements to delete - then delete them all
/* 4.5.2.14 Dependency */
// no else here to make sure Classifier with // its double inheritance goes ok
// no else here to make sure AssociationClass goes ok
/* 4.5.2.7 BehavioralFeature */
// no else to handle multiple inheritance of linkobject
// If we get this with the repository locked, it means our root // model element was already deleted.  Nothing to do...
// Our wrapped version of the same error
// Additional Operations in 4.5.3.26
// if there are no owned elements then return empty list
// We don't care about the value - just want to see if it throws
// Recurse into ourself for each parent
// if test fails this element should not // be in the result set
// the following should always be true
// If we were handed a Classifier to start, // this must be a Classifier
"/*     * Add the given node to the graph, if valid.     *     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */"
// we have to follow the // arrows..
// || ns instanceof UseCase // see comment below
// Made following changes from OCL in UML 1.4 section 2.9.3.16: //   CollaborationInstance -> CollaborationInstanceSet //   Stimuli -> Stimulus
"/*     * @see java.awt.event.FocusListener#focusLost(java.awt.event.FocusEvent)     */"
// UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
// Get Classifiers in Namespace
"/* The next line is needed so that we have the right dimension          * when drawing this Fig on the diagram by pressing down          * the mouse button, even before releasing the mouse button: */"
// A Profile is a special package having the <<profile>> // stereotype which can only contain the following types
/* || modelElement instanceof StateMachine */
// A Profile is a special package having the <<profile>> stereotype
// only build a namepace if needed, with
/////////////////////////////////////////////////////////////////////////// // // Methods that implement the GraphModel itself // ///////////////////////////////////////////////////////////////////////////
"/*     * Check whether model element is contained in given namespace/container.     */"
//        return struc.getOwner().getNamespace().getOwnedElement().contains( //                struc.getType());
"/*     * Override setBounds to keep shapes looking right.     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */"
//  d.supplier.oclAsType(GeneralizableElement). //  allParents.oclAsType(Namespace).ownedElement->select (e | //              e. elementOwnership.visibility = //                      #public)->includes (r.participant) or
//  d.supplier.oclAsType(Package).allImportedElements->select ( //                  e | e. elementImport.visibility = //                      #public) ->includes (r.participant) ) )
// Get the namespace hierarchy for each element
// Traverse the lists looking for the last (innermost) match
// UML 1.4 WFR 2.5.3.1 #3
// If we made something aggregate, make sure the other ends conform // to UML 1.4 WFR 2.5.3.1 #2 - no more than one aggregate end
// There actually don't appear to be any restrictions on the // namespace for a Generalization.  The UML 1.4 WFR 2.5.3.20 #3 // refers to GeneralizableElements, not Generalizations - tfm
// All text was stored in name field in UML 1.3
// Returns nothing
// Boolean, String, Integer, Long, Float, Double, etc
"/*     * This method is CPU intensive and therefore needs to be as efficient as     * possible.     */"
// Additional Operations in 4.5.3.8
// Remove any elements not in requested namespace
// Parse the boundary box text. Null is // returned if it is empty or // invalid, which causes no change. Otherwise we tell // GEF we are making // a change, make the change and tell GEF we've // finished.
// Select those Features which are BehavioralFeatures
// Should these also be deleted?
// This is silly, but for backward compatibility
/* TODO: This is the 2nd part of this method: */
// wellformednessrules and preconditions
// equal
// Update the listeners to match the desired set using the minimal // update facility
// greater
// less than
// Link does not exist in UML2, a link is represented just as an // association
// binary association
// delete LinkEnds which have this as their associationEnd
// delete AttributeLinks where this is the Attribute
"/*     * @see org.argouml.model.ModelImplementation#getMetaTypes()     */"
// delete CreateActions which have this as their instantiation
"/*             * @see org.argouml.uml.ui.ActionSetMultiplicity#setSelectedItem(             *      java.lang.Object, java.lang.Object)             */"
"/*     * @see org.argouml.model.ActivityGraphsHelper#findClassifierByName(     *         java.lang.Object, java.lang.String)     */"
/////////////////////////////////////////////////////////////////////////// // // Methods that implement the VetoableChangeListener interface // ///////////////////////////////////////////////////////////////////////////
// Delete dependencies where this is the only supplier
// delete CallActions which have this as their operation
// If we drop out there were no clashes
// delete CallEvents which have this as their operation
// Nothing more to do.
"/*         * @see java.util.Enumeration#nextElement()         */"
// For consistency with attribute and operation, give it a default // name and location
// Copy all the Features
"/*         * @see java.util.Enumeration#hasMoreElements()         */"
"/**     * Used by the copy functions. Do not call this function directly.     * TODO: template parameters, default type     * TODO: constraining elements     * TODO: flows, dependencies, comments, bindings, contexts ???     * TODO: contents, residences ???     *     * @param source     *            the source me     * @param target     *            the target me     */"
/* NameFig and StereotypeFig are handled by parent. */
// Nothing more to do, don't copy owned elements.
"/*     * @see org.tigris.gef.presentation.FigGroup#hitFig(java.awt.Rectangle)     */"
// copy raised signals:
// Set the name so that superclasses can find the newly // created element in the model, if necessary.
// Search for our current target language.
// Note that if we're copying this element then we // must also be allowed to copy other necessary // objects.
// Don't explicitly check if element is null
// Unfortunately the Fig and it's associated CommentEdge will not be // fully initialized yet here if we're being loaded from a PGML file. // The remainder of the initialization will happen when // set{Dest|Source}FigNode are called from PGMLStackParser.attachEdges()
// Return 1..1 multiplicity for empty string
// Convert "*" to "0..*" instead of "*..*"
/* according WFR: in case of ActivityGraph only. */
// delete Extends where this is the base
// delete Includes where this is the addition
// Test multipe items registered for single key set
// and its enumerationLiterals
// Remove with null item should remove all entries for key
"/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */"
"/* If we get here then we didn't get the		     * default diagram.                     */"
"/* Need to copy the lists since we will be moving the elements              * one by one: */"
"/*     * @see org.tigris.gef.util.Predicate#predicate(java.lang.Object)     */"
// Deleting "source" here would probably delete the parameters...
// Advance currentY to where the start of the body box is, // remembering that it overlaps the next box by 1 pixel. Calculate the // size of the body box, and update the Y pointer past it if it is // displayed.
"/*         * Only set the name if it differs from the text.         */"
// Get the assocations and connections. No problem (there is a separate // critic) if this is not a binary association or is an association // role.
/* Need to copy the lists since we will be moving the elements: */
// This is not necessarily the current diagram!
"/* Remove the old fig from the diagram, so we can draw the                 * new one in its place: */"
"/*     * Create a new FigText instance based on the given mouse down     * event and the state of the parent Editor.      */"
//            p.moveToTrash(source);
// Made following change from OCL in UML 1.4 section 2.9.3.22: //   CollaborationInstance -> CollaborationInstanceSet
"/*     * @see org.argouml.model.UmlHelper#deleteCollection(java.util.Collection)     */"
// Elements which will be deleted when their container is deleted // don't get added to the list of elements to be deleted // (but we still want to traverse them looking for other elements //  to be deleted)
// Technically this is legal, but a StructuralFeature should probably // only ever have an owner instead of a namespace. - tfm
// EnumerationLiterals should get deleted implicitly // since they are associated by composition
// UML2 only
//list.add("LiteralReal");//UML 2.4 //End LiteralSpecification     
// Have we handled UML2 here?
"/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */"
// hypotheses no time expression (only invariants)
"/*     * @see javax.swing.AbstractAction.AbstractAction()     */"
// TODO: Gone in UML 2.1 // It is now an InstanceSpecification with an  // Association as its classifier
// Get all classifiers in all top level packages of all profiles
//  d.supplier.oclAsType(Namespace).ownedElement->select (e | //  e.elementOwnership.visibility = //  #public)->includes (r.participant) or
"/*	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */"
// UML1.4 only
// We got passed an unmodifiable List.  Copy it and sort the result
"/*     * @see java.awt.event.MouseListener#mouseReleased(     *      java.awt.event.MouseEvent)     */"
// Now resize all sub-figs, including not displayed figs. Start by the // name. We override the getMinimumSize if it is less than our view (21 // pixels hardcoded!). Add in the shared extra, plus in this case the // correction.
/* Set up the property panels for UML elements: */
// TODO: Restructured in UML 2
// Delete Stimuli which have this as a Sender or Receiver
"/*                 * For a iterator call we should provide: (a) the variables (b)                 * the expression to be evaluated on each step (c) the                 * lambda-evaluator to evaluate it                 */"
// TODO: unimplemented //          return ((Property) handle).gets
"/* The figPoly is located at the right of the name text.             * The nameFig size is increased, so that it fits its text,             * and the figPoly next to the text, all within the boundaries             * of the nameFig. */"
/* If we do not set it to null first, then we get a MDR DebugException: */
"/*         * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)         */"
"/*         * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()         */"
// Removed from UML 2.x and deprecated in Model API // so we won't implement it //        throw new NotImplementedException(); // we do not throw an exception because ArgoUML still uses this
"/*         * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)         */"
"/*         * <em>Warning: when changing the implementation of this method be         * warned that the sequence of the if then else tree DOES matter.</em>         * Most notably, do not move the setNamespace method any level up in         * the tree.<p>         */"
"/*             * This can throw an exception if the target has been             * deleted. We don't want to try locking the repository             * because this is called from the event delivery thread and             * could cause a deadlock. Instead catch the exception and             * leave the model empty.             */"
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */"
// If the child component is resizable then // we don't know it's actual size yet. // It will be calculated later as a // proportion of the available left over // space.  For now this is flagged as zero.
"/*     * @see TestCase#tearDown()     */"
"/*     * @see javax.swing.AbstractAction.AbstractAction(     *       java.lang.String, javax.swing.Icon)     */"
"/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsHelper()     */"
/* end class CrNonAggDataType */
"/*     * @see org.tigris.gef.base.SelectionButtons#paint(java.awt.Graphics)     */"
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)     */"
// fire all of the status events
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */"
"/* TODO: If a namespace with sub-classdiagrams is deleted, then {            confirmStr +=                Translator.localize(                    ""optionpane.remove-from-model-will-remove-subdiagram"");            doAsk = true;        }*/"
/* Do nothing by design. */
// simply use name as it is
// Allow null
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */"
// restricting types for tagged values
// classifier is way too much in UML 2.x
// the minimum set of standard types
// keep them sorted
// We assume profile is contained in a single extent
"/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.     * DocumentEvent)     */"
"/*     * @see org.argouml.cognitive.ui.Wizard#canFinish()     */"
"/*         * @see java.awt.event.ActionListener#actionPerformed(         * java.awt.event.ActionEvent)         */"
/* Make a copy of the modelelements: */
"/*     * @see junit.framework.TestCase#runTest()     */"
// if the list does not exist add the code generation and // good practices profiles as default
"/*      * @see junit.framework.TestCase#setUp()     */"
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(     *         java.lang.Object)     */"
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()     */"
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */"
// the selected operation
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#setTarget(java.lang.Object)     */"
// make sure we know it when a classifier is added as a base
"/*	     * @see TargetListener#targetRemoved(TargetEvent)	     */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseARelationalExpressionTail(tudresden.ocl.parser.node.ARelationalExpressionTail)     */"
"/*	 * @see TargetListener#targetAdded(TargetEvent)	 */"
"/* So, we found a Classifier                     * that is not a ClassifierInState.                     * And at least one state has been selected.                     * Well, let's correct that:                     */"
// TODO: We just need to get someone to re-render a single // line of text which represents the element here, but I'm // not sure how to do that. - tfm // TODO: Bob replies - we shouldn't be interested in this // event here. The FigFeature (or its notation) should be // listen for change and the FigFeature should be update // from that.
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#removeOtherModelEventListeners(java.lang.Object)     */"
"/*     * Builds an initialized stereotype with no namespace. A stereotype must     * have a namespace so this method is unsafe. Use buildStereotype(String,     * Object).     *      * @param text     *            is the name of the stereotype     * @return an initialized stereotype.     */"
//do not use a custom Icon //the titles of buttons //default button title
// base is already set to this assoc...
"/*     * @see GUISettingsTabInterface#getTabPanel()     */"
// or //      self.allConnections->forAll( //              r | self.namespace.allContents->excludes //      (r.participant) implies //      self.namespace.clientDependency->exists (d | //      d.oclIsTypeOf(Permission) and //      d.stereotype.name = 'access' and
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAIfExpression(tudresden.ocl.parser.node.AIfExpression)     */"
// Just in case the existing selected element is from elsewhere // make sure it is in the list
// Set properties of the stereotype box. // Initially not set to be displayed, but this will be changed // when we try to render it, if we find we have a stereotype.
// Select the Current type in the combobox
"/* The selected value may be """" to              * clear the represented classifier. */"
// Get the implementations of this operations and // look for an OpaqueBehavior.
/* init profiles defined in jar files */
//    private boolean mustRefresh;
//        mustRefresh = true;
"/*     * Return a list of namespaces enclosing this element.     * The list is ordered outer to inner. i.e. it starts at the root model.     */"
/* This should not happen. */
"/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */"
// if it has no language, then we assume it is not an instance of // OpaqueExpression, so we leave it null and handle elsewhere
// /////////////////////////////////////// // Build the field // ///////////////////////////////////////
// Create a Body that reacts to double-clicks and jumps to a diagram.
// /////////////////////////////////////// // Add field(s) to panel // ///////////////////////////////////////
// click on the already selected value must not call setValue
//                    + "a.allConnections->exists(r | r.type.oclIsKindOf(Actor)) and "
// The 2 Radios have only one information.
// Update the model, and then notify
// We silently ignore requests which conflict with // UML 1.4 WFR 2.5.3.1 #3 - no aggregation for n-ary associations
// When call by contructor : no one is selected
"/*     * @see javax.swing.plaf.metal.MetalTheme#getName()     */"
// Expressions are DataTypes, not independent model elements // be careful not to reuse them
// We need to to this otherwise there is no notification // and diagram isn't change
// ScopeKind, VisibilityKind, PseudostateKind, etc // Doesn't include Boolean though, despite what UML 1.4 spec says
// needed for notification
// Because we map both ends of an association we'll see many // names twice //                LOG.log(Level.FINE, "Duplicate property name found - {0}:{1}", new Object[]{typeName, propertyName});
// This is an expensive method that we should ensure is called // rarely. Hence info level to track easily.
"/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorFactory()     */"
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(java.lang.Object)     */"
// Language has changed
// fill the list with items
"/*     * @see org.argouml.model.ModelImplementation#getCollaborationsHelper()     */"
// specifies valid elements for an ObjectFlowState to contain
// Commit our transaction
// in UML2, the target is already the "expression" (Opaque...)
"/*     * @see org.argouml.model.DirectionKind#getInOutParameter()     */"
"/*     * @see java.util.List#lastIndexOf(java.lang.Object)     */"
// Add the diagram as a listener to the namespace so // that when the namespace is removed the diagram is deleted also.
"/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.     * DocumentEvent)     */"
// Simulates UML2 getting the aggregation from the opposite end
"/*     * @see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)     */"
"/*     * @see Observable#notifyObservers()     */"
"/*     * @see org.argouml.model.VisibilityKind#getPublic()     */"
"/*     * @see org.argouml.model.ExtensionMechanismsFactory#createTaggedValue()     */"
// build all other elements using existing buildNode
// This calls the getters to fetch actions even though the // action variables are defined is instances of this class. // This is because any number of action getters could have // been overridden in a descendant and it is the action from // that overridden method that should be returned in the array.
"/* Let's create a class with the given name, otherwise         * the user will not understand why we refuse his input! */"
"/*     * @see java.util.Collection#iterator()     */"
// TODO: All of the following can be broken if we have multiple // targets selected
// if not, it is a control and must be labeled...
"/*     * @see org.argouml.model.VisibilityKind#getPrivate()     */"
"/*     * @see org.argouml.model.ScopeKind#getInstance()     */"
"/*     * @see org.argouml.model.PseudostateKind#getJoin()     */"
"/*     * @see org.argouml.model.PseudostateKind#getInitial()     */"
// Destroy it
// disable the button since no row will be selected now
// title = "" because already done for Optional
// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
// Nothing to do - we get all events automatically
// Force the parent to redraw
"/**     * Test if the given namespace is a valid namespace to add the diagram to.     * TODO: This method was created to facilitate the merge     * of this class with ActionAddDiagram.     *     * @param ns the namespace to check     * @return Returns <code>true</code> if valid.     */"
"/*     * @see org.argouml.model.AbstractModelEventPump#removeClassModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */"
"/*     * @see org.argouml.model.ModelEventPump#flushModelEvents()     */"
"/*     * @see org.argouml.model.ExtensionMechanismsHelper#getStereotypes(java.lang.Object)     */"
"/*     * @see org.argouml.model.ConcurrencyKind#getSequential()     */"
"/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object)     */"
"/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object)     */"
"/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */"
"/*     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String[])     */"
"/*     * @see javax.swing.ListModel#getSize()     */"
"/*     * @see org.argouml.cognitive.critics.Critic#addSupportedDecision(org.argouml.cognitive.Decision)     */"
"/*     * @see org.tigris.gef.presentation.Fig#classNameAndBounds()     */"
///////////////////////////////////////////////////// ////////// End AndroMDA Code ////////////////////// /////////////////////////////////////////////////////
"/*     * @see org.argouml.model.ChangeableKind#getFrozen()     */"
// if we've found the module model, log it // and place it in the map so we don't have to // find it if we need it again.
"/*     * @see org.argouml.model.UseCasesHelper#getAllUseCases(java.lang.Object)     */"
"/*                 * Although not represented in the OCL (or our Java), the                 * English text of WFR #4 of Section 2.10.3.4 in the UML 1.4                 * spec is more restrictive - ""[4] A Collaboration may only                 * contain ClassifierRoles and AssociationRoles, the                 * Generalizations and the Constraints between them, and                 * Actions used in the Collaboration's Interactions.""                 */"
"/*     * Just returns the descr param.     *     * @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)     */"
// returns a List
"/*         * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)         */"
// find the bases of the connected classifierroles so that we can see // what associations are between them. If there are bases then the // associations between those bases form the possible bases. Otherwise // the bases are formed by all associations in the namespace of the // collaboration
// NOTE: This may be called from a different thread, so we need to be // careful of the threading restrictions imposed by AbstractDocument // for mutators to be sure we don't deadlock.
///** // * A list of the path item attributes for this container. // * The list is populated during parsing, them processed at endElement() // */ //private List<Hashtable<String, String>> pathItemAttrs = //    new ArrayList<Hashtable<String, String>>();
"/*         * Because we get the metatype class stripped of its reflective         * proxies, we need to jump through a hoop or two to find it         * in the metamodel, then work from there to get its proxy.         */"
"/*     * @see org.argouml.uml.ui.     *      AbstractTestActionAddDiagram#getValidNamespaceClasses()     */"
"/*     * @see org.argouml.uml.ui.UMLCheckBox#buildModel()     */"
"/*             * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)             */"
// Copy the current in the previous
"/*     * @see javax.swing.table.TableModel#setValueAt(     *         java.lang.Object, int, int)     */"
// Sanity check - the returned path item placement // strategy should match the one in the UML. // If it doesn't, it could be that the UML was // created with an older argo version, and the new // argo version use a different placement strategy. // If they don't match, just use the default.
//super(new LabelledLayout());
// Get the list: OpaqueExpression, LiteralString,...
// By default, the first value of the combobox is selected.
// Get current InitialValue
"/*     * @see org.argouml.cognitive.critics.Critic#critique(java.lang.Object,     * org.argouml.cognitive.Designer)     */"
"/*     * @see org.argouml.model.StateMachinesHelper#getSource(java.lang.Object)     */"
// default : 0 => OpaqueExpression // set to 1 for test
"/*     * @see org.argouml.cognitive.Poster#getSupportedDecisions()     */"
"/*     * @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)     */"
"/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)     */"
"/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)     */"
// Create the body and language Field
"/*     * @see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)     */"
// Create other panel element
// create Panel containing the previous field
"/*     * @see org.argouml.cognitive.critics.Critic#isActive()     */"
"/*     * @see org.argouml.cognitive.critics.Critic#isEnabled()     */"
"/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()     */"
// Compare the type of the parameters. If any of the types is // null, then we have a match.
/* There are no composite states, so this will work: */
"/*     * Does not do anything.     *     * @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem,     * java.lang.Object)     */"
// Copy in memory the current
"/*     * @see org.argouml.cognitive.Poster#unsnooze()     */"
"/*     * @see org.argouml.cognitive.Poster#snooze()     */"
"/*     * @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem, java.lang.Object)     */"
// Copy the next value in the current
"/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *          TargetEvent)     */"
"/* The selected value may be """" to              * clear the represented operation. */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *          TargetEvent)     */"
"/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorRemoved(org.argouml.application.events.ArgoGeneratorEvent)     */"
"/*	 * @see TargetListener#targetRemoved(TargetEvent)	 */"
"/*     * @see java.util.List#listIterator(int)     */"
// Copy the current in the next
// Temporary until SimpleListModel is used for all
// Create popup tool if we have a single row
// Create add and remove buttons if needed first
// Pushing this to the end of the AWT thread seems to be the only // way to get this to update correctly
"/** * Class to display graphics for a UML Link in a diagram. <p> *  * The underlined association name is shown next to the middle of the path. *  * TODO: Show more notation as described in the standard: * ""A rolename may be shown at each end of the link. An association  * name may be shown near the path. If present, it is underlined * to indicate an instance. Links do not have instance names,  * they take their identity from the instances that they relate. * Multiplicity is not shown for links because they are instances.  * Other association adornments (aggregation, composition,  * navigation) may be shown on the link ends."" */"
//TODO: GenNavigableClasses?
"/*	     * @see TargetListener#targetSet(TargetEvent)	     */"
"/*     * @see org.argouml.notation.NotationName#getConfigurationValue()     */"
"/*     * Utility function to add a listener for an array of property names     * and remember the registration.     *     * @param element     *            element to listen for changes on     * @param property     *            array of property names (Strings) to listen for changes of     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener,     *      Object, String)     */"
"/*     * Utility function to remove an element listener     * and adapt the remembered list of registration.     *     * @param element     *            element to listen for changes on     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)     */"
// Get Features owned by those Classifiers
// now we construct the zig zag inheritance line //getUnderlyingFig()
// The 5 main component : 2 label, a panel for langage , a panel with // button, a textarea
// Copy previous element
"/*             * For a Classifier:             * <pre>             * [10] The operation allContents returns a Set containing             * all ModelElements contained in the Classifier together             * with the contents inherited from its parents.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union(             *       self.parent.allContents->select(e |             *            e.elementOwnership.visibility = #public or             *            e.elementOwnership.visibility = #protected))             * where parent is defined for GeneralizableElement as:             * [1] The operation parent returns a Set containing all direct             * parents             *   parent : Set(GeneralizableElement);             *   parent = self.generalization.parent             * </pre><p>             */"
// Copy next element
"/*     * @see org.argouml.notation.providers.NotationProvider#updateListener(java.beans.PropertyChangeListener, java.lang.Object, java.beans.PropertyChangeEvent)     */"
// Copy the previous value in the current
// self associations are special cases. No need to let the maze // runner find the way.
// The 2 component: a textField and a list
// Extract the icon that is used by the tree control // for the current look and feel
// Add a new entry in the list and select it. // Translator.localize("button.add") // +
"/*         * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)         */"
/* TODO: Make use of the constants defined in the ToDoItem class! */
// Handle ItemUID in container contents
// profile section: dealing with profiles in different states
"/* This should not be needed if the above is correct,          * but let's be sure: */"
// Copy the todo items after the model and diagrams so that // any model elements or figs that the todo items refer to // will exist before creating critics.
"/*     * For Java notation, we also need to listen to ""leaf"" changes,      * since they are shown as ""final"" on the diagram.     */"
//no text? remove attr!
"/* This is needed for the JUnit tests.         * Otherwise a ""assert initialized"" would suffice. */"
// Let's make it a bit more difficult by setting the target:
"/* We need to set the namespace/owner                     * of the new attribute before parsing: */"
"/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */"
// If anything goes wrong return the stack // trace as a string so that we get some // useful feedback.
"/*     * Is this item a copy?     *     * @see java.lang.Object#equals(java.lang.Object)     */"
// once one criticism is found, exit
// Create new menu item if it doesn't exist for this class.
"/*             * For a Collaboration:             * <pre>             * [1 ] The operation allContents results in the set of             * all ModelElements contained in the Collaboration             * together with those contained in the parents             * except those that have been specialized.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union (             *                       self.parent.allContents->reject ( e |             *                       self.contents.name->include (e.name) ))             *             *  parent here is the GeneralizableElement definition             * </pre>             */"
//////////////////////////////////////////////////////////////// // constructor
"/*     * @see org.argouml.model.ModelImplementation#getXmiReader()     */"
//////////////////////////////////////////////////////////////// // user interface
"/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */"
//////////////////////////////////////////////////////////////// // criticism control
"/*     * @see java.util.Collection#clear()     */"
//////////////////////////////////////////////////////////////// // issue resolutions
// default parameter name
//////////////////////////////////////////////////////////////// // critiquing
// the critiquing thread should wait if disabled.
// why?
// If menus don't containt menu item necessary for this class, create it
"/*         * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)         */"
//////////////////////////////////////////////////////////////// // constructor and singeton methods
"/**     * Used by the copy functions. Do not call this function directly.     * TODO: generalizations, specializations?     *     * @param source     *            the source generalizable element     * @param target     *            the target generalizable element     */"
//                      && getAutoCritique()
// Delete dependencies where this is the only client
/* Don't clear everything here, breaks loading! */
// Don't let a transient error kill the thread
"/*     * @see org.argouml.uml.notation.NotationProvider#getParsingHelp()     */"
//decision model listener
/* end class ChildGenDMElements */
"/*     * TODO: All the ToDos in the doCopyFoo methods below are inherited from the     * NSUML implementation and do not reflect new issues. One additional thing     * which does need to be dealt with is the copying of any attributes which     * have been added since this code was implemented for UML 1.3.     */"
"/**     * Used by the copy functions. Do not call this function directly.     * TODO: actions? instances? collaborations etc?     *     * @param source     *            the source classifier     * @param target     *            the target classifier     */"
//TODO: This should be the name of the designer that created //      the todoitem, not the current username!
// LOG.log(Level.FINE, "predicate() returned true, creating ToDoItem");
//////////////////////////////////////////////////////////////// // corrective automations, wizards
// check param types: only some connections are legal uml connections:
"/* In this case, either the container was not set,             * or it was not contained in a statemachine.             */"
// We'll put the association in the namespace of whichever end // is not navigable and is writeable.  If they both are, we'll use the // namepace of c1.
/*(MStateVertex)*/
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationRemoved(org.argouml.application.events.ArgoNotationEvent)     */"
// if wizClass is not a subclass of Wizard, print a warning
//return getCriticName();
//////////////////////////////////////////////////////////////// // design feedback
/* end interface Poster */
"// Use this for fast fail instead. // Sacrificed for complete fail. d00mst //throw new UnresolvableException( //	""Unable to create ItemUID for class: "" //	+ obj.getClass());"
// TODO: values
// Delete Extends which have this as their only ExtensionPoint
/* end class Goal */
"/*     * @see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)     */"
// check if we are using a supported java version
//implements java.io.Serialization
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationProviderRemoved(org.argouml.application.events.ArgoNotationEvent)     */"
// end class CurDecisionCM
// As soon as we've created a notation and have registered it listener // force an event to go to the listener so it draws for the first time.
/* end class StandardCM */
"/*     * @see org.argouml.persistence.SAXParserBase#handleStartElement(     *         org.argouml.persistence.XMLElement)     */"
// end class CompositeCM
// end class EnabledCM
// end class NotSnoozedCM
// end class AndCM
// end class DesignGoalsCM
// end class OrCM
// Register our last chance exception handler
"/*     * @see java.awt.Component#getLocale()     */"
// Get the splash screen up as early as possible
// We have to do this to set the LAF for the splash screen
// main initialization happens here
"/*     * @see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()     */"
// Force the configuration to load
// Synchronize the startup directory
// then, print out some version info for debuggers...
// Set the i18n locale
/* set properties for application behaviour */
// now, let's print it
// nothing else to do (?)
"/*     * @see org.argouml.persistence.XMLTokenTableBase#setupTokens()     */"
// We MUST have a project open before continuing. Create if necessary
// Perform one command.
// Now create a new object.
// Set the namespace to that of the base as first choice, or that of // the addition as second choice.
// initLogging();
// make the projectbrowser
"/*             * The next one defaults to TRUE, to stay compatible with older             * ArgoUML versions that did not have this setting:             */"
/* end Class Main */
/* end class PostLoad */
/* We don't care if optional modules aren't found. */
/* end class LoadModules */
/* All tabs are added at the end, except a TabToDoTarget: */
/* End interface GUISettingsTabInterface */
//            Editor editor = Globals.curEditor(); //            GraphModel gm = editor.getGraphModel(); //            LayerDiagram lay = //                ((LayerDiagram) editor.getLayerManager().getActiveLayer());
// skip pos, we know it's not a valid char from above
// Store in the user configuration, and // let gef know also.
// Use the configuration if it exists, otherwise // use what gef thinks.
"/*     * @param pc     * @see org.argouml.profile.ProfileManager#applyConfiguration(org.argouml.kernel.ProfileConfiguration)     */"
//failed to clone
"/*     * @see org.tigris.gef.base.SelectionButtons#paintButtons(Graphics)     */"
"/* Remark: The code in             * ProjectSettings.init() currently presumes             * that nobody is using this event. */"
// calculate the higher and lower Figs
// NOTE: This is package scope to force callers to use ResourceLoaderWrapper
"/*     * @see java.util.Observable#notifyObservers(java.lang.Object)     */"
/* end class ResourceLoader */
// the validity checking thread should wait if disabled.
// If element has been deleted, it's no longer valid
// History.TheHistory.addItemResolution(item, // "no longer valid"); // ((ToDoItem)item).resolve("no longer valid"); // notifyObservers("removeElement", item);
// ////////////////////////////////////////////////////////////// // Notifications and Updates
"/*     * @see org.argouml.profile.internal.ocl.OclExpressionEvaluator#evaluate(java.util.HashMap, org.argouml.profile.internal.ocl.ModelInterpreter, java.lang.String)     */"
/* skip any identical items already on the list */
// cat.debug("Checking for inhibitors " + rc);
"/*         * @see org.argouml.ui.TabTarget#refresh()         */"
// History.TheHistory.addItemResolution(item, reason);
"/*     * @see org.argouml.profile.internal.ocl.uml14.Bag#count(java.lang.Object)     */"
"/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)     */"
"/*     * Returns the target of this tab.     *     * @see org.argouml.ui.TabTarget#getTarget()     */"
"/*     * Enable buttons when selection made.     *     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
"/* Here we located the new classifier                          * with its operation. */"
/* end class ArgoJMenu */
// EventListenerList.add() is synchronized, so we don't need to // synchronize ourselves
"/*     * Refresh the text of the tab.     *     * @see org.argouml.ui.TabTarget#refresh()     */"
// End of block
/* end interface Clarifier */
// Set the checkbox on or // off according to the SELECTED value of the action.  If no // SELECTED value is found then this defaults to true.
// Extra care to be taken since allOffenders can be reset while // this method is running.
// these are blue in Metal Default Theme
// Cached expansions
// these are gray in Metal Default Theme
"/*     * @see org.argouml.application.api.ProgressMonitor#isCanceled()     */"
// set the icon for this poster
// EventListenerList.remove() is synchronized, so we don't need to // synchronize ourselves
//MVW
// TODO: Add double click listener 
// ////////////////////////////////////////////////////////////// // event related stuff
"/*     * @see javax.swing.Icon#getIconWidth()     */"
/* end class CrNWayAgg.java */
"/*     * @see org.argouml.application.api.ProgressMonitor#notifyMessage(java.lang.String, java.lang.String, java.lang.String)     */"
/* end class CheckManager */
// Now lets search
/* end class TabChecklist */
// We found it!
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *      TargetEvent)     */"
// Enter the class to speed up the next search.
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(TargetEvent)     */"
"/*     * This is explained by WFR 2 of a StructuralFeature: The type of a     * StructuralFeature must be a Class, DataType, or Interface.     *      * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */"
//////////////// // accessors
//////////////// // instance varables
//////////////// // constructor
"/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#propertyChange(java.beans.PropertyChangeEvent)     */"
//////////////// // TableModel implemetation
"/*     * @see org.argouml.application.api.ProgressMonitor#close()     */"
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#addOtherModelEventListeners(java.lang.Object)     */"
"/*     * @see java.util.List#addAll(int, java.util.Collection)     */"
/* in the past, 0 milliseconds after January 1, 1970, 00:00:00 GMT. */
"/*     * Report a progress to the ProgressMonitor window.     * @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)     */"
/* by default, double the snooze interval each time */
/* end class SnoozeOrder */
//////////////////////////////////////////////////////////////// // wizard actions
"/* This changes the complete structure of the table,          * so we need to set the column widths again. */"
// TODO: do all following steps // TODO: resolve item from ToDoList
/* end class ActionOpenCritics */
// Set initial sorting on Critic Headline
// Critics Table
// instead of making a new list, decrement index, return when // found and index == 0
"/*     * @see org.argouml.application.api.ProgressMonitor#notifyNullAction()     */"
// Critic Details panel
// case 2
//  TableModel implemetation
//TODO:
// no maximum set, so it will stretch...
/* and for advanced mode: */
"/* This check is needed, otherwise the setbase()                 *  below gives an exception.*/"
// Set tableSP's preferred height to 0 so that details height // is used in pack()
//     c.gridy = 0; //     c.gridx = 0; //     JLabel priLabel = new JLabel("Priority:"); //     gb.setConstraints(priLabel, c); //     _mainPanel.add(priLabel);
//     c.gridy = 0; //     c.gridx = 2; //     JLabel lowLabel = new JLabel("Low"); //     gb.setConstraints(lowLabel, c); //     _mainPanel.add(lowLabel);
//     c.gridy = 0; //     c.gridx = 3; //     JLabel twoLabel = new JLabel("ad"); //     gb.setConstraints(twoLabel, c); //     _mainPanel.add(twoLabel);
//     c.gridy = 0; //     c.gridx = 5; //     JLabel fourLabel = new JLabel("asd"); //     gb.setConstraints(fourLabel, c); //     _mainPanel.add(fourLabel);
//     c.gridy = 0; //     c.gridx = 6; //     JLabel highLabel = new JLabel("High"); //     gb.setConstraints(highLabel, c); //     _mainPanel.add(highLabel);
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *         org.argouml.ui.targetmanager.TargetEvent)     */"
// ------------ other methods ------------
"/*     * @see java.util.List#get(int)     */"
"/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementRemoved(java.lang.Object)     */"
//////////////////////////////////////////////////////////////// // TreeModel implementation - todo specific stuff
//////////////////////////////////////////////////////////////// // class variables
// general icons for poster
"/*             * @see java.lang.Runnable#run()             */"
// specialised icons for designer
/* end class ToDoTreeRenderer */
//   public static Decision decisionUNCATEGORIZED = //   new Decision("Uncategorized", 1);
/* end class ToDoByDecision */
"/*     * @see org.argouml.ui.explorer.PerspectiveManagerListener#removePerspective(java.lang.Object)     */"
// if the control is a panel, add it
//     c.gridx = 1; //     c.gridy = 3; //     c.gridheight = GridBagConstraints.REMAINDER; //     SpacerPanel spacer2 = new SpacerPanel(); //     gb.setConstraints(spacer2, c); //     _mainPanel.add(spacer2);
"/*         * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(         * org.argouml.ui.targetmanager.TargetEvent)         */"
//image.setMargin(new Insets(0, 0, 0, 0));
"/*         * @see org.argouml.ui.targetmanager.TargetListener#targetSet(         * org.argouml.ui.targetmanager.TargetEvent)         */"
/* end class WizStepTextField */
/* end class WizDescription */
/* end class WizStepCue */
// stop/start creating more critics
/* end class ActionGoToCritique */
// does nothing
/* end class ActionAutoCritique */
// stop/start cleaning up invalid TodoItems.
// reuse Opaque..., just set it's attributes
//otherwise parent must be an offending design material
/* end class ActionOpenGoals */
//? inform()
// If visibility is already changed for this class, respect it.
"/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(     *         java.lang.Object)     */"
"/*     * @see java.util.Collection#add(java.lang.Object)     */"
// the target of description will always be set directly by tabtodo
// ------------- MouseListener implementation ---------------
//p  = new UMLValueSpecificationPanel(model, propertyName);
/* end class WizStepConfirm */
"/*     * @see org.argouml.uml.ui.UMLComboBox#doIt(ActionEvent)     */"
// next line coming from projectbrowser
// ------------ ItemListener implementation ----------------------
// -------------TreeSelectionListener implementation -----------
// not needed in UML 1.x
"/*     * Prepare for typing in rationale field when window is opened.     *     * @see java.awt.Component#setVisible(boolean)     */"
// Only interrupt for one todoitem
/* end class ActionOpenDecisions */
// blinks?
// add the perspectives to a list for the combobox
// fireTreeNodesChanged(this, path, childIndices, children);
// TODO: This looks O(n^2)
//TODO: make a new history item
//cat.debug("bad decision");
//cat.debug("bad goal");
/* end class DismissToDoItemDialog */
// Our comparator will throw an InvalidElementException if the old // list contains deleted elements (eg after a new project is loaded) // so remove all the old contents first
// finally, apply profile configuration to the model
"/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */"
/* the text was: {frozen} */
/* end class WizStep */
//////////////////////////////////////////////////////////////// // actions
// Don't allow instantiation
// N.B. A node which is an Association is either a n-ary association // or the Class part of an AssociationClass
//////////////////////////////////////////////////////////////// // ActionListener implementation
//////////////////////////////////////////////////////////////// // DocumentListener implementation
//////////////////////////////////////////////////////////////// // TargetListener implementation
//////////////////////////////////////////////////////////////// // Instance variables
/* end class ConfigurationFactory */
// LOG.log(Level.INFO, "Configuration saved to {0}\n", url);
/* the text was: {frozen = false} */
// check for the older properties file and // copy it over if possible
// Only allow one load
// add the first point twice
// Initialize band buffer bounds
//        LOG.log(Level.FINE, "getData Rectangle = " + clip);
// Create a new graphics context so we start with fresh transforms
// Get all classifiers in our model // TODO: We need the property panels to have some reference to the // project they belong to instead of using deprecated functionality
// Fill with our background color
// Ask GEF to print a band of the diagram (translated & clipped)
// Make sure it isn't caching anything that should be written
//        assert !initialized; // GUITestActionOpenProject fails over this...
// Retain the original one:
"/*     * Internal initialization method.  Handles initialization which     * is common to both public methods.     */"
// Flag the command as to whether it is first in a chain
/* end class DelayedChangeNotify */
/* end class CrConflictingComposites */
// Default diagram settings
// Default notation settings
/* Generation preferences: */
"/*         * The next one defaults to TRUE, to stay compatible with older         * ArgoUML versions that did not have this setting:         */"
"/*         * The next ones defaults to TRUE, to stay compatible with older         * ArgoUML versions that did not have this setting:         */"
/* This Notation is not available! */
// Always put the model at the top
// otherwise add the diagram at the start
// Register with the save action with other subsystems so that // any changes in those subsystems will enable the // save button/menu item etc.
"/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */"
/* end interface DelayedVChangeListener */
// then any new buttons
// a profile initially has no applied profiles, we go bottom-up
/* Skip leading underscores: */
"/**     * TODO: should just be the directory to write.     */"
/* The preferences with project-scope: */
/* The ArgoUML version with which this project was last saved: */
// if diagram added successfully, add the member too
// Adding a todo member removes any existing one.
// got past the veto, add the member
// send indeterminate new value instead of making copy of vector
"/* Hence, a diagram name was saved in the project             * that we are loading. So, we use this name             * to retrieve any matching diagram. */"
"/*     * @see org.tigris.gef.presentation.Fig#hit(java.awt.Rectangle)     */"
/* Use the first diagram. */
"/* If there was no diagram at all,             * then use the (first) UML model. */"
// we don't need this HashMap anymore so free up the memory
//Can not delete the model
//Can not delete the profile
"/*     * @see java.lang.Object#finalize()     */"
"/*	 * @see javax.swing.table.TableModel#getColumnCount()	 */"
"/*	 * @see javax.swing.table.TableModel#getColumnName(int)	 */"
// NOTE: No longer a separate type in UML 2.1
"/*	 * @see javax.swing.table.TableModel#getRowCount()	 */"
// Make the topmost diagram (that is not the one being deleted) // current.
//////////////////////////////////////////////////////////////// // trash related methods
// Fire an event some anyone who cares about diagrams being // removed can listen for it
// there's just one ProfileConfiguration in a project // and there's no other way to add another one
"/** * Tab for the settings dialog that makes it possible to * select the modules that are to be enabled. * * TODO: Header for the table. * * @author Linus Tolke */"
"/*     * @see java.util.Collection#retainAll(java.util.Collection)     */"
// Do nothing - these buttons are not shown.
// Do nothing! // The next time we refresh, we will fetch the values again.
// Access methods for modules that need to query about the status of // other modules.
// Access methods for the GUI that the user uses to enable and disable // modules.
// Access methods for the program infrastructure
// Catch all exceptions and errors, however severe
// TODO: huntForModulesFromJavaWebStart();
// We expect all extensions to have a manifest even though we // can operate without one if necessary.
// Look for our specification
// Add this to search list for I18N properties // (Done for both modules & localized property file sets)
// We havn't found it. Add it.
"/*     * Called after the notation default property gets changed.     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
// The following check should have been satisfied before we // instantiated the module, but double check again
// If it didn't have a loadable module class and it doesn't look like // a localized property set, warn the user that something funny is in // their extension directory
// Since there is no way to compare the objects as equal, // we have to search through the list at this point.
"/*     * Remark:     * There is also a java-like notation, which is also     * part of ArgoUML core distribution.     */"
// NSUML does this (?) // Model.getFacade().setGuard(trans, g);
// This is needed for the case when the default notation is // not loaded at this point.
// Build the final string
//////////////////////////////////////////////////////////////// // Static workers for dealing with notation names.
"/*     * @see org.tigris.gef.base.Diagram#initialize(java.lang.Object)     */"
// No valid field for above notationLanguage.  It's valid if not null.
// We also show stereotypes
"/*     * @see org.tigris.gef.presentation.FigNode#isDragConnectable()     */"
// We also show the type (of which e.g. the name may change)
// We also show tagged values (the / for derived)
"/*     * @see org.tigris.gef.presentation.Fig#getEnclosedFigs()     */"
// and when the Operation is replaced:
"/*     * @see org.tigris.gef.presentation.Fig#translate(int, int)     */"
/* We are not interested in the name. */
/* And the parameter names and values: */
/* And the arguments: */
// We also show parameters
//  We also show types of parameters
/* Listen to the modelelement itself: */
//////////////////////////////////////////////////////////////// // convenience methods
// register for events from all modelelements // that change the name and body text // i.e. when the CallAction is replaced:
// and when the owner is replaced (unlikely for operations), // and when the operation changes name:
// removed stereotype
// register for events from all modelelements // that change the text // i.e. when the Transition is replaced:
// new stereotype
// register for the doActivity etc.
// register for internal transitions:
"/*     * @see java.lang.Object#hashCode()     *     * This will result in rather bad performance but at least we will     * not violate the contract together with {@link #equals(Object)}.     */"
//        return "parsing.java.help.attribute";
//        return "parsing.help.fig-association-end-name";
//TODO: initial value
/* skip spaces */
// the name itself
/* Check the name for validity: */
// pick out return type
// handle multiplicity here since we need the type // actually the API of generator is buggy since to generate // multiplicity correctly we need the attribute too
// strip any trailing semi-colons
// name and params
// constructor
// check for more attributes (';' separated):
// Remove bases that aren't there anymore
/* Initialize the NotationUtilityUml: */
// copy - can't iterate modify live collection while iterating it
/* When nothing is generated: omit the space. */
// Loop through all base classes, building a comma separated list
// yes, there are more:
//no non-whitechars in text? remove attr!
"/* If the 1st attribute is static,                         * then the new ones, too. */"
/* Handle Derived: */
/* Handle Visibility: */
// fix for loading bad projects
"/*                     * The ""show types"" defaults to TRUE, to stay compatible                     * with older ArgoUML versions that did not have this                     * setting:                     */"
// The element was deleted while we were processing it
// no instantiations
// construct bases string (comma separated)
//no text? remove op!
//no non-whitechars in text? remove op!
// check for more operations (';' separated):
// end while loop
// Don't create a stereotype for <<signal>> on a Reception // but create any other parsed stereotypes as needed
// lets concatenate it to the resulting string (genStr)
"/*     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */"
// the parameters
// the returnparameters
// The model element was deleted while we were working on it
// else: we remove only the extra ","
"/*     * @see org.argouml.uml.util.namespace.NamespaceElement#getNamespaceElement()     */"
// the query state
// remove last ,
"/*     * @see org.argouml.uml.util.namespace.Namespace#setDefaultScopeToken(java.lang.String)     */"
// end of block
// A string of the form "name:"
"/*     * @see java.util.Collection#removeAll(java.util.Collection)     */"
// this is a Message UML object
"/* Supported format:         *     predecessors number "":"" action         * The 3 parts of the string to generate: */"
"/*     * @see java.util.Collection#contains(java.lang.Object)     */"
/*(MMessage)*/
// This may return null:
// activatorIntNo is now guaranteed not null
//        List<String> args = null;
// get the ordered list of immediate successors:
// the condition or iteration expression (recurrence):
"/*     * @see java.awt.event.ComponentListener#componentResized(java.awt.event.ComponentEvent)     */"
/* Now apply the changes to the model: */
// windowOpen state will be changed when window is activated
"/* Disconnect the message from the call graph                 * Make copies of returned live collections                 * since we're modifying                 */"
// Find the preceding message, if any, on either end of the // association.
/* Do not set the name. */
/* MClassifierRole */
// Connect the message at a new spot
// case 3 & 4
/* If no variable name was given, then retain the one in the model. */
"/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)     */"
/* If no function-name was given, then retain the one in the model. */
"/* Store the guard, i.e. condition or iteration expression,         * in the recurrence field of the Action: */"
/* If there was no Action yet, create a CallAction: */
// Things are strange if there are more than one candidate root, // it has no obvious interpretation in terms of a call tree.
// We can do nothing if we don't have both the use case and extension // point.
// Parse the string to creat a new extension point.
// Build a new extension point
// The empty string. Return null
"/* This case is a bit different, because of the parameters.                      * If the event already exists, the parameters are ignored. */"
// If we are given the null string, return immediately,  // so that the extensionpoint is removed.
// A string of the form "name:location". Discard the middle token // (":")
// Read past the colon.
// The string to build
// Get the fields we want
// Put in the name field if it's there
// Put in the location field if it's there
/* First we decode the string: */
/* And 3rd, we adapt the model: */
// Same class, other operation
// Other class
// We found the classifier, now go find the operation:
"/*     * @see org.argouml.uml.util.namespace.Namespace#peekNamespaceElement()     */"
/* the text was: {frozen = true} */
/* case 3 */
// Should we be getting this from the GUI? BT 11 aug 2002
// no type defined yet
"/*     * @see org.argouml.uml.util.namespace.Namespace#iterator()     */"
/* This automatically pulls in a TagDefinition from the profile: */
/* The TV existed, but maybe it was not "true": */
/* TODO: For UML2: Check if the type of the TV is String. */
"/* Generate all the existing internal transitions,         * so that we can compare them as text with the newly entered ones.         */"
// Allow concatenation order and separator to be localized
/*Parameter etc.*/
/* "in" is the default */
// return nothing
// it can still be null if the UML element  // did not have a multiplicity defined.
"/*     * @see org.tigris.gef.graph.MutableGraphModel#connect(java.lang.Object,     *      java.lang.Object, java.lang.Class)     */"
/* Let's not be picky about the brackets - just remove them: */
// get the // classifier
// the State of a ClassifierInState is removed, // so let's reduce it to a Classifier.
// Strings
"/*     * @see org.argouml.uml.util.namespace.Namespace#getBaseNamespace()     */"
/* Remove the states that did not match. */
// the model is changed - our job is done
// no state named s is found, so we have to // reject the user's input
/* Finally, do the adaptations: */
// then c is a "normal" Classifier // UML states
"/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(     *         java.lang.Object)     */"
// let's create a new ClassifierInState with the correct links
/* This updates the diagram - hence as last statement: */
// case 3
/*(MTransition)*/
// if no classifier has been set, then entering a state is // not useful, so the user's input has to be rejected.
"/* TODO: If the next line trows an exception, then what                     * do we do with the remainder of the                     * parsed/to be parsed lines?                     */"
/* Add this new one, and mark it to be retained: */
"//	 WFR Transitions, OMG UML 1.3"
"/* Process the final list of internal transitions,         * and hook it to the state:         */"
// don't forget to remove old internals!
// Make next accesses to this instance predictable:
// and hook in the new ones:
// the ActionExpression
// let's look for a TimeEvent, ChangeEvent, CallEvent or SignalEvent
// operation(paramlist)
// the part after the || is for when there's nothing between the ()
"/* It is safe to give a null to the next function,         * since a statemachine is always composed by a model anyhow. */"
// else the empty s will do
"/*     * Return the ith element from a Collection.     *     * @param collection collection to get element from     *     * @param index index of the element to be returned     *     * @return the object     */"
// case 1 and 2
/*language*/
// when(...)
// signalname
// and parse the parameter list
"/* And hook it to the transition immediately,                 * so that an exception can not cause it to remain dangling: */"
/* Do nothing. */
"/*     * @see javax.swing.event.MenuListener#menuSelected(javax.swing.event.MenuEvent)     */"
/* Just change the time expression */
// we have an event without expression
"/* It's a time-event now,                         * but was of another type before! */"
/* Just change the ChangeExpression */
/* Create a new expression: */
"/*         * We can distinguish between 4 cases:         * 1. A trigger is given. None exists yet.         * 2. The trigger was present, and it is the same type,         * or a different type, and its text is changed, or the same.         * 3. A trigger is not given. None exists yet.         * 4. The name of the trigger was present, but is removed.         * The reaction in these cases should be:         * 1. Find the referred trigger (issue 5988) or create a new one, and hook it to the transition.         * 2. Rename the trigger.         * 3. Nop.         * 4. Unhook and erase the existing trigger.         */"
"/* The parsed text describes a change-event,                         * but the model contains another type! */"
/* Just change the Name and linked operation */
/* TODO: Change the linked operation. */
/* Just change the Name and linked signal */
// case 3 and 4
/* Do not check if the parameters match. */
/* No text. We may remove the literal. */
/* No non-white chars in text? remove literal! */
/* Heuristic algorithm: do not show stereotypes if there is no name. */
/* Great! The class already existed - just use it. */
/* If no base was typed, then only set the name: */
/* Only set the name if the base was found: */
//get the associationRole name
// Only instantiate when we need it.
"/* If the base is already set to this assoc,                      * then do not set it again.                     * This check is needed, otherwise the setbase()                     *  below gives an exception.*/"
// 2002-07-31 // Jaap Branderhorst // from here made visibility etc. configurable
//get the base association name
// and not association classes
// end of OCLEvaluator
// look for associations
//MAssociationEnd
//MParameter
"/*     * @see org.tigris.gef.graph.GraphListener#edgeAdded(org.tigris.gef.graph.GraphEvent)     */"
// The ocl toolkit does not like void return types
///////////////////////////////////////////////////////////////////////// // event handlers - MouseListener and MouseMotionListener implementation
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(     * java.lang.Object, org.argouml.cognitive.Designer)     */"
//MClassifier
// first search for appropriate attributes
//MOperation
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getSource()     */"
// ... and not incompletely imported
/* Query checking added 05/21/01, sz9 */
/* end class OCLExpander */
// skip first parameter == return type
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#getNotationProviderType()     */"
// Only look at classes...
// abstract classes are hardly ever singletons
// If there is an attribute which is not static => no problem
// Only look at classes
// Check for Singleton stereotype, uninitialised instance variables and // outgoing associations, as per JavaDoc above.
// Found no such attribute
// We only look at singletons
/* end class CrSingletonViolatedOnlyPrivateConstructors */
// NOTE: For historical reasons true == hide, so we need to invert // the sense of this
/* end class CrEmptyPackage */
"/* At this stage during loading, the diagrams are         * not created yet - so we have to store this name for later use. */"
//            pw.close();
// prevent no changes...
//project.setFile(file);
// for AndroMDA profiles
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */"
// Give the parser a map of model elements // keyed by their UUID. This is used to allocate // figs to their owner using the "href" attribute // in PGML.
// Create it [Here, OpaqueExpression which is the first // choice] // Note that if we edit the Initial value in the diagram // (double clic) // it was replaced by an OpaqueExpression
// If we get a 2nd error, just ignore it
// we have to give a message to user and set the system to unsaved!
// Should never happen - something's really wrong
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()     */"
//////////////////////////////////////////////////////////////// // main parsing methods
"/*         * @see java.io.InputStream#close()         */"
//boolean upgradeRequired = !checkVersion(fileVersion, releaseVersion)
// Upgrade is in the way for UML2 projects, so we turn it off in that case:
// Load .argo project descriptor
"/*     * @see org.argouml.cognitive.ToDoItem#select()     */"
// Load the rest
"/* There are 2 possibilities: either (1) we follow the traditional notation                  * philosophy, and set the tagged value to false, or (2) we restore to                  * the pristine situation and delete the taggedValue (whatever the                  * value was). I chose the latter (mvw).*/"
// first read the .argo file from Zip
// Keep reading till we hit the <argo> tag
// Get the version from the tag.
// Skip 1 lines
// Loop round loading the diagrams
//private EventListenerList listenerList = new EventListenerList();
// Keep reading till we get the left bracket of an opening tag
// Compare each following character to see // that it matches the tag we want
// We also want to match with the right bracket of the tag or // some other terminator
// Read the name of the child tag // and then reset read position // back to that child tag.
// Skip any whitespace till we should be on an equals sign.
// Skip any whitespace till we should be on a quote symbol.
"/*     * @see org.argouml.uml.cognitive.critics.WizMEName#doAction(int)     */"
// No other uses of string in PGMLHandler
"/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()     */"
// Handle other uses of <private> contents
// If any of the values are null, ignore the element.
/* || model == null */
"/** * Class to display graphics for a UML ObjectFlowState in a diagram.<p> * * The Fig of this modelElement may either represent the following UMLelements: * <p> * (1) an ObjectFlowState with a Classifier as type, or <p> * (2) an ObjectFlowState with a ClassifierInState as type. <p> * * In both cases (1) and (2), the Fig shows * the underlined name of the Classifier, * and in the latter case (2), it shows also the names of the states * of the ClassifierInState. <p> * * In the examples in the UML standard, this is written like<pre> *      PurchaseOrder *       [approved] * </pre> * i.e. in 2 lines. The first line is underlined, * to indicate that it is an instance (object).<p> * * The fact that the first line is underlined, and the 2nd not, is the * reason to implement them in 2 separate Figs.<p> * * TODO: Allow stereotypes to be shown. * * @author mvw */"
// For a match to be found, it has to have the same // owner, and the same long class name.
"/*     * @see org.argouml.ui.Clarifier#hit(int, int)     */"
// Create a new diagram wide settings block which is backed by // the project-wide defaults that we were passed
// Ignore non-private elements within FigNode groups
// Discard class name, x y w h
// The owner should always have already been set in the constructor
// happens when 'is' comes from a zip file
// continue with null stream, readDiagram(...) will take care of // it
// TODO: Localize these
"/* This would be solution (1):                  * Model.getExtensionMechanismsHelper().setDataValues(                 *      taggedValue, new String[] {""false""});                 */"
// If there is no dot then this must be a top level Fig and can be // assumed to be a FigNode.
// FigNodeModelElements should match here
// FigEdgeModelElements should match here (they have no // bounds)
// <model> is not used in current implementation
"/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()     */"
// Try-catch only the JarFile instantiation so we // don't accidentally mask anything in ArgoJarClassLoader // or processJarFile.
// Fall back to GEF's handling if we couldn't find an appropriate // constructor
//myWriter,
// Empty constructor
"/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(Object, Designer)     */"
// for compatibility with older format
"/*     * @see org.argouml.cognitive.critics.Critic#predicate( java.lang.Object,     *      org.argouml.cognitive.Designer)     */"
// Write out header section
// Note we assume members are ordered correctly already
// let's initialize the progressMgr
// Run through any stylesheet upgrades
"/*     * @see org.argouml.uml.cognitive.critics.WizMEName#makePanel(int)     */"
// Don't use systemId here or it will get opened in preference // to inputStream.
// UML 2.x files could also contain a profile model. // Try again with uml:Profile as main tag.
//                LOG.log(Level.FINE, "Finding children for " + o.getClass());
// let's update the progress
// If we're trying to load a file from a future version // complain and refuse.
"/*     * @see org.argouml.uml.cognitive.critics.UMLWizard#getNumSteps()     */"
"/* To be really sure, let's add the operation             * that is linked to the action in the model,             * too - if it is not listed yet.             * We need this, incase an operation is moved             * out of the package,             * or maybe with imported XMI...             */"
// Buffer containing characters which have been decoded from the bytes // in inBB.
// RegEx pattern for XML declaration and, optionally, DOCTYPE // Backslashes are doubled up - one for Java, one for Regex
// Convert from bytes back to characters
// rewind our character buffer
// Remove anything that matches our pattern
"/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementAdded(java.lang.Object)     */"
// Remove null characters at the end
// Reencode the remaining characters as bytes again
// and write them to our output stream
// Skip the <?xml... first line
// NOP
/* This is expected to be safe, don't add a try block here */
//cat.debug("Added ToDoItem: " + _headline);
"/*     * @see org.argouml.ui.explorer.PerspectiveManagerListener#addPerspective(java.lang.Object)     */"
"/*     * @see org.xml.sax.ContentHandler#startElement(java.lang.String,     *         java.lang.String, java.lang.String, org.xml.sax.Attributes)     */"
"/*     * @see org.xml.sax.ContentHandler#endElement(java.lang.String,     *         java.lang.String, java.lang.String)     */"
"/*     * @see org.xml.sax.ContentHandler#characters(char[], int, int)     */"
"/**     * Test creating modelelements from a given notation, and then      * re-generate the notation-string again, and check if they are equal.     * Some of these tests are not very usefulll,      * since they may fail on white space differences.      * TODO: White space should best be ignored.      */"
/* These strings match the XML element names in the argo.tee exactly. */
// The following is deprecated, but can never be removed to preserve  // backward compatibility with old project files
//////////////////////////////////////////////////////////////// // protected methods
// empty constructor
//////////////////////////////////////////////////////////////// // abstract methods
//////////////////////////////////////////////////////////////// // non-abstract methods
//e.g:org.argouml.uml.generator.ui.ClassGenerationDialog -> poseidon.jar
/* end class SAXParserBase */
// Stop UI interception
// Jaap Branderhorst 2002-23-09 added next lines to link // parameters and operations to the figs that represent // them
// possibly use the following instead //            MemberFilePersister persister = new DiagramMemberFilePersister();
//////////////////////////////////////////////////////////////// // class methods
/* end class XMLTokenTableBase */
// These are the file formats I know about:
"/* make sure this setting exists in the configuration file         * to facilitate changing: */"
"/*     * @see javax.swing.event.MenuListener#menuCanceled(javax.swing.event.MenuEvent)     */"
// Is row at top of screen?
"/* If the current property occurs a second time             * in the given list of properties, then skip it: */"
//////////////////////////////////////////////////////////////// // FileFilter API
// this check for files without extension...
/* end class XMLElement */
// for AndroMDA
/* Tested with fabricated XMI - OK. */
"/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(     *         java.lang.Object)     */"
// Thin bar to show current used
// Make sure the contents match what we expect
// load profile name
// changing the sequence only
// Yes, scroll up one row
"/*    * Get a list of UML metaclass names from the XMI document.    * <p>    * Though some of the DOM methods such as getAttributes    * may return null values under other conditions,    * in the context of this test    * and assuming a valid XMI file    * none should occur.    * <p>    * Hence there is no special checking for those abnormal    * cases, allowing the test to fail simply with a    * NullPointerException, with this comment indicating that    * either the input data is incorrect or the test needs    * to be improved.    */"
/* Testing: Works Ok. */
// if there is only one package in the model, // we should suppose it's the profile model, // if there is more than one, we take the ones // marked as <<profile>>
"/*                     * Now we have to see if any state in any statemachine of                     * classifier is named [name]. If so, then we only have to                     * link the state to c.                     */"
// load profile dependencies
/* Set up the property panels for critics: */
// We have our own UML2 profile, but it is not used. Instead, // by the following line the build-in eclipse UML2 standard // profile and primitive types implementation are used.
// Missing WFRs
// Association Class // 4.5.3.2 [1]
// Behavioral Feature // 4.5.3.5 [2]
/* TODO: Partly overlaps CrOppEndVsAttr. */
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALogicalExpressionTail(tudresden.ocl.parser.node.ALogicalExpressionTail)     */"
// UseCase // 4.11.3.5 [2]
// Classifier // 4.5.3.8 [5]
// DataType // 4.5.3.12 [1]
// Actor // 4.11.3.1 [1]
// Namespace // 4.5.3.26 [2]
// general
// UseCase // 4.11.3.5 [1]
// Actor // 4.11.3.1 [2]
"/* Tested OK, except in some cases, depending on the         * sequence of the EPs. Probably the implementation of         * ""forAll (x, y | ..."" does not cover all combinations. */"
// UseCase // 4.11.3.5 [4]
// UseCase // 4.11.3.5 [3]
// If there are more than one suitable operation, // then we pick the first one.
// ActionState // 4.13.3.2 [3] // Issue 715
// no default type for UML2
// the UML Profile is always present and default
// register the built-in profiles
// if an exception is raised file is unusable
// this profile could have not been loaded when // the default profile configuration // was loaded at first, so we need to do it again
// Nothing to delete if we couldn't get the packages
// If we found an old-style name, update it to the new package name
// Clean up our model and the extent that we read profile in to
// Make sure the names didn't change again
// //   if element is an AssociationEnd use //      the namespace of containing association //
// if one side is null, compare with the equality operator
// XXX: hypotheses for AFeatureCall: fwd = op, val = head
// XXX hypothesis: no time expression (inv)
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAConstraint(tudresden.ocl.parser.node.AConstraint)     */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAClassifierContext(tudresden.ocl.parser.node.AClassifierContext)     */"
// these operations are ok for lists too
// LOG.log(Level.FINE, "OCL FEATURE CALL: " + subject + ""+ type +""+ feature + "" // + parameters);
// XXX this should be done in CollectionsModelInterpreter // but it can't trigger another invokeFeature...
// /** //  * Logger. //  */ // private static final Logger LOG = //     Logger.getLogger(DefaultOclEvaluator.class.getName());
//LOG.log(Level.FINE, "OCL: " + ocl);
// propagate
"/*         * Although Operation and Signal are peers in the UML type          * hierarchy they share the attributes isRoot, isLeaf,          * isAbstract, and  specification. Concurrency is *not*          * shared and is specific to Operation.         */"
// if test is ok this element should not // be in the result set
// these operations are ok for bags too
/* 4.5.2.1 Abstraction */
/* 4.5.2.3 Association */
// Additional Operation 4.5.3.1 [1]
/* 4.5.2.5 AssociationEnd */
"/*     * @see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)     */"
// Additional Operation 4.5.3.3 [1]
/* 4.5.2.6 Attribute */
/* 4.5.2.8 Binding */
/* 4.5.2.9 Class */
/* 4.5.2.10 Classifier */
// TODO specifiedEnd??
/* 4.5.2.11 Comment */
"/* The ""show types"" defaults to TRUE, to stay compatible with older             * ArgoUML versions that did not have this setting: */"
/* 4.5.2.12 Component */
// Additional Operation in 4.5.3.9
// No, scroll down one row
/* 4.5.2.18 ElementOwnership */
/* 4.5.2.19 Enumeration */
/* 4.5.2.20 EnumerationLiteral */
/* 4.5.2.21 Feature */
/* end class CrTooManyTransitions */
// Additional Operation in 4.5.3.20
/* 4.5.2.23 Generalizable Element */
/* 4.5.2.26 Method */
// avoiding null names
// As extended by 4.6.2.2
// Additional Operations in 4.5.3.25
/* 4.5.2.29 Node */
/* 4.5.2.30 Operation */
// the method
/* 4.5.2.31 Parameter */
// Set the icon:
"/*     * @see javax.swing.Icon#getIconHeight()     */"
"/*     * @see java.awt.Component#getMinimumSize()     */"
// if location is null here the position of the new figNode is set // after in org.tigris.gef.base.ModePlace.mousePressed(MouseEvent e)
"/*     * Generates a string representation for the provided     * attribute. The string representation will be of the form:     *          visibility name [multiplicity] : type-expression =     *                          initial-value {property-string}     * Depending on settings in Notation, visibility, multiplicity,     * type-expression, initial value and properties are shown/not shown.     */"
/* 4.5.2.38 TemplateArgument */
/* 4.5.2.39 TemplateParameter */
/* end class CrTooManyOper */
/* 4.11.3.5 UseCase */
/* 4.5.3.2 AssociationClass */
"/* The operation allConnections results in the set of all                     * AssociationEnds of the AssociationClass, including all                     * connections defined by its parent (transitive closure).                     */"
"/* if curHandle.index is 0 or 2,             * the adjacent region is the previous region             * but if it is 5 or 7, the adjacent region is the next region.             * curHandle.index show which corner of the bound we are dragging.             */"
/* 4.6.2.3 Stereotype */
/* 4.6.2.4 TagDefinition */
/* 4.6.2.5 TaggedValue */
"/*     * @see org.argouml.kernel.ProjectMember#repair()     */"
// add adapters that do nothing for keyboard and mouse actions
// discard the event if its source is not from the correct type
// Guard against error conditions if climb search wasn't successful
// Sets the mouse cursor to hourglass mode
// Start receiving all events and consume them if necessary
// Activate the glass pane capabilities
// Stop receiving all events
// parameterlist is guaranteed to contain at least "("
// Deactivate the glass pane capabilities
// Sets the mouse cursor back to the regular pointer
// no initialization required
/* end class SpacerPanel */
"/* If dm is the top state of the statemachine, then it is              * not supposed to have outgoing transitions. */"
"/*     * @see java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer.DataFlavor)     */"
"/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.datatransfer.DataFlavor)     */"
/* end class ClClassName */
"/*     * @see org.argouml.uml.cognitive.critics.UMLWizard#setSuggestion(java.lang.String)     */"
"/*     * Called when the user has pressed Save. Performs ""Save"" in all Tabs.     */"
// Climb the component hierarchy until a RootPaneContainer is found or  // until the very top
/* end class SplashPanel */
"/*     * @see org.argouml.cognitive.ui.Wizard#canGoNext()     */"
// Add settings from the settings registry.
// keep track of the visible window associated w/the component // useful during event filtering
"/*         * Updates stereotype setting, adds all children per treemodel 'build on         * demand' design.         *          * @see         * javax.swing.event.TreeWillExpandListener#treeWillExpand(javax.swing         * .event.TreeExpansionEvent)         */"
// show a chooser dialog for the file name, only xmi is allowed
// If drop out, we're OK
// If a toolbar was requested, create an empty one.
// Make sure we got what we started with
// Increase width to accommodate all tabs on one row.
// TODO: Localize
/* end class TabText */
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatNamespace(java.lang.Object)     */"
// If a recursive call from setVisible(), just return
"/* We have to tell the settings tab in which project                     * the settings reside: */"
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *      TargetEvent)     */"
"/*     * @see java.util.List#indexOf(java.lang.Object)     */"
// We only request focus the first time we become visible
// Use Case
"/*         * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)         */"
// Handle the same as an explicit cancel
// defer work until fetched/visible
// Actor
// ------------- Rule management --------------
// slope of the line we're finding the normal to // is slope, and the normal is the negative reciprocal // slope is (p1.y - p2.y) / (p1.x - p2.x) // so recip is - (p1.x - p2.x) / (p1.y - p2.y)
// ----------- name -------------------------
// ------ all rules ----------
"/** TODO: factor out     *     * @param rule the rule to be added     */"
"/*         * @see javax.swing.event.TreeExpansionListener#treeCollapsed(         * javax.swing.event.TreeExpansionEvent)         */"
// Put the current pane in a scroll pane.
/* end class StylePanelFigText */
"/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#getProfile()     */"
// NOTE: These must stay in this order to match rendering styles
"/* We aren't able to resize neither the top bound             * from the first region nor             * the bottom bound from the last region.             */"
// The boundary box as held in the target fig, and as listed in // the // boundary box style field (null if we don't have anything // valid)
// Change the fill colour
// Change the line colour
// Can't do anything if we don't have a fig.
// Get the text in the field, and don't do anything if the // field is // empty.
// how to handle empty target lists? // probably the TabProps should only show an empty pane in that // case
// Parse the string as if // possible
// ignored - will never be called
// add preloading progress bar?
// JasonsThemes
// TODO: The src_visibility tag doesn't appear to be created // anywhere by ArgoUML currently
// TODO - lets pass in Project as a constructor argument
/* Listen to name changes in the path (useful for e.g. Package): */
/* Make up a default */
/*lafClass == null ||*/
// Set to the default LAF
/* top, left, bottom, right */
// Set a custom LAF
"/*     * @see javax.swing.JTree#fireTreeCollapsed(javax.swing.tree.TreePath)     */"
"/*     * @see javax.swing.JTree#setModel(javax.swing.tree.TreeModel)     */"
/* It looks better if the height increases, too */
// the model is changed - job done
// TODO: 10 and 120 were found by trial and error.  Calculate them.
//pack();
// Not localized:
/* end class AboutBox */
//These are the positions of child figs inside this fig //They must be added in the constructor in this order. //For now the name must not be last as this would force //zero width lines (until GEF is fixed)
// saves the project
"/*     * Return true if the given object is a valid node in this graph.     *     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */"
"/* MVW: We should use default font sizes as much as possible.         * BTW, this impacts only the width, and reduces readibility:         */"
"/* The stereoDim has height=2, even if it is empty,          * hence the -2 below: */"
// This enables tooltips for tree; this one won't be shown:
// ------------ methods that override JTree methods ---------
// with a name...
// Look for stereotype
// Use default formatting for any other type of UML element
// The event source is the stub state's referenced state // or one of the referenced state's path.
// ------------- other methods ------------------
/* Labels at the left ... */
// and when the class changes name:
/* ... and fields at the right. */
/* The user's full name: */
// Get the ends from the association (we know there are two), and the // types associated with them.
/* The user's email: */
/* The project description: */
"/* This non-editable field shows          * the version of the ArgoUML          * that last saved this project: */"
// There is no default description.
// Defer all work until we're actually needed
"/*     * @see org.argouml.cognitive.Critic#getCriticizedDesignMaterials()     */"
//////////////////////////////////////////////////////////////// // class accessors
// TODO: The following can be used when we drop Java 5 support or // when an ImageIO GIF writer plugin is bundled //            cmd = new SaveGIFAction2(Translator.localize("action.save-gif"));
// Leave logging commented out by default for efficiency //        LOG.debug("determine rendering for: " + value); //        LOG.debug("show icon: " + showIcon);
"/*     * @see org.tigris.gef.base.Cmd#undoIt()     */"
"/*     * @see org.argouml.application.api.ProgressMonitor#setMaximumProgress(int)     */"
//Accumulate a bounding box for all the Figs in the group.
//    private JCheckBox jchbBold = null;
"/*     * @see org.tigris.gef.graph.GraphListener#nodeRemoved(org.tigris.gef.graph.GraphEvent)     */"
//    private JCheckBox jchbItalic = null;
// Initialize font faces list
/* end class ActionCreatePseudostate */
// Most of this code originates from ActionOpenProject.
// Initialize font sizes list
"/*     * @see org.argouml.uml.ui.SourcePathController#deleteSourcePath(java.lang.Object)     */"
//////////////////////////////////////////////////////////////// // MouseListener implementation
// keep d even or odd, just like the line width:
"/*     * @see org.tigris.gef.graph.GraphListener#graphChanged(org.tigris.gef.graph.GraphEvent)     */"
"/*         * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()         */"
// Load project at slightly lower priority to keep UI responsive
"/*     * @see java.util.Collection#isEmpty()     */"
/* end class ProjectBrowser */
"/*     * @see org.argouml.uml.reveng.ImportCommon#isCreateDiagramsChecked()     */"
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getDestination()     */"
//////////////////////////////////////////////////////////////// // KeyListener implementation
//////////////////////////////////////////////////////////////// // ListSelectionListener implementation
// diagrams are not placed in search results
// no related
// now remove the ones already applied.
//TODO: tabs for class, state, usecase, help
// load of the new project // just reuse of the ActionOpen object
// empty implementation - we only handle mouseClicked
"/* The south panel always has tabs - but they are             * added (later) elsewhere.             */"
//Remove the element from Available List
// loads the project
"/*     * @see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)     */"
// default tab todo
// Special case for backward compatibility
// Add the path of the model to the search path, so we can // read dependent models
// Select prop panel if current panel is not appropriate // for selected target
"/*     * @see org.argouml.persistence.XmiFilePersister#isSaveEnabled()     */"
// not visible any more - so remove as listener
// update the previously selected tab
// The other tabs need to be updated depending on the selection.
"/*         * If center points are ""close enough"" we just adjust the endpoints         * of the line a little bit.  Otherwise we add a jog in the middle to         * deal with the offset.         *         * TODO: Epsilon is currently fixed, but could probably be computed         * dynamically as 10% of the width of the narrowest figure or some         * other value which is visually not noticeable.         */"
// we could check for base class of the stereotype but the // condition normally covers it all.
// TODO: Quick return here for target == null? - tfm
"/*     * @see org.argouml.uml.ui.SourcePathController#getSourcePath(java.lang.Object)     */"
"/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#setNamespace(java.lang.Object)     */"
"/* Remove duplicates and take care of getOwner()         * and remove nulls: */"
// If there is an outgoing association => no problem
// ---------------- listener management ----------------
"/* Since there are no buttons on this panel, we have to set         * the size of the buttonpanel, otherwise the          * title would not be aligned right. */"
// ------------- tree structure -----------------
// see getValue(), setValue()
"/*     * @see org.argouml.uml.diagram.ui.StereotypeContainer#setStereotypeVisible(boolean)     */"
//Create a timer.
// Mount the glasspane on the component window
"/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#propertyChange(java.beans.PropertyChangeEvent)     */"
// keep track of the glasspane as an instance variable
// The name. Width is the same as the cover, height is the default. // The text of the name will be centered by // default. In the same place as the stereotype, since at this stage // the stereotype is not displayed. Being a classifier role it is // underlined
/* end class StylePanel */
"/*     * @see org.argouml.persistence.MemberFilePersister#save(org.argouml.kernel.ProjectMember, java.io.OutputStream)     */"
//getContentPane().add(_menuBar, BorderLayout.NORTH);
"/*     * Calculate the insets for the *JTREE*, not the viewport the tree is in.     * This makes it a bit messy.     *     * @see java.awt.dnd.Autoscroll#getAutoscrollInsets()     */"
// allows me to ask "Do you want to save first?"
"/*     * Ok, we've been told to scroll because the mouse cursor is in our     * scroll zone.     * @see java.awt.dnd.Autoscroll#autoscroll(java.awt.Point)     */"
// Add listener for project changes
"/*     * @see org.argouml.model.ModelImplementation#getXmiWriter(java.lang.Object, java.io.Writer, java.lang.String)     */"
// Add a listener to focus changes. // Rationale: reset the undo manager to start a new chain.
// Load modules specified by a System property. // Modules specified by a system property is for // running modules from within Eclipse and running // from Java Web Start.
/* We get many many events (why?), so let's filter: */
// create the todopane
// If we delete a FigEdge // or FigNode we actually call this method with the owner not // the Fig itself. However, this method // is called by ActionDeleteModelElements // for primitive Figs (without owner).
"/*     * @see javax.swing.JFrame#getJMenuBar()     */"
"/*     * @see org.argouml.persistence.SAXParserBase#isElementOfInterest(String)     */"
"/*     * @see java.awt.Component#setVisible(boolean)     */"
// Toolbar boundary is the area between the menu and the status // bar. It contains the workarea at centre and the toolbar // position north, south, east or west.
"/*     * @see org.argouml.uml.diagram.ui.PathContainer#setPathVisible(boolean)     */"
// Add target listeners for details panes
"/*     * @see java.awt.dnd.DragSourceListener#dragEnter(java.awt.dnd.DragSourceDragEvent)     */"
// Convenience methods to return saved width and height values
// In theory there can be multiple details pane (work in // progress). It must first be determined which details // page contains the properties tab. Bob Tarling 7 Dec 2002
"/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */"
/* end class WindowCloser */
// the project changed
"/*     * North, South, West, East, South-West     */"
// update all panes
// this method is invoked from several places, so we have to check // whether if the project uri is set or not
// does the file really exists?
// project file doesn't exist. let's pop up a message dialog..
"/*     * @see org.xml.sax.EntityResolver#resolveEntity(java.lang.String,     *         java.lang.String)     */"
// ..and let's ask the user whether he wants to save the actual // project into a new file or not
// Eclipse UML2 implementation classes end with "Impl" //$NON-NLS-1$
// save action has been cancelled
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationAdded(org.argouml.application.events.ArgoNotationEvent)     */"
// Prompt the user for the new name.
// let's call the real save method
// Repair any errors in the project
// e.g. for an operation: // if pce.getSource() == modelElement // && event.propertyName = "parameter" //     if event instanceof AddAssociationEvent //         Get the parameter instance from event.newValue //         Call model to add listener on parameter on change //             of "name", "type" //     else if event instanceof RemoveAssociationEvent //         Get the parameter instance from event.oldValue //         Call model to remove listener on parameter on change //             of "name", "type" //     end if // end if
"/*             * notification of menu bar             */"
"/*     * Simulate some errors to repair.     * Replace with junits - Bob     */"
// Change to true to enable testing
// A Fig with a null owner
// A Fig with a null layer
// A Fig with a removed model element
// Let's save this project in the mru list
// Defer initialization until we're visible
"/*     * @see java.awt.dnd.DragSourceListener#dropActionChanged(java.awt.dnd.DragSourceDragEvent)     */"
// Let's save this project as the last used one // in the configuration file
//        uri = PersistenceManager.getInstance().fixUriExtension(theProjectUri);
"/*     * @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)     */"
// This is temporary. Load project // should create a new project // with its own UndoManager and so // there should be no Command
// Make sure save action is always reinstated
"/*     * @see org.argouml.application.api.ProgressMonitor#updateMainTask(java.lang.String)     */"
//filled in later
"/*         * @see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#setSelection(int)         */"
// ----- setup similar to the super() implementation -----
"/*     * @see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(     * javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int,     * boolean)     */"
// Make this change persistant
"/*	     * @see TargetListener#targetAdded(TargetEvent)	     */"
// If there is persistant state for this toolbar, respect it, // or add it to persistance data
// Queue to event thread to prevent race during close
// test an unknown file
// Add toolbar.
// Register popup menu with toolbar.
// these settings are needed to make the ProgressMonitor pop up early
"/*     * @see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)     */"
"/*     * @see org.argouml.notation.NotationName#sameNotationAs(org.argouml.notation.NotationName)     */"
"/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorChanged(org.argouml.application.events.ArgoGeneratorEvent)     */"
"/*     * @see org.argouml.uml.ui.SourcePathController#setSourcePath(     * java.lang.Object, java.io.File)     */"
"/*         * @see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#getDefaultSelection()         */"
"/*     * @see org.argouml.uml.reveng.ImportCommon#getImportLevel()     */"
// TODO: concatenate? - tfm // overwrite for now
"/*         * @see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#isSelected()         */"
/* end class StylePanelFigRRect */
// Let the parent do its refresh.
"/*     * @see org.argouml.uml.reveng.ImportCommon#isDiagramLayoutSelected()     */"
// lets redraw the box
"/*     * @see java.awt.Component#getPreferredSize()     */"
//     c.gridy = 0; //     c.gridx = 4; //     JLabel threeLabel = new JLabel("asd"); //     gb.setConstraints(threeLabel, c); //     _mainPanel.add(threeLabel);
"/*     * Called when the user selects a tab, by clicking or otherwise.     *     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */"
"/*     * @see org.argouml.uml.reveng.ImportCommon#isChangedOnlySelected()     */"
// We don't know what thread events will be delivered on, so make sure // we run Swing methods on the Swing thread
//This instead of the label ??? //displayPane.setBorder(new TitledBorder( //    Translator.localize("Display: ")));
// Eclipse UML2 implementation classes often start with "UML" //$NON-NLS-1$
// add in front of the others // add the label in front of the "pane"
// and finally, adjust the scrollbars to show the Fig
"/*         * @see         * javax.swing.event.TreeWillExpandListener#treeWillCollapse(javax.swing         * .event.TreeExpansionEvent)         */"
// % thresholds for bar color changes
// Record the changes in the instance variables of our parent, tell GEF // and trigger the edges to reconsider themselves.
// making it possible to jump to the modelroots
// Readonly class: no generalization, no association to self
"/*     * Timer action method.  Periodically update our stats and force a repaint.     */"
"/*     * @see org.argouml.cognitive.ui.WizStep#setTarget(java.lang.Object)     */"
// Virtual memory (heap) stats
// Thin bar to show current allocated heap size
//     c.gridy = 0; //     c.gridx = 1; //     JLabel offLabel = new JLabel("Off"); //     gb.setConstraints(offLabel, c); //     _mainPanel.add(offLabel);
// TODO: assumes public, user pref for default visibility? //do I have to check the namespace here? (Toby)
// how to handle empty target lists?  probably the // MultiEditorPane should only show an empty pane in that case
//TODO: qualifiers (e.g., const) //TODO: stereotypes...
//    private JPanel constraintsTab = new JPanel();
//The child is sometimes not found when the tree is being updated
//    private JTabbedPane tabs = new JTabbedPane();
//        tabs.setMinimumSize(new Dimension(300, 250));
"/*     * @see org.argouml.uml.reveng.ImportSettings#isCreateDiagramsSelected()     */"
//    private JPanel modifiedTab = new JPanel();
/* The ActivityGraph. */
//    private JPanel tagValsTab = new JPanel();
// open space at gridy = 2;
//        mainPanel.add(north, BorderLayout.NORTH);
"/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isDiagramLayoutSelected()     */"
// Any type
"/*     * @see java.awt.event.ActionListener#actionPerformed(     * java.awt.event.ActionEvent)     */"
"/*     * @see java.util.List#listIterator()     */"
// If this fails, then there is a problem... // dthompson 29/12/2008: It seems that the returned value is  // irrelevant here, so I assume that the purpose of this call // is just to throw an exception in case of a problem.
// This text is for the developers. // It doesn't need to be localized.
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */"
// These shouldn't really be <br> instead of <p> elements, but // the lines all get run together when pasted into a browser window.
"//        initConstraintsTab(); //        tabs.addTab(Translator.localize(""tab.constraints""), //		     constraintsTab); //        tabs.setEnabledAt(3, false);"
"/*     * @see tudresden.ocl.check.types.Type#navigateParameterized(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */"
//        initTagValsTab(); //        tabs.addTab(Translator.localize("dialog.find.tab.tagged-values"), //                tagValsTab); //        tabs.setEnabledAt(2, false);
/* Secondly we check the previous model structure: */
/* end class FindDialog */
// If we got back null we interpret this as meaning delete the // reference to the extension point from the use case, otherwise we set // the fields of the extension point to the values in newEp.
//name += " in " + dName;
// A string of the form "location". This will be confused by the // string ":", so we pick this out as an instruction to clear both // name and location.
// Set the name and icon:
//help tab is 0
"/** * Dialog box to list all critics and allow editing of some of their * properties. <p> * * TODO: supported goals, critic network. */"
// end runGC_actionPerformed()
/* end class PredicateMType */
"/* Follow well-formedness rule for a Class [2].                 * Determine the owning namespace for the statemachine: */"
//end updateInfo()
/* end class NavigatorPane */
// end copy_actionPerformed()
/* end class SystemInfoDialog */
// clean the history
"/*     * @see org.argouml.cognitive.Poster#expand(java.lang.String, org.argouml.cognitive.ListSet)     */"
"/* But exclude elements that enclose others,                      * since their algorithms to calculate the minimum size                      * does not take enclosed objects into account: */"
"/*     * @see org.argouml.uml.util.namespace.Namespace#getCommonNamespace(     *         org.argouml.uml.util.namespace.Namespace)     */"
// unsupported. 
"/*     * @see org.tigris.gef.base.ModeCreateFigPoly#createNewItem(java.awt.event.MouseEvent, int, int)     */"
"/* Only resize elements which the user would also be able             * to resize: */"
"/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isChangedOnlySelected()     */"
// Set the name:
// If location is non-null, convert to a rectangle that we can use
// let's load the default shortcut for every action
/* end class ActionFind */
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameBounds()     */"
// generate menu
// it should never go here!
// view menu
// file menu
"/*     * @see java.util.Collection#toArray()     */"
// align submenu
// edit menu
// create menu
// arrange menu
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(     * java.lang.Object, java.lang.Object)     */"
// help menu
/* This ID is used as DEFAULT_ID ! */
/* end class ActionAboutArgoUML */
// distribute submenu
"/*     * @see org.argouml.cognitive.critics.Critic#addSupportedGoal(org.argouml.cognitive.Goal)     */"
/* end class ActionPageSetup */
// Skip the 2 lines //<?xml version="1.0" encoding="UTF-8" ?> //<!DOCTYPE todo SYSTEM "todo.dtd" >
// trap focus traversal keys also 
// let's add the key printing logic
// Both lists have the same length.
// We've found the matching tag but do we have // the correct instance with matching attributes?
// If we drop out here, there was no match and we have no problem
// if a not-default current shortcut was added, then we have to // save it
"/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()     */"
// if the actual is not going to be saved, then try to remove it // (as it could have been cancelled)
// This pair of params where the same. Lets check the next pair.
// no modifiers - let's check if the key is valid
//// Method 1: //// (collect data and assign later in endElement() method). //Hashtable<String, String> ht = //    new Hashtable<String, String>(); //ht.put("classname", classname); //ht.put("figclassname", figclassname); //ht.put("ownerhref", ownerhref); //ht.put("angle", angle); //ht.put("offset", offset); //pathItemAttrs.add(ht);
// middle of shortcut 
// add last recently used list _before_ exit menu
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEmptyFeatureCallParameters(tudresden.ocl.parser.node.AEmptyFeatureCallParameters)     */"
// KeyStroke f7 = KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0);
// and exit menu entry starting with separator.
// This used to be deferred, but it's only 30-40 msec of work.
// now, let's set up the "selected action" container
// Get all the features (giving up if there are none). Then loop // through finding all operations. Each time we find one, we compare // its signature with all previous (held in collection operSeen),  // and then if it doesn't match add it to the collection.
// Add the help menu item.
// If the PathItemPlacement was unknown, leave the // diagram with the default settings.
"/*     * @see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)     */"
"/* Create the edit toolbar based on the Menu.             * All menuItems that have an Icon are presumed to             * be based upon an Action,             * and these Actions are used in the toolbar.  */"
// setHelpMenu(help);
// This code has to go within the startElement block after the strings // have been matched.
//Component or Action
// set maximum length of menu entry
"/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationProviderAdded(org.argouml.application.events.ArgoNotationEvent)     */"
//JMenuItem item = _fileMenu.add(new ActionReopenProject(filename));
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */"
// the text is used by the event handler for opening the project
// create all nessessary configuration keys for lru
// holds file menu
// text is short, tooltip is long
// read existing file names from configuration
// empty entry stops reading --> last line!
// this is the recent count
// delete all existing entries
"/*         * @see java.io.FileFilter#accept(java.io.File)         */"
// add new entry as first entry
// add other existing entries, but filter the just added one
// save count
// and store configuration props
"/*     * @see org.argouml.model.UmlHelper#addListenersToModel(java.lang.Object)     */"
/* end class ActionExit */
"/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String[])     */"
/* end class ActionHelp */
// instantiation not allowed
/* end class ActionPrint */
// let's add the table, inside a JScrollPane
// init from config // read number, write result as new default and prepare keys
// get already existing names from menu actions // real file names, not action names !
"/*     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String[])     */"
// let's enable the radiobuttons container
"/*     * Amount to increment Y position by for each node placed. We pack them     * densely on the assumption that the user is going to split them into at     * least two swimlanes.     */"
// updating the radiobuttons container's title
// let's select the correct radio button
"/*     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String)     */"
// no shortcuts --> NONE
// current shortcut == default --> DEFAULT
// customized shortcut --> CUSTOM
// update the values
// let's reload the shortcuts
"/*     * @see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)     *      * All methods below similarly override methods in CoreHelper.     */"
// saving shortcuts
// If the id does not look like a top-level Fig then we can assume // that this is an id of a FigEdgePort inside some FigEdge. // So extract the FigEdgePort from the FigEdge and return that as // the FigNode.
// if a shortcut has been select then we have to check if the actual // action is in conflict with other ones
"/*     * @see org.argouml.model.ModelEventPump#startPumpingEvents()     */"
// blanking the old action's shortcut.. // and now refreshing the table.
// re-selecting the old row, without changing the target - // and without throwing another ListSelectionEvent!
// give priority to standard documentation tag
// let's change the target
// We are looking first to match with 3 different constructor // types. We would not expect a Fig to have any mix of these. // Any constructor other than these should be deprecated so we // look for these first. // Fig(DiagramEdgeSettings, DiagramSettings) // Fig(Object, Rectangle, DiagramSettings) // Fig(Rectangle, DiagramSettings)
// duplicate shortcut not found; let's check for duplicates
// there's a duplicate: let's recheck if there is a conflict
"/*     * @see org.argouml.model.PseudostateKind#getDeepHistory()     */"
// updating the shortcut field
"/*     * @see org.argouml.model.ConcurrencyKind#getConcurrent()     */"
// updating the table data
"/*     * @see org.argouml.model.AggregationKind#getComposite()     */"
// the shortcut has already been assigned to another action!
// verify SnoozeOrder starts off not snoozed
// if the given object is a KeyStroke instance, then we ca
// let's update also the actions array
"/*     * @see org.argouml.model.ChangeableKind#getChangeable()     */"
"/*     * @see org.argouml.model.PseudostateKind#getChoice()     */"
"/*     * @see org.argouml.model.DirectionKind#getOutParameter()     */"
"/* The default nr of rows is 8,          * but since we have 9 perspectives by default now,          * setting to 9 is nicer. */"
"/*             * In UML 1.3, the name is the only place to store text.             * In UML 1.4, there is a body as well, but some tools             * still seem to use name.             */"
/* Check if multiple items are selected. */
// 1. a noneditable applied profile
// just no item added in this case
// DesignGoalsCM checks if the critic isRelevantToGoals of the Designer // this value is always true for the Critic base class so  // DesignerGoal should always return true in this condition
// 3. the editable unapplied profile
"/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)     */"
// end of profile section
// TODO: These should get replaced immediately by the creating // initialization code, but make sure we've got a default just in case.
// Can't delete last top level model
// check that the model was initialized with one goal
// Determine if only diagrams are in the target list.
"/*     * @see org.argouml.model.ConcurrencyKind#getGuarded()     */"
// "x nodes and x edges"
// Extra care to be taken since allPosters can be reset while // this method is running.
// test if this element can be contained by the target
"/*     * @see org.argouml.model.OrderingKind#getOrdered()     */"
// iterate through all possible model elements to determine which // are valid to be contained by the selected target
/* end class ActionAddExistingRelatedNode */
/* ... otherwise we select the item below the mousepointer. */
// the dialog is modal
// unimplemented - we only care about expanding
/* end class ExplorerMouseListener */
// fire all of the profile events
// does nothing.
// need to update the selection state.
// get the elements
// Block added by BobTarling 8-Jan-2002 Set the checkbox on or // off according to the SELECTED value of the action.  If no // SELECTED value is found then this defaults to true in order // to remain compatible with previous versions of this code.
// scan the visible rows for duplicates of // this elem and select them
// check which targetmanager method to call
"/*     * @see org.argouml.uml.diagram.ui.PathContainer#isPathVisible()     */"
// we must call the correct method on targetmanager // for each added or removed target
// we have to give a message to user and set the system // to unsaved!
// we can't remove the targets in one go, we have to // do it one by one.
// at the top // right bottom // left bottom
// Override superclass to do nothing. // Fill property cannot be changed.
"/*     * @see org.argouml.model.OrderingKind#getUnordered()     */"
"/*     * @see org.argouml.model.DirectionKind#getReturnParameter()     */"
"/*     * @see org.argouml.model.ActivityGraphsHelper#findClassifierByName(java.lang.Object, java.lang.String)     *     * all methods below similarly implement methods from ActivityGraphsHelper      */"
// remove the ones already selected (if a perspective is selected)
"/*     * @see org.argouml.model.AggregationKind#getNone()     */"
// add them
"/*     * @see org.argouml.model.ScopeKind#getClassifier()     */"
"/*     * @see org.argouml.uml.reveng.ImportSettings#getImportLevel()     */"
// update the label (which shows the number of rules)
"/*     * @see org.argouml.model.PseudostateKind#getFork()     */"
// must add an editable list of new ExplorerPerspective's // to the list model so that the original ones are not changed // in the case of a cancel action by the user.
"/*     * @see org.argouml.uml.reveng.ImportSettings#isMinimiseFigsSelected()     */"
// set the newly selected item in the library list
"/*     * @see org.argouml.model.AggregationKind#getAggregate()     */"
"/* The name of the UMLDiagram                  * represented by this node has changed. */"
// uml model events
// notation events
// Handle remove for non-UML elements (e.g. diagrams)
"/*         * Get the selected targets (UML ModelElements)         * from the TargetManager.         */"
"/** * To persist to and from zargo (zipped file) storage containing seperate * xmi, argo, plgml and todo zip entries. * @author Bob Tarling * TODO: Review use of this against ZargoFilePersister - Bob */"
// project events
/* 4.5.2.28 Namespace */
// get one of the default profile dirs, if available // (as a default value for the following save dialog)
// save profile
// register it as a user profile
// If LAF is Metal (either set explicitly, or as the default)
// load user perspectives
// get the perspective name
// make sure there are some rules...
// get the rules
// get the rule name
// create the rule
// rule name but no rules
//This method can be called only if //there's a valid selection //so go ahead and remove whatever's selected.
// add the perspective
// no user defined perspectives
// one last check that some loaded.
"/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()     */"
// works for both statediagram as activitygraph
// Enter here go rules only relevant for UML 2 // empty for now
"/*         * The drag gesture recognizer fires events         * in response to drag gestures in a component.         */"
//specifies valid actions
"/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *          org.argouml.ui.targetmanager.TargetEvent)     */"
// Eliminates right mouse clicks as valid actions
"/*         * Get the cell renderer (which is a JLabel)         * for the path being dragged.         */"
/* The layout manager would normally do this: */
"/*     * @see java.awt.dnd.DragSourceListener#dragDropEnd(java.awt.dnd.DragSourceDropEvent)     */"
// Get a buffered image of the selection for dragging a ghost image
"/*         * Now paint a gradient UNDER the ghosted JLabel text         * (but not under the icon if any).         */"
//        LOG.log(Level.FINE, "Slope = " + theta / Math.PI + "PI " //                + theta / Math.PI * 180.0);
/* Make the gradient ghostlike: */
"/*         * Remember the path being dragged (because if it is being moved,         * we will have to delete it later).         */"
"/*         * @see javax.swing.table.TableModel#isCellEditable(int, int)         */"
"/*         * We pass our drag image just in case         * it IS supported by the platform.         */"
"/** * Implements the source path controller. * NOTE: If requested in the future this could be returned from the language * modules. * * TODO: Update this to use the UML 1.4 TagDefinition mechanism instead of * UML 1.3 String type tag types. The TagDefinition can be made more specific * so that it just applies to Components with a <<sourceModule>> stereotype * or something similar. - tfm *  * @author euluis * @since 0.17.1 */"
/* If the destination is not a NameSpace, then abort: */
"/*     * @see org.argouml.uml.ui.ActionNewDiagram#createDiagram()     */"
/* If the destination is a DataType, then abort: */
"/*                     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)                     */"
/* We are sure "dest" is a Namespace now. */
"/*     * @see org.tigris.gef.util.ChildGenerator#gen(java.lang.Object)     */"
"/*         * Let's check all dragged elements - if one of these         * may be dropped, then the drag is valid.         * The others will be ignored when dropping.         */"
// remove the rule from the library list
// empty implementation - not used.
// Figure out which row we're on.
// If we are not on a row then ignore this autoscroll request
"/*     * @see org.argouml.ui.explorer.Relocatable#relocate(java.lang.Object)     */"
// Now decide if the row is at the top of the screen or at the // bottom. We do this to make the previous row (or the next // row) visible as appropriate. If were at the absolute top or // bottom, just return the first or last row respectively.
"/* Set up a hover timer, so that a node will be             * automatically expanded or collapsed             * if the user lingers on it for more than a short time.             */"
/*isRootPath*/
// Set timer to one-shot mode
"/** * This class is a temporary wrapper around the GEF UndoManager. * This will be changed when GEF is modified to create commands and * provide an observer interface for ArgoUML to receive them. * <p> * TODO: How does this relate to {@link org.argouml.kernel.DefaultUndoManager}? * * @author Bob Tarling */"
//            LOG.log(Level.FINE, "dragOver");
"/*     * @see javax.swing.Action#getValue(java.lang.String)     */"
"/*             * The next condition becomes false when dragging in             * something from another application.             */"
"/*                 * If a drag image is not supported by the platform,                 * then draw my own drag image.                 */"
/* Rub out the last ghost image and cue line: */
// Access methods for program infrastructure.
// Just rub out the last cue line
"/*             * In any case draw (over the ghost image if necessary)             * a cue line indicating where a drop will occur.             */"
// Retrieve an existing GlassPane if old one already exist or  // create a new one, otherwise return null
// And include the cue line in the area to be rubbed out next time
// types can probably contain operations, but we should not nag at them // not having any.
// to prohibit dropping onto the drag source:
// this element can be contained add a menu item // that allows the user to take that action
/* If the destination is not a NameSpace, then reject: */
"/* Prevent hover timer from doing an unwanted             * expandPath or collapsePath:             */"
/* Clear the ghost image: */
//get new parent node
// LOG.log(Level.FINE, //         "Adding resolution for: " + c.getClass() + " " + canCreate);
//get the model elements that are being transfered.
// conflict detected: showing a warning to the user, instead of // saving shortcuts
// Only accept COPY or MOVE gestures (ie LINK is not supported)
// We can not remove this and have the application manage things directly // based on the font, since only the names should be bold.
// Do this if you want to prohibit dropping onto the drag source...
// Make sure the correspondence that we depend on doesn't change
"/* Remove the dependent         * modelelements, such as the statemachine         * for a statechartdiagram:         */"
/* end class */
"/*     * For a deployment diagram, not just any     * namespace will do - we need a package.     */"
// remove references for gc
"/*     * Strip all characters out of <var>s</var> that could not be part of a     * valid Java identifier. Return either the given string (if all characters     * were valid), or a new string with all invalid characters stripped out.     * This allows automatic conversion of strings containing punctuation and     * spaces to a resource name that can be looked up.     */"
// This should only be helpful for old garbage collectors.
// Avoid doing this too early in the initialization process
"/*     * @see org.tigris.gef.base.ModeCreatePolyEdge#mouseReleased(java.awt.event.MouseEvent)     */"
// Avoid recursively updating the same child
// //  if one or the other is null or they are not equal
// Types don't need a constructor.
// null elements represent new constraints, which will be // added to the target the first time any actual editing // takes place.  This is done to ensure syntactical // correctness of constraints stored with the target.
"/*     * @see javax.swing.tree.DefaultTreeModel#removeNodeFromParent(javax.swing.tree.MutableTreeNode)     */"
// Enumerate the current children of node to find out which now sorts // in different order, since these must be moved
// Avoid our deinitialization here // The node will be added back to the tree again
// For each reordered node, find it's new position among the current // children and move it there
// Avoid our initialization here
// Collect the current set of objects that should be children to // this node
// Handle WeakExplorerNodes
// Remove the node from removeSet
// Remove obj3 from weakNodes and newChildren
"/* We need to fill the whole pane,          * so that the description field can          * take all available space: */"
// Add any remaining nodes
// it is the combo for "order"
// Order the new children, the dependencies cannot and // need not be ordered
"/*     * Only refresh the tab if the bounds propertyChange event arrives.     *     * @see org.argouml.ui.StylePanel#refresh(java.beans.PropertyChangeEvent)     */"
// TODO: What?
"/*     * @see org.argouml.ui.StylePanelFig#setTargetBBox()     */"
// Newly selected tab may have stale target info, so generate // a new set target event for it to refresh it
//was ""
// TabResults has really large preferred height, so divide in // half to reduce size of dialog which will be sized based on // this preferred size.
// the responsibility of determining if the given target is a // correct one for this tab has been moved from the // DetailsPane to the member tabs of the details pane. Reason for // this is that the details pane is configurable and cannot // know what's the correct target for some tab.
"/*     * @see org.argouml.ui.StylePanelFig#refresh()     */"
// abstractions are represented in the Inheritance Node.
// Only return once per diagram so we don't, for example, find // a class as a diagram element and also as a child of a package // which is on the diagram
//JTabbedPane tabs = new JTabbedPane(); //mainPanel.add(tabs, BorderLayout.CENTER); //tabs.addTab("All Diagrams", allDiagrams);
// the name of this instance of diagram
"/** * A Fig designed to be the child of some FigNode or FigEdge to display the * stereotypes of the model element represented by the parent Fig. * Currently, multiple stereotypes are shown stacked one on top of the other, * each enclosed by guillemets.<p> * * The minimum width of this fig is the largest minimum width of its child * figs. The minimum height of this fig is the total minimum height of its child * figs.<p> * * The owner of this Fig is the UML element that is extended * with the stereotypes. We are listening to changes to the model: * addition and removal of stereotypes. <p> * * This fig supports showing one keyword * as the first ""stereotype"" in the list. <p> * * There is no way to remove a keyword fig, once added. <p> * * TODO: Allow for UML2 style display where all stereotypes are displayed in * the same guillemet pair and are delimited by commas. The style should be * changeable by calling getOrientation(Orientation). The swidget Orientation * class can be used for this. * @author Bob Tarling */"
// --------------- tree nodes -------------------------
// Needs to happen after initialization is done & modules loaded
"/*     * @see org.tigris.gef.persistence.pgml.HandlerFactory#getHandler(     * HandlerStack, Object, String, String, String, Attributes)     */"
"/*         *  The string <code>log4j.configuration</code> is the         *  same string found in         *  {@link org.apache.log4j.Configuration.DEFAULT_CONFIGURATION_FILE}         *  but if we use the reference, then log4j configures itself         *  and clears the system property and we never know if it was         *  set.         *         *  If it is set, then we let the static initializer in         * {@link Argo} perform the initialization.         */"
// in UML2, some elements are not to be shown
// The reason the gui is initialized before the commands are run // is that some of the commands will use the projectbrowser.
// don't show a profile application
// don't show element imports in profiles
// don't show extensions in profiles
// don't show base_... properties in stereotypes
// Notify the user that the modules in the list that are selected // but not enabled were not possible to enable and that are not // selected that we cannot disable. // // Currently we just log this. // // TODO: We could eventually pop up some warning window. //
// "N/A" or "x nodes and x edges"
/* Also show unattached sequence diagrams: */
"/** * A subclass of JPanel that can act as a tab in the DetailsPane or * MultiEditorPane. Added functionality:<p> * * Spawning: When the tab is double-clicked, this JPanel will generate a * separate window of the same size and with the same contents. This is almost * like ""tearing off"" a tab.<p> * * TODO: Spawning of windows disabled in spawn()<p> * * Title: This JPanel keeps track of its own title.<p> * * Icon: This JPanel keeps track of its own icon; i.e. an arrow pointing to * the panel that it gives details of.<p> * * Orientation: This JPanel is Orientable.<p> * * Cloning: This JPanel may be cloned.<p> * * This class used to be named TabSpawnable. * Renamed since it is not a Tab, but a Panel, and being spawnable is * not any more its main purpose. */"
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCall(tudresden.ocl.parser.node.AFeatureCall)     */"
// Transition
"/* Disabled since it gives various problems: e.g. the toolbar icons         * get too wide. Also the default does not give the new java 5.0 looks.        SwingUtilities.updateComponentTreeUI(SwingUtilities.getRootPane(this));        */"
// TODO: what?
// Todo: What?
"/*     * @see org.argouml.model.VisibilityKind#getProtected()     */"
// org.argouml.ui.TabTable // TabMetrics // TabJavaSrc | TabSrc // TabUMLDisplay // TabHash
// If nothing selected, go to last selected target
"/*     * @see java.awt.Component#getSize()     */"
// Needed for Argo startup :-(
"//	targets.remove(target);"
//        JPanel north = new JPanel(); //        north.setLayout(new BorderLayout()); //        north.add(tabs, BorderLayout.CENTER);
// Utilities usually do not require a constructor either
// Some subclasses will try to use this
// let's load the current shortcut from the configuration (as a string)
// implement set-like behaviour. The same element // may not be added more then once.
// cannot break here since an object can be multiple // times in history
// FigClass calls setBoundsImpl before we set // the stereotypeFigProfileIcon
// CommentEdge - the owner of a FigEdgeNote
// Write any left over bytes in the input buffer // (perhaps from a partially decoded character)
// check if there are new elements in the list // if the old and new list are of the same size // set the oldTargets to the correct selection
// If not found, try the parent namespace
// Listen for the removal of diagrams from project
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEnumLiteral(tudresden.ocl.parser.node.AEnumLiteral)     */"
// Figs on a diagram without an owning model element
/* end class DocumentationManager */
// TODO: Needs localization
/* end class ChildGenRelated */
// adds all stereotypes defined at the top level namespaces
// and now remove them
// The creation of the actual GUI elements is deferred until // they are actually needed. Otherwize we have problems // with the initialization.
// collect the to be removed stereotypes
"/*             * We preserve the current (multiple) selection, if we are over part             * of it ...             */"
// the name of this type of diagram
// add stereotypes
// Loop through each element in the namespace, recursing.
// Check to see if all targets are classifiers // before adding an option to create an association between // them all
// Instance
// For all other model elements, return any elements // associated in any way
// target may appear multiple places in the tree, so // we don't stop here (but it's expensive to search // the whole tree) - tfm - 20070904 // targets.remove(t); // break;
// adds all stereotypes defined at the profiles applied // to the current project
//////////////// // TableModel implementation
// the name of this type of ModelElement
"/*         * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)         */"
// the name of this instance of ModelElement
// the name of the parent diagram instance
// not safe to presume the destination is the comment
// this also sets the target as a convenient side effect
"/*     * The NotationProvider for the ClassifierRole. <p>     *      * The syntax is for UML is:     * <pre>     * baselist := [base] [, base]*     * classifierRole := [name] [/ role] [: baselist]     * </pre></p>     *      * The <code>name</code> is the Instance name, not used currently.     * See ClassifierRoleNotationUml for details.<p>     *     * This syntax is compatible with the UML 1.4 specification.     */"
// This is the tooltip of a comment link
"/*	 * @see java.io.FileFilter#accept(java.io.File)	 */"
// Class
"/*         * @see javax.swing.event.TreeExpansionListener#treeExpanded(         * javax.swing.event.TreeExpansionEvent) Updates the selection state.         */"
// Association
// Attribute
// If we have no source and dest connector then we assume this is // load of an old UML1.4 diagram from before this data was saved // in PGML. For UML1.4 we can assume the source is first connection // and destination is last connection stored in repository for this // association.
// State
// First argument:  Component to associate the target with // Second argument: DropTargetListener
// Operation
// Interface
// Link
"/*     * @see java.lang.Throwable#printStackTrace()     */"
"/*         * If requested height equals needed height then do nothing; it fits         * exactly.         */"
// replace all occurances of OFFENDER with the name of the // first offender
"/*         * Ask the cell renderer to paint itself into the BufferedImage.         * Make the image ghostlike.         */"
// check for all uppercase and/or mixed with underscores
//umlReserved.add("file");
//umlReserved.add("node");
"/*         * MVW: These are the WFRs for DataType:         * [1] A DataType can only contain Operations,         * which all must be queries.         * self.allFeatures->forAll(f |         *  f.oclIsKindOf(Operation) and f.oclAsType(Operation).isQuery)         * [2] A DataType cannot contain any other ModelElements.         *  self.allContents->isEmpty         *  IMHO we should enforce these WFRs here.         *  ... so it is still possible to copy or move query operations,         *  hence we should allow this.         */"
//umlReserved.add("send");
"/* The modelelement must have been                 * deleted - ignore this - it will pass. */"
// self.allConnections->forAll(ar|ar.participant <> self)
/* end class CrCircularAssocClass */
"/*     * @see org.argouml.uml.diagram.ui.VisibilityContainer#isVisibilityVisible()     */"
/*(MAttribute)*/
//clear out queues! @@@
// Copy returned parameters because it will be a live collection for MDR
"/*         * @see java.awt.dnd.DropTargetListener#dragEnter(java.awt.dnd.DropTargetDragEvent)         */"
// If the name is only underscores
// This is somewhat inconsistent with the design of the constructor // that receives the root object by argument. If this is okay // then there may be no need for a constructor with that argument.
"/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     *      int, int)     */"
"/*     * @see org.argouml.uml.diagram.ui.VisibilityContainer#setVisibilityVisible(boolean)     */"
"/*     * @see javax.swing.tree.DefaultTreeModel#insertNodeInto(javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int)     */"
//umlReserved.add("copy"); //umlReserved.add("create");
/* end class ClAttributeCompartment */
// Remember that children are not TreeNodes but UserObjects
// check whether constant, constants are often weird and thus not a // problem
// why are we here?
// If the classifier does not have a name, // then no problem - the model is not finished anyhow.
// added by Eric Lefevre 13 Mar 1999: we must check if the // FigText for attributes is drawn before drawing things // over it
// Abstract elements do not necessarily require associations
"/*         * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object)         */"
// added by Eric Lefevre 13 Mar 1999: we must check if the // FigText for operations is drawn before drawing things // over it
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAStringLiteral(tudresden.ocl.parser.node.AStringLiteral)     */"
// special cases for use cases // Extending use cases and use case that are being included are // not required to have associations.
// for use cases we need to check for extend/includes // actors cannot have them, so no need to check
// The association that triggered the critic. Its just possible the // association is no longer there, in which case we return null
/* end class ClOperationCompartment */
// Now create the five options
// in UML2, we don't want to see element imports in profiles
// Get the names of the two ends. If there are none (i.e they are // currently anonymous), use the ArgoUML convention of "(anon)" for the // names
// Default (any other step) is to return nothing
// Set the appropriate aggregation on each end
"/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object)     */"
// Start is a composite aggregation of end
// Start is a shared aggregation of end
// End is a composite aggregation of start
// End is a shared aggregation of start
// No aggregation
"/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#addEnclosedFig(org.tigris.gef.presentation.Fig)     */"
// Someone took our association away.
// First get the collection of ElementResidence
// Can't finish if our parent can't
// Can finish if it's step 0
// Can finish if we're on step1 and have actually made a choice
// Otherwise we can't finish
// TODO: The WFR doesn't restrict this to Classifiers - tfm
"/*     * Performs critique asap.     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */"
"/*         * @see java.awt.dnd.DropTargetListener#dragExit(java.awt.dnd.DropTargetEvent)         */"
"/* If the script of the Action is empty,             * (or only specifies arguments and no method name)             * then we generate a string based on             * a different model element: */"
//     umlReserved.add("initial"); //     umlReserved.add("final"); //     umlReserved.add("fork"); //     umlReserved.add("join"); //     umlReserved.add("history");
// check if there is no OCL_END; if so, the critic expression // is not correct and can not be expanded
"/*     * @see org.argouml.uml.diagram.layout.LayoutedEdge#layout()     */"
//////////////////////////////////////////////////////////////// // display related methods
// Create a different client to bind to the same supplier
/* end class CrInterfaceAllPublic */
// return original string if no replacements made
// Types can probably have associations, but we should not nag at them // not having any. // utility is a namespace collection - also not strictly required // to have associations.
// If we drop out there is no problem
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#isStandalone()     */"
// Only look at associations
"/*     * @see org.tigris.gef.graph.GraphFactory#makeGraphModel()     */"
/* end class CrCrossNamespaceAssoc */
//TODO: different critic for packages consisting only //of references to elements of other packages?
// The next AssociationEnd, and its classifier. Check the // classifier is in the namespace of the association. If not we // have a problem.
// original class was not abstract
"/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAUnaryUnaryExpression(tudresden.ocl.parser.node.AUnaryUnaryExpression)     */"
// Nothing to do.
// //   see if there is already an element with the same name //
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getWeight()     */"
/* end class CrClassMustBeAbstract */
/* end class CrUselessAbstract */
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getRank()     */"
/*(MClassifier)*/
// found a concrete subclass
"/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getTypeOrderNumer()     */"
/* end class CrTooManyAssoc */
/* end class CrUselessInterface */
/* end class CrComponentInstanceWithoutClassifier */
// Check that the parameter lists match.
/* end class CrTooManyClasses */
// utility is a namespace collection - also not strictly // required to have operations.
"/*     * @see org.tigris.gef.base.Diagram#setName(java.lang.String)     */"
// We don't consider secondary stuff.
"/*     * @see org.tigris.gef.graph.MutableGraphModel#containsNode(java.lang.Object)     */"
//        newEdge.setDiElement( //            GraphChangeAdapter.getInstance().createElement(gm, edge));
/////////////////// End GEF methods ////////////////////////
// not allowed
// return;
// TODO: Comments are on Element in UML 2.x
// There is a constructor.
"/*     * Create a diagram.  This 4-arg version is only for internal use.  The     * 'namespace' argument is deprecated and not used in the new APIs.     */"
"/*     * @see ProfileModelLoader#loadModel(ProfileReference)     */"
// This shouldn't be possible, but just in case
/* end class CrTooManyStates */
// Create the UML connection of the given type between the // given model elements. // default aggregation (none)
// Commentlinks for comments. Iterate over all the comment links // to find the comment and annotated elements.
// The connection is not valid unless both nodes are // in this graph model.
// yeah right...we don't have an operation (and thus no
// *IMPORTANT* - These MUST remain in order!
// Check that the names match.
// singleton, no instantiation
"/*     * The special value <code>null</code> is used internally to indicate that     * the default value should be inherited from the next level of settings.     */"
// Both lists have the same length
// Repeat until no faults are fixed
/* Diagram appearance settings with project scope: */
// If the array hasn't been flagged to indicate otherwise // swap elements the elements and add again.
/* Some cached fonts based on the above settings */
// If we've got a local (uninherited) font name or size or if we've got // no parent to inherit from recompute our cached fonts
// types can probably have variables, but we should not nag at them // not having any.
// Listen for name changes so we can veto them if we don't like them
"/*     * @see org.argouml.model.ModelEventPump#stopPumpingEvents()     */"
// get all the classes from the diagram
// only classes with name need a constructor
"/*     * @see org.tigris.gef.base.Command#execute()     */"
// The report
// If we find an instance variable that is not a constant // we have succeeded
// de-selects the fig minimising & layout // if we are not creating diagrams
// We can give up looking if we've hit both criteria
/* end class CrNoInitialState */
// If we drop out we didn't meet both criteria, and all is well.
// 2. Make sure that all Figs are visible
"/*     * Create chooser for objects we are to import. Old style modules get to     * provide their own (although I don't believe any of them do), while new     * style modules get the a chooser provided by us (which matches what the     * abstract class FileImportSupport used to provide).     */"
// 1. Make sure all Figs in the Diagrams layer refer back to // that layer.
// maybe we have a modelelement that is part of some other // fig
// Register for notification of any global changes that would affect // our rendering
// 4. Make sure all FigNodes and FigEdges have an owner // The report
// 3. Make sure all FigEdges are attached to a valid FigNode // The report
// 5. Make sure all FigNodes and FigEdges have a valid owner // The report
// Do nothing, override in subclass.
// If we haven't succeeded in getting a namespace then abort
// This should always be true, but just in case...
"/*     * The diagram to be laid out.     */"
"/*     * Point at which to start layout (initial state goes here). The X     * coordinate must be greater than half the width of the widest figure to     * be placed (because figures are centered on this location).     */"
"/*     * FinalState element for ActivityDiagram     */"
// Find our Initial State
// Place all the nodes
// Place the final state last with a little separation
// get the first editable extent (which is OK unless there is more // than one editable extent)
// If we're trying to set the namespace to the existing value // then don't do any more work.
//        figClone.seperator = (FigLine) it.next();
//Needed for project deletion
// we want to maintain a minimum size for the partition
// TODO: midpoints for side handles
/* We removed the last partition, so now remove the pool, too: */
// no action required in case of veto on setName
// This test needed for project deletion
// TODO: side handles
"/* Listen to activitygraph deletion,         * delete this diagram. */"
//////////////////////// // actions for toolbar
// no action required
/* The namespace of the activitygraph is changed! */
"/*     * The space between the 2 text figs is: PADDING.     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */"
"/* TODO: We may return the following when the         * relocate() has been implemented.         */"
"/* TODO: We may return something useful when the         * relocate() has been implemented. */"
// register for events from the type
// Create a map of partitions keyed by x coordinate
// Sort the x coordinates into order
// the state name
// If the layer is null, then most likely we are being deleted.
"/* Don't listen to all property names             * We only need to listen to its ""type"", and ""remove"". */"
/* the height of the blank space above and below the text figs: */
// and listen to name changes of the submachine
// both have the same settings
// both have the same owner
// add them back to front
// Let our superclass sort itself out first
// add the listeners to the newOwner
/* Set up the property panels for activity diagrams: */
// overrule the single-line name-fig created by the parent
//setBlinkPorts(false); //make port invisible unless mouse enters
/* TODO: Do we need to clone the stereotype(s)? */
/*(MGeneralization)*/
// the width needs to be > the height
// TODO:?
"/*     * Add the given edge to the graph, if valid.     *     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */"
// The stereotype. Width is the same as the cover, height is its default // (since the font is not yet set). The text should be centered.
//throws PropertyVetoException
/* end class CollabDiagramGraphModel */
// In the rather unlikely case that we have no name, we give up.
// The big port. Color of the big port is irrelevant
// The cover. 
/* At least one stereotype is visible */
// Remember where we are at present, so we can tell GEF later. Then // check we are as big as the minimum size
// Set the bounds of the bigPort and cover
// Work out the padding each side, depending on whether the stereotype // is displayed and set bounds accordingly
// singleton
//this one behaves differently, hence seperated:
/* end class FigAssociationRole */
// the figs that make up this group
// _x = first.getX(); // _y = first.getY();
/* Set up the property panels for collaboration diagrams: */
// this is neat...
/* Set up the property panels for deployment diagrams: */
////////////////////////////// // Getters for plugin modules: //////////////////////////////
// so it still looks like a cube
//_bigPort.setBounds(x+1, y+1, w-2, h-2);
// nothing extra to do currently
/* end class PredIsStartpackage */
/* end class StateDiagramGraphModel */
// Don't do it for comment.
/* (MElementImport) */
/* (MTransition) */
/* If a UML object is found, you can not remove selected elms. */
// check parameter types:
/* If nothing is selected, then not allowed to remove it. */
"/*     * The returned list of Figs is sorted according layout: from top to bottom.     */"
/* If only Figs without owner are selected, then you can remove them! */
/* end class PredIsFinalState */
/* This presumes that the layer is set after the owner: */
/* We only handle the case where a region has been removed: */
"/*If it is concurrent and contains concurrent regions,        the regions are resized*/"
"/* None of the menu-items below apply         * when multiple modelelements are selected:*/"
// do we need to 
//The event source is the owner stub state
/* end class FigCompositeState */
/*The event source is the submachine state*/
// ignored - fixed rendering
//////////////////////////////////////////////////////////////// // Event handlers
/* The submachine has got a new name*/
// This indicates a change in association, not name - tfm
//All states in the new reference state's path are added // as listeners
// The source was the referenced state that has got // a new name.
// ignored - rendering is fixed
//The old submachine container is deleted as listener
// The Referenced State or one of his path's states has got // a new name
//The new submachine container is added as listener
//All states in the old reference state's path are deleted // as listeners
// Translate any old style sequence diagrams
// Translate any sequence diagrams create with any previous svn // work in progress
// Get the first existing FigNode and if it exists set the // y position and height of _pers to be the same as it.
// ignore mouse clicks
"/* This assert fails for the TestPropertyPanels,          * file GUITestPropertyPanels.zargo: */"
//assert  w == h;
// The Machine State has been deleted from model
/* Ignore w and h from here on. */
// leave some space below the "include"
// File load/save gets done on a background thread, so we'll  // probably have to queue this to the Swing event thread
"/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */"
// and the parameter of its operations
// noop - fixed rendering
// There are no regions so create one and // place the vertex there.
//setBlinkPorts(false); //make port invisble unless mouse enters
// there can only be one
/*The group must be resized if a text field exceed the bounds*/
"/*         * A Concurrent region cannot have incoming or outgoing transitions so         * incoming or outgoing transitions are redirected to its concurrent         * composite state container.         */"
//cat.debug("NOTE: TodoParser handleStartTag:" + e.getName());
"/*     * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)     */"
// or just the owner?
"/* Listen to machine deletion,         * to delete the diagram. */"
// this in case we are being deleted
/* The namespace of the statemachine is changed! */
/* Set up the property panels for statechart diagrams: */
//MModelElement modelElement = elementImport.getModelElement();
// top of the hierarchy is ME:
// then Generalizable Element
// then Classifier & Package
// navigable.... only want incoming
// then Classifier
// cast the params
//set the new end type!
// rerouting the destination:
// rerouting the source:
// empty at the moment
// move down
// move more right
// move left
// use left and right, up and down
// the amount of the "sidestep"
//LOG.debug(result + " node1: " + this + ", node2 " + node);
// split = //     (split == null || split.isStandalone()) ? node : split;
// (xOffset - curW) / 2;
// Element is allowed, but only NamedElement can return nonempty list
/* end class ActionGotoDiagram */
// Link does not exist in UML2
"/*     * Text group to contain name & stereotype     */"
/* end class FigLink */
/* Stereotype covers NameFig: */
/* Compartments from top to bottom: */
// by default, do not show operations nor attributes:
// We're going to change the name immediately, so just use ""
// TODO: place comments near connected classes // TODO: place from middle towards outer edges? (or place largest // groups first)
//        boolean hasPackages = false; // TODO: move "package in row" to NodeRow
//        initPreinitialize(); //        initializeSubsystems(new SimpleTimer(), null); //        ArgoFrame.getInstance().setVisible(true);
// since UML2, this must appear before the isAClass clause
// this rectangle marks the operation section; all operations // are inside it
// 2nd compartment, so adjust Y appropriately
// Visibility ...
// Collect the set of model elements that we want to listen to
/* check if any stereotype is defined */
// and its features
// Modifier ...
// Add ...
// There are 2 boxes showing lines: the tab and the body.
/* This populates the stereotypes area: */
// else nothing changed
// On uniprocessors wait until we're sure the splash screen // has been painted so that we aren't competing for resources
/* we got at least one stereotype */
// the user wants to hide them
// If we have any number of stereotypes displayed, then allow // some space for that (only width, height is included in nameFig):
// take into account the tab is not as wide as the body:
// we want at least some of the package body to be displayed
// And now aSize has the answer
// Save our old boundaries (needed later), and get minimum size // info. "aSize" will be used to maintain a running calculation of our // size at various points.
// The new size can not be smaller than the minimum.
// Now sort out the stereotype display. If the stereotype is displayed, // move the upper boundary of the name compartment up and set new // bounds for the name and the stereotype compartments and the // stereoLineBlinder that blanks out the line between the two
// -1 for 1 pixel overlap
// set bounds of big box
"/* The figPoly is located at the right edge of the nameFig.             * The nameFig size is such that it at least fits its text,             * and the figPoly next to the text.             * Making the package bigger, causes the figPoly to stick to             * the right edge.*/"
// Now force calculation of the bounds of the figure, update the edges // and trigger anyone who's listening to see if the "bounds" property // has changed.
/* Only show the menuitems if they make sense: */
/* save first */
/*while*/
// and its stereotypes
"/* Try to create a new class diagram.                     */"
/*if package */
/* if doubleclicks */
/* change prefix */
/* end class FigPackage */
/* end class StylePanelFigPackage */
// In the DeploymentDiagram there are no Generalizations
// Self-association isn't draggable
/* end class StylePanelFigInterface */
// No Generalizations on Deployment Diagram
// Use super because not fully init'd
// And now add listeners to them all:
"/* The next line is needed so that we have the right dimension         * when drawing this Fig on the diagram by pressing down         * the mouse button, even before releasing the mouse button: */"
// Set the bounds of the figure to the total of the above
// If moved into an Package
"/* Testing: Add a parameter to an operation on an Interface.                         * Does the Interface Fig adapt its width? */"
/* Set up the property panels for class diagrams: */
// The figure that holds the text of the note.
// Get the size of the text field.
//parse the text that was edited
// Resize the text figure
// resize the FigNode to accomodate the new text
// Not used, do nothing.
// Resize the big port around the figure
// The text element has no border, so the line color doesn't matter.
// The text is always opaque.
/*? 2*LINE_WIDTH? */
"/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel,     *         org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)     */"
// Make a seamless integration of the text // in the note figure.
//////////////////////////////////////////////////////////////// // user interaction methods
//////////////////////////////////////////////////////////////// // accessor methods
// If we have a stereotype displayed, then allow some space for that // (width and height)
// And add the gaps around the textfield to get the minimum // size of the note.
// Just move the corner to it's new position.
/////////////////////////////////////////////////////////////////// // Internal methods
// all connected edges
// Only adjust the stereotype height if we are not newly // created. This gets round the problem of loading classes with // stereotypes defined, which have the height already including // the stereotype.
// Whatever happened we are no longer newly created, so clear the // flag. Then set the bounds for the rectangle we have defined.
/* end class StylePanelFigClass */
// TODO: get tip string from comment
/* This one is still usable, so let's retain it, */
"/*     * @see org.tigris.gef.presentation.FigEdge#setSourceFigNode(org.tigris.gef.presentation.FigNode)     */"
// element will normally be null when called from PGML parser // It will get it's source & destination set later in attachEdges
// unimplemented
"/* Alternatively, we could just return null here,          * so that you can not create a comment just          * linked to a comment this way - which is a bit uncommon,         * but not illegal, so for consistency, we better allow it.          */"
//        return null;
"/** * Class to display a Stereotype declaration figure using * Classifier box notation.<p> * * TODO: This is just a place-holder right now! - tfm * This needs to show tags and constraints. */"
// Add...
// Show ...
// register for tagDefinitions:
/* TODO: constraints, ... */
"/*     * @see javax.swing.AbstractAction#isEnabled()     */"
// avoid GEF calcDrawingArea bug when nothing in a diagram.
// No generalizations in Deployment Diagrams
// the diagram image data
// copy the gif image to the clipboard
// hide grid, otherwise can't see anything
//        bigPort.setFilled(f);
// background color.
// 2 Pixel padding after compartment
// Set up hide all / show all
// Perform the action
// Only the bigPort may be filled
/*?LINE_WIDTH?*/
//see parent
// We remove all of them:
/* but its position may have been changed: */
// bounds not relevant here, but I am perfectionist...
"/* We need to set a new notationprovider, since                 * the Notation language may have been changed:  */"
// add it again (but now in the right sequence)
// Now put the text in // We must handle the case where the text is null
/* Find the compartment fig for this umlObject: */
// Override superclass to do nothing. // Line width cannot be changed.
// Override superclass to do nothing. // Line width property cannot be changed.
// aggregation
/* end class ActionSrcMultOneToMany */
// TODO: set font?
// to circumvent too many registered listeners
// this shortcut was already been assigned to another action; // let's pop-up a message for the user
// ending editing
// USED BY PGML.tee
// Actually return the FigEdge that the FigEdgePort is part of.
//            throw new IllegalArgumentException();
// updating the actions
/*Here the actions to divide a region*/
"/* The 1st region has an invisible divider line                 * (the box is always invisible): */"
"/* Throw out any previous elements that were                 * enclosed but are not a concurrent region;                 * let's move them onto the first region: */"
//linewidth?
/* The divider line should be visible, so no need to change its color. */
/* Make the composite state 1 region higher: */
// Look for the dashed edge
// We have the dashed edge now find the opposite FigNode
/* Prevent triggering too many events by setName(). */
// not???
// Do nothing    
// Do nothing        
// Consume to stop other modes from trying to take over
// marker interface only
// or vice versa?
// Provide feedback to the user that their name was // not accepted
/* Do not show border line, make transparent: */
//cleanup of unused FigText's
// TODO: This doesn't do anything special with keywords. // They should probably go first.
//There is one fig more in the group than (stereotypes + keyword):
// The keyword fig already exists.
// bounds not relevant here
// The stereotype fig already exists.
// remove all stereotypes that have a graphical icon
//TODO: check!
//set new bounds for all included figs
// StylePanelFigClass relies on getPanelTarget() to return a  // FigCompartmentBox
// Get class box, because we will set it's bounding box
// Get class box, because we will set it's bounding box in text field
// The keyword fig does not exist yet. // Let's create one:
// keywords which look like a stereotype (e.g. <<interface>>) have // no owner
// if there are no stereotypes, we return (0,0), preventing // double lines in the class (see issue 4939)
/* end class StylePanelFigAssociationClass */
/////////////////////////////////////////////////////////////////////////// // // Constructors // ///////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////// // // Main methods // ///////////////////////////////////////////////////////////////////////////
// Create the singleton if it does not exist, and then return it
// When a new target is selected, we have to check if it 's a use case. //Then, the icone "add extension point" have to become enabled.
// Create a new extension point and make it the browser target. Then // invoke the superclass action method.
/* end class ActionAddExtensionPoint */
// If there are bits of an association class then // remember their location and path.
// Create the new FigNodeAssociation and locate it.
// Add the association ends to the graph model
// Add the edges (such as comment edges) that were on the old // FigAssociation to our new FigNodeAssociation and make sure they are // positioned correctly.
"/*     * @see java.awt.dnd.DropTargetListener#dragEnter(     *         java.awt.dnd.DropTargetDragEvent)     */"
"/*     * @see java.awt.dnd.DropTargetListener#dragOver(     *         java.awt.dnd.DropTargetDragEvent)     */"
"/*     * @see java.awt.dnd.DropTargetListener#dropActionChanged(     *         java.awt.dnd.DropTargetDragEvent)     */"
// multiplicity
/* end class ModeCreateAssociation */
/*&& ((UMLDiagram) dia).doesAccept(dtde.getSource())*/
/* The new height can not be less than the name height: */
"//			System.err.println(""NullPointerException ignored."");"
/* end class SPFigEdgeModelElement */
"//    		System.err.println(""NullPointerException ignored."");"
// Get all our sub Figs and hit them with the big stick too
"/* Only show the path item when there is                          * an owning namespace. */"
// enumerate all selected figures and update their path accordingly  
// compartments
// add
/* 20 = height of name fig ?*/
/* 2*LINE_WIDTH?  or extra padding? */
// Set properties of the stereotype box.
"/*         * The nameFig is transparent, since this is a box and the fill color is         * drawn by the bigPort.         */"
// Use "aSize" to build up the minimum size. Start with the size of the // name compartment and build up.
"/*         * Only take into account the stereotype width, not the height, since         * the height is included in the name fig:         */"
"/* Add the height of all the compartments (if there are any),         * and check their minimum width: */"
// Save our old boundaries so it can be used in property message later
/* Now the new nameFig height will include the stereotype height: */
// Check for uninitialised instance variables and // constructor.
/* Calculate the minimum needed height for all the compartments:*/
/* Increase the height of the fig: */
/* Finally set the bounds of the big box and the border fig: */
// hide compartment
"/*                 * Hiding one compartment means that the Fig returns to minimal                 * dimensions:                 */"
"/*     * @see org.tigris.gef.base.PathConv#stuffPoint(java.awt.Point)     */"
"/*     * @see org.tigris.gef.base.PathConv#setClosestPoint(java.awt.Point)     */"
// show compartment
// forceRepaintShadow();
/* Update the diagram, and other users of these settings: */
// find the point offset on the line that gives a // correct offset
// default angle is 90 deg.
// Boundary condition in GEF, make sure this is LESS THAN, not equal
// Check for a collision between our computed position and the edge
// increase offset by 2px at a time
// Get the points representing the poly line for our edge
// increase offset by increments until we're clear
// If we timed out, give it one more try on the other side
/* count >= limit */
//                LOG.log(Level.FINE, "Final point #" + count + " " + result //                        + " offset of " + scaledOffset);
// segment size for computing slope
// If our position was clamped, try to make it up on the other end
// Can't get the slope of a point.  Just return an arbitrary point.
// This shouldn't happen, because of our line segment size check
// "We're going vertical!" - Goose in "Top Gun"
// Arctan only returns -PI/2 to PI/2 // Handle the other two quadrants and normalize to 0 - 2PI
// Quadrant II & III
// Quadrant IV
// Set the following for some backward compatibility with old algorithm
// Add displacement angle to slope
// Transform to 0 - 2PI range if we've gone all the way around circle
// Compute our deltas
// Load the standard colour, just add an alpha channel.
// Should never get here.  If we do, return the inner point.
// Called by propertyChange
// this does a calcBounds()
"/*     * @see org.tigris.gef.base.Diagram#getClassAndModelID()     */"
"/* The following is the default implementation         * for diagrams of which the owner is a namespace.         */"
// source // source position // destination // destination position // number of objects to be copied
/*"unnamed " + */
// Different lengths:
// TODO: should update to size of diagram contents
// next statement gives us a clone JGraph but not a cloned Toolbar
"/*     * @see org.tigris.gef.event.ModeChangeListener#modeChange(org.tigris.gef.event.ModeChangeEvent)     */"
// remains selected
// the old selection
// Target might not have been initialised yet.
// add to selection
// Assuming the target is some model element.
// how to handle empty target lists? // probably the TabDiagram should only show an empty pane in that case
// Any Swing work done here needs to be queued to the AWT thread // since we don't know what thread our event will arrive on
//- RedrawManager.lock();
/* This makes the text not touch the text-border line: */
// Certain types of fixed text (e.g. a FigStereotype with a keyword) // may not have an owner
//Now, we link it to the modelelements which are represented by FigNode
//update all tools' enabled status
// remember the fig for later
//Let's build the comment first, unlinked.
/* Prevent e.g. AssociationClasses from being added trice: */
//Select the new comment as target
//Create the Node Fig for the comment itself and draw it
//Create the comment links and draw them
// If we're drawing from an edge
//$NON-NLS-<n>$
// user made a false start
// So, the target is a MAssociationRole
"/*MVW This is not the correct way,        * but it allows connecting a CommentEdge to it!        * See e.g. ActionAddNote for the correct way.        * Testcase:        * 1. Select the message.        * 2. Click the Comment tool.        * */"
/* end class ActionAddMessage */
// let's use groups to construct the different text sections at // the association
"/* This only happens if model-change events arrive             * before we are completely constructed. */"
// x^2 + y^2 = r^2  (equation of a circle)
// max distance is set at 100 pixels, (rSquared = 100^2)
// east
"/*     * @see org.tigris.gef.presentation.Fig#propertyChange(java.beans.PropertyChangeEvent)     */"
/* end class FigAssociation */
// no need to listen to these property changes - the // notationProvider takes care of this.
/*, new String[] {"name", "visibility", "stereotype"}*/
// These are a list of arrow types.
// Added to the arrow type for navigable
// Finished editing. // Parse the text that was edited. // Only the role is editable, hence:
//            figEdge.showHelp(role.getParsingHelp()); //            role.setText();
// Pass everything else to superclass
/* end class ActionNavigability */
// Fonts and colors should get updated automatically for contained figs
/* There is none... */
// only initialized to prevent warning
//not supported for this target
// make space for the clarifier // margin between text and border
// Add a listener for changes to any property
// is used as InstanceSpecification, see UMLDeploymentDiagram
// Be careful here since subclasses could have overridden this with // the assumption that it wouldn't be called before the constructors // finished
// this rectangle marks the whole modelelement figure; everything // is inside it:
"/**     * Clone this figure. After the base clone method has been called determine     * which child figs of the clone represent the name, stereotype and port.     * <p>     * TODO: enclosedFigs, encloser and eventSenders may also need to be cloned.     *     * @see java.lang.Object#clone()     * @return the cloned figure     */"
"/* Idem here:                 * clone.stereotypeFig = (FigStereotypesGroup) cloneFig; */"
//figClone._polygon = (Polygon) _polygon.clone();
"/*     * Utility function to unregister all listeners     * registered through addElementListener.     *     * @see #addElementListener(Object, String)     */"
"/*     * @see org.tigris.gef.presentation.Fig#getEnclosingFig()     */"
// add stereotype view submenu
// The node's been placed on the diagram
// Set the namespace of the enclosed model element to the // namespace of the encloser.
// Find all ElementResidences between the class and the component:
// There was no ElementResidence yet, so let's create one:
// The node's been placed within some Fig
// There were 2 ElementResidences .. strange case.
// There is already a correct ElementResidence
// The owner is already linked to the component
// We are getting events we don't want. Filter them out.
/* Only update the bounds if they change:  */
// resize the FigNode to accommodate the new text
// TODO: Should this not be an assert?
// west
// south
// Convert null to empty string and clear help message
// it is done
//this enables direct text editing for sub figs of a //FigGroup object:
// either layer or owner was null
// Default is to do nothing
//This test needed for a FigPool
// Get model listeners removed:
// TODO: State & Vertex are independent classes in UML 2.1
// TODO assert modelElement != null???
// Default for name and stereotype is no border
// Use DiagramInterface to add classes to diagram
// situation 1
// we have an edge (the UML modelelement!)
// computeRoute(); // this recomputes the route if you reload the diagram.
// in case someone turns it on
// Do not allow fill to change. We should see through // the text to the color of the main FIg background.
/* Now force minimum dimensions for the text: */
/* Now add the areas around the text to return the complete size: */
// calculate the source and dest figs for to self assoc
//reset the pointIndex
// check pre-conds
//Set-up:
// the fig that was under the mouse when it was released
// and find the Fig:
// last is the top fig.
// check intermediate post-condition.
// delegate the re-routing to graphmodels.
// set it to an invalid number by default // to make sure it is set correctly.
// north
// Do nothing until code is reviewed
// TODO: Do nothing until code is reviewed
// Message
// ClassifierRole // ClassifierRole
/* Simulate a press of the mouse above the calculated point: */
"/* Calculate the drop location, and place every n-th element             * at an offset proportional to n.             */"
/* Simulate a release of the mouse: */
// Make sure the file doesn't exist so the user will // get prompted to choose a new name
"/*     * Overridden in order to implement PathCompartmentContainer.     */"
// Don't allow drag outside of bounds of diagram
// If the user has selected ModePlace either by a diagram // tool or AddToDiagram then we don't want to show the // clarifiers.
// Remember what handle was clicked for the case where the drag // is released over empty space
// transparent cyan
// yellow
// translucent green
"//        super(ModeCreatePolyEdge.class, ""edgeClass"", //	      Model.getMetaTypes().getAssociation(), name);"
// set this to true on to enable debugging figs
// anchor position
/* TODO: The UML does not seem to define this name. Or is it? */
"/*     * The serialVersionUID (generated by Eclipse)     */"
// UML spec for Generalizations doesn't call for name
// Name & stereotypes get updated by superclass
// show it
//                fig.calcBounds();
// we only take the filename, not the whole system path
// TODO (@author fdietz): should be removed if we only use // Streams!
// FIXME (@author karlpeder): Is 3.2 the proper version of html to refer to?
// this is a hack for the multiline column
//TODO (@author tstich): do something
// TODO (@author fdietz): i18n
// FIXME remove method // toolbarPane.add(c);
//TODO (@author fdietz): i18n
// TODO @author hubms: copied from frederiks search builder
// real stupid recreation of whole list model // -> replace with id-based listmodel update
// TODO (@author karlpeder): Extend handling of special entities as in restoreSpecialCharacters
"/**     * Transforms email-addresses into HTML just as     * substituteEmailAddress(String), but tries to ignore email-addresses,     * which are already links, if the ignore links flag is set.     * <br>     * This extended functionality is necessary when parsing a text which     * is already (partly) html.     * <br>     * FIXME: Can this be done smarter, i.e. directly with reg. expr. without manual parsing??     *     * @param         s                                input text     * @param        ignoreLinks                if true link tags are ignored. This gives a     *                                                         wrong result if some e-mail adresses are     *                                                         already links (but uses reg. expr. directly,     *                                                         and is therefore faster)     * @return        text with email-adresses transformed to links     */"
//TODO: Return content encoding according to the mime part in the mail
//TODO: Return content type according to the mime part in the mail
// hack to support dockable view title update // TODO replace with listener pattern
/*TODO stop polling thread?! */
// TODO @author hubms: bad: if there is a icon it is tagged or // not
// TODO categoryEnumeration
// hack: if start and end time is at 00:00:00:000 it is // an all day event
// register interest on store changes // TODO the dependency should be the other way around
// TODO: fix layout to look good, even if there's not enough information provided
// FIXME: ugly cast to ContactModel
// @TODO dont use deprecated method
/* TODO must get polling interval from config file */
//      TODO: reactivate when feature is supported
// If this folder has children add them // TODO: In the future we should try to fetch additional children on demand // when the tree of the dialog is opened
// TODO (@author fdietz): Add more special entities - e.g. accenture chars such as ?
// TODO (@author waffel): encrypt AND sign dosN#t work. The message is // always only // encrypted. We need a function that knows, here // is an encrypted AND signed Message. Thus first encyrpt and then // verifySign the message // if this message is signed/encrypted we have to use // GnuPG to extract the decrypted bodypart // - multipart/encrypted // - multipart/signed
"/**     * Transforms urls into HTML just as substituteURL(String),     * but tries to ignore urls, which are already links, if the ignore     * links flag is set.     * <br>     * This extended functionality is necessary when parsing a text which     * is already (partly) html.     * <br>     * FIXME: Can this be done smarter, i.e. directly with reg. expr. without manual parsing??     *     * @param         s                                input text     * @param        ignoreLinks                if true link tags are ignored. This gives a     *                                                         wrong result if some urls are already links     *                                                         (but uses reg. expr. directly, and is     *                                                         therefore faster)     * @return        text with urls     */"
// TODO @author fdietz: ensure that we don't fetch individual // headers // to reduce client/server roundtrips
// ??? bad to have release hardocoded here. Fix later...right.
//TODO: Open stream from the mime part specified by contentID of the  //currently viewed mail
// something is very wrong here
// its maybe better to leave this option out of the dialog // -> make it configurable in the xml file anyway
// TODO: Make this hack more i18n compatible
/*TODO move resources to a resource file */
// TODO: use UndoableEditEvent to make this really work
// TODO: Should we take some action to ensure signature is valid // html?
/* XXX should this be fired by a different thread? */
//TODO:add a configuration of the cache size
"/**	 * Command executes the search.	 * <p>	 * In case new result results arrive, it ensures that all interested	 * listeners are notified from inside the EDT.	 * <p>	 * FIXME: fdietz: No locking of folders currently implemented! TODO: fdietz:	 * create new Command for every provider to introduce real ""parallel"" search	 * 	 * @author fdietz	 */"
/*XXX this is not thread-safe, though luck. It isn't supposed to be. */
// TODO (@author fdietz): move this to AbstractMessageFolder constructor
//TODO: Should this be renamed to cLoc or something more appropriate than clock?
"/*         * TODO (@author karlpeder): Guess that right thing to do is to get height as getDrawingSize().getHeight(),         * since this should take top- and bottom margin of this print         * object into account. But the height seems not to be set         * correctly in computePositionAndSize() (*20030604, karlpeder*)         */"
// we can't use SystemClassLoader here, because that // wouldn't work with java webstart, // ResourceBundle uses its own internal classloader // if no classloader is given //  -> set classloader = null
//  // Note: We intentionally don't remember internal plugins, because // we don't want them to appear in the plugin manager currently. //  // TODO: improve plugin manager dialog to support internal plugins // which can't be removed, etc.
// FIXME calendar?
// TODO @author hubms have this flags, until the speed of the entitymanager // is improved
// cleanup: remove port number file
// TODO: There's probably a better way to do this hack...
"/*TODO before inserting, find out if there's already a menu item     * with the same action command. if so, replace it, otherwise insert new     */"
// TODO (@author fdietz): add import feature
// TODO (@author hubms): implement custom menuitem renderer
// TODO @author fdietz: no paging used currently // show only first 5 results
// real stupid recreation of whole menu model
// TODO: throw IllegalArgumentException in case a variable == null
//TODO (@author fdietz): associate help with button and root pane
// FIXME -- This will most likely not work. //          You want the element removed if the contents are the same //          Not just if the element reference is the same.
// // @author: fdietz // using shutdown-manager is wrong here, because this // automatically also calls the FrameManager, which  // also starts a second shutdown thread // -> This leads into two parallel shutdown thread which // -> is why sometimes config-files, etc. get messed up //        
// @author fdietz: hackish way of creating a search toolbar //JToolBar searchToolBar = new ExtendableToolBar();
"/** * A Command uses the information provided from {@link DefaultCommandReference} * to execute itself. * <p> * TODO: remove IFrameMediator dependency *  * @author Timo Stich <tstich@users.sourceforge.net> */"
// manually rewrite the connection url, because // if there is no rewrite the database files are created // in the starting directory, we don't want that!
// TODO: fix updateActions //enableActions(getCurrentOwner());
// TODO: @author hubms check what is neccessary // remove old filters // searchFolder.getFilter().getFilterRule().removeAll(); // add filter criteria // searchFolder.getFilter().getFilterRule().add(c);
//TODO Let the AttachmentViewer get the focus so that this works
//TODO: Open in message frame //TODO: Handle also message attachments from OpenInComposer action
// TODO (@author fdietz): add central place, which keeps a list of all possible //       colors, and provides a custom color configuration possibility
// TODO (@author fdietz): implement custom menuitem renderer
// FIXME (@author fdietz): Do we need this implementation in a TempFolder? // If not, just put an empty method here, just like in VirtualFolder.
// TODO Ristretto should handle the logging of streams in another // way.
// TODO (@author fdietz): All this code for creating a new // IMAPRootFolder should // be moved to a FolderFactory // -> this way "path" would be handled in the factory, too // parent directory for mail folders // for example: ".columba/mail/" // String path = // MailConfig.getInstance().getConfigDirectory().getPath();
// turn of focus stealing (workaround should be removed in the // future!)
// wait, if there is an active transaction // TODO @author hubms retrycount!
"/**	 * this regular expression should cover anything from a@a.pt or a@a.com to	 * a@a.info. Permits usage of invalid top domains though.	 * <p>	 * [bug] fdietz: added ""."" and ""-"" as regular characters	 * (example:mail@toplevel.mail.de)	 * <p>	 * TODO: see if we can replace the matching code with Ristretto stuff	 *	 */"
// @author: fdietz // This is a workaround. Generally, the contact dialog editor // should ensure that all necessary fields are available // 
// TODO: replace view with more detailed info view
// TODO we should check if we need an vector or better another list // implementation; checking also, if the list // must be syncronized or not (performance)
// FIXME is this correct for
//TODO externalize string //$NON-NLS-1$
// TODO: multiplicity checks
// TODO (@author fdietz): until we can get all the settings update // immediately // we just open a message box, telling the user to restart
// TODO: real IM status here
// FIXME: should we align the menu to the left instead? // menu.show(b, b.getWidth() - menu.getWidth(), b.getHeight());
// @author: tstich // Its better to call the Shutdownmanager // since the above is called automatically from it. // ShutdownManager is modified to allow one shutdown // call only, so we never should have multi-shutdown // problems again.
/* TODO should come up with a better name for the menu item */
// TODO (@author fdietz): add export feature
// Since Columba is doing its own logging handlers, we should not // use handlers in the parent logger.
// The JavaHelp can't be added to a BorderLayout because it // isnt' a component. For this demo we'll use the embeded method // since we don't want a Frame to be created.
// @author: fdietz // // PROBLEM: Extensions don't run using Java Webstart (JWS) //  // Even though we assign "all-permission" in our columba.jnlp file, this // only applies // to the initial Java Webstart classloader. But, we create our own // classloaders for // loading extensions. These classloaders don't have the same permission // settings anymore.
// what to do here? we could start a new server...
// WORKAROUND: //  // System.setSecurityManager(null); // // This call effectly disables the sandbox mode and seems to work fine. // // Below I use another way. The policy for all classloaders is set to // "all-permissions". // Don't really know the difference though.
// For the Mac ScreenBarMenus to work, this must be declared before // *ANY* AWT / Swing gets initialised. Do *NOT* move it to plugin init // location because that is too late...
// kids - don't do this at home
// @author: fdietz // // The following line is not working - just don't know why // Main.mainClassLoader.addURLs((URL[]) urlList.toArray(new URL[0])); // // WORKAROUND: // // Modify the system class loader instead - horrible! But it works!
// // @author: fdietz // WORKAROUND: // we simply append URLs to the existing global class loader // and use the same as parent //  // Note, that we create a new URL classloader for every class // we instanciate. We might want to support hot-swapping // of changed classes later.
// we can't use SystemClassLoader here, because that doesn't work // with java webstart // -> instead we use this.getClass().getClassLoader() // -> which seems to work perfectly
// TODO (@author karlpeder): If existing meta tags are to be kept, code changes are // necessary
/* TODO create exception for this */
// TODO (@author javaprog): better exception handling
// TODO (@author fdietz): fix account info panel check
// TODO (@author fdietz): move this to AbstractMessageFolder constructor // create filterlist datastructure
// TODO: @author fdietz replace with regular expression
// TODO implement me!
//TODO (@author fdietz): implement
// TODO implement validation
"/**	 * 	 * create Subject headerfield in using the senders message subject and	 * prepending ""Fwd:"" if not already there	 * 	 * @param header	 *            A <code>ColumbaHeader</code> which contains the headerfields	 *            of the message we want reply/forward.	 * 	 * FIXME (@author fdietz): we need to i18n this!	 * 	 */"
// TODO finish marshalling of all available properties
// TODO finish unmarshalling of all available properties
// TODO implement
// TODO: implement this
"/**	 * 	 * create subject headerfield in using the senders message subject and	 * prepending ""Re:"" if not already there	 * 	 * @param header	 *            A <code>ColumbaHeader</code> which contains the headerfields	 *            of the message we want reply/forward.	 * 	 * FIXME (@author fdietz): we need to i18n this!	 */"
// TODO (@author karlpeder): Implementation of undo/redo missing
// html - quoting is done by inserting a div around the // message formattet with a blue line at left edge // TODO (@author fdietz): Implement quoting (font color, stylesheet, // blockquote???)
// TODO (@author fdietz): show error dialoghere
// TODO (@author fdietz): add error dialog
// TODO: Show dialog
// TODO (@author fdietz): make i18n!
// TODO (@author javaprog):sizeComboBox can be enabled as // paragraphComboBox when implemented
//TODO: Add dialog to inform user that the smtp server // does not support authentication
// TODO @author hubms show if there is already a virtual folder for // this tag
// update status message // TODO (@author fdietz): i18n
//TODO (@author fdietz): keep track of progress here
// TODO localize filter action names
//TODO (@author fdietz):  i18n
// TODO implement clear()
// TODO (@author fdietz):: implement action for font size combo box!
// TODO (@author fdietz):  i18n
// FIXME threaded-view auto collapse
// get selected folder
// Create a FormLayout instance.
// g2.setColor(fillColor); // g2.fillRect(0,0,w,h);
// no filterlist treenode found // -> create a new one
// associate with JavaHelp
// if it is in a scroll pane, then we add to the end of the // list.
// try to get instance of FilterAction
// remove from header-list
// notify folder tree model
// ---- telephoneTextField2 ----
// set component values
// write text to file
// cancel
// user didn't select any folder // -> make Inbox the default folder
// ---- fullnameButton ----
// all / match any JComboBox
// *20030926, karlpeder* Added html support // MimePart mp = tree.getFirstTextPart("plain");
// remove XmlElement
// check if firstname, middlename or lastname contain only valid // characters
//String userVisibleName = pluginHandler.getUserVisibleName(id);
// filter description JTextField
"/*				 * c.gridx = GridBagConstraints.REMAINDER; c.anchor =				 * GridBagConstraints.NORTHEAST; gridbag.setConstraints(				 * removeButton, c ); panel.add( removeButton );				 */"
"/*			 * *20040210, karlpeder* Remove html comments - they are not			 * displayed properly in the composer			 */"
// get values from components
// ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
// int type = action.getActionInt();
// ---- calendarLabel ----
// JCheckBox overwriteOptionsCheckBox;
// Date header // we got a date header (store this // fact for later use
// iterate through all foldertypes to find suitable ones
"/*			 * BufferedReader in = new BufferedReader( new InputStreamReader(			 * new FileInputStream(file), model.getCharsetName()));			 */"
// getting next node
// Add child to parent
// Do decoding stuff
// table registers interest in tree selection events
// enabled/disabled
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#remove(int)   */"
// criteria.setPattern((String) textField.getText());
"// create config-folder //		File file = new File(""test_config""); //		file.mkdir(); // //		new Config(file); // //		Logging.DEBUG = true; //		Logging.createDefaultHandler(); // //		// init mail component //		new MailMain().init(); //		new AddressbookMain().init(); // //		// now load all available plugins //		PluginManager.getInstance().initExternalPlugins();"
// Fall back to today
// ensure tzid matches date-time timezone.. // Parameter tzId = dtEnd1.getParameters().getParameter( // Parameter.TZID);
// create a form builder
// get root folder
// wrong xml-format
// create mandatory IMAP Inbox folder
"/*TitledBorder etched = javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "" Login "");centerPanel.setBorder( etched );*/"
//private JLabel enableTextIndexingLabel;
"//		TagList tagList = new ContactTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));"
// couldn't find folder associated with this uid // -> open the select folder dialog
//mod: 20040629 SWITT for redirecting feature //If FROM value was set, take this as From, else take Identity
// Add the custom color item.
// treePathButton.setMargin(new Insets(0,0,0,0));
// use "mark as read" as default fallback mechanism
//      ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
// focus name textfield
// 3 columns //$NON-NLS-1$
// add message to folder
// associate inbox with root folder
// @author tstich: Added Lucene gui element here //builder.add(enableTextIndexingLabel, cc.xy(2, 13));
// Where, in the drag image, the mouse was clicked
// which parents are possible ?
// select new item
// Create a FormLayout instance. //$NON-NLS-1$
// attachments found... // insert start and end for html
// return the result as boolean value true or false
// you need a sound.wav in your program folder
// convert the condition string to an int which is easier to handle
// public abstract IHeaderListStorage getHeaderListStorage();
// just a simple example
// parent directory for mail folders // for example: ".columba/mail/"
// Logging.log.severe("Error parsing body for attachments", e);
// create copy command
// debug messages for diagnostics
// Server does not support UTF-8 // -> fall back to System default
// adjust description field
// If the cause is a SMTPExcpetion then only password // wrong // else bogus authentication mechanism
// Groups are separated by at least one WS character
// VALIDATION DISABLE ! Sebastian Witt 25.07.04, // "NAME" <email@somewhat.de> isnt true, which should :( // root@localhost is valid, but not with this check. :( // root is also valid (with local mailserver), but not with this check // :(
// charset is specified - find it
// setPreferredSize(new Dimension(250, 300));
// add email addresses
// Logging.log.severe( // "Error while looking for charset", // e);
"/*         * buffer.append(getShortClassName(record.getSourceClassName()));         * buffer.append("".""); buffer.append(record.getSourceMethodName());         * buffer.append("" - "");         */"
// roll correctly over years
//$NON-NLS-1$ //enableLabel.setFont(boldFont);
// bottom.add( Box.createHorizontalGlue() );
// user changed folder name
// Encrypt the cleartext
// create EmptyBorder between components and dialog-frame
"/*        UIManager.put(""Label.font"", mainFont);        UIManager.put(""Textfield.font"", mainFont);        UIManager.put(""TextArea.font"", mainFont);        UIManager.put(""MenuItem.font"", mainFont);        UIManager.put(""MenuItem.acceleratorFont"", mainFont);        UIManager.put(""Menu.font"", mainFont);        UIManager.put(""Menu.acceleratorFont"", mainFont);        UIManager.put(""MenuBar.font"", mainFont);        UIManager.put(""Tree.font"", mainFont);        UIManager.put(""Table.font"", mainFont);        UIManager.put(""Button.font"", mainFont);        UIManager.put(""CheckBoxButton.font"", mainFont);        UIManager.put(""RadioButton.font"", mainFont);        UIManager.put(""ComboBox.font"", mainFont);        UIManager.put(""ToggleButton.font"", mainFont);        UIManager.put(""CheckBoxMenuItem.font"", mainFont);        UIManager.put(""RadioButtonMenuItem.font"", mainFont);        UIManager.put(""TabbedPane.font"", mainFont);        UIManager.put(""List.font"", mainFont);        */"
// charset is found from line, not lcLine => not // forced lower case
// group
// Add components to the panel:
"/*		 * If no Content-Type header was found, it is necessary to construct a		 * new one (for outgoing msg Eudora never includes a Content-Type =>		 * html msg is not shown correctly).		 */"
"/*		 * JPanel panel= new JPanel(); panel.setLayout(new BorderLayout());		 * panel.add(resetButton, BorderLayout.EAST); builder.add(panel,		 * cc.xywh(5, 7, 1, 1));		 */"
"/* * Test for XmlElement(String,String) */"
"/*		 * overwriteOptionsCheckBox = new JCheckBox(""Overwrite global		 * settings""); overwriteOptionsCheckBox.addActionListener(this);		 * overwriteOptionsCheckBox.setActionCommand(""OVERWRITE"");		 */"
// defaultShapeFactory.setShape(AShapeCreator.createTraslucentShapeHorizontal(), // null);
//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$
// search across all providers
// c.gridwidth = GridBagConstraints.RELATIVE;
"/*LinkedList testList = new LinkedList(listFull_I);ListTools.intersect(testList,listFull_I);assertTrue(testList.equals(listFull_I));testList = new LinkedList(listFull_I);ListTools.intersect(testList,new LinkedList());assertTrue(testList.size()==0);testList = new LinkedList(listFull_I);ListTools.intersect(testList,listPart1_I);assertTrue(testList.equals(listPart1_I));testList = new LinkedList(listFull_I);ListTools.intersect(testList,listPart2_I);assertTrue(testList.equals(listPart2_I));testList = new LinkedList(listPart1_I);ListTools.intersect(testList,listPart2_I);assertTrue(testList.size()==0);*/"
// if there is no search engine, try the default one
// execute command -> use mock object class as worker which does // nothing
// read attribute "value"
// save boolean headerfields, compressing them to one int value
//protected RemoteSearchEngine searchEngine;
"/*					 * Such a header is used by Eudora to indicate attachments					 * for outgoing messages. Outgoing messages have no					 * Content-Type specified. Therefore the Content-Type header					 * can be safely set here without risk of conflicts with the					 * modifications made above					 */"
// AShape textShape = new TextAShape("text", "$" + GridRow.NAME + "$", // textRect, TextAShape.TYPE_SINGE_LINE, font, fgColor, // AtFraction.CENTER, AtStart.START0, Boolean.FALSE);
// only local folders have an full-text indexing capability
"/*		 * mainConstraints.fill = GridBagConstraints.BOTH;		 * mainConstraints.insets = new Insets(0, 0, 0, 0);		 * mainConstraints.gridwidth = GridBagConstraints.REMAINDER;		 * mainConstraints.weightx = 1.0; mainConstraints.weighty = 1.0;		 */"
// TODO i18n "Close" button
// get unique boundary (not checked against att. // list part - but guess its ok)
// get column of list
// if user cancelled task exit immediately
// display status message
// group item
// parameters ~ rest of string
// enable lucene search index by default //$NON-NLS-1$ //$NON-NLS-2$
// save last message (while loop terminated before last msg was saved)
// Create the header of the multipart
// Logging.log.severe( // "Not enough tokens in \"" // + dateStr // + "\" to create Date: header. Returning null", // e);
// notify configuration changes listeners // @see org.columba.mail.gui.table.util.MarkAsReadTimer
"/*							 * mixed or unknown multipart type (to be treated as							 * mixed). This is typically a message with							 * attachments. Eudora just stores links to them -							 * therefore we create a new multipart/mixed message							 * with 2nd part = html page with links to							 * attachments							 */"
// get list of all uids
//notifyTableListeners(new TableModelEvent(this, 0, logMessages.size()));
// move message to trash if marked as expunged
// ask the user about the destination file
// don't instantiate this class
// register for configuration changes
// get headerfield to search in (for example: Subject)
// button panel
// listener updates menu in case the tags where changed
// return (ChatMediator) chatList.get(index);
// notify listeners // @see org.columba.mail.gui.composer.SubjectController
"/* (non-Javadoc) * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel() */"
// send notification event // @see org.columba.mail.gui.message.TextViewer
// apply transparent icon
// example: fdietz@jabber.org/Jabber-client // -> remove "/Jabber-client"
// replace with "MyListCellRenderer" for simple one-line renderer // replace with "MyComplexListCellRenderer" for an additional description line
// notify listeners
// mandatory String-based attribute
"/*		 * Gets the platform specific default theme. This is in all cases but		 * MacOS X the Plastic theme. On MacOs X we use the System L&F.		 *		 */"
// skip the first column
// selected buddy in buddylist
// private void addStatus(String tooltip, ImageIcon icon) { // JLabel label = new JLabel(icon); // label.setToolTipText(tooltip); // // comboBox.addItem(tooltip); // }
// update list view
// didn't find any group for this buddy
// Set recipients from the recipients vector
"//		Border border = new CompoundBorder(BorderFactory.createEmptyBorder(2, //				4, 2, 4), border1);"
"/*         * If this is a unix-based system, check the 2 best-known areas for the         * aspell binary.         */"
// create new default options
// add all groups as folder to JTree
// add new element
// update status information
// remove all old elements
// create To headerfield
// @author fdietz // -> Moved code for updating mailfolderinfo to markMessage() // intentionally! //
// some other version of the constructor
// execute resyncing command
// re-select folder to make changes visible to the user
// update treenode
// setup to, references and account
// composer
// 2 columns // rows are added dynamically (no need to define them // here)
//builder.nextLine();
//layout.setRowGroups(new int[][]{ {1, 3, 5, 7, 9, 11, 13, 15} });
// re-use identity type for recipient list
//Set up color chooser for setting quoted color
// clear the tooltip message previously displayed in the status bar
// tree has focus
//      convert criteria into int-value
// create chat connection, if not available yet
// private JComboBox loginMethodComboBox; // String loginMethod;
// create command
// Shadow
// view -> model
// modify card properties in folder
// JPanel mainPanel = new JPanel(mainLayout); // mainPanel.setBorder(Borders.DIALOG_BORDER);
// implement your own search-engine here
// if this is the last token, check if the last element // is the same than in the array
// model -> view
"/*	 * Test method for	 * 'org.columba.mail.parser.ListBuilder.createStringListFromItemList(List<IHeaderItem>)'	 */"
// used by virtual folder only
// counts how many messages has been // processed // date fetched from "From ???@??? ..."
// putValue(LARGE_ICON, ImageLoader.getIcon(IconKeys.DOCUMENT_SAVE_AS));
// get message body
// Html: Insertion of text before and after original message // get necessary headerfields
// create filter
// create group containing first contact
// If f==null because of deleted AbstractMessageFolder fallback to // Inbox
// get selected contact/group card
// top panel
// user's can't edit default account
// centerpanel
// check number of cached MessageNodes //assertEquals(2, model.getMap().size());
// create stream from string
// topPanel.setLayout( );
//  execute command -> use mock object class as worker which does // nothing
// if something goes wrong here, fall back to "mark as read"
// check number of cached MessageNodes //assertEquals(1, model.getMap().size());
// Must go backwards or else the list will remove the wrong filters.
// 3 columns // rows are added dynamically (no need to define them here)
"/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */"
// c.fill = GridBagConstraints.HORIZONTAL;
// try to fill the contact list
"/*		 * dragSource.startDrag( event, new Cursor(Cursor.DEFAULT_CURSOR),		 * ImageLoader.getImageIcon(""contact_small"",""Add16"").getImage(), new		 * Point(5, 5), new StringSelection(""contact""), this);		 */"
// top-level structure
// string to search
// disabled IMAP folder tests as they require connection // to remote IMAP server // setup(suite, new IMAPTstFactory());
// cancel if headerfield doesn't exist
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfileForName(java.lang.String)	 */"
"//		builder.append(showAttachmentsInlineCheckBox, 4); //		builder.nextLine();"
// finally, add all external extension menu additions // for example: Hello World Plugin
// add all addresses
// if in debug mode, register context debugger view
// Create list of unsubscribed folders
// create one list containing the marked items, which have to be "unmarked" // and another list containing the items remained to be marked
// see if theirs a match
// check if mediator supports docking
// decode headerfield
"//				IMAPRootFolder parentFolder = FolderFactory.getInstance() //						.createIMAPRootFolder(account); //				IMailFolder inbox = FolderFactory.getInstance() //						.createIMAPFolder(parentFolder, ""INBOX"");"
// get condition and convert it to constant as defined in // FilterCriteria
//cache.clear();
// folders have same root folder // -> for example: two IMAP folders on the same server // -----> this means we use server-side copying which // -----> is much faster than using inputstreams here // // also used for local folders, which saves some parsing work
// Process personal namespaces
// create a Command for every action of this filter // -> create a compound object which encapsulates all commands
// Deactivate this vFolder because changes are about to happen // and the search needs to be redone.
// vertical light gray column separator line
// First sort so that Events from one folder stick together
// END1 because the draw should be // correct
// create default namespace
// if line doesn't start with "From" or line length is 0 //  -> save everything in StringBuffer
// Something is wrong // Sync again
// Now we have the subscribed folders in subscribedFolders // and the unsubscribed folders in unsubscribedFolders // Next step: Create a treestructure
// get message header
// register for text selection changes // controller.getEditorController().addObserver(this);
//bottom.add( Box.createHorizontalGlue() );
// set initial enabled state of combo boxes // XmlElement optionsElement = MailConfig.getInstance().get( // "composer_options").getElement("/options"); // XmlElement htmlElement = optionsElement.getElement("html"); // String s = htmlElement.getAttribute("enable", "false"); // boolean enableHtml = Boolean.valueOf(s).booleanValue();
// INBOX is always subscribed
// Handling of paragraph combo box // select the item in the combo box corresponding to present format
"/*			 * HeaderItem[] items = new HeaderItem[selection2.length]; items =			 * selection2;			 * HeaderItemDNDManager.getInstance().setHeaderItemList(items);			 */"
// FormLayout layout = new FormLayout( // "default, 3dlu, default, 3dlu, default, 3dlu, " // + "default, 3dlu, default, 3dlu, default, 3dlu, " // + "default, 6dlu, default, 3dlu, default, 3dlu, " // + "default, 3dlu", "fill:default"); // PanelBuilder b = new PanelBuilder(this, layout); // // CellConstraints c = new CellConstraints(); // // b.add(paragraphComboBox, cc.xy(1, 1)); // b.add(sizeLabel, cc.xy(3, 1)); // b.add(sizeComboBox, cc.xy(5, 1)); // b.add(boldFormatButton, cc.xy(7, 1)); // b.add(italicFormatButton, cc.xy(9, 1)); // b.add(underlineFormatButton, cc.xy(11, 1)); // b.add(strikeoutFormatButton, cc.xy(13, 1)); // b.add(leftJustifyButton, cc.xy(15, 1)); // b.add(centerJustifyButton, cc.xy(17, 1)); // b.add(rightJustifyButton, cc.xy(19, 1));
// this can throw a ChangedCharsetException
// can be only one
// get selected search criteria
// get list of all filter actions
// add stream to folder
// removeElement();
// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
// select search folder
// interate through all filter actions
// check three entries
// message size should be at least 1 KB
"/*		 * *20030906, karlpeder* Method signature changed to take an		 * AbstractEditorController (instead of an TextEditorView) as parameter		 * since the view is no longer directly available		 */"
// name is used to load plugin
//DefaultItem item = new DefaultItem(element); //item.set("header_enabled", getState());
"/*JSCFDriverManager.registerJSCFDriver(new GPGDriver());JSCFConnection con = JSCFDriverManager.getConnection(""jscf:gpg:""+pgpItem.get(""path""));*/"
"/*		 * builder.append(sslLabel, 3); builder.nextLine();		 *		 * builder.append(disableSSLConnectionRadioButton, 2);		 * builder.nextLine(); builder.append(enableSSLConnectionRadioButton,		 * 2); builder.nextLine();		 * builder.append(enableSTARTTLSExtensionRadioButton, 2);		 * builder.nextLine();		 */"
// Plain text components don't fire these events
/* check for new files in the scripts directory */
// no match with link tags
// enable/disable textfield in-dependency of selected criteria
// register for configuration changes for the html(enabled/disabled) // state
// show all search results
"// small icon for menu //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon(""configure_16_mail.png""));"
// create Command reference
// encapsulate bodytext in html-code
// get inputstream of this message from folder
// view headerlist in message list viewer
// create filter criteria based on selected type
// else set it to 23:59:59.999
"//	 header-item"
"/*                 * *20031216, karlpeder* Changed handling of dates.                 * Previously columba.date header was used. Now we                 * use the Date header instead                 */"
// execute custom search
// type-cast here is safe
"/*		 * assertEquals(""copied message should be marked as recent"", true, flags		 * .getRecent()); assertEquals(""copied message should be marked as		 * flagged"", true, flags .getFlagged()); assertEquals(""copied message		 * should be marked as not expunged"", false, flags.getExpunged());		 */"
// set criteria for search folder
// set source folder UID
// remove old filters
// Synchronize the complete folder
// add search to history
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#remove(java.lang.Object[])	 */"
// get search folder
// tree selection event
// Choice btw. text and html will be based on stored option
// create selection handlers
// the following lines add cut/copy/paste/undo/redo/selectall // actions support using the Columba action objects. // // This means that we only have a single instance of these // specific actions, which is shared by all menuitems and // toolbar buttons.
// directly execute search
// Resetting contents buffer. // Assuming that tags either tag content or children, not both. // This is usually the case with XML that is representing // data strucutures in a programming language independant way. // This assumption is not typically valid where XML is being // used in the classical text mark up style where tagging // is used to style content and several styles may overlap // at once.
// get currently selected folder
// get command reference
// if necessary decrypt/verify message
// execute command -> use mock object class as worker which does nothing
// public IContentPane getContentPane() { // return this; // }
// header = (ColumbaHeader) message.getHeaderInterface();
"//		 add message ""0.eml"" as inputstream to folder"
// Register Alt-Up hotkey for moving up folder when folder tree or // table have focus
// Register F2 hotkey for renaming folder when the folder tree itself // has focus
// Register Alt-Down hotkey for moving up folder when folder tree or // table have focus
// set flags
// folder-based configuration
// light gray line every day
// simply demonstration of how to change the docking title
// update message list view title
"/*	 * private JTextField textField; private JPanel leftPanel; private	 * JTabbedPane rightPanel; private JButton addButton; private JButton	 * removeButton; private JButton editButton; private JButton upButton;	 * private JButton downButton;	 * 	 * private JFrame frame;	 */"
// show message content
// update frame title
// close Columba, if composer is only visible frame
// select node
// is the message marked as draft ?
// bottom.add(c, BorderLayout.CENTER);
// get selected row
// return super.getListCellRendererComponent(arg0, arg1, arg2, arg3, // arg4);
// edit message in composer
// get inbox-folder from pop3-server preferences
// open message in new message-frame
// remember search folder for "show total results" action
// mail folder tree
// contains headerfields which are to be displayed
// message list
// If we have new messages add them to the headerlist
// this has to be set by themes //setDividerSize( 5 );
// tooltip text
// overwrite this method
//splitPane.setDividerSize(1); //setDividerSize(5);
// small icon for menu
//      add message "0.eml" as inputstream to folder
// Which Bodypart shall be shown? (html/plain)
"//		 @author: fdietz never request focus //requestFocus();"
// add contact to addressbook
// short cut key
// some server have a bogus apop // try user/pass to check if the password is // correct
// dark gray line at 12 and 13
// we don't need any configuration here
// new selection
"/*		 * l_year = new JLabel(); p1.add(l_year);		 */"
// pass it along to parent frame
// notify all interested listeners
// putValue(LARGE_ICON, ImageLoader.getSmallIcon(IconKeys.FOLDER_OPEN));
// exit immediately
// delete all files in folder
// copy selected URL to clipboard as string
// save previously selected folder options
// create Address from URL
// get current message list selection
// map to new reference
// create empty value
// -2 because of the decrement in line 317 // removedLocalUids = localUids.size() - 2 - position;
// old command-specific selection
// login and get # of messages on server
// icons
// second row showing the minutes
// register for status events
// b.append("Pass&word:", passwordTextField);
// ensure that there is an HTML part in the email, otherwise JTextPanel // throws a RuntimeException
"//		 select message in message list"
// JPanel bottom = new JPanel(); // bottom.setBackground(backgroundColor); // // bottom.setLayout(new BorderLayout());
// getting current node (under the selection)
// this has to be set by themes //splitPane.setDividerSize( 5 );
// if the node is not null
// Update only if the selection did not change
// Find missing uids loop
"/*           * initialize file observer thread with a reference to our           * beanshellScripts map           */"
// show selected message
// set name of organization
// create new search folder, but re-use old search folder
// from email address
// add command for execution
// create message value
// fill semantic context
//$NON-NLS-1$ //recentLabel.setFont(boldFont); //$NON-NLS-1$
// display changes
//$NON-NLS-1$ //sizeLabel.setFont(boldFont); //$NON-NLS-1$
// get messagecontroller of frame
// set value
//$NON-NLS-1$ //totalLabel.setFont(boldFont); //$NON-NLS-1$
// get flags
// disable toolbar text
// get selected message UID
// Check if the message still exists // or has been moved by e.g. a filter
// in case no attachment handler was executed correctly // -> fall back to default handler
"/* * Test for boolean equals(Object) */"
// empty line, means new contactcard
// if attachment can't be opened, save it only
// abort if nothing selected
// substitute special characters like: // <,>,&,\t,\n
// if it is in a table, then we need to insert it at the // selected position.
// decode filename
// remove from old mediator's listener list
// create string from inputstream
// updateBackground();
// reset progress bar
// show context menu
// Sanity tests
// rename "*.part" file to destination file
// add initial messageframe treenode
// get pop3 or imap account xml node
//      use global table options
// create reference to this message
// check if the returned String is has a length != 0
// update(observable, null);
// just show the encrypted raw message
// !!! Subject: test // create filter configuration // -> check if <Subject> <contains> pattern <test>
// return null;
// call AbstractFilter to do the tricky part
// init configuration
// construct new Message from decrypted string
// example: "columba://org.columba.mail/<folder-id>/<message-id>"
// else we set the body to the i18n String
// the first child must be the signed part
// add the rest of the original body - and transfer back to body var.
// get selected message
// the second child must be the pgp-signature
// update connection state
"// Determine whether there are 1, 2, or 3 names specified. These names should be separated by spaces //	or commas. If a comma separates the first two names, assume that the last name is specified first,  //	Otherwise, assume the first name is specified first. Middle name is always specified after the first name."
// fall back to first account as default
// create filter configuration
// name of font
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getStatus(org.columba.mail.folder.imap.IMAPFolder)	 */"
// parse for email addresses and substite with HTML-code
// item and item2 should be two different objects
// create filterlist datastructure
// check if a single entry is selected
// register interest on configuratin changes
// Create the closing boundary
// Edges of the poly shape
// query provider
// if we don't use this here - actions like reply would only work // on the // the encrypted message
// insert document type decl.
// Reply-To headerfield isn't specified, try to use From instead
// prepend
// Reset the selection
// cast to Local AbstractMessageFolder is safe here
// item and item3 should not be equal
// if size > than 1000 KB, transform to MB
// check if the charset is US-ASCII then there is something wrong // -> switch to UTF-8 and write to log-file
// add rest of body until start of </body>
//private File file;
"/*		 * builder.append(quotedColorCheckBox, quotedColorButton);		 * builder.nextLine();		 */"
"/*		 * builder.append(spellLabel, spellButton); builder.nextLine();		 */"
// get array of source references
// add smilies
//How to retrieve the mime part's contentID: String contentID = url.getRef(); //initialize stuff here
"/*	 * (non-Javadoc)	 * 	 * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,	 *      java.lang.Object, int, boolean, boolean)	 */"
// Does the server support the namespace extension?
// suggestionsJScrollPane.setMinimumSize( new Dimension( 200, 300 ) );
// parse for quotings and color the darkgray
// We are done - clear the status message with a delay
// Process other users namespaces
"/*		ipcHelper.executeCommand(ExternalToolsHelper.getSALearn()				+ "" --no-rebuild --spam --single"");				*/"
// get interval value
// if 1/3 of all characters are digits
// paint right outside border // g2d.setPaint(p1);
// Handle special case in which INBOX has a NIL delimiter // -> there might exist a pseudo hierarchy under INBOX+delimiter
// get Outbox folder from reference
// Get Text for Icon
// add this message to frequency database
// split the hierarchical name with at the delimiters
"/*     * wait for stream threads to die     *     */"
//Do nothing
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(org.columba.core.filter.FilterRule, org.columba.mail.folder.imap.IMAPFolder)	 */"
// add filter criteria
// update headerlist of destination-folder // -> this is necessary to reflect the changes visually // but only do it if the target folder is still in sync!
// false if search/replace is currently working
// double-click mouse listener
// expect a different hashcode from a newly created item...
// Display resulting MimeParts
"//		 create MH folder // -> use homeDirectory as top-level folder // -> this has to be an absolute path"
// set double-click action for attachment viewer
// Register F2 hotkey for renaming folder when the message panel has // focus
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setFirstLoginAction(org.columba.mail.imap.IFirstLoginAction)	 */"
// listen for configuration changes
// Get Tooltip for Icon
//$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-1$//$NON-NLS-2$
// public JComponent getContentPane() { // JComponent c = super.getContentPane(); // // // // return c; // }
// load xml document
// ---- titleTextField ----
// get message node at selected row
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */"
// Singleton
//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
// found match
// definition of a second
// timer to use
//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
// add new renderer
// does not occur
// add headerfields which are about to show up
// make Columba logger parent of macchiato logger
// enable/disable smilies configuration
//Do not access the inputstream after this line!
"//	public String marshall(IStructureType type); //	public IStructureType unmarshall(String xmlString);"
// get composer controller // -> get all the account information from the controller
// super(node, folderItem); // super(getDefaultItem("IMAPRootFolder", getDefaultProperties()));
"/*(.*://.*?)""  ""something"" with ://          (could be .*? but then the Pattern would match whitespace)             (      (&gt;).*  a html-Encoded > followed by anything                                                  |  or([""+punc+""]*)""  any Punctuation        (<br>)? 0 or 1 trailing <br>             )$  end of String*/"
// apply additional handcrafted rules
// Shall we use the HTML-IViewer?
// Which Charset shall we use ?
// check if this message was already learned // -> only add if this is not the case
// get header from folder
"/*	 * validate command parameters. At the moment only checks if there are any	 * invalid email addresses	 *	 */"
// Read Stream in String
// this is a HTML message
// execute filter
// strip HTML message -> remove all HTML tags
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getStatusMessage()	 */"
// XmlElement selectedBrowser = // messageviewer.getElement(OptionsItem.SELECTED_BROWSER); // selectedBrowser.addObserver(this);
// init new renderer
// same object
"/*	 * (non-Javadoc)	 * 	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)	 */"
// apply model
// open connection to SMTP server
// parse key:value lines
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.gui.config.general.MailOptionsDialog	 *	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)	 */"
// this is a text/plain message
// now send message source
// remove old renderer
// setText(body);
// use new viewitem
// final URL url = extractURL(ev);
"// icon //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon(""apply-filters-16.png""));"
// Some error in the client/server communication //  --> fall back to default login process
// if have already a suitable folder skip the search
// shortcut key // no shortcut here, because F10 conflicts with system accelerator key // putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F10, // 0));
// return default-account SpamItem instead 
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMimePartSourceStream(java.lang.Object,	 *      java.lang.Integer[])	 */"
// TODO (@author fdietz): this should be changed into a "real" window
// super.getTableCellRendererComponent( table, value, isSelected, // hasFocus, row, column );
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageRemoved(org.columba.mail.folder.event.IFolderEvent)	 */"
// ======== this ========
// open context-menu // -> this has to happen in the awt-event dispatcher thread
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getAttribute(java.lang.Object,     *      java.lang.String)     */"
// scale image
// synchronize local UID list with server UID list
//private boolean pop3;
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */"
// buf.append("<b>" + title + "</b><br>");
"/* (non-Javadoc) * @see javax.swing.table.TableCellRenderer#getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int) */"
// return default-account ImapItem instead 
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#setHeader(org.columba.ristretto.message.Header)	 */"
// fetch date from // "From ???@??? // ..."
// vector.add(moreButton);
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#count()	 */"
// Create Multipart/Mixed if necessary
// insert head section with charset def.
// 2 columns
// parse line by line
// custom headers
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.shutdown.IShutdownManager#register(java.lang.Runnable)	 */"
// NOTE if SSL is possible we just need the plain login // since SSL does the encryption for us.
// remove body part if already shown in text viewer
// concrete implementation of actions
//  Set id on from address
// update folder selection
// wait 10 seconds and check for pending commands again // this is useful if a command causes a deadlock
// TODO i18n "Help" button
// leave dialog empty if no source contact model specified
// can no longer assume that sendMessageDialog has been displayed
// getting current uid
// is true if the last search was successful // a position of the word after the last search ivokation; -1 if nothing found // a position of the word after the last replace ivokation; -1 if nothing was replaced
// send as text/html
// create search folder
"/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#remove(int)     */"
// compose message body as text/plain
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#registerDockable(java.lang.String, java.lang.String, javax.swing.JComponent, javax.swing.JPopupMenu)	 */"
// setup filter configuration
// important for cancel
// add <head> section
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION, float)	 */"
// write charset to header
// message doesn't contain this headerfield
// Remove the BodyPart(s) if any
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#indexOf(org.columba.core.filter.Filter)   */"
// *20030831, karlpeder* Also location is restored
// if message-size is bigger skip download of this message
// button.addMouseListener(new LinkMouseListener());
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#setCondition(java.lang.String)   */"
"/* (non-Javadoc)	 * @see org.columba.addressbook.gui.table.model.TableModelDecorator#getRowCount()	 */"
// to allow empty messages
// create search criteria
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#add(org.columba.core.filter.FilterCriteria)   */"
// Init Mime-Header with Default-Values (text/plain)
// skip, if filter is disabled
"/*		 * *20030918, karlpeder* Tags are stripped if the model contains a html		 * message (since we are composing a plain text message here.		 */"
// replace <head> section
"/*           * I specifically want this here to ensure that the directory exists and           * this method never returns null.           *           * Any files that were in the observation list have already been           * previously removed by checkFiles().           */"
// reset row height
//        putValue(LARGE_ICON, ImageLoader //                .getImageIcon("mark-as-important-16.png"));
// add signature if defined
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#getContactCount()	 */"
// update tree-node (for renaming the new folder)
"/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.calendar.datearea.ActivityDragResizeListener#activityDragResized(com.miginfocom.calendar.datearea.ActivityDragResizeEvent)	 */"
// get message with UID
// start parsing line
// Set Default Charset or selected
// message belongs to which account?
// Setup the XML that is to be written
// Some error in the client/server communication // --> fall back to default login process
// insert link tags for urls and email addresses
// backwards compatibility
// for text comparisons
"/*					 * For multipart Content-Types we need to take action (if					 * boundary is nonexistent): Eudora stores content type =					 * multipart even though the message is not really multipart -					 * e.g. because an attachment already has has been decoded					 * by Eudora)					 */"
// tests, if the list substracted with an empty list is equal to itself
// if the parent is a virtual folder the search cannot be applied directly // look for the correct uids by finding the first non virtual folder
// retrieve the actual search result data
// headerfield is empty
// --> correct token data
// date
// server message numbers start with 1 // whereas List numbers start with 0 // -> always increase fetch number
// Init Mime-Header with Default-Values (text/html)
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterCriteria#setCriteria(int)   */"
// compose text part
// make sure this mailbox is selected
//attachments
// On the first try check if we need to show the password dialog // -> not necessary when password was stored
// compose html part
// ======== panel8 ========
// copy flags
// substitute special characters like: // <,>,&,\t,\n,"
// If the cause is a IMAPExcpetion then only password // wrong // else bogus authentication mechanism
// Now we can search this folder since no mail from // this folder will come in the list
// From this point we have a username and password // from configuration of from the dialog
// change subject column renderer back to default
// set the attachment flag
// get value of Subject, From or To header
// Get all MimeParts
// an url - check whether its already a link
// Return if not clicked on any column header
// If the same message is still shown // Mark it as read
// search for closing bracket separately to account for attributes in tag
// If tooltip is null, removes any tooltip text.
// button.addMouseListener(new LabelMouseListener());
// contains "," comma character
// Color backgroundColor = // UIManager.getColor("TextField.background");
// current position in s
// an email adress was found - check whether its already a link
//super.dock(messageViewerDockable, IDock.REGION.CENTER);
// Combine the results in one array
// Maps TableColumn objects to tooltips
// create attachment component with text, icon // tooltip, context menu and double-click action
// Current column whose tooltip is being displayed. // This variable is used to minimize the calls to setToolTipText().
// if the closing mark is after the s1 mark do not insert a link
// *20040229, karlpeder* Use default account as fall back
// at any time i get here uids of length 0. If this is so we should // return and do nothing
// getting last selection
// retrieve event from store
// awt-event-thread
// make sure that we have a Message-ID
// RFC822 - Header
// AND or OR ? -> AND is implicit, OR must be specified
/* remove from script list */
// move
// contains not
// Quote according model type (text/html)
"/*             \\b  Start at word boundary         ((\\w*(:\\S*)?@)?  [user:[pass]]@ - Constructprot + ""://  protocol and ://       [""+any+""]  match literaly anything...         ) (?=\\s|$)  ...until we find whitespace or end of String*/"
// get list of plugins
// just look if the first character alrady an < // so can use this mailaddress as the correct address
// plain text
"/*        * it's the script responsability to define the ""metadata"" by invoking        * .setName(), .setAuthor() and .setDescription()        */"
// UnsupportedFlavorException, IOException
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#selectAll() */"
// load plugin handler used for the columns
"/*		 * AbstractMessageFolder destFolder = (AbstractMessageFolder) treeView		 * .getDropTargetFolder();		 */"
// example: X-BeenThere: columba-devel@lists.sourceforge.net
// create html element, if it doesn't exist
// at the moment we are only supporting gpg. So let us code hard // here the gpg driver
//    shortcut key
"/* * *20030623, karlpeder* "" and space handled also */"
// select all rows
//int getRow(MessageNode node);
// We save only the first item in the cc-list
// expand all rows
"/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#addEmptyAction()     */"
// changing the selection to the first row
// Process the events
// load plugin
// only do checking if we are in online state
// if there are entries in the table
// tests, if the listPart substracted
"//			 @author: fdietz never request focus //requestFocus();"
// getting the node
// update status message
// if subject doesn't start already with "Fwd:" prepend it
// folder in which the update occurs
// enable, if more than zero treenodes selected
// scrolling to the first row
"//					 re-select folder"
"/*			 * // scrolling to the first row			 * scrollRectToVisible(getCellRect(row, 0, false)); requestFocus();			 */"
// fall-back to global resource loader
// don't clear selection
// Remove the ending separator and whitespace, if any exist
// init threaded-view model
// ensure tzid matches date-time timezone.. // Parameter tzId = // dtStamp1.getParameters().getParameter( // Parameter.TZID);
// remove all columns for column model
// pass tree to model, used by the threaded-view
// make it translucent
// init sorting model
// fill formatted textfield
// if subject doesn't start already with "Re:" prepend it
// notify observers (sorting state submenu)
// If address contains a comma, enclose the display name portion in double-quotes
// get translation
// *20030919, karlpeder* Added handling of html messages
// init view
// One is the easiest case
// column IDs are all lower case
// create new event with new UUID
// Assign a tooltip for each of the columns
// Unregister/register as Folder listener
// clear model
// substract the uids on the server from the downloaded uids -> // headerUids are the uids that have been removed from the server
// register interest on folder events
// make selected row visible again
// We don't need to issue a additional NOOP // here since the ensureLogin() call above // ensures also the correct Status in a // MIN_IDLE interval timeframe.
// if message was removed from JTable
// get current selection
// get inputstream of message body
// for example: "Re: this is a subject"
// skip if user didn't specify search term for this criteria
"/* * Test for boolean not equals(Object) */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#recentChanged(java.lang.String, int)	 */"
// get configuration
"/*				 * case WorkerStatusChangedEvent.FINISHED : setVisible(false);				 * break;				 */"
//MessageNode getMessageNode(Object uid);
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#undo() */"
// remember selected node
// loginMethod = (String) loginMethodComboBox.getSelectedItem();
// when marking messages, don't touch selection
"/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.calendar.datearea.ActivityMoveListener#activityMoved(com.miginfocom.calendar.datearea.ActivityMoveEvent)	 */"
// update infopanel (gray panel below the toolbar) // showing total/unread/recent messages count
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#recreateFilterRows()	 */"
// re-select previous selection
"/* (non-Javadoc)	 * @see org.columba.calendar.ui.calendar.api.IActivitySelectionChangedListener#selectionChanged(org.columba.calendar.ui.calendar.api.ActivitySelectionChangedEvent)	 */"
// only re-select if only a single row was formerly selected
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#getView()	 */"
// enable/disable cut/copy/paste/selectall actions // FocusManager.getInstance().updateActions();
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isRedoActionEnabled() */"
// load options of newly selected folder
// implemented for completeness. // Time-out for clearing text is ignored here.
// select row
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#setContacts(java.util.List)	 */"
// remember previously selected folder
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isPasteActionEnabled() */"
// if new columns were added, we have to initialize the tooltips
// String definitions for the charsetnames // NOTE: these are also used to look up the // menuentries from the resourceloader
// Member variables...
// remove all columns from table model
"/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#removeWorkerStatusChangeListener(org.columba.core.gui.statusbar.event.WorkerStatusChangeListener)         */"
// selected nodes
"/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#removeTaskManagerListener(org.columba.core.taskmanager.TaskManagerListener)         */"
// expand all unread message nodes
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#setName(java.lang.String)   */"
"/* * Test for hashCode() */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#moveUp(org.columba.core.filter.Filter)   */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#get(int)   */"
//MessageNode getRootNode();
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#addAll(org.columba.core.filter.FilterList)   */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#add(org.columba.core.filter.Filter)   */"
// clear messagenode cache
// let us hard coding the gpg for each connection. Later we should // support also other variants (like smime)
// repaint table header
"/*	 * (non-Javadoc)	 * 	 * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)	 */"
// notify the model to sort the table // sorter.sort(column);
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#savePositions()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#openView(java.lang.String)	 */"
//AbstractFolderOptionsPlugin getPlugin(String name);
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION, float)	 */"
"/* (non-Javadoc)	 * @see org.columba.core.print.cParagraph#print(java.awt.Graphics2D)	 */"
// simulate charset changed to initialize selectedMenuItem
//setEnabled(false);
"/* (non-Javadoc)         * @see javax.swing.table.TableCellRenderer#getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)         */"
//TableView getView();
// int column = view.convertColumnIndexToModel(viewColumn); // int column2 = view.convertColumnIndexToView(viewColumn);
// disable every icon // -> set appropriate icon for selected column
"/* (non-Javadoc) * @see org.columba.mail.folder.RootFolder#getInbox() */"
// view the message under the new node
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#set(org.columba.mail.message.HeaderList)	 */"
// getting from the next node the uid
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.FolderTreeNode#addSubfolder(org.columba.mail.folder.FolderTreeNode)	 */"
// user struct
// select folder again after move operation
// locate body start- and end tags
// use ResourceBundle's internal classloader
"/*	 * Test method for 'org.columba.core.tagging.TagManager.getAllTags()'	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#update(java.lang.Object, org.columba.mail.message.IColumbaHeader)	 */"
// test if the size of self substracted list is 0
"/*		 * xp[0] = x + 6; xp[1] = x + 12; xp[2] = x; yp[0] = y - (c.getHeight() /		 * 4); yp[1] = y + (c.getHeight() / 4); yp[2] = y + (c.getHeight() / 4);		 * 		 * g2.setColor(Color.white); g2.drawLine(xp[0], yp[0], xp[1], yp[1]);		 * g2.drawLine(xp[1], yp[1], xp[2], yp[2]); g2.setColor(Color.gray);		 * g2.drawLine(xp[2], yp[2], xp[0], yp[0]);		 */"
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#clear()	 */"
// There is no parent
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#remove(java.lang.Object)	 */"
"/* * Test for int hashCode(). */"
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#containsValue(java.lang.Object)	 */"
// select it
//  -> uncomment to enable/disable action
// set default html or text based on stored option // ... can be overridden by setting the composer model
// getByName
// check if the node is not null
// loop until signing was sucessful or the user cancels the passphrase // dialog
// and set this to the actual ref
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#getCondition()   */"
"/*	 * Test method for 'org.columba.core.tagging.TagManager.addTag(String)'	 */"
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream)	 */"
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getFlags(java.lang.Object)     */"
// create config-folder
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#insert(org.columba.core.filter.Filter, int)   */"
"/*		 * ((MailFrameMediator)		 * frameMediator).registerTableSelectionListener(this);		 */"
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMimePartBodyStream(java.lang.Object,     *      java.lang.Integer[])     */"
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderAdded(org.columba.mail.folder.event.IFolderEvent)	 */"
// remove configuration directory
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getHeaderFields(java.lang.Object,	 *      java.lang.String[])	 */"
// saving the last selection for the current folder
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#connectionClosed(java.lang.String, java.lang.String)	 */"
"/* (non-Javadoc) * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean) */"
// MULTIPLICITY.ONE is default
"/* (non-Javadoc)     * @see org.columba.mail.gui.composer.AbstractEditorController#setViewText(java.lang.String)     */"
// default value is 200 pixel // int pos = // viewItem.getIntegerWithDefault("splitpanes","attachment", 200);
"// icons //		putValue(SMALL_ICON, ImageLoader.getIcon(""folder_delete.png"")); //		putValue(LARGE_ICON, ImageLoader.getIcon(""folder_delete.png""));"
"/* * Test for getColor() */"
"/*   * (non-Javadoc)   *    * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)   */"
// toolbar text
"/* (non-Javadoc)     * @see org.columba.core.gui.selection.ISelectionListener#selectionChanged(org.columba.core.gui.selection.SelectionChangedEvent)     */"
// add profile to profiles.xml
// icon for toolbar
"/* (non-Javadoc)         * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)         */"
// find all possible plugin directories
// warn user in any other cases
// clear message-list selection
"/*     * (non-Javadoc)     *      * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */"
// clear message list
"//		 necessary for the message-frame only"
// icon for menu
// ---- officeTextField ----
"/* * Test for clone() */"
// clear message-viewer
// get selected stuff
// set toolbar text
// now instanciate the folder classes
"/*		 * *20030906, karlpeder* Method signature changed to return an		 * AbstractEditorController		 */"
// If the tree is in a DND action then we dont need to update all // listeners, since this only a temporary folder selection.
// message contains list of attachments
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#checkSupportedAuthenticationMethods()	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#copy(org.columba.mail.folder.imap.IMAPFolder, java.lang.Object[], org.columba.mail.folder.imap.IMAPFolder)	 */"
//      shortcut key
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#subscribeFolder(java.lang.String)	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#append(java.io.InputStream, org.columba.ristretto.imap.IMAPFlags, org.columba.mail.folder.imap.IMAPFolder)	 */"
// message body
// do not only update the tag search result when click on a different // tag, also do a refresh of the same tag when double click on it
// getting prev node
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getAllHeaders(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchFlagsListStartFrom2(int, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimeTree(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */"
// date range (start time, end time) definition
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#markMessage(java.lang.Object[], int, org.columba.mail.folder.imap.IMAPFolder)	 */"
// add result panel as listener for new search results
// MULTIPLICITY.ZERO_TO_ONE is default
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMessageFolderInfo(org.columba.mail.folder.imap.IMAPFolder)	 */"
// shortcut key
"/* (non-Javadoc)	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */"
// get a list of MessageNode objects of the first // hierachy level
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setObservable(org.columba.api.command.IStatusObservable)	 */"
// do the search
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#update(java.util.Observable, java.lang.Object)	 */"
// date time timezone definition
// for each element in the message-header-reference or in-reply-to // headerfield: - find a container whose message-id matches and add // message, otherwise create empty container
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#getFlags()	 */"
// don't prompt user if composer should be closed
// shortcut key is STRG-E ;mod: 20040629 SWITT
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#setHeader(org.columba.ristretto.message.Header)     */"
// toolbar text is usually a bit shorter ;mod: 20040629 SWITT
// tooltip text ;mod: 20040629 SWITT
// Platform maintainers: add your platform here
// icons //        putValue(SMALL_ICON, //            MailImageLoader.getIcon("email_edit.png")); //        putValue(LARGE_ICON, MailImageLoader.getIcon("email_edit.png"));
"/*	 * (non-Javadoc)	 *	 * @see org.columba.chat.ui.roaster.IRoasterTree#getSelected()	 */"
// pass command to scheduler
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#isSignedOn()	 */"
//mod: 20040629 SWITT
"/*                 * If the height of a view exceeds the paperheight, there should                 * be no break before (since it will be impossible to fit it in                 * anywhere => an infinite loop). We don't have access to the                 * pageheight here, therefore an ""educated guess"" is made:                 * No breaks are inserted before views starting within the first                 * 1% (chosen to avoid round-off errors) of the available space                 * given by actBreakHeight. If the view starts after the first 1%,                 * a break is inserted and the view will start at the top of the                 * next page (i.e. withing the first 1% this time).                 */"
// identity definition
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#addChat(java.lang.String)	 */"
"/*		 * folder.getConfiguration().set(""property"", ""enable_threaded_view"",		 * enableThreadedView);		 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setPresenceMode(org.jivesoftware.smack.packet.Presence.Mode)	 */"
// if this is set to true, we use the local selection, instead // of using the table selection
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folder.mailboximport.DefaultMailboxImporter#getDescription()	 */"
// setJMenuBar(menubar);
"/* (non-Javadoc)	 * @see org.columba.core.gui.plugin.AbstractConfigPlugin#updateComponents(boolean)	 */"
// clear statusbar message
"/*         * calculate a new break height according to the contents, possibly         * smaller to break before some content (i.e. not to break in the         * middle of something         */"
// cancel command execution/updateGUI methods, if folder selection // has been modified
// *20030614, karlpeder* only enabled when message(s) selected
"/*		 * ( ( AbstractMailFrameController) frameMediator)		 * .registerTableSelectionListener( this);		 */"
// Default signature
// shortcut key //putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F, 0));
// uncomment to enable action
//        putValue(LARGE_ICON, ImageLoader.getImageIcon("drafts-16.png"));
// look for default view settings (if not found, null is returned)
// shortcut key //putValue(ACCELERATOR_KEY, // KeyStroke.getKeyStroke(KeyEvent.VK_BRACELEFT, 0));
// create a panel with all 4 buttons of the window // columns  // rows
// -> move messages to trash
// register as Observer
"// remove color //			add color selection to reference"
// createSubMenu();
// *20040510, karlpeder* columns may be null (first time we // visit a folder!?) // IDefaultItem item = new DefaultItem(xmlElement);
// toolbar text is usually a bit shorter
// close window
// // composer_options.xml: // //<options> //<gui> //  <view id="0"> //    <window maximized="false" height="700" width="600" y="0" x="0" /> //    <toolbars infopanel="true" main="true" /> //    <splitpanes header="200" attachment="100" main="200" /> //    <addressbook enabled="false" /> //  </view> //</gui> //<spellcheck executable="/usr/bin/aspell" /> //<external_editor enabled="false" /> //<forward style="attachment" /> //<subject ask_if_empty="true" /> //<html send_as_multipart="true" enable="false" /> //</options>
// optional String-based attribute
// create referenc
"//		 putValue(SMALL_ICON, //		            MailImageLoader.getIcon(""email_open.png""));"
// load all internal addressbook plugins
"/*        putValue(SMALL_ICON, ImageLoader.getSmallImageIcon(""redirect_small.png""));        putValue(LARGE_ICON, ImageLoader.getImageIcon(""redirect.png""));        */"
// add color selection to reference
// create virtual folder for each criteria
// get original folder
// should be virtual
// icons ;mod: 20040629 SWITT
// if all messages are tagged with tag, then return true, else false
//      putValue(LARGE_ICON, ImageLoader.getImageIcon("reply_small.png"));
// for some weird reason the table loses its inter-cell spacing // property, when changing the underlying column model // -> setting this to (0,0) again
// trash folder is selected // -> delete message
// listener updates selection status, when ever a message selection changes
// if this is a message-viewer frame viewing a message only // the window should be closed, too
// init table model
// turn off SSL for the future
// no specific renderer found // -> use default renderer
// necessary for the message-frame only
// add array to vector
// tc.setCellEditor(new CustomTreeTableCellEditor());
// view message list
// mark as bold if message is unseen
// setup and load constructor
"//	public JComponent getComponent() { //		JPanel panel = new JPanel(); //		panel.setLayout(new BorderLayout()); // //		panel.add(messageController, BorderLayout.CENTER); // //		 // //		return panel; //	}"
// get language configuration
// sort all the results
// if header contains more fields than the cached header
// open composer
"/*this.rootNode = root;parse();createMissingElements();*/"
// ---- otherPOBoxLabel ----
// Shortcut key //putValue(ACCELERATOR_KEY, // KeyStroke.getKeyStroke(KeyEvent.VK_BRACELEFT,0));
// // create a view more button, responsible for // // opening the attachment viewer popup // JButton moreButton = createAttachmentMoreButton();
// only update table if, this folder is the same // as the currently selected
//$NON-NLS-1$ //nameLabel.setFont(boldFont);
// FIXME r.setPos();
// // Writer interface //
// fetch the headerlist
// *20030621, karlpeder*
// register as configuration change listener
// reopen the port
// parse for urls and substite with HTML-code
// clear message list viewer
// this is needed to be able to open attachments of the decrypted // message
// large icon for toolbar
// if the pgp mode is active we should get the decrypted part
// Register as SelectionListener to track the selection // of the tree
// End class XmlIO
// add every header from HeaderList to the table as MessageNode
//setText(accountName);
// write to temporary file
// Important!! // -> replacing this character must happen first
// update treemodel
//      notify tree //getRealModel().getTreeModel().nodeStructureChanged(getRootNode()); //}
// only import VEVENT and VTODO for now
// save every MessageNode in hashmap for later reference
// add this node to cache
// init bottom panel with OK, Cancel buttons
// create MessageNode
// get unique id
// ensure tzid matches date-time timezone.. // Parameter tzId = // dtStart1.getParameters().getParameter( // Parameter.TZID);
// if no Message-Id: available create bogus
// create tree structure
// putValue(LARGE_ICON, ImageLoader.getIcon(IconKeys.FOLDER_OPEN));
// get header
"/*		 * int index = locationToIndex(new Point(x, y));		 * 		 * setSelectedIndex(index);		 */"
// do the sorting
// load profile config file
// the last element is the direct parent
// save every message-id in hashtable for later reference
// send from address and recipient list to SMTP server // ->all addresses have to be normalized
"// table is empty // -> just display empty table			"
// return if selection change is in flux
// save every message in a list
// immediately update text and progress bar // updateGui();
// check if there are messages marked as recent //  -> in case underline parent node
// has children
// observable connects the sorting table with the sort menu (View->Sort // Messages)
// recent found
// bottom.setBorder(new SingleSideEtchedBorder(SwingConstants.TOP)); // bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) ); // bottom.add( Box.createHorizontalStrut());
//filterList = new Vector();
"//		 go through whole tree and sort the siblings after date"
// getting folder info
// define false < true
// Error
//$NON-NLS-1$ //locationLabel.setFont(boldFont); //$NON-NLS-1$
// Load a file. This is what starts things off.
// TreePath path = tree.getPathForRow(row);
// use local date settings
// setOpaque(true); //MUST do this for background to show up.
"/*		 * matchComboBox.addItem(""is""); matchComboBox.addItem(""is not"");		 * matchComboBox.addItem(""begins with""); matchComboBox.addItem(""ends		 * with"");		 */"
// First find the beginning element
// Create the XML reader... // xr = XMLReaderFactory.createXMLReader();
// private boolean isBordered = true;
// *20040510, karlpeder* columns may be null (first time we visit a // folder!?)
// Set the ContentHandler... // xr.setContentHandler( this );
// add command to CompoundCommand
//setText("!");
// create a virtual folder with all messages holding this tag
// Maximum data to put on a "one liner"
//setForeground( Color.red );
"/*	 * // Default constructor public XmlIO() { }	 */"
// saving last selected Message to the folder
// make sure this configuration is also visually working immediately
// frame.listView.update();
//setForeground( Color.blue );
// fall-back if error occurs
// Top level element (Used to hold everything else)
// Color bgPaint = new Color(255, 150, 150);
//eteTextForeground( Color.blue );
// String userVisibleName = pluginHandler.getUserVisibleName(id);
// maybe the plugin wasn't loaded correctly // -> use default // row = new MarkActionRow(this,action);
// The current element you are working on
"/*	 * protected XmlElement createDefaultConfiguration(String id) { XmlElement	 * child = super.createDefaultConfiguration(id);	 * 	 * XmlElement splitpanes = new XmlElement(""splitpanes"");	 * splitpanes.addAttribute(""main"", ""200""); splitpanes.addAttribute(""header"",	 * ""200""); splitpanes.addAttribute(""attachment"", ""100"");	 * child.addElement(splitpanes);	 * 	 * return child; }	 */"
// attachment controller doesn't support paste actions
// create URI representing the contact
// current path is the parent of the current element
// user is still manipulating the selection
// private AdapterNode actNode;
// store id
// add account to mail-checking manager
// abort if not in debugging mode
// block transfer to self!
// third column is a JCheckBox column
//setText("!!");
//setForeground( Color.red ); //setText("!!");
// notify all observers
// this node is category folder // -> don't make it editable
// no rows are selected
// print all collected profile data
// should be a MutableTreeNode
// current time
// this profiling point is parent of the next one
// create a virtual folder
// plugin wasn't correctly loaded
// if there is nothing selected return
// enabled/disabled checkbox must be editable
// update message list
"/*// enable/disable pluginString id = currentNode.getId();MainInterface.pluginManager.setEnabled(id, b.booleanValue());*/"
// ensure that we are currently in the mail component
// TODO: re-enable feature, the following code violates our // design, accessing folders is only allowed in Command.execute()
// attachment controller doesn't support redo operation
// create new menu
"/*		 * // copy CopyMessageCommand command = new CopyMessageCommand(result);		 * CommandProcessor.getInstance().addOp(command);		 */"
// Get the salutation if one is specified
// Remove the title and the preceding comma
// disable max occurrences
// Remove the salutation
// If the fifo could not be restored initialize it
"/*         * JPanel innerPanel = builder.getPanel();         * FormDebugUtils.dumpAll(innerPanel); setLayout(new BorderLayout());         * add(innerPanel, BorderLayout.CENTER);         */"
// Initialize title strings
"/*   * public FilterCriteria getCriteria(int index) { return (FilterCriteria)   * list.get(index); }   */"
// public CalendarItem getSelected() { // int row = getSelectedRow(); // // return ((CheckableItemListTableModel) getModel()).getElement(row); // }
// search in subfolders recursively
"//		TagList tagList = new CalendarTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));"
// skip if message doesn't contain the requested headerfield
// get first selected message
// save expanded state
// body untouched
// concate the full name of the new mailbox
// MUST do this for background to show up.
// Save the authentication modes
// Do nothing if we are hovering over the root node
// get configuration from tree.xml file
// recursivly expand all children
// expand folder
// warn user
// match all matches
// safe to cast to IMailFolder here, because only those are visible to the user
// re-add all top components like recipient editor/subject editor
// no sorting
// If rootFolder is not cached traverse the tree
// if window is maximized -> ignore the window size properties // otherwise, use window size property // but ensure that the window is completly visible on the // desktop
// create temporary folder in "<your-config-folder>/mail/"
// Check for default Ports
// check if it contains comma character
// get headerfields
// ok pressed
//putValue(SMALL_ICON, ImageLoader.getIcon("script.png"));
// Note: we negate the expanded state because this is // a will-expand/collapse listener
// attributPanel.add(imapPanel, BorderLayout.CENTER);
"//box.setBackground(new Color(248, 248, 248)); //		JScrollPane pane = new JScrollPane(box); //		pane.setBorder(null);"
// calculate mailbox size in background worker
// search all criteria in specific provider only
// register at shutdownmanager // -> when closing Columba, this will automatically save all folder data
// associate ui component with FocusOwner
"// icon for menu //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon(""16_configure_folder.png""));"
// set parent folder uid
// cast to Folder
// create composer model
//centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) ); //centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) );
// only use the first selected folder
// // Tell frame model that frame is closing. If this frame hasn't been // opened using FrameManager methods, FrameManager.close does nothing. //
// Test if there is a trailing html tag
// ---- homepageButton ----
"/*        ((MailFrameController) frameMediator).registerTreeSelectionListener(                this);        */"
// it is safe here to cast to AbstractMailFrameControlller
// ---- emailTextField1 ----
// close stream
// cancel pressed
"/*		 * listView = new FilterListTable(filterList, this);		 * listView.getSelectionModel().addListSelectionListener(this);		 * JScrollPane scrollPane = new JScrollPane(listView);		 * scrollPane.setPreferredSize(new Dimension(300, 250));		 * scrollPane.getViewport().setBackground(Color.white);		 * centerPanel.add(scrollPane);		 */"
// save old framemediator in cache (use containers's old id)
// try to set selection
//Folder folder = (AbstractMessageFolder) r[0].getFolder();
// select node in JTree
// initialize completer
// show error message
// implement this
// get global sorting state
// BUGFIX but don't know why that bug occurs
// sorting is enabled
// Drag, resize interactions
// layout center panel
// We have a special Command for VFolders
// apply sorting state
// successfully connected and autenthenticated to SMTP server
// sorting is disabled
// If no exception happened we have successfully logged // in
//tstich: Someone added <html> tags here. This is not the right place!
"/*		 * XmlElement filter = new XmlElement(""filter"");		 * defaultElement.addElement(filter);		 */"
// set subject
// if mediator contains a sortable treemodel
// set tooltip text
// need to be called before search/replace to set up all the states we need
// make sure there is nothing within the root dockingport
// make sure we are logged in
// Show first time Account Wizard
// skip the first column // builder.setLeadingColumnOffset(1); // Add components to the panel:
// If it isnt a message folder, then it must be a root, and those // should not be sorted.
"/*		 * If no Date header was found, it is necessary to contruct a new one		 * (this is the case for outgoing messages from Eudora)		 */"
// setting default Values // setFont(plainFont); // setToolTipText("");
// set label text
// Check if the frame controller has been registered, else do nothing
// end of text was reached -> begin at the start
// name of folder
// retrieve contact model from folder
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getDelimiter()	 */"
// Register as listener to the SelectionManger // to check for selection changes
// create message
//lastreplaceposition = lastfoundposition; //+ replaceWith.length();
// add selection listener
// find backwards
"/* RIYAD: The Prefs API cannot be used to read the Window's registry, * it is coded to use the registry (if available) as a backing store * on in the SOFTWARE/JavaSoft/Prefs registry keys for HKEY_CURRENT_USER * and HKEY_LOCAL_MACHINE paths. I have seen a few java apps that use * the Windows registry and they all required a native lib to do it. */"
// default selection is local Inbox
"/*         * Component strut2 = Box.createRigidArea(new Dimension(30, 5));         * gridBagLayout.setConstraints(strut2, c); eastPanel.add(strut2);         *         * gridBagLayout.setConstraints(defaultButton, c);         * eastPanel.add(defaultButton);         */"
// Transferable interface methods...
// select the "Normal" entry as default
// Constants...
// name = textField.getText();
// Set the width, height and image type
// try again, but ignore charset specification in the html
// Create a graphics context for this buffered image
// need to change selection // Set ignore flag
// convert to inputstream
//lastreplaceposition = lastfoundposition;
// if not specified return empty iterator
// only update if timestamp is equal
//$NON-NLS-1$ //unreadLabel.setFont(boldFont); //$NON-NLS-1$
// match whole word
// result.append(", ");
// append recent message count // -> using blue font
// comments are not displayed // correctly in composer
// don't care
// draw folder name and unseen count // -> using bold font
"/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#get(int)     */"
// if IMAP selectable folder // -> lightgray font color and italic
// table should be updated when tree selection changes
// LOGIN is always supported
// send cancel event to worker
// register for model changes to enable/disable when // user switches between html or text plain mode
//intern variable which is used for text replace purposes 
// close the mailbox if it is selected
//bottom.add( Box.createHorizontalStrut());
// register interest on tree selection changes
// Set the readOnly flag
// we generate most buttons using the actions already instanciated
// Quote original message - different methods for text and html
"/*		 * // use wrapper class for easier handling of references array adapter =		 * new FolderCommandAdapter( (MailFolderCommandReference[])		 * getReferences());		 *  // get array of source references MailFolderCommandReference[] r =		 * adapter.getSourceFolderReferences();		 */"
// private JTextField loginTextField;
// user = loginTextField.getText();
// and getting the uid for this node
// private JFrame frame;
// JButton[] buttons = new JButton[2];
// create <type> element
// bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) );
// Use reply-to field if given, else use from
// bottom.add( Box.createHorizontalStrut());
// create IMAP protocol
// Just use the default as fallback
// Stick with the default charset
// CAPAs say that SSL is not supported
// if CAPA was not support just give it a try...
// shall we switch to SSL?
// start a new search -> clear all previous search results
// make sure we are already logged in
// remove // the // 'AUTH='
//Layout a row and column "grid"
// Used to control the state in which // the automatic updated mechanism is
// AUTH?
// CAPA not supported
// add to folder
// combine them to one string
// create In-Reply-To:, References: headerfields
// Login loop until authenticated
"//		 register interest on tree selection changes"
// AUTH
"/*	 * Test method for 'org.columba.core.tagging.TagManager.removeTag(String)'	 */"
// No response means zero!
// User pressed OK
// User cancelled authentication
// if none selected select this folder instead of getting the status
// Convert to a MailboxStatus
// Save or Clear the password in the configuration
// login failed?
// Here we get the new mailboxinfo for the folder
// check if the mailbox already exists -> subscribe only
// disabled IMAP folder tests as they require connection // to remote IMAP server //setup(suite, new IMAPTstFactory());
// This exception is not because wrong username or // password
// number of headerfields
// copy every headerfield the original message contains
// build message orginal ; mod:2004629 SWITT
// load database from file
// Entry does not exist on server // -> add nothing
// notify configuration changes listeners // @see org.columba.mail.gui.message.TextViewer
// create the mailbox on the server
// store the intermediate results in a list
"/*         * bottomPanel.setBorder(new WizardTopBorder()); Border border =         * bottomPanel.getBorder(); Border margin =         * BorderFactory.createEmptyBorder(15, 10, 10, 10);         * bottomPanel.setBorder(new CompoundBorder(border, margin));         */"
// Sync subscribed folders if this is the first login // in this session
// subscribe to the new mailbox
// if mnemonic is first character of this string
//fill sizes string array with numbers from 7 to 18
// dont forget the rest
// divide in packs
// the UIDS start UIDNext till UIDNext + uids.length
"//String checked = //	composerController.getComposerSpellCheck().checkText( //		composerController.getEditorController().getView().getText());"
// update the progress
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#updateGUI()	 */"
"/* (non-Javadoc) * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int) */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewToday()	 */"
// strip remaining tags
"/* (non-Javadoc)	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */"
// get list of user-defined headerfields
// One or many arguments?
// add it to the headerlist
// remove leading or trailing whitespaces
// Now the state of the procotol is more certain correct
// setBorder(BorderFactory.createCompoundBorder(BorderFactory // .createEmptyBorder(5, 5, 5, 5), BorderFactory // .createCompoundBorder(new RoundedBorder( // new Color(220, 220, 220)), BorderFactory // .createEmptyBorder(5, 5, 5, 5))));
// return result
"/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemChanged(org.columba.calendar.store.api.StoreEvent)	 */"
"/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemRemoved(org.columba.calendar.store.api.StoreEvent)	 */"
// something else is wrong
//view.setSelectedItem( model.getHeaderField("X-Priority") );
// Use a caching mechanism for this
// update this point of time as last communication // since every functio calls this before communicating with // the server
"/*			 * clear existing attachments from the view *20031105, karlpeder*			 * Added to avoid dupplicating attachments when switching btw. html			 * and plain text.			 */"
// AFTER
// pass contact data along to AddressComboBox
// AND : simply create a list of arguments
// search for mnemonic
"/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.ashape.interaction.InteractionListener#interactionOccured(com.miginfocom.ashape.interaction.InteractionEvent)	 */"
// Also set the delimiter
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#getSelectedActivity()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#setViewMode(int)	 */"
// OR : the arguments must be glued by a OR SearchKey
"/* (non-Javadoc)	 * @see org.columba.calendar.ui.list.api.ICalendarListView#getSelected()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewPrevious()	 */"
"//		 re-select folder"
// add JPanel with useful HTML related actions.
// remove all items
// only prompt user, if composer contains some text
// split key/value pairs
// make sure that JFrame is not closed automatically // -> we want to prompt the user to save his work
"//		titlebar.setMidColor(INACTIVE_MID_COLOR); //		titlebar.setFillColor(INACTIVE_FILL_COLOR); // //		titlebar.setTitleColor(INACTIVE_LABEL_COLOR, INACTIVE_MID_COLOR, false);"
// check if totally out of range.
"/* (non-Javadoc)	 * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)	 */"
// Remove duplicates or the mail address from the receiver account
// create scrollapen
// account ID
// restart timer
// set small icon for menu // putValue(SMALL_ICON, ImageLoader.getImageIcon("stock_convert-16.png"));
// register interest on account changes
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#setVisibleDateRange(org.columba.calendar.model.api.IDateRange)	 */"
// select the account this mail was received from
// Update all component according to the new model
// set display text - possible with a mnemonic defined using &
// get list of all accounts
"/*	 * This method is called whenever the month or year changes. It's job is to	 * repaint the labels and determine whether any selection range limits have	 * been reached.	 */"
// very unlikely to happen
// figure out how many blank spaces there are before first day of // month, // and calculate coordinates of first drawn cell
/* IETF variant */
"/*		 * int index = list.size() - 1;		 * 		 * remove(index);		 */"
//private POP3ServerCollection popServer;
// ask user to kill pending running commands or wait
// only create new subfolders if we used the default "Search Folder"
// offline -> go online
// mnemonic found // ...and not at the end of the string (which doesn't make sence)
// for each account that is enabled and in the fetchalllist
// if the last selection for the current folder is null, then we show // the // first/last message in the table and scroll to it.
// Do not allow an empty name
// TableView view = tableController.getView();
// create tag vector
// search the src folder with the src uid array
//system beep
// Add this header to the list for later searching
// for each account
"// Check if the parentfolder is remote & we are online				"
// remove whitespaces
// ensure root exists
// re-select folder
// found matching account
//increase minimum height by line height and line spacing
// remove this account
// notify model
// new message
//  check if we are online
// do the parsing
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#getContacts()	 */"
// remove the bodypart from the mimeparts // that are added to the attachment viewer
// wait for 2 seconds until the dialog is openened
// message colour should be black as default
// Was this message actually copied?
//uid = o;
// ... or, add the file in case there was no "%1" used
// check if the optional value exists
// Check Internet Connection
// Check if Columba is the default mail client
// new NewMessageAction().actionPerformed(null);
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#getComponent() */"
// init Map
// Single OS identifiers: Window 95, Window 98, ...
// Activate all Virtual Folders
// check if contact is tagged
// Remove the double-quote characters from around the addresses in the string 
// the next token is an token with the whole Mailaddress
"/*         * (non-Javadoc)         *          * @see org.columba.api.command.IStatusObservable#getCancelled()         */"
// use default account
// Copy the commandline from the client info to the Classes mailto entry
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isSelectAllActionEnabled() */"
// debug output
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isCopyActionEnabled() */"
// Create a emtpy header an back off
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isDeleteActionEnabled() */"
// no more matches - append rest of string
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#alertMessage(java.lang.String)	 */"
// the first token is irrelevant
"/*		((AbstractFolder)MailInterface.treeModel.getRoot()).add(cyrusRoot);		((AbstractFolder) MailInterface.treeModel.getRoot())        .getConfiguration().getRoot().addElement(        		cyrusRoot.getConfiguration().getRoot());		MailInterface.treeModel.nodeStructureChanged(cyrusRoot.getParent());		*/"
// The Stream finished before the header was completely // read!
// example: // "columba://org.columba.contact/<folder-id>/<contact-id>"
// check if its a group item
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#redo() */"
// found contact item in contact component
// method is not needed by IMAP
// found an url with links - is it the same?
// If we are online sync the subscribed folders on first // connection
// initialisation
// Convert to MessageOptions
// replace </p> with double newline
// something really got wrong here -> show error dialog // JOptionPane.showMessageDialog(null, e.getMessage());
// replace <br> and </br> with newline
// save last message, because while loop aborted before being able to // save message
// due to bug CA-174 changed: return EMAIL_PATTERN.matcher(s).replaceAll("<A HREF=\"mailto:$1\">$1</A>");
// The form of the entities must be a regexp!
// initial check of input:
// choose addressbook
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getFilterActionList()   */"
// replace br, p and heading tags with newlines
// remove header
"/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#execute(org.columba.api.command.IWorkerStatusController)	 */"
// try to re-use already instanciated class
//sb.append("&nbsp;");
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getFilterRule()   */"
//Convert 4 WS in a row to a tab
//First replace all special entities
"/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#updateGUI()	 */"
// remove characters after </html> tag
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getEnabled()   */"
// insert surrounding html tags
"/* (non-Javadoc)	 * @see org.columba.addressbook.model.IEmailModel#getAddress()	 */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#getUid()   */"
// stripHtmlTags called with true ~ p & br => newlines
// protected void layoutComponents() { // setLayout(new BorderLayout()); // // leftMainPanel = new JPanel(); // leftMainPanel.setLayout(new BorderLayout()); // // JPanel taskPanel = new JPanel(); // taskPanel.setLayout(new BorderLayout()); // // // Border border = getDefaultBorder(); // //Border margin = new EmptyBorder(0, 0, 0, 2); // // // taskPanel.setBorder(new CompoundBorder(border, margin)); // // taskPanel.add(taskButton, BorderLayout.CENTER); // // leftMainPanel.add(taskPanel, BorderLayout.WEST); // JPanel labelPanel = new JPanel(); // labelPanel.setLayout(new BorderLayout()); // // margin = new EmptyBorder(0, 10, 0, 10); // // labelPanel.setBorder(new CompoundBorder(border, margin)); // // // margin = new EmptyBorder(0, 0, 0, 2); // labelPanel.add(label, BorderLayout.CENTER); // // leftMainPanel.add(labelPanel, BorderLayout.CENTER); // // add(leftMainPanel, BorderLayout.CENTER); // // mainRightPanel = new JPanel(); // mainRightPanel.setLayout(new BorderLayout()); // // JPanel progressPanel = new JPanel(); // progressPanel.setLayout(new BorderLayout()); // // progressPanel.setBorder(new CompoundBorder(border, margin)); // // progressPanel.add(progressBar, BorderLayout.CENTER); // // JPanel rightPanel = new JPanel(); // rightPanel.setLayout(new BorderLayout()); // // rightPanel.add(progressPanel, BorderLayout.CENTER); // // JPanel onlinePanel = new JPanel(); // onlinePanel.setLayout(new BorderLayout()); // // onlinePanel.setBorder(new CompoundBorder(border, margin)); // // onlinePanel.add(onlineButton, BorderLayout.CENTER); // // rightPanel.add(onlinePanel, BorderLayout.EAST); // add(rightPanel, BorderLayout.EAST); // } // public Border getDefaultBorder() { // return UIManager.getBorder("TableHeader.cellBorder"); // }
// Check for missing  </html> tag
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#count()   */"
// error
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#setAction(java.lang.String)   */"
// Check for missing  <html> tag
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#setUid(java.lang.String)   */"
// shall we insert a link?
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#getAction()   */"
// Do not take existing link tags into account
// no java task running -> start background tasks
// enable/disable button, too
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#remove(int)   */"
// rafter the user saved the file and closed the // external text editor, we read the new text from the file
// check if it is closed
// already handled
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#getConditionInt()   */"
// found an email address with links - is it the same?
// not the same
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchFlagsListStartFrom(int, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/*		 * css = ""<style type=\""text/css\"">\n"" + ""body {font-family:\"""" + name +		 * ""\""; font-size:\"""" + size + ""pt; \""} \n"" + ""a { color: blue;		 * text-decoration: underline }\n"" + ""font.quoting {color:#949494;} \n"" + ""</style>\n"";		 */"
// found an open link
// no match with mailto link tags
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#deleteFolder(java.lang.String)	 */"
// open composer view
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#renameFolder(java.lang.String, java.lang.String)	 */"
// do the same for the XmlElement node
// simply all all group items to the list
// ensure map can be used by multiple threads
// execute search
// return body
// contact
// same url - just append and continue
// Add the signature
"/* (non-Javadoc) * @see net.javaprog.ui.wizard.Step#prepareRendering() */"
// Add pgp-specific content-parameters // we take as default hash-algo SHA1
"/* (non-Javadoc)         * @see net.javaprog.ui.wizard.AbstractStep#createComponent()         */"
// Add the MimePart that will be signed
// notify all listeners // @see org.columba.core.gui.util.FontProperties // @see org.columba.mail.gui.message.TextViewer // @see org.columba.mail.gui.composer.text.TextEditorController
// Create the header and body of the multipart
// Create boundary to separate the mime-parts
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#getActiveFrameMediator()	 */"
// locale definition
// Check the type
"/* (non-Javadoc) * @see net.javaprog.ui.wizard.AbstractStep#createComponent() */"
// delete message from server
// transaction is needed for the underlying jpa architecture
"/* (non-Javadoc) * @see junit.framework.TestCase#setUp() */"
// notify all listeners that new search results arrived
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#registerDockable(org.columba.api.gui.frame.IDockable)	 */"
// Add the ControlMimePart
// save passphrase in hash map
// Add pgp-specific content-parameters
// getting the path to gpg
"/*		 * notifyListeners(new ModelChangedEvent(ModelChangedEvent.ADDED,		 * server));		 */"
// Add the encrypted MimePart
//con.getProperties().put("USERID", pgpItem.get("id"));
// add status information observable
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getCurrentProfile()	 */"
"/*		 * notifyListeners(new ModelChangedEvent(ModelChangedEvent.REMOVED));		 */"
// query using all criteria
// set headercache dirty flag
//Hashcode value should be buffered.
// folder selection changed
"//	public Object getObject(ILocator locator); //	public IStructureValue getChild(ILocator locator);"
// Store the complete stream in a source so that we can parse it
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfile(java.lang.String)	 */"
// substract the uids that we already downloaded -> // newUids contains all uids to fetch from the server
// set dirty flag
// update the cache
// we only use the first message
// return the uids that are new
// if mouse button was pressed twice times
// Message already deleted from server
// remove memorized search folders
// create <email> element, if it doesn't exist yet
"/* (non-Javadoc)	 * @see java.net.URLClassLoader#findResource(java.lang.String)	 */"
// single sender - re-use identity type
// We need a place to store the color the JLabel should be returned // to after its foreground and background colors have been set // to the selection background color. // These ivars will be made protected when their names are finalized.
// open a port to the server
// Build the remote lists of messages that are UNSEEN, FLAGGED, DELETED, // JUNK
"//		taskButton = new JButton(); //		taskButton.setIcon(ImageLoader.getImageIcon(""group_small.png"")); //		taskButton.setToolTipText(""Show list of running tasks""); //		taskButton.setRolloverEnabled(true); //		taskButton.setActionCommand(""TASKMANAGER""); //		taskButton.addActionListener(this); // //		taskButton.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));"
// APOP?
// get parent
// set new calendar id
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.shutdown.IShutdownManager#shutdown(int)	 */"
// first, create bucket for each provider
"/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getTitle()	 */"
"/*			 * // always enable the menuitem again			 * r[0].getPOP3ServerController().enableActions(true);			 */"
// create top-level configuration directory
// fill with nulls
"/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getLocation()	 */"
// USER/PASS is always supported
"/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getDescription()	 */"
// put size at the specified place
// compatibility - using SORTSTRING internally
"/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#count()	 */"
// only download new messages
"/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#getFlags()	 */"
// now search through all buckets
// comma-separated category list // <category>value1,value2,value3</category>
// APOP not supported
// initialize progressbar with total number of messages
"/*		 * JPanel p2 = new JPanel(); p2.setLayout(new		 * FlowLayout(FlowLayout.LEFT)); top.add(""East"", p2);		 * 		 * b_lyear = new JButton(""<""); b_lyear.addActionListener( this );		 * //b_lyear.setMargin(KiwiUtils.emptyInsets);		 * b_lyear.setFocusPainted(false); b_lyear.setOpaque(false);		 * //b_lyear.addActionListener(this); p2.add(b_lyear);		 * 		 * l_year = new JLabel(); p2.add(l_year);		 * 		 * b_ryear = new JButton("">""); b_ryear.addActionListener( this );		 * //b_ryear.setMargin(KiwiUtils.emptyInsets);		 * b_ryear.setFocusPainted(false); b_ryear.setOpaque(false);		 * //b_ryear.addActionListener(this); p2.add(b_ryear);		 */"
// get first item
// <adr> // <work> // <pobox>value</pobox> // <street>value</street // .. // </work> // .. // </adr>
// logout cleanly
// display downloaded message count in statusbar
// super(node, folderItem);
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#setSource(org.columba.ristretto.message.io.Source)	 */"
// <im> // <aol>value</aol> // <yahoo>value</yahoo> // <jabber>value</jabber> // </im>
// not needed anymore
"/*     * (non-Javadoc)     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */"
// download message
// delimiter found // -> recursively create all necessary folders to create // -> the final folder
// fire up search command
// Since JUNK is a non-system Flag we have to set it with // an addtitional STORE command
// try to authenticate
// ****************** // more than one year // ******************
// if result is already in hashtable remove from result set
"/* (non-Javadoc) * @see org.columba.mail.folder.RootFolder#getTrashFolder() */"
// gc.draw3DRect(xp, yp, cellSize, cellSize, true); // if the cell is selected, fill it with the highlight color
// check if its a contact component
"/* (non-Javadoc)	 * @see java.util.Iterator#next()	 */"
// in case of an error -> fall-back to Swing's built-in JTextPane
//timer.start();
// move message to trash
// is message marked as spam
// score message and mark as "spam" or "not spam"
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#getUids()	 */"
// synchronize local UID-list with server
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folder.AbstractMessageFolder#loadMessageFolderInfo()	 */"
// This method is called just after a new entry has been added
// <phone> // <business>value</business> // <home>value</home> // </phone>
// apply filter on message
"/* (non-Javadoc)     * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */"
// mark message as recent
/* find out if the interpreter is already registered */
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#add(org.columba.mail.message.IColumbaHeader, java.lang.Object)	 */"
/* any errors that may occur cannot stop other scripts from running */
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#keySet()	 */"
// check if string is a number
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.PersistantHeaderList#persist()	 */"
// remember request id for "search in results"
// <office>value</office>
// user cancelled sending operation // open composer view
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.RootFolder#getInbox()	 */"
// ask password from user
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMimePartSourceStream(java.lang.Object,     *      java.lang.Integer[])     */"
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#isInboxFolder()	 */"
// oh oh! casting to a specific implementation here ;-)
// get first one
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMessageSourceStream(java.lang.Object)	 */"
// select invisible virtual folder
// optional parts
// create virtual folder for criteria
// AbstractFolder.append also automatically removes the folder // from its parent
// return empty result, in case the criteria doesn't match the search // term
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.AbstractMessageFolder#save()	 */"
"/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#saveInputStream(java.lang.Object, java.io.InputStream)     */"
"/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#getFileSource(java.lang.Object)     */"
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getHeaderFields(java.lang.Object,     *      java.lang.String[])     */"
// scripting.xml configuration file should reside in <config-folder>
// this search request is covered by the query engine
// no esmtp - use POP3-before-SMTP instead
// <url>value</url>
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.SelectionHandler#getSelection()	 */"
// seconds
// Find the index of the largest local Uid
"/* (non-Javadoc)     * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream, org.columba.ristretto.message.Attributes)     */"
// get outbox folder
// Init Values // user's email address
// select activity before opening context context-menu // selectedInternalActivitiy.getStates().setStates( // GenericStates.SELECTED_BIT, true);
// memorize total result count
/* multicast bit */
// Start login procedure
// ShapeGradientPaint bgPaint = new ShapeGradientPaint(new Color(235, // 235, 235), new Color(255, 255, 255), 180, 1f, 0.5f, false);
// remove all memorized search folders
// retrieve tag/category to be selected
// ensure we are in existing result range
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMimePartBodyStream(java.lang.Object,	 *      java.lang.Integer[])	 */"
// compose the message suitable for sending
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderPropertyChanged(org.columba.mail.folder.event.IFolderEvent)	 */"
// Close Port
// activity belongs to calendar id ?
// No Authentication available
// there seems to be no username set in the smtp-options //  -> use username from pop3 or imap options
// process all events collected until now
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageFlagChanged(org.columba.mail.folder.event.IFolderEvent)	 */"
//Turn off authentication for the future
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream,	 *      org.columba.ristretto.message.Attributes)	 */"
// Authentication is not supported
// vertical grid lines
//Fallback to Securest Login method
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailFolder#removeFolder()	 */"
// EHLO not supported -> AUTH not supported
// authentication was successful // -> save name/password
// Add a default PLAIN login as fallback
// get the SendableMessage object
// textAShape.setAttribute(AShape.A_REPORT_HIT_SHAPE, Boolean.TRUE);
// Sent folder
// start with week view
// icon
//load default headerfields, as defined in RFC822
// skip message if there's no account // available to send it
// PlaceRect bgAbsRect = new AbsRect(new AtStart(0), new AtStart(0), new // AtEnd(0), new AtEnd(0), null, null, shadowInsets);
// start command
// FeatherAShape shadow = new FeatherAShape("shadow", filledShadow, new // Color(255, 255, 255, 0), 5, shwSI);
// use the default account
// get UID list of messages
"/*   * (non-Javadoc)   *    * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)   */"
// send all messages
// trigged if activity is moved or daterange is modified
// move all successfully send messages to the Sent folder
// Fetch these uids and compare them to the // local list
// start move command
// sent folder
// Find the messages that have been deleted
//String invalidRecipient = null;
// mark message as answered
"/* (non-Javadoc) * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent) */"
// close composer view
// ((DefaultDateArea) localDateAreaBean.getDateArea()) // .addActivityMoveListener(this);
// enable selection
// open connection
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.ISelectionListener#selectionChanged(org.columba.core.gui.selection.SelectionChangedEvent)	 */"
//Find out if we already loaded the needed ResourceBundle //object in the hashtable.
// Collect the uids for one folder
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.SelectionHandler#setSelection(org.columba.api.command.DefaultCommandReference[])	 */"
/* check if script directory exists */
"/* (non-Javadoc)     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */"
// unchanged
// All the other local mails are deleted
// save message in Sent folder
// set all tags/categories to be *not* selected
// send message
// update tree model
// <fn>value</fn>
// mark as read
// this internally used headerfields can be of every basic // type, including String, Integer, Boolean, Date, etc.
/* nothing to dispose, yet... */
// this is needed to update the titlebar
// check current file list for changes
/*in case of a stop-start */
/* start pooling thread */
//should not occur, otherwise the static initializer should have thrown // a RuntimeException
//overwrite old bundle
// recoverable inputs
// private CheckableItemListTableModel model;
//retrieve new bundle // use ResourceBundle's internal classloader
// unrecoverable inputs
// delete all data in directory
// create directory <config-folder>/mail/spamdb
// close send message dialog
// save composer window state
// show attachment panel
// do not prompt user if composer should be really closed
// Sort the uid list
// mark message as *not* spam
// *************** // MONTH VIEW TEST // ***************
//does not occur
// private ImapOperator operator;
// get headers
// new vis range = Start: Sep 23, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 3, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null // new vis range = Start: Oct 1, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 11, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null // should be // new vis range = Start: Oct 1, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 10, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null
// private TreeView treeViewer;
// using default english language, shipped with Columba
"/*	 * (non-Javadoc)	 *	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */"
// use default account as fallback
"/*	 * (non-Javadoc)	 *	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */"
// get stream
// cleanup DB -> remove old tokens
// gota go now
// put headers in list
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#ensureSelectedState(org.columba.mail.folder.imap.IMAPFolder)	 */"
// get new inputstream
// ---- label2 ----
// this is ok
// we use the SortDecorator, because the indices are sorted
// only save if changes exist
// public SelectFolderTree tree;
// message already exists // --> correct token data
// message already exists
"/*AdapterNode name;AdapterNode uid;AdapterNode type;AdapterNode rootNode;*/"
// check if this message was already learned
"/*	 * Methods called by the Variable parsers	 */"
// city
// insert space btw. double newlines
// train message as spam or non spam
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#isSupported(java.lang.String)	 */"
//does not happen
"/*	 * @see TestCase#tearDown()	 */"
// try to get the account using the email address
// get source folder
// register interest on tree node changes
// check if the user entered valid data
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#logout()	 */"
// initialize progress bar with total number of messages
// ensure that the text does not start with a newline
"/* (non-Javadoc) * @see org.columba.addressbook.gui.tree.AddressbookTreeNode#getName() */"
// For getHeight() to return the right Value
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#append(java.io.InputStream, org.columba.mail.folder.imap.IMAPFolder)	 */"
// train message as ham
// check if contact with given email address exists already
// get array of message UIDs
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getHeaders(java.lang.Object, java.lang.String[], org.columba.mail.folder.imap.IMAPFolder)	 */"
// strip tags //body = parser.stripHTMLTags(decodedBody, true); //body = parser.restoreSpecialCharacters(body);
// skip if contact item is not valid
// Margins
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#list(java.lang.String, java.lang.String)	 */"
// SizePolicy
// Orientation
// headers
// mark non spam messages
// example: "columba://org.columba.contact/<folder-id>/<contact-id>"
// mark spam messages
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#createMailbox(java.lang.String, org.columba.mail.folder.imap.IMAPFolder)	 */"
// convert to lower-case
// retrieve all contact items and add those to the list only
// break before start of view
// this.addressbookModel = addressbookModel;
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#unsubscribeFolder(java.lang.String)	 */"
// save current location statically for next time
// add group items
// if already detected before
"/*	 * public AddressbookTreeNode(String name) { super(name); this.name = name; }	 */"
// -- Text Fields
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimePartBodyStream(java.lang.Object, java.lang.Integer[], org.columba.mail.folder.imap.IMAPFolder)	 */"
// train message as spam
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchNamespaces()	 */"
// calculate break height for child, and use updated // value in the further processing
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchUids(org.columba.ristretto.imap.SequenceSet, org.columba.mail.folder.imap.IMAPFolder)	 */"
// don't need this
// spam found
// create list containing all contact item of this folder
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#parseError(java.lang.String)	 */"
// --no-rebuild option is deprecated in recent SpamAssassin versions
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setFlags(java.lang.Object[], org.columba.ristretto.imap.IMAPFlags, org.columba.mail.folder.imap.IMAPFolder)	 */"
// contact doesn't exist in parent folder anymore // -> remove it
// check if sender is already in addressbook
// if next node is null (the end of the list) return
// skip, if null
// view starts on page and exceeds it
// start parsing line by line
// view can be broken
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMessageSourceStream(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */"
// We compare three classes: plain, md5 and popbeforesmtp
// SASL Mechanisms
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchSubscribedFolders()	 */"
// the model which is decorated
// create open file dialog
// new Dimension( suggestionsJScrollPane.getPreferredSize().width, 75 ) // );
"//		 get selected contact/group card"
// -- Buttons
"// Add components to the panel: //		builder.append(defaultAccountCheckBox, 7); //		builder.nextLine();"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getIndex(java.lang.Integer, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/*            PluginManager.getInstance().setEnabled(id,                ((Boolean) value).booleanValue());                */"
// -- Other components
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#existsChanged(java.lang.String, int)	 */"
// suggestionsJScrollPane.setMaximumSize( new Dimension( // Integer.MAX_VALUE, Integer.MAX_VALUE ) );
//SMTP
// -- Overall Dialog box
// remember last selected folder treenode
// setSize( 750, getPreferredSize().height );
//if user pressed OK button
// Protocol defined Mechanisms
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#warningMessage(java.lang.String)	 */"
// Default
// table has focus
// skip '#'
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setUpdateFlagAction(org.columba.mail.imap.IUpdateFlagAction)	 */"
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getMimePart(int)     */"
// create a CDATA section for the label
//setCellRenderer(new AddressbookListRenderer());
// create <adr>, if it doesn't exist
// test self equality...
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setExistsChangedAction(org.columba.mail.imap.IExistsChangedAction)	 */"
// first account item
// whitespace detected
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getItem()	 */"
// 2 columns // rows are added dynamically (no need // to // define them here)
"/* (non-Javadoc) * @see java.util.Iterator#hasNext() */"
"//$JUnit-END$	"
// create contact card
// expect a different hashcode for item and item3
// second account item
// read VCARD file into string buffer
"/*		 * Component strut1 = Box.createRigidArea(new Dimension(30, 6));		 * gridBagLayout.setConstraints(strut1, c); eastPanel.add(strut1);		 * 		 * gridBagLayout.setConstraints(killButton, c);		 * eastPanel.add(killButton);		 */"
// third item, a bit different from the first
// should have the same hashcodes...
// update table
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getBodyPart()     */"
// item and item2 should be equal...
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#setSource(org.columba.ristretto.message.io.Source)     */"
// ---- workCityTextField ----
// ---- departmentLabel ----
"/* (non-Javadoc)	 * @see org.columba.core.gui.plugin.AbstractConfigPlugin#createPanel()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.composer.MimePartRenderer#render(org.columba.ristretto.message.StreamableMimePart)	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#get(int)	 */"
// Account is an IMAP account -> change root folder name
// remove contacts/group cards from folder
// remove folder from parent
// get message attributes
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */"
// super(str); // set menu text incl. mnemonic if specified
// ---- managerTextField ----
// !!! From: alice@mail.org // create filter configuration // -> check if <From> <contains> pattern <alice@mail.org>
// ---- companyTextField ----
// ---- departmentTextField ----
// ======== mailingAddressPanel ========
// ---- officeLabel ----
// add to options if possible (so it will be saved)
// item should not be equal to a newly created item or null
"/*                 * *20030604, karlpeder* Fixed minor flaws to be able to print text                 * messages. Further more added support for html messages.                 */"
// ======== scrollPane2 ========
// ---- privateCountryLabel ----
// ---- notesTextArea ----
// 2 columns // rows are added dynamically (no need to define them here)
// ---- privateCityLabel ----
// shortcut key //putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke("B"));
// ---- workAddressLabel ----
"/*			 * It is HTML, try to find out which charset from meta tag: NB: The			 * seach for charset below is very simple. It assumes that the meta			 * tag to find is on ITS OWN LINE, i.e. "" <meta"" can be found at the			 * beginning of the line, and all the content of the tag is found on			 * the same line! Could be better, but this is first shot...			 */"
// no childs - we have a leaf view (i.e. with contents)
// ---- workPOBoxLabel ----
// ======== buttonBar ========
// A child got removed -> stay at this position to // get the next
// ---- imTextField4 ----
// ---- workCountryLabel ----
// ---- otherCityLabel ----
// system beep
// gettext //$NON-NLS-1$ //$NON-NLS-1$
// remove all children
//FocusOwner lost = (FocusOwner) map.get(event.getSource());
// settext //$NON-NLS-1$ //$NON-NLS-1$
"/* (non-Javadoc)     * @see org.columba.core.gui.plugin.AbstractConfigPlugin#createPanel()     */"
// add children
// scrollPane.setPreferredSize( new Dimension(200,200) );
// get header of message
// true if action is enabled, false otherwiese
// skip this message, if it doesn't exist in source folder
// get message source stream
// calculate scaling and return it
//current = lost;
//register for status events
"/*		 * sourceFolder = new CachedMHFolder(""test"", ""CachedMHFolder"",		 * FolderTstHelper.homeDirectory + ""/folders/"");		 */"
"/*Overwrite the method to maintain line breaks when copying 		 * messages form the MessageViewer.		 * @author aoki-y		 * @see javax.swing.text.html.HTMLDocument#getReader(int)		 */"
// retrieve list of all group members
// ======== scrollPane4 ========
// mainPanel.add( topBorderPanel, BorderLayout.NORTH );
// Get body of message depending on user preferences
// view starts on page - print it
// create remainder
"/*			 * HeaderItem[] items = new HeaderItem[selection1.length]; items =			 * selection1;			 * HeaderItemDNDManager.getInstance().setHeaderItemList(items);			 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#switchView(org.columba.core.gui.frame.IContainer,	 *      java.lang.String)	 */"
// this happends if there's nothing left for the next page
// modify "this" to start where remainder ends
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isCutActionEnabled() */"
// return (possibly) updated value
// substitute special characters like: <,>,&,\t,\n
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#getDockableIterator()	 */"
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#loadPositions()	 */"
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#isInitialized()	 */"
// Does the user prefer html or plain text?
// ensure contents is layed out properly
// set renderers for columns
// return new DefaultHeaderRenderer(controller.getSortDecorator(), // name);
// get inputstream of mimepart 0 from folder
// return item.getUid();
// resize jTextPane component to calculate height and get it
"/*		 * // use wrapper class for easier handling of references array adapter =		 * new FolderCommandAdapter( (MailFolderCommandReference[])		 * getReferences()); // get array of source references		 * MailFolderCommandReference[] r = adapter.getSourceFolderReferences();		 */"
// compare both messages
//  no component has the focus // -> disable all actions
"/*		 * FolderTreeNode node = tree.getSelectedNode(); FolderItem item =		 * node.getFolderItem();		 */"
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION)	 */"
"//		 register as focus owner"
//  // options.xml // //<options> // <gui> //  <messageviewer inline_attachments="false"> //   <smilies enabled="true" /> //   <quote color="0" enabled="true" /> //  </messageviewer> //  <tree> //   <sorting sorted="true" ascending="true" comparator="alphabetic" /> //  </tree> // </gui> // <html prefer="true" /> // <markasread delay="2" enabled="true" /> // <headerviewer style="0" headerfields="Subject Date Reply-To From To Cc Bcc" /> //</options>
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#getContentPane()	 */"
"// init addressbook plugin handlers //		PluginManager.getInstance().addHandlers( //				""org/columba/addressbook/plugin/pluginhandler.xml"");"
// fall-back to email address
// calculate size and return it
// fall-back to formatted name
// height of content // + top margin // + bottom margin // height corrected for scaling
// get flags of message
// <email> // <work>value</work> // <home>value</home> // </email>
// close streams
// this property is ignored under java 1.5.
// width unchanged
// <org>value</org>
// <n> // <family>value</family> // <given>value</given> // <prefix>value</prefix> // <suffix>value</suffix> // <additionalnames>value</additionalnames> // </n>
// handle child view by recursive call
"/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#setSplitProportion(org.columba.api.gui.frame.IDockable, float)	 */"
// close inpustream
// scale the graphics
// in the future, it will be possible to also add new addresses
// mark message as read
// backwards compatiblity // -> its not possible anymore to create a contact model without email // address
//      get flags of message
//tstich: CA-41 bugfix
// create folders, etc.
// translate g to line up with origin of print area (trans 1)
"/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#addTaskManagerListener(org.columba.core.taskmanager.TaskManagerListener)         */"
// list.repaint();
// public String getAgent() { // return agent; // }
"//   	 create Command reference"
//      create Command reference
// parse header
// translate graphics object back to original position and reset clip and scaling
"//    	 create Command reference"
// Return a String representation of the cipher text
// An individual 3 digit number
// child views exist - operate recursively on these
// do not start a second time!
// if folder is message folder // ->TODO (@author fdietz):  there should be an interface, instead of the AbstractMessageFolder // class
// following java guidelines I'm setting this to low priority // -> this should make the gui more responsive, because the // -> background worker has low priority whereas the gui worker // -> has normal priority
// delete folders
// this is no integer value
// set size of mPane according to the available width // and fetch root view
"/*             * *20030609, karlpeder* Introduced scaling             */"
// ask the user
// get origin & size information (height as "total" height minus current pos.)
// // views.xml // // <view header="100" header_enabled="true" id="ThreePaneMail" // infopanel="true" main="100"> // <window maximized="true" height="721" width="1034" y="26" x="0"></window> // <toolbars infopanel="true" main="true"></toolbars> // <splitpanes header="200" header_enabled="true" main="283" // attachment="100"></splitpanes> // </view>
// disable plugin
// reset starting position in y-direction
// <context> // <core> // <identity> // </identity> // <datetime> // </datetime> // </core> // </context>
// register at shutdown manager // -> this will save all configuration data, when closing Columba
// ---- okButton ----
// add message "0.eml" as inputstream to folder
// END public class XmlElement
// calling CopyMessageCommand.execute() here! //super.execute(worker);
// this is a headeritem from autocompletion
"/*		 * Font f = getFont(); setFont(new Font(f.getName(), Font.BOLD,		 * f.getSize()));		 */"
// ---- label3 ----
// ---- otherAddressLabel ----
// private JButton b_lyear, b_ryear, b_lmonth, b_rmonth;
"/*	 * Determine what day of week the first day of the month falls on. It's too	 * bad we have to resort to this hack; the Java API provides no means of	 * doing this any other way.	 */"
// save message stream to file
// draw horizontal lines
// mark as spam /as not spam // for each message
// Check for the new messages
// make sure to close all file handles // to the currently cached message // -> necessary for windows to be able to delete the local file
// ---- otherCountryLabel ----
// Block mouse moves to the underlaying component won't restore the // Cursor
// update tag list if mode changes
// if spam filter is not enabled -> return
// Add some messages
"/* GPG for windows is an executable-only download, fortunately there is * a windows registry file included in the download and has this as the * default installation path in it. While users will probably install GPG * into many other places, this is atleast a best-guess start. */"
//  add message "0.eml" as inputstream to folder
// try to get account using the account ID
"//		OptionsItem optionsItem = MailConfig.getInstance().getOptionsItem(); //		String selectedBrowser = optionsItem.getStringWithDefault( //				OptionsItem.MESSAGEVIEWER, OptionsItem.SELECTED_BROWSER, //				""Default"");"
// ---- privatePOBoxLabel ----
// model should contain the data
// different border for recurrent events // ActivityInteractor.setStaticOverride( // AShapeUtil.DEFAULT_OUTLINE_SHAPE_NAME, AShape.A_STROKE, // new OverrideFilter() { // public Object getOverride(Object subject, // Object defaultObject) { // return ((ActivityView) subject).getModel() // .isRecurrent() ? new BasicStroke(1.0f, // BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, // 0, new float[] { 9 }, 0) : defaultObject; // } // });
// Check for success
// the group of the given parent
// on startup, there's shouldn't be any recent messages // -> we simply remember 0 recent messages here // property.addAttribute("recent", "0");
// for each JComboBox item
// this probably means that the configuration // is wrong // -> change this to a sane default value
// ok, now the tool is initialized correctly
// for time consuming tasks you need to create // your own Command
"//		 create Command reference"
"/*	 * Uses the FrameManager instance in MainInterface to open a new addressbook	 * window.	 */"
// ---- privateAddressLabel ----
// just ignore unknown people
// set folder changed flag // -> if not, the header cache wouldn't notice that something // -> has changed. And wouldn't save the changes.
// the next new folder will get this UID
// the close method manipulates the viewList so we have to // remove the existing element and fill in our temporarily // stored ones
// load docking settings from last user session
"// TextAShape titleText = new TextAShape(DEFAULT_TITLE_TEXT_SHAPE_NAME, //		""$startTime$ - $endTimeExcl$ ($timeZoneShort$)"", //		titleTextAbsRect, TextAShape.TYPE_SINGE_LINE, textFont, //		textPaint, new AtStart(0), new AtStart(-3), GfxUtil.AA_HINT_ON);"
// Map<String, ISearchProvider> historyMap = SearchHistoryList // .getInstance().getHistoryMap();
// icon (we can't use the setIcon-method this time, as it relies on the border being set)
// ---- label1 ----
//  execute command -> use mock object class as worker which does // nothing 
// ======== scrollPane1 ========
"/* (non-Javadoc)     * @see org.columba.core.gui.plugin.AbstractConfigPlugin#updateComponents(boolean)     */"
//AccountList list = MailConfig.getInstance().getAccountList(); //list.addEmptyAccount("pop3");
// only used by VirtualFolder
// check number of JTree rows
// ---- birthdayLabel ----
// check number of JTable rows
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#move(int, int)   */"
// transform string to Date representation
// 3 columns table
// We need to sort the uids in order // to have the correct association // between the new and old uid
//putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("mail-new.png"));
"/* (non-Javadoc)   * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)   */"
// ======== scrollPane3 ========
// create sample headerlist
// notify listeners // @see org.columba.mail.gui.table.action.ForwardAction
// check number of tree nodes
// ---- notesLabel ----
"/*	 * test with empty list	 */"
// size // -> @see org.columba.mail.folder.cache.CachedHeaderfields for a // -> complete // -> list of possible attributes
// jar-file found
// ---- managerLabel ----
// remove MessageNode with uid=0
// extend existing menu
// create new class loader using the global class loader as parent
//IAccount account = object.getAccount();
// get plugin handler for filter actions
// all Java plugins package their class-files in "plugin.jar"
"/*         * The fields on this object is in fact represented in the xml         * structure found as getRoot(). Therefore super.equals()         * should do the job         */"
// save to profiles.xml
// use our global class loader
// use user's config folder in his/her home-folder // all plugins reside in "<config-folder>/plugins"
// ---- workCityLabel ----
// remove all options
// remove plugin from view
// check for at least 10 whitespaces
// create group with two contacts
// modify listmodel
"/*	 * test with null list	 */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#moveDown(org.columba.core.filter.Filter)   */"
//plugin = instanciateJavaClass(className, arguments);
"/*	   * does exactly the same thing as EditPropertiesAction when contact	   * table is focused	   * */"
// url decode
// disable extension
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#move(org.columba.core.filter.Filter, int)   */"
// first group contains first contact item
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#setCondition(int)   */"
// use default Java classlodaer
// if this worked, remove it from tree.xml configuration, too
"/*	 * Test with all kinds of input data	 */"
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#remove(org.columba.core.filter.Filter)   */"
// add contact to roaster, nickname="", group=null
// Border border = BorderFactory.createCompoundBorder(new // ShadowBorder(),BorderFactory.createEmptyBorder(10, 10, 10,10)); // ((JPanel) getContentPane()).setBorder(border);
// we are only interested on subscription requests
// mock folder class, only returns folder id
// Must create a ExceptionProcessor
//public abstract IChatMediator getChatMediator();
// register as focus owner
//public abstract void setChatMediator(IChatMediator mediator);
// mock object folder facade, only returns folder list
// add to "Uncategorized" node
"/*	 * (non-Javadoc)	 *	 * @see org.columba.chat.ui.roaster.IRoasterTree#updateBuddyPresence(org.columba.chat.api.IBuddyStatus)	 */"
// parse plugin metadata
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#closeSelected()	 */"
// set message body
// Add list of attachments if applicable
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getName()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setStatusMessage(java.lang.String)	 */"
// contacts item
// add all contacts as leafs of group folders
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#getSelected()	 */"
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getMimePartCount()     */"
// persist changes on exit
// updateTimer.start();
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setChatMediator(org.columba.chat.api.IChatMediator)	 */"
// and add it to the buddylist
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getChatMediator()	 */"
// add "Uncategorized" note
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setSignedOn(boolean)	 */"
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getSource()     */"
// buddy already exists
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#set(java.lang.String,	 *      java.lang.Object)	 */"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#count()	 */"
// get presence
"/* (non-Javadoc) * @see java.util.Iterator#remove() */"
// add to global buddy list
"/* (non-Javadoc) * @see java.util.Iterator#next() */"
// found group for buddy
"/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getHeader()     */"
// create new buddy
// open stream to file
// use selected buddy
// load properties from stream
// create account object
// use key/value properties file
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterCriteria#getCriteria()   */"
// if external plugin, we need the directory of it
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#flagsChanged(java.lang.String, org.columba.ristretto.imap.IMAPFlags)	 */"
// create stream to file
// save properties to file
// store account data in properties
// add contact to folder
// fonts
// prompt for jabber id
// register interest on contact selection changes
// skip non-matching elements
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#removeLast()   */"
// skip if no <extension> element found
// don't search in subfolders recursively
// register interest on table selection changes
// if user cancelled action
// add new group to folder
// checkBox.addItem("Custom Message...", null); // checkBox.addItem("Leave...");
"//		 get selected folder"
// couldn't find correct constructor
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(org.columba.ristretto.imap.SearchKey, org.columba.mail.folder.imap.IMAPFolder)	 */"
// tempFolder = new AddressbookFolder(null,addressbookInterface);
// protected AddressbookFolder tempFolder;
// check if this buddy belongs to a group
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#count()   */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#isSelected(org.columba.mail.folder.imap.IMAPFolder)	 */"
// if extension wasn't already registered
// found new token
// skip if it doesn't exist
// if no plugin directory exists -> return
"/*	 * @see TestCase#setUp()	 */"
// clear text box
// Search in packs beginning from newest to oldest // -> in most cases this should save us a lot of uid fetchings to // find the deleted messages
// load configuraation
// header file found
//DateFormat format = DateFormat.getTimeInstance(DateFormat.SHORT); // green color
// create message object
// remove node
//DateFormat format = DateFormat.getTimeInstance(DateFormat.SHORT);
// remove xml config
// notify that a new worker is available
//create new client and try to connect to server
// private SendButtonController sendButton;
"/*	 * public String getPassword() { return passwordTextField.getText(); }	 */"
"/*		 * *20030921, karlpeder* The old code was (accidentially!?) modifying		 * the attachment list of the model. This affects the composing when		 * called a second time for saving the message after sending!		 */"
// passwordTextField = new JPasswordField(10);
// b.addSeparator("Account Options");
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#removeAll()   */"
// connect to server // new ConnectAction(this).actionPerformed(null);
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchHeaderList(org.columba.mail.message.IHeaderList, java.util.List, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/*			 * setIconTextGap(5); setVerticalAlignment(JLabel.CENTER);			 */"
// register all extensions
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#addEmptyCriteria()   */"
// private JPasswordField passwordTextField;
// fire new message event to interested listeners
// IAccount account = object.getAccount();
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#expunge(org.columba.mail.folder.imap.IMAPFolder)	 */"
"/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#addWorkerStatusChangeListener(org.columba.core.gui.statusbar.event.WorkerStatusChangeListener)         */"
// FAILURE!!!
"/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#getTimeStamp()         */"
// parse "/plugin.xml" file
// clear list and collect uids for new folder
// Force that the last line in buffer does NOT have a newline
//private File addressbookFile;
// create new contact card
// we got this from headerfieldtree
// set clipping for the graphics object
//private JTable logTable;
"/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#getReference()	 */"
// load all internal core plugins
// update timer event
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#clone()   */"
// *20030515, kpo* '\n' appended
// public abstract Class getDefaultChild();
//"right:max(40dlu;pref),3dlu,
// Set bean properties
//notifyTableListeners(new TableModelEvent(this, logMessages.size(), logMessages.size(), TableModelEvent.ALL_COLUMNS, TableModelEvent.INSERT));
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getName()   */"
// The following methods override the defaults for performance reasons
"//		copy all internally used headerfields"
// Make sure we get all log info as fast as we can get ahold of it.
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#setEnabled(boolean)   */"
// navigate to treenode "text"
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.SelectionHandler#getSelection()	 */"
// open configuration file 
"/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#get(int)   */"
// found new message
// state/province/county
// This should never happen since superclass is Object
"// create config-folder //		File file = new File(""test_config""); //		file.mkdir(); // //		new Config(file); // //		Logging.DEBUG = true; //		Logging.createDefaultHandler(); // //		//		 init mail component //		new MailMain().init(); // //		new AddressbookMain().init(); // //		// now load all available plugins //		PluginManager.getInstance().initExternalPlugins();"
"/* (non-Javadoc) * @see org.columba.mail.folder.mailboximport.AbstractMailboxImporter#importMailbox(java.io.File, org.columba.api.command.IWorkerStatusController) */"
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#paste() */"
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#delete() */"
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimePartSourceStream(java.lang.Object, java.lang.Integer[], org.columba.mail.folder.imap.IMAPFolder)	 */"
// if line doesn't start with "From ???@???" or line length is 0 //  -> save everything in StringBuffer
// view -> model // write configuration given the data the user entered in the gui
// Changing the Divider Border Visibility *********************************
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#copy() */"
// menu.add(new CMenuItem(new OpenNewMailWindowAction(null))); // menu.add(new CMenuItem(new // OpenNewAddressbookWindowAction(null))); // menu.addSeparator(); // menu.add(new CMenuItem(new AboutDialogAction(null))); // menu.add(new CMenuItem(new ShowHelpAction(null))); // menu.addSeparator(); // menu.add(new CMenuItem(new ExitAction(null)));
// model -> view // read configuration and set gui elements appropriately
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isUndoActionEnabled() */"
"/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#cut() */"
// a header
// strip "'s
// If there is an existing lock then it must be from a // previous crash -> remove it!
// replace with the modified classpath
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchUid(org.columba.ristretto.imap.SequenceSet, org.columba.mail.folder.imap.IMAPFolder)	 */"
// step // past // spaces // find position of '>', '"'. or ' ' which is = end // of charset name
// automatically generate the help statement
// the boundary parameter
// reset for new message
// we reached "From ..." (start of new message)
// *********** // edge values // ***********
// divide message into headers and body
// ** End of method importMailboxFile
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#modify(java.lang.Object[])	 */"
// ** End of method getDateHeader
// invalid date format - not enough tokens in it!!
// set background of scrollpane, in case the list is smaller than the // dockable
// day of week // month // day of month // time // year
// load all internal calendar plugins
// add all native jars
// Setup the path // Platform maintainers: add your platform here // see also initPlatformServices() method
// boundary not found - Content-Type must be changed
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getPresenceMode()	 */"
// no attachments found - just insert a // Content-Type header // extra // header // necessary // X-Attachments header is // replaced
// handle header
// parse // Content-Type
// attachments found
// Do not exit
// no attachments found - just convert it to // text/plain or text/html
// just convert it to text/plain or text/html
// extra // header // necessary // X-Attachments header is // replaced
// store port number in file
// JScrollPane tableScrollPane = new JScrollPane(navigationController // .getView()); // tableScrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, // 0));
// port is in use, try next
// monthlyActivityAShapeBean = new ActivityAShapeBean();
// Logging.log.severe("Error while looking for charset", e);
"/*public AdapterNode addEmptyFilterCriteria(AdapterNode filterRuleNode) {        Element child = createElementNode(""filtercriteria"");        Element subNode = createTextElementNode(""headeritem"", ""Subject"");        addElement(child, subNode);        subNode = createTextElementNode(""criteria"", ""contains"");        addElement(child, subNode);        subNode = createTextElementNode(""pattern"", ""pattern"");        addElement(child, subNode);        subNode = createTextElementNode(""type"", ""Subject"");        addElement(child, subNode);        filterRuleNode.domNode.appendChild(child);        return new AdapterNode(child);}*/"
// ** End of method convertAndSavemessage
// update progressbar
// we have now added // such a header
// save message to destination folder
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#addContact(org.columba.addressbook.facade.IContactItem)	 */"
// ** End of while loop over headers
// Logging.log.severe("Error saving converted message", e);
// should throw exception as attribute type "name2" is not defined in // type structure
// initialize tagging
// ** End of method divideMessage
// unique boundary found
"//	the implementation of the replace function. It returns always the  position of the NEXT replaced word."
// create full msg from headers and body
// private Hashtable<String, String> table = new Hashtable<String, // String>(10);
// NB: This is the saveMessage method def. in // DefaultMessageImporter
// Lines not starting with "From ???@???" is part of the message // (headers or body)
// ... and save it
// Color bulletPaint = new Color(100, 100, 100);
// ** End of method saveMessage
"// //		 w+=1; //			h+=1; //		 g.setColor(edge); //		 // bottom //		 g.drawLine(x+2, h, x+w, h ); //		 // right //		 g.drawLine(x+w, y+ovalHeight+2, x+w , y+h);"
// Put properties that should be copied from parent here
// initial guess
// make sure file is deleted automatically when closing VM
// build new message body
// text which we are looking for, or want to replace // replaced text which we want to have   // text where we make a search // search/replace is case sensitive  // search/replace matches whole words only // search/replace works backwards on the text
// hide splash screen
// handle attachment (by creating a link)
// restore frames of last session
// element name
// we are using this inpustream multiple times // --> istream will be closed by CloneStreamMaster
// (tstich) reduced to 3 because all need to be // search when activated on startup // we only want 3 subfolders // -> if more children exist remove them
// set application wide font
// meta tag with content definition found
// patch submitted by forum user Turbo Chen // FIXED: user wasn't able to enter chinese text in Composer Subject textfield
// init all components
// VirtualMessage m = new VirtualMessage(f, uid, index);
// now load all available plugins // PluginManager.getInstance().initExternalPlugins();
// for easier search / // matching
"//	 need to be called after search/replace to make some changes in the states"
// only accept client from local machine
// this will terminate the loop
// ignore this yet
// initialize platform-dependant services
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getJabberId()	 */"
// we found what we were looking for
// init plugin handler
// is it HTML or plain text
"/*			 * *20030917, karlpeder* Set the model to html or text based on the			 * body specified on the command line. This is done using a simple			 * check: Does the body contain <html> and </html>			 */"
// loop over headers and modify them as needed
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getHeader()	 */"
// ** End of method guessBodyContentType
// end of while loop
// no attachments found - should in fact have been checked by the // caller
// show splash screen
// init controllers for different parts of the composer
// register protocol handler
// send all unsent messages found in Outbox
// through reflection
// use heavy-weight popups to ensure they are always on top
// check if there are columns which need to be saved
// JMenu options = (JMenu) menuBar.add(new JMenu("Options")); // options.setMnemonic('O');
// keep track of active windows (used by dialogs which don't have a // direct parent)
// can be an email address in a link BUG CA-174 // fix that with looking for an open link in the same line before // on the way from left to the current position of the email at s1 // find the last open link <a
// enable debugging of repaint manager to track down swing gui // access from outside the awt-event dispatcher thread
// enable time pickers
// initialize configuration with selected profile
// if the message it not yet seen
// it has to be set
// memorize all URLs
// More than 3 tokens. Assume the last token is the last name and take the rest of the names as the first name. // This handles names like this: "Sue & Gene Stark".
// We trigger an update only when the exists changed // which should be equal with a Recent change.
// draw the outline of the cell // gc.setColor(MetalLookAndFeel.getPrimaryControlShadow());
// use global class loader to bootstrap Columba
// no attachments found
// base64 encode photo byte[] to string
// build new body part
// if user doesn't overwrite logger settings with commandline arguments // just initialize default logging // Logging.createDefaultHandler();
// prompt user for profile
// initialize global class loader
"/*     * Gets fired if configuration has changed.     *     * @see org.columba.mail.gui.config.general.MailOptionsDialog     *     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */"
// insert header for attachment list
"/*     * (non-Javadoc)     *      * @see java.io.InputStream#read()     */"
// create random port number within range
// Use static variables so the date is only updated once // during runtime
// do nothing here, just continue
"/*     * (non-Javadoc)     *      * @see java.io.InputStream#read(byte[], int, int)     */"
/* everything is up and running, start services */
//private JTextPane textpane;
// Select the charset of the original message
// part of body
// differnt outline color is selected
// insert start and end for html
// This is necessary because getArgList returns the path in // square brackets
// run garbage collector
// Runs on the event-dispatching thread.
// ** End of method createAttachmentListFromHeader
"/* (non-Javadoc)     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */"
// namespaceAware = false
// force object finalization
// remember parent path // (this is necessary for IMAPRootFolder sync operations)
// set global class loader to null
// This Method delivers the next line
// 6. Line with Buttons
// date area grid line
// horizontal grid lines
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getMimePart(int)	 */"
// start command which adds message to folder // and calls apply-filter on this specific message
// get folder item configuration
// This Method frees a given String from Comments defined in Rfc822 
"/*	 * // setup and load constructor public XmlIO(String FilePath) {	 * currentElement = null;	 *  }	 */"
"// get first provider //				ISearchProvider provider = searchPanel.getSearchManager() //						.getAllProviders().next(); //				ISearchCriteria defaultCriteria = null; // //				SearchBar.this.searchPanel.searchInCriteria( //						textField.getText(), provider.getTechnicalName(), //						provider.getDefaultCriteria(textField.getText()) //								.getTechnicalName(), searchInsideCheckBox //								.isSelected());"
// horizontal light gray column separator line
// north header cell decorator
// ** End of class EudoraMailImportFilter
// define activity layout
// showing the week number
"/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemAdded(org.columba.calendar.store.api.StoreEvent)	 */"
// ** End of method createAttachmentListFromAttachmentConverted
// XmlElement.printNode( getRoot(), "");
// // activity setup // 
// Get the title if one is specified
// wrap with observable stream for progress bar updates
// test if our To headerfield contains or contains not the search // string
// get the "Cc" headerfield from the header
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfiles()	 */"
// get the header of the message
// set initial value for height where this print object should be broken // in points, without scale
// get the "To" headerfield from the header
// since the indices on the pop server start with 1 we add // a dummy null for the 0 element in the list
// do the same for the Cc headerfield and OR the results
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#removeContact(org.columba.addressbook.facade.IContactItem)	 */"
// return parts
/* really delete file */
// parse for urls / email adresses and substite with HTML-code // html = HtmlParser.substituteURL(html); // html = HtmlParser.substituteEmailAddress(html);
"/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IHeaderItem#setId(java.lang.String)	 */"
// @author: fdietz // Disabled this testcase, as it doesn't really fit into // this category of message operations // It fails because we would have to create a folder-hierarchy // including parent folders to execute the move
// unchanged, i.e. no breaks before this view
//display error message
"/*		 * TreeController treeController = (TreeController) ((TreeViewOwner)		 * frameController) .getTreeController();		 * 		 * TreeView treeView = treeController.getView();		 */"
// "-L" use local tests only // String cmd = "spamassassin -L"; // String cmd = "spamc -c -L";
// correct for starting position if printing should not start at the top
// Byte
//      map selection to this temporary message
// do not scale up, i.e. no scale factor above 1.0
// get Columba's top-level configuration directory
//no server running, start our own
// 2 columns // rows are added dynamically (no need to // define them here)
//if we stopped at line break, increase array index pointer
// // we can't just load the first constructor // -> go find the correct constructor based // -> based on the arguments //
// Setup file logging
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderRemoved(org.columba.mail.folder.event.IFolderEvent)	 */"
// if already in roster
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folderoptions.AbstractFolderOptionsPlugin#restoreUISettings()	 */"
// init font configuration
// loop through all extensions this plugin uses // -> search the corresponding extension handler // -> register the extension at the extension handler
//MUST do this for background to show up.
// append the new Date // header
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageAdded(org.columba.mail.folder.event.IFolderEvent)	 */"
// mock objects contact facade, only returns getContactItem() and // getAllGroups()
// protected CharsetMenuItem selectedMenuItem = new CharsetMenuItem(null);
// init console handler
// define allocation rectangle (startY is used to compensate for // different start point if printing shall not start from the top)
// if line doesn't start with "From" or line length is 0 // -> save everything in StringBuffer
// *20030614, karlpeder* In main view only enabled when // message(s) selected
// Never mind
// do nothinh here ... use finalClose
// only if tempfile was corrupted
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailFolder#getRootFolder()	 */"
// // Logging stuff //
// add welcome message to new account inbox
// public IChatMediator getChatMediator() { // return mediator; // }
// delete any cached information
// Add some new messages // and remove the same number of old messages
// empty the worker list until one is left
//list[2].setHorizontalTextPosition( JLabel.LEADING );
// System.setProperty("javax.net.debug", // "ssl,handshake,data,trustmanager"); // init java.net.ssl // debugging
// setResourceRoot
// loop through all extensions this plugin uses
// attempt
"/* (non-Javadoc)	 * @see org.columba.calendar.ui.list.api.ICalendarListView#getView()	 */"
// ensureDirectory
// we only update changes for events currently
// commandline arguments which can't be handled by the core // are passed along to other subcomponents
"/* (non-Javadoc) * @see javax.swing.table.TableModel#isCellEditable(int, int) */"
// url = ClassLoader.getSystemResource(path);
// getResourceStream
"/*		 * builder.addSeparator(""Full-text indexing"");		 * 		 * builder.add(enableLabel, cc.xywh(1, 7, 5, 1));		 * builder.add(enableTextIndexingCheckBox, cc.xywh(2, 9, 4, 1));		 */"
// Download any CIDs in the html mail
// -> get source reference of message // when replying this is the original sender's message // you selected and replied to
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getAttribute(java.lang.Object,	 *      java.lang.String)	 */"
"//		TagList tagList = new MailTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));"
// g.setColor(bg); // g.fillRect(0, h - 3, 3, 3); // g.fillRect(w - 3, 0, 3, 3); // g.fillRect(w - 3, h - 3, 3, 3);
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#getUids(org.columba.api.command.IWorkerStatusController)	 */"
// Open the output file
// cancel command execution/updateGUI methods, if folder or message // selection // has been modified
// Close the stream
// stylesheet is created dynamically because // user configurable fonts are used
// don't instantiate this
// default encoding is plain
// get position of the pattern in the text
// Open the ZIP file
// cancel question dialog and don't close composer
// Transfer bytes from the ZIP file to the output file
// Trigger synchronization of the selected Folder
"/*         * By using an instance of SyncHTMLEditorKit, the html should load         * synchroniously - so everything is loaded before printing starts         */"
// Get the first entry
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getFlags(java.lang.Object)	 */"
// There is no charset info -> the default system charset is // used
// we are done - clear status text with a delay // (if this is not done, the initial text will stay in // case no messages were sent)
// name of helpset resource
// selected rows before updating the model // -> used later to restore the selection
// mark found pattern //text.grabFocus();
// append "_tooltip"
// private Border unselectedBorder = null; // // private Border selectedBorder = null; // // private Color background; // // private Color foreground;
// could not find it!
// maybe based on HS?
// set whether the model should handle html or plain text
// enable timer
// if user is currently changing selection, don't do anything // -> wait until the final selection is available
// delete marks (unselect)
"/*		 * DocType docType = factory .docType(""iCalendar"", ""-//IETF//DTD		 * XCAL/iCalendar XML//EN"",		 * ""http://www.ietf.org/internet-drafts/draft-hare-xcalendar-01.txt"");		 * doc.setDocType(docType);		 */"
// set UI manager properties here that affect Quaqua
"/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(java.lang.Object[], org.columba.core.filter.FilterRule, org.columba.mail.folder.imap.IMAPFolder)	 */"
"/* (non-Javadoc)	 * @see java.util.Iterator#remove()	 */"
//replaceall action performed
"/*	 * private String body;	 *	 * private URL url;	 */"
"/* (non-Javadoc)	 * @see org.columba.mail.message.ICloseableIterator#close()	 */"
//text.grabFocus();
"/* (non-Javadoc)	 * @see java.util.Iterator#hasNext()	 */"
// create a panel with a border and 3 options // columns  // rows
"/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#getMessages()     */"
// delete marks
// attachment controller doesn't support undo operation
// if HTML stripping is enabled
// we don't need to check for running commands here because // there aren't any, shutdown plugins only use this thread
"/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMessageSourceStream(java.lang.Object)     */"
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#save()	 */"
// look and feel
// set allocation (defines print area together with the clipping // and translation made above), and print...
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#isTrashFolder()	 */"
// read configuration from options.xml file // create css-stylesheet string // set font of html-element <P>
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.RootFolder#getTrashFolder()	 */"
// update popup menu with search term before its made visible // textField.addPopupMenuListener(this);
"/* (non-Javadoc) * @see org.columba.ristretto.composer.MimePartRenderer#render(org.columba.ristretto.message.StreamableMimePart) */"
// add toolbar // panel.add(toolbar, BorderLayout.NORTH);
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#keyIterator()	 */"
// small icon for menu // putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("stock_about-16.png"));
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#headerIterator()	 */"
//textField.showPopup(); //textField.requestFocus();
"/*	 * (non-Javadoc)	 *	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */"
// add message "1.eml" as inputstream to folder
"/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#get(java.lang.Object)	 */"
// vertical // grid // lines
// temporary hashtable to check for duplicated
"/*		 * RIYAD: Even though we don't do anything with this value, what it is		 * doing is setting up the selection colors and such as implemented per		 * the default cell rendered.		 */"
// Implement the content hander methods that // will delegate SAX events to the tag tracker network.
// if the character / is found shows the user a error message
//replace action performed
// The type of DnD object being dragged...
"/* (non-Javadoc)	 * @see org.columba.addressbook.model.IEmailModel#getType()	 */"
// we can't just load the first constructor // -> go find the correct constructor // -> based on the arguments
// select current day
// We're always doing a MOVE // and this is handled in the exportDone method.
// We use the attributes and flags from the cache // but the parsed header from the parsed message
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getSource()	 */"
// find action performed
// Get the list of the uids on the server // Important: Use a clone of the List since // we must not change it!
// comments are not // displayed // correctly in composer
// overwrite look and feel font settings
// switch for restoring last session of Columba. // if true, restores all windows.
// one line is added to the header for each attachment // (which has a filename defined)
// get plugin id
//Integer priority = Integer.valueOf(pattern); //return priority;
// ---- emailTextField2 ----
// user/pass worked -> this is indeed // a bogus server.
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getMimePartCount()	 */"
// resync search engine // -> this is only needed for Lucene right now
/* initialize services before dismissing the splash screen */
// do something with the arguments..
// ---- professionLabel ----
// handle the commandline arguments of the modules
//DocumentParser parser = new DocumentParser(); // decode message body with respect to charset
// clear message viewer // /tableController.valueChanged(new // ListSelectionEvent(this,-1,-1,false));
// layout.setVisualDateRangeRounder(new BoundaryRounder(DateRangeI.RANGE_TYPE_DAY, true, false, false)); // DateRangeRounder for AllDay Events
// load user-customised language pack
// -- Availables Actions
// First remove all headers that are in the headerlist but // not the Folder
//UNTIL=20070627T215959
// just in case that someone who developers on a plugin // adds the plugin files to his classpath, we try to // load // them with the default classloader
// convert special characters
// create virtual folder
// set the start to 00:00:00
// Get the current classpath from the sysloader // through reflection
// if the end is on 00:00:00, round it to 23:59:59.999
// if the collapsible is collapsed, we do not want its border to be // painted.
// Font font = MainInterface.columbaTheme.getControlTextFont();
// search request isn't covered by query engine // -> fall back to default search engine
// found email address
// putValue(AbstractColumbaAction.LARGE_ICON, ResourceLoader // .getImageIcon("new_appointment-32.png")); // putValue(AbstractColumbaAction.SMALL_ICON, ResourceLoader // .getImageIcon("new_appointment.png"));
// There are still more messages to update // -> issue another fetch messages command
//      -> get source reference of message // when replying this is the original sender's message // you selected and replied to
// Init Plugins
// Color shadowPaint = new Color(0, 0, 0, 100);
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getBodyPart()	 */"
// deprecated config-file support
"/* (non-Javadoc) * @see org.columba.mail.folder.FolderTreeNode#getName() */"
"/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#set(java.lang.String, java.lang.Object)	 */"
// setFloatable(true);
// register Component as FocusOwner // FocusManager.getInstance().registerComponent(this);
// to mark a text in the JTextPane
// toolbar buttons always need an icon
// just the animation, if there are more than zero // workers running
// all day events
// re-open composer view
// calculate message score
// this is save because the only shutdown plugin // to stop this server, the configuration isn't touched
// we assume user cancelled search // -> remove cached command
// Must go backwards or else the filters will swap places with each // other.
// get size of content (width, height is size without scaling) // scaled size
//should not occur, otherwise the bundlePath would not be in the // hashtable
"//	public VirtualFolder(FolderItem item) { //		super(item); // //		headerList = new MemoryHeaderList(); // //		ensureValidFilterElement(); //	}"
// small icon for menu //putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("16_sign.png"));
//public int type;
//bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) ); //bottom.add( Box.createHorizontalStrut());
// try the system aqua look and feel
// instanciate theme
// create list of search requests
// close connection to server
// get plugin-handler
// add all existing tags to the menu
// user may have changed hostname. use dialog settings instead of // stored settings
// fire callback to remove all tags from selected items
// changing the selection to the specified row // changeSelection(row, 0, true, false);
// also register interest in tree seleciton events // for updating the title
// no charset specified -> automatic mode // -> try to determine charset based on content parameter
// *20040510, karlpeder* columns may be null (first time we // visit a folder!?)
// create a view more button, responsible for // opening the attachment viewer popup
// table is empty // -> just display empty table
// fill list model with tags
// HTTP proxy
// Folder trash = (AbstractMessageFolder) // MainInterface.treeModel.getTrashFolder(); // trash folder has uid==105
// get account information from message
// @author: fdietz never request focus //view.requestFocus();
// popup menu 
// folder.showFilterDialog(((AbstractMailFrameController) // getFrameMediator()));
// IMAP folder specific // - Is this folder selectable (does it contain messages?)
// minimal unchecked time is 30 Seconds // in ms
// remove old activity
// to lower case
// initialization
// compare if item starts with str
// TreePath path = tree.getSelectionPath();
// jpanel1.add(addActionButton, cc.xy(1, 1));
// initialise protocol layer
// remember last message
// update text and progress bar
// passive: if not initialized do it now
// exit immediately, nothing more to do
// remember if Look And Feel has been changed
// enabled event-firing
// we currently only support a single category per activity
/* version 4 */
// init update timer
// persist modified calendar
// update start/end time
// update store
// load configuration from persistence
// make sure configuration is saved when exiting
// retrieve subject
// generate default unique id
// copy all attributes
// layoutComponents();
// java.util.Calendar stamp = event.getDtStamp();
// create recurrence
// search is finished // -> enable search button again
// no recurrency, so nothing in the string
// do layout again
//private JButton taskButton;
// remove everything which is not A-Za-z0-9-_
// build string
// if complex use the last search folder
// gather result results
"/* (non-Javadoc)	 * @see org.columba.calendar.store.api.ICalendarStoreFactory#getLocaleStore()	 */"
// MouseListener sorts table when clicking on a column header
// save contact to outputstream
// skip, if UID, dtStart or dtEnd is not defined
// if there is no string given, return a number
// sort-string
// found category
//Element child = getParentElement().getChild(ICALENDAR.CATEGORIES); //List list = child.getChildren();
// find the property in the rrule string
// generate new UUID if it does not exist yet
// remove old data
// generate xml document
// add new data to local store
// filename = "uuid.xcs"
// remove ".xcs"
//ICalendarStore store = (ICalendarStore) next.getSource();
// create new activity
// copy activity
// enable all menuitems
// retrieve selected activity
// disable this calendar's id
// this should not happen, the templates seem to be missing
// get selected calendar id
// get selected calendar
// create search history
// A recurring event
// this is for the calendar component and only used internally
// contentPane.add(dockingPort, BorderLayout.CENTER);
// background
// DocumentListener Methods
// paint right inside border // g2d.setPaint(p2);
// create all individual search criteria for this provider
// select first item
// glocal grid line colors
// activityAShapeBean = new ActivityAShapeBean();
// general grid size - if we don't set this property there won't be // vertical scrollbars
// west header
// first row showing the hour
// north header background
// first header showing Day info
// update popup menu based on searchterm
// dark gray line every hour
// light gray line every 30 min
// select nodes
// bold outline if selected
// paint outer border // g2d.setPaint(OUTER);
// Color titleBgPaint = null;//new Color(200, 50, 50, 255);
// Color selectedTitlePaint = new Color(200, 100, 100);
// Color textPaint = new Color(0, 0, 0, 50);
// even
// First (left) tab
// Second (right) tab
// Fallback shape for small sizes
// Resize events
// **************************************** // * Static example shape creation // ****************************************
// AShapeUtil.addMouseFireEvent(outlineAShape, trigger, // DefaultDateArea.AE_CATEGORY_DRAG_PRESSED, false, false, button);
// States
// FillAShape filledShadow = new FillAShape("shadowShape", new // RoundRectangle(0, 0, 1, 1, 5, 5), bgAbsRect, new Color(0, 0, 0, 100), // GfxUtil.AA_HINT_ON);
// SliceSpec shwSI = new SliceSpec(new Insets(10, 10, 10, 10), // SliceSpec.TYPE_TILE_CUT, SliceSpec.OPT_BORDER);
// AbsRect textRect = new AbsRect(new AtStart(4), AtStart.START0, new // AtEnd(-4), AtEnd.END0);
// check value after :
// root.setAttribute(AShape.A_REPORT_HIT_SHAPE, Boolean.TRUE);
// Animations for text
// toolbar container
// Title
// Content
// Outline
// Build tree
// Color moOutlinePaint = new Color(0, 0, 0);
// private ThemeDateAreaContainer view;
// every year?
// for leap years!
// LOG.severe("no number!")
// save header and attributes. Copy the flags!
// prepend From line
// FillAShape filledShadow = new FillAShape("shadowShape", new // RoundRectangle(0, 0, 1, 1, 5, 5), bgAbsRect, new Color(0, 0, 0, 100), // Boolean.TRUE);
// DrawAShape outlineShape = new DrawAShape("bgFill", new Rectangle(0, // 0, 1, 1), AbsRect.FILL, outlinePaint, new BasicStroke(1f), // Boolean.FALSE);
// SizeConstraint sConstr1 = new SizeConstraint(new AtFixed(10), new // AtFraction(1), 1.0f);
// SizeConstraint sConstr2 = new SizeConstraint(new AtFixed(0), new // AtFraction(0.5f), 1.0f);
// define filter rule
// get reference
// Save message source for each selected message
// addEnterExitOverride(outlineAShape, outlineAShape, AShape.A_PAINT, // moOutlinePaint, false, true);
// setting lastSelection for srcFolder to null
// which kind of mark?
// update progress bar
// retrieve new selection
//reset progress bar
// save each message
// save message
// user pressed "Search" button
// check if happens in calendar, but not on activity
// end of for loop over uids to save
// create new
// restore original clip
// parse for urls / email adr. and substite with HTML-code
// message composed of headers and body
// skip "Search All"
// its always possible that no folder is currenlty selected
// ignore - columba.date is used instead
// all headers should be included
// add from, to, date, subj so they are the last elements
// get destination foldedr
// intersect this with the existing clip
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewNext()	 */"
// cancel, if source equals destination folder
// get messgae UIDs
// mark all messages as expunged
// to enable button again after search is finished
// it will not be done correctly, if the first statement is // omitted
// get filter
// new folder, fire to the old folder
// TimeSpan span = activityList.get(i);
// add child to this node
// table.put(item.getId(), item.getName());
// perform other database configurations
// show search dialog
"//	true, if message has attachments, false otherwise"
// on "RETURN" start seach
// Junk flag
// We need IMAPFlags
// list of nick names
// Apply filter if enabled
// fall back to the english version
// disable time pickers
// Check the Noselect flag
// first remove all subfolders recursively
// show docking view
// init result view //createContextStackedBox();
// Analyze the Filter
// get source folder reference
// disable button
// no end
// row count
// this message doesn't exit in this folder anymore
// disable date picker
// enable until
// calendar list
// check if this folder is overwriting global options
// description
// location
// date range
// default button title
// execute background search
// save changes
//private ImageIcon image2 = null; //private ImageIcon image3 = null;
// set the body text
// clear autocomplete hashmap
// skip empty strings
// create command reference
// disable text in toolbar
// category filtering is disabled as default
// add mimepart to model
// setup charset and html
// two column
// add attachment
// open composer frame
// model->view update
// query only a single provider
// create visual container for result panel
// store reference to source message
// add to search panel
// clear previous search results
// add tag id as last
// Set the focus to the editor pane and set cursor to the top
// show search docking view
//setBorder( BorderFactory.createEmptyBorder(0,1,0,0) );
// builder.add(panel, cc.xy(1, 7));
// Enable when implemented
// Update the composer
// update calendar viewer
// END public ExternalEditor(String EditorCommand)
// create big size font to display in the composer textfield
// set old font properties
// END public boolean startExternalEditor()
//Plain text components don't fire these events
// query all criteria of all providers
"//$NON-NLS-1$		"
// disable components
// update signature -> will notify all listeners that signature changed
// repaint box
// builder.nextLine();
// b.nextLine(); // b.append(loginLabel, loginTextField);
// Add previously fetch authentication modes
// if securest write DEFAULT
// that is the expected case
// ************ // normal cases // ************
"/*		 * builder.append(alwaysEncryptCheckBox, 3); builder.nextLine();		 */"
// query with only a single criteria
//remove(topPanel);
// create command reference array for the command
// restore settings
// Process shared namespaces
// fire in EDT
"/*	 * private TitledBorderLabel m_titledborderlabel1 = new TitledBorderLabel();	 * 	 * private TitledBorderLabel m_titledborderlabel2 = new TitledBorderLabel();	 */"
// needs to be private so that subclasses won't forget calling // fireCharsetChanged
// create identity value
// clear message viewer
// add message to temporary folder
// the second child must be the encrypted message
"/* * * make quotes font-color darkgray * */"
// search across a few specific search criteria at once
// only show view if message is marked as spam
// mark as not spam
"/*	 * 	 * encapsulate bodytext in HTML code	 * 	 */"
// append
// transform headers if necessary
// TODO i18n "attachments" label
// search individual provider and individual criteria
// disable subject column renderer, use tree-cellrenderer instead
// set name of column
// Logging.log.info("setting size =" + size);
// which menuitem was selected?
// all headerfields are lowercase in property file
// search individual provider
// Mark the messages as deleted
// select message in message list
// get active charset - necessary to decode msg for saving
// private SearchResultView searchResultView;
// remove all children from tree
// add node to tree
// skip all non-mail component items
// i18n stuff
// open search dialog
// Init components
//private StackedBox box;
// append unseen count to folder name
// if IMAP selectable folder
//box = new StackedBox();
//bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) );
// register interest on status updates
// try to determine delimiter
// Show the password dialog
// Try to get Password from Configuration
// ensure that we are logged in already
// if mailbox is not already selected select it
//top.setOpaque(true);
// still not ready, exit!
// disable logging for the startup
// non-ascii
// start JPA entity manager
// If this also does not work // -> fall back to no charset specified
// recreate menu
// calculate rest
// menuitem/toolbar button action
// system peep on new messages 
"//	generate label for menuitem"
// recreate name of menuitem
// timer action
"//		popupMenu.setFocusable( false ); //		popupMenu.setRequestFocusEnabled(false); "
// nothing to do yet
// icon (we can't use the setIcon-method this time, as it relies on the // border being set)
// Check default mail client
// We save only the first item in the to-list
// Remote double-quotes
// shutdown hsql
// if the database is not started, don't do it
// if config-folder is really empty // -> delete folder
// remove extra whitespace
// tag stripping can leave some double spaces at line beginnings
// theme selection changed
// sleep 5 minutes
// strip tags
//replace the other entities
// test if a task is already running
// same email adress - just append and continue
// add aNewPattern to take place of aOldPattern
// correct limits if body tags where not found
// remove comments
// Get the uids from the headercache
// Init PGP
// register interest on status bar information
// Delete old message from server if the feature is enabled
"//			g.setColor(borderColor2); //			g.drawLine(x, y + height - 1, x + width, y + height - 1);"
// check if we are online
// which UID should be downloaded next
// check if message isn't too big to download
// now download the message
// reset the startIdx to just after the current match, to see // if there are any further matches
// apply spam filter
// controller
"/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#unregister(org.columba.core.util.SwingWorker.ThreadVar)         */"
// Is it already locked from locker ?
// Check if locked
// Wake up the others!
// exception handler should handle all error handling stuff
// "new value" is used to pass on the delay
// we support up to 4 phone entries
// Create the cipher //$NON-NLS-1$
// we support up to 4 email addresses
// -> import message in Columba
// use preselected profile
// // Table model stuff //
// private JLabel iconLabel = new JLabel();
// // LIST model stuff //
// do something with link
// fall back to default profile
// ======== contentPane ========
// we support up to 4 im
// ======== tabbedPane2 ========
// delete all directories
// Sort in with respect to priority and synchronize: // Commands with higher priority will be processed // before commands with lower priority. // If there is a command that is of type synchronize // don't put this command in front.
// we support up to 4 phones
// We have to process this command first // -> break here!
// Is the location still existing?
// load config-file from disk
// final String key = (String) keys.next();
// initialize default view options
// tstich: Default values are set in the loadPostions() method
"/*	 * (non-Javadoc)	 *	 * @see org.columba.core.config.IConfig#getConfigDirectory()	 */"
// create profile config file
// get current list selection
// use commandline-specified location
"/*	 * private JButton enableButton; private JButton disableButton;	 */"
// can't delete currently running profile
// if everything worked out all right, we copy the tmp file to the destination file
// try directory
"/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getSelectedProfile()	 */"
// document definition
// user's can't delete default account
// create directory, if it doesn't already exist
// create profile
// single attachment
// delete all files
// Try the built-in mime table
// ======== contactPanel ========
// add to listmodel
// if win32 platform, prepend cmd.exe // necessary for system environment variables usage
// ======== panel7 ========
"/*		 * action.addAttribute( ""class"",		 * ""org.columba.mail.filter.action.MarkMessageAsReadFilterAction"");		 */"
// ---- pictureButton ----
// condition: match all (AND) = 0, match any (OR) = 1 // private AdapterNode conditionNode;
"/*		 * //AdapterNode filterListNode = getFilterListNode();		 * 		 * AdapterNode node =		 * MailInterface.config.getFolderConfig().addEmptyFilterNode(		 * getFolder().getNode() ); Filter filter = new Filter( node );		 * 		 * add( filter );		 * 		 * return filter;		 */"
// list.add(f);
// if folder creation failed // -> don't update tree ui
// ---- nicknameLabel ----
//add( panel, BorderLayout.CENTER );
// Java 1.5 enumeration
// rename profile in profiles.xml
// ---- fileunderLabel ----
// private JLabel l_date, l_year, l_month;
// asupport = new ActionSupport(this);
//c.fill = GridBagConstraints.HORIZONTAL;
// get notified if search result arrived, to update view
// allow out-of-range selection // selectedDate.set(Calendar.DATE, selectedDay);
// b_ryear.setEnabled(y < y1);
// repaint the calendar pane
// ---- categoriesButton ----
// set the clip rect to exclude the border & insets
// find out how many days there are in the current month
// set the pen color depending on weekday or weekend, and paint // the // day number in the cell
//protected JButton defaultButton;
//mainPanel.add( topBorderPanel, BorderLayout.NORTH );
"//		 top panel"
// set display text
//topPanel.setLayout( );
// no mnemonic found - just set the text on the menu item
//draw the gray squares overlapping the white background squares
// Add the default colors items.
// Accessing Properties **************************************************
"// Constructor...	"
// get plugin directory
// extract plugin
//insets.top    += spacing; //insets.bottom += spacing;
//add the component's border insets to our minimum dimension
// if plugin has config extension point
//put them into the array
// the plugin directory is "<config-folder>/plugins/<plugin-id>"
// toolbar
// language
// this is just a folder // ->disable all actions
// get theme plugin-handler
// set language config based on selected item
// 3 columns
// the path to the plugin.xml descriptor file is: // "<config-folder>/plugins/<plugin-id>/plugin.xml
// use the collapse/expand icons from the JTree UI
// Third Line with Lists
// unknown category found // -> just add this plugin to "Uncategorized"
// try name first
// jpanel1.add(addCriteriaButton, cc.xy(1, 1));
// JPanel p = new JPanel(); // p.setLayout(new FlowLayout());
// start search
// tree must be editable, otherwise you can't collapse/expand tree nodes
// ---- emailTextField3 ----
// modal JDialog
// notify tree model
// make new node visible
// this plugin doesn't define a category to which it belongs
// make "version" column fixed size
// This method is called when editing is completed. // It must return the new value to be stored in the cell.
// make "enabled" column fixed size
// ((DefaultTreeModel) // model.getTree().getModel()).setAsksAllowsChildren(true);
// message
//int iconOffset = getHorizontalAlignment() + getIcon().getIconWidth() + 1;
// model->view
// modal dialog
// ---- emailTextField4 ----
// get plugin handler for handling frames
// close every open frame
// enable/disable tree node
// fall back to default image
// Return the configured component
// search through defaultViews to get settings for given id
// removed previous default values
// save in cache
// this is the last frame so store its data in the viewList
//Can we use the Java way to maximize the window
"//	This method is called when a cell value is edited by the user."
// register statusbar at global taskmanager
// update content-pane
// add to new mediator's listener list
// default toolbar
// *20030831, karlpeder* Now also location is stored
// remove old content pane
// // add new componnet
// hide window
// ---- preferHtmlCheckBox ----
// add action to menu
// scroll window to the beginning
// make window visible // LOG.finest("setVisible()");
// public ColumbaMenu getMenuBar() { // return menu; // }
// remove old toolbar
// first column is a tree
// register for change of the frame mediator
// ---- telephoneTextField1 ----
"/*	 * Opens a new mail window using the FrameManager instance in MainInterface.	 */"
// small icon for JMenuItem
// set JavaHelp topic ID // setTopicID("cancel");
// ---- telephoneTextField3 ----
// ---- telephoneTextField4 ----
// ---- imTextField3 ----
// ======== personalInfoPanel ========
// create menuitems for all registered new items
// create menuitems for all registered frame extensions
// border
// ---- weblogLabel ----
// ---- homepageTextField ----
// ======== panel5 ========
// textPane.setMargin(new Insets(5, 5, 5, 5));
// setup base url in order to be able to display images // in html-component
// ---- weblogButton ----
// ---- weblogTextField ----
// we insert new menus between the "Edit" and the "Utilities, Help" menu
// make sure that we don't end up with two separators
// Configure the component with the specified value
// ---- freebusyTextField ----
// ---- freebusyButton ----
// ======== panel6 ========
// ---- professionTextField ----
// add node
// ---- freebusyLabel ----
// ---- cancelButton ----
// ---- calendarButton ----
// ---- titleLabel ----
// ---- companyLabel ----
// delete plugin from disk
// ---- calendarTextField ----
"/*     * Close all open frames, which leads to exiting Columba     */"
// protected JButton defaultButton;
// delete directory recursivly
// check if this is a management frame instance // -> if so create submenu to switch perspectives // -> otherwise, don't create submenu
// show profile choosing dialog
// remove profile xml-element
// topPanel.add(iconLabel, BorderLayout.WEST);
// GeneralPath path = generatePath(h, w); // g2.setColor(fillColor); // g2.fill(path); // // path = generateTopPath(w); // GradientPaint painter = new GradientPaint(0, 0, startColor, 0, 5, // midColor); // g2.setPaint(painter); // g2.fill(path); // // path = generatePath(h, w); // g2.setColor(UIManager.getColor("controlDkShadow")); // g2.draw(path);
//defaultBox.removeAll();
// create new stacked box
// add window listener
// paint the text and icon
// enable/disable search bar during search
// big icon for JToolBar
// if only one task left
// stop update timer
// set text
// clear text with delay
// clear label
// stop clear timer
// disabled Kill button, because feature is not supported
// fall-back
// force repaint
// update menu if tags are changed
// don't want to have two separators
// mark tag, if the current selection is tagged with it
// if no theme available -> set "Plastic" as default
// apply theme
// set the Quaqua Look and Feel in the UIManager
// no text!
"/* (non-Javadoc)		 * @see java.lang.Thread#run()		 */"
// JavaHelp support
// apply transparent icon //button.setDisabledIcon(ImageUtil.createTransparentIcon(icon));
// deprecated config-file support // -> skip creation of "Cancel" button
// tray icon not supported on Mac
// columns  // rows
// if some action was performed
// setup the finder
// mark found pattern
// grant "all-permissions"
// load window position // loadPositions(getViewItem());
// get text where to find pattern
// find pattern
// add search bar to main toolbar, in case its a managed frame mediator
// saveStringInFile
// shutdown Columba
// deleteDirectory
// emptyDirectory
// throws // java.io.IOException
// getResourceURL
// copyFile
// copyResource
// try to restore from previous session
// Try again after shutdown
// do nothing here
// add a new inputstream to read from
// Delete the tempfile immedietly
// create logging file in "<users config-folder>/log"
// don't use // standard // XML // formatting
"//		JScrollPane scrollPane = new JScrollPane(tree); //		scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); //		 //		add(scrollPane, BorderLayout.CENTER);"
// enable flexdock ghost preview
// register shutdown manager
// register for cleanup
//$NON-NLS-2$
// // first load all extension handlers //
// load core extension handlers
// load addressbook extension handler
// load mail extension handler
// load all internal mail plugins
// // now load all external plugins residing in /plugins directory //
// Find all native jars
// add the old classpath
// Initialise system dependent stuff
// remove directories which don't contain a plugin
"/*	 * protected static ClassLoader loader = ClassLoader.getSystemClassLoader();	 */"
// we have a plugin-handler for this kind of extension
// try to load all plugins
// try all possible version of readme files...
// retrieve inputstream from resource
// remember plugin metadata // pluginMap.put(id, pluginMetadata);
// try to load extensin handlers of all plugins
// this constructor has the correct number // of arguments
// skip if no <extensionlist> element found
// retrieve JDom Document from inputstream
// if available, load cached instance
// ok, we found a matching constructor // -> create correct list of arguments
"// // external plugin //				"
// use external Java URL classloader
// remember instance
// append URLs to global classloader
// plugin-directory
// save window position
// show/hide new toolbar
// add animated icon to right-hand side corner of menubar
// retrieve metadata
// example configuration (tree.xml): // // <filter description="gnome" enabled="true"> // <rules condition="matchany"> // <criteria criteria="contains" headerfield="To or Cc" pattern="gnome" type="To // or Cc"></criteria> // </rules> // <actionlist> // <action uid="120" type="Move Message"></action> // </actionlist> // </filter> //
// default core menu
// it isn't possible to undo whatever the script did
// the indent-number attribute causes an IllegalArgumentException under 1.4 
// scripts should reside in <config-folder>/scripts/ directory
/* if so, remove it */
// retrieving the instance for the first time // creates an instance in ExtensionHandler subclass //  // instance reference is kept in hashmap automatically
// create toolbar
// memorize location URI
// used to temporarily store the values while the original // viewList gets modified by the close method
// ensure this is called in the EDT
// notify that search is finished
// retrieve total result count
// add statusbar
// Set the icon and the title
// create uuid
// we support up to 4 im entries
// don't wait, just continue shutdown procedure, // commands will be killed
// load xml configuration // -> will be automatically saved every couple of minutes and on // shutdown
// this will overwrite the "old" tag with same id
//private Hashtable properties = new Hashtable();
// createMenuBar();
// constructor for the class
// create pattern
// create new default frame controller
"// the implementation of the search next function. It returns always the  position of the NEXT found word.	"
"//	the implementation of the replace all function."
// JPanel panel = (JPanel) this.getContentPane();
// convert region enum to flexdock string
"//	private static final String[] SALUTATIONS = { ""Mr."", ""Mrs."", ""Ms."", ""Dr."", ""Congressman"", ""Congresswoman"", ""Senator"", ""President"", //		""Chancellor"", ""Minister"", ""Prime Minister"" };"
"//	private static final String[] TITLES = { ""PhD"", ""Ph.D."", ""PhD."", ""Esq."", ""Esquire"" };"
// Initialize salutation strings
// we cannot use an iterator here because the close method // manipulates the list
// Treat a null name input string the same as an empty input string
// Assume last name only
// store profiling point data
// For writing out the data // Indent for each level
// this.file = F;
//We can use the Java way to maximize the window
// Attr name
// accumulate the contents into a buffer.
//store.shutdown();
// Menuitems use this to display a string in the statusbar
// init selection handler
// shutdown Columba if no frame exists anymore
// store current view settings
// turn on floating support
// create test userlist data
// create a rounded clip LARGER than the comp
"/*	 * Test method for 'org.columba.core.tagging.TagManager.getTag(String)'	 */"
// If defaultViews doesn't exist, create it (backward compatibility)
// nothing to save
// Create a frame controller for this view // view = null => defaults specified by frame controller is used
//MessageNode getMessageNodeAtRow(int index);
// for example: "[columba-users]Re: this is a subject"
// found cached instance // -> re-use this instance and remove it from cache
// cancel, if we show already correct frame mediator
// Create a frame controller for this view
// create new instance // -> get frame controller using the plugin handler found above
// if Reply-To headerfield isn't specified, try to use from
// get enable attribute
// get element from view list
"/* If this is windows, check the default installation location for the * gpg.exe binary. */"
// get location of executable
// reply-to
// merge mimeparts and return
// should not occur
// add encoding if necessary
// init component before querying for sourceFile
//List mimeParts = model.getAttachments();
// compose message body as multipart/alternative
// send as multipart/alternative
// load all frames from configuration file
// if the id not currently set (for example in the security panel in // the account-config
// if not we haven't actually closed a frame, leave viewList as is
// size
"/*  	 * Add supported account formats here  	 * */"
// create if not available
// return default-account identityItem instead
"/*         * The fields on this object is in fact represented in the xml         * structure found as getRoot(). Therefore super.hashCode()         * should do the job.         */"
// store every open frame in our temporary list
"/*     * search for SecurityItem based on To headerfield     *     */"
// path to account templates for POP3/IMAP
// found mail component frame
// get plugin ID
"/* If this is a unix-based system, check the 2 best-known areas for the * gpg binary. */"
//apply initial version information
// dismiss char
// exit for-loop
// set configuration of this plugin
// show error dialog, with exception message and stack-trace // -> dialog also provides a button for the user to easily // -> report a bug
// get date
// check configuration
// create reference
// create xml node
"/*                    case '\'':                        sb.append(""&apos;"");                        i++;                        break;*/"
// Check if the MessageFolderInfo is sane
// if message with uid doesn't exist -> skip
// remove message
// start the configuration wizard
// Sanity checks
// Get the handler
"/* Couldn't find anything, so return null and let the wizard ask the * user. */"
// folderitem wraps xml configuration from tree.xml
// Root folder cache
"/*	public MailFolderCommandReference getCommandReference(MailFolderCommandReference r) {		return r;	}	*/"
// do the same for the XmlElement of child
"/* If this is windows, check the default installation location for the * aspell.exe binary. */"
// delete folder from your harddrive
// Get the mimepart
"/*			 * ((AbstractLocalFolder) destFolder).setFlags(destuid, (Flags)			 * getFlags( uids[i]).clone());			 */"
// menu.setVisible(true);
// process exception -> show error dialog to user
// Print the stacktrace to our log file.
//setMargin(new Insets(0,0,0,0));
// notify tree
// checkbox pressed
"/* If this is a unix-based system, check the 2 best-known areas for the * aspell binary. */"
// ButtonBarBuilder builder = new ButtonBarBuilder(buttonEastPanel); // // builder.addGlue();
//cache the old color //set the white color //draw the square //reset the old color
// First Line with Labels
// ButtonBarBuilder builder2 = new ButtonBarBuilder(buttonWestPanel);
// builder2.addGlue();
// this.contentPane = comp;
// Second Line with Names
//String envfonts[] = gEnv.getAvailableFontFamilyNames();
// we support up to 3 address entries (work/private/other)
// 5. Line with Preview
// 4. Line with PreviewLabel
// Spacings
"/*		 * FormLayout layout = new FormLayout(""default"", ""default, default"");		 * IContainer c = getContentPane(); c.setLayout(layout);		 * 		 * CellConstraints cc = new CellConstraints();		 * c.add(createCenterPanel(detailsButton.isSelected()), cc.xy(1, 1));		 * c.add(bottomPanel, cc.xy(1, 2));		 */"
// centerPanel.add(label, cc.xywh(3, 1, 1, 1));
// switch to new theme
// set fonts
// notify frame to update
// select Locale in ComboBox
// get config plugin-handler
// ID of configuration plugin of this theme plugin
//draw line
//check for line breaks
// don't override update(), get the default clear
// The length is 1 if no item is selected
// Instance Creation *****************************************************
//RGB values discovered using ZoomIn
// draw vertical lines
// Enable JavaHelp support if topic id is defined
//Dimensions
//Draw the white squares first, so the gray squares will overlap
// set mnemonic
//setBackground(new Color(236, 233, 216));
/* Get the minimum size of the component. */
// Set text, possibly with a mnemonic if defined using &
// setText(treeNode.getName()); // setIcon(getFolderIcon(treeNode, expanded));
/* Figure out which day the mouse click is on. */
/* mouse listener */
/* Get the preferred size of the component. */
// draw all the day cells
// advance to the next cell position
// paint the border
// draw the weekday headings
/* Copy the relevant portions of a date. */
// b_lyear.setEnabled(y > y0);
// Disable anything that would cause the date to go out of range. This // logic is extremely sensitive so be very careful when making changes. // Every condition test in here is necessary, so don't remove anything.
// fill the clipped area // g2d.setPaint(LIGHT_GRADIENT);
"/*		 * asupport.fireActionEvent(((o == b_lmonth) || (o == b_rmonth)) ?		 * MONTH_CHANGE_CMD : YEAR_CHANGE_CMD);		 */"
// paint inner border // g2d.setPaint(INNER);
// set display text - possibly with a mnemonic defined using &
// Let's at least make a half-assed attempt at conforming to the Metal // PLAF colors.
// p1.add(l_month);
// top.setBorder( BorderFactory.createEtchedBorder() );
// right
/* CEDRIC: not used right now. */
// private ActionSupport asupport;
// top
// augment y.
// paint original first
// augment x.
// bottom
// left
// g.drawRect(0, 0, w - 3, h - 3);
//repaint(x, y, width, height);
//setFont( UIManager.getFont("TextField.font") );
"/*         * wait for stream threads to die         *          */"
// load profiles.xml
// check if there's already an instanciation available // we can reuse here
// // following internal components plugin registration //
// we need this for the focus manager
// folder uid doesn't exist //  -> create default value
// example configuration (tree.xml) // // <actionlist> //  <action uid="122" type="Move Message"></action> // </actionlist>
"/*	 * public FilterCriteria getCriteria(int index) { return (FilterCriteria)	 * list.get(index); }	 */"
// check if service is registered
// Condition
// retrieve service instance
// load instance of service
// Wait for external editor to quit
// list of additional names (middle names)
// replace "%1" parameter with file argument ...
"//		titleBar.addButton(new PinIcon(), //				new PinAction(this.getPersistentId()), BorderLayout.EAST); //		titleBar.addButton(new MaximizeIcon(), new MaximizeAction(this //				.getPersistentId()), BorderLayout.EAST);"
// set title
// list of attachments
// notify all listeners that have a new search result // ensure this is called in the EDT
// icons // putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("mail-read.png")); // putValue(LARGE_ICON, ImageLoader.getImageIcon("mail-read.png"));
// notify all listeners
// load xml configuration from file
// initialize context
// notify all listeners that search is finished
// create empty list
// create empty structure value
// check if default value exists
// remove old
// contains already a single element
// create initial version from default configuration file
// return plain document
// callback
//  // options.xml: // //<gui> // <theme name="Plastic" theme="Experience Blue"></theme> // <fonts overwrite="false"> //  <text name="Default" size="12"></text> //  <main name="Default" size="12"></main> // </fonts> // <toolbar text_position="false" enable_icon="true" enable_text="true"></toolbar> //</gui>
// set display text stored here to an empty string (~ cleared) //$NON-NLS-1$
// retrieve plugin manager instance
// fall back to default path
"/*		 * XmlElement child = getRoot().getElement(pathToElement);		 * 		 * return child;		 */"
// make a deep copy
// ---- imTextField1 ----
// Remove bogus Operation
// Create the workers
// no attachments // -> only show bodytext editor
// Return a String representation of the cipher text //$NON-NLS-1$
// this is the final folder // subFolder = addIMAPChildFolder(parent, info, subchild);
// Our cleartext as bytes //$NON-NLS-1$
"//	public static JButton createAnimatedIconButton() { //		ImageSequenceTimer button = new ImageSequenceTimer(); // //		return button; //	}"
// fire event
// this is executed on shutdown: store all open frames so that they // can be restored on the next start
// else keep waiting
// init event
// Initialize the cipher for encryption
// Our cleartext as bytes
// delete source message
"/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#register(org.columba.core.command.Worker)         */"
// startIdx and idxOld delimit various chunks of aInput; these // chunks always end where aOldPattern begins
// threadVar;
// register interested on changes in the running worker list
// list of suffices
// formatted name
// birthday
// get tree-like structure of mimeparts
// the final chunk will go to the end of aInput
// Platform identifiers: Windows, Linux, Mac OS, ...
// Check for no property
// return true for new files
// more than one item, very strange! duplicate entries! remove // all
// grab a part of aInput which does not include aOldPattern
"/*         * (non-Javadoc)         *          * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */"
// refers to the // entry in // persistence.xml
// one second (=1000 ms)
// shutdown entity manager
// no item exists in table // -> nothing todo
// creates a shallow // copy of this // object
// if path startsWith "/" -> skip
// should we really overwrite the Look and Feel font settings
// restore log level
// start HSQLDB
// set console handler to OFF
// print attributes
// add all suffixes
// needed for hibernate!
"//		 create config-folder"
"//	String getProperty(String name); //	void setProperty(String name, String value); //	 //	Hashtable getProperties();"
// ---- imTextField2 ----
//Make the renderer reappear.
// now load all available plugins
// delete all mails in folder
//new Config(file);
// iterate over all type elements
"/*	 * Class under test for HeaderItemList getHeaderItemList()	 */"
"/*	 * Class under test for Object add(Contact)	 */"
// remember search result
// doesn't support search inside yet
// delete folder
"// mark found pattern (select) //text.grabFocus();				"
// valid inputs
// create default root nodes <Local> and <Web>
// search in specific criteria
// close DB
// // now change all global categories // 
// get source reference
// score message
// if message is spam
// // mark all activities with the tag // 
// url to website/homepage
// address list
// not that the editor ui only supports max of 3 addresses to edit
// create new one
// this is the expected cases
// mark it as selected
// Event: Normal Event
// Event: All Day Event
// Event: Anniversary
// check if calendar item is tagged
// calendar is selected as default
// get calendar ui component depository
// check if its a calendar component
// showing the month number
// no grid lines
// setIntercellSpacing(new Dimension(2, 2));
// do not show header
// scrolling to the selected row
// startup Columba
// stop server when shutting down
// we add every jar-file in /lib, too // plugin-directory
// name of organisation
// dummy address
// summary
// frequency
// disable other
// disable all
// maximum occurrences
// enable all radio buttons
// client isn't from local machine
// end date
// enable button
// "store" html in jTextPane container // reset starting position in y-direction
// ======== panel1 ========
// in case we have to add another "0"
// create list of contact folders
// decode using default charset
// click on this button will open the recurrence dialog
// create jpim contact instance
// both values are okay, so create a correct time
// no correct value!
// there is no :
// custom renderer to convert from calendar id to calendar name
// correct value!
// check value before :
// set Look & Feel
// regexp for correct timestamp
// double-click on empty calendar // mediator.fireCreateActivity(null);
// clicked on calendar - not activity
// ---- homepageLabel ----
"//		 handle commandline parameters"
// update modification timestamp
// Add the tray icon to the System tray // ColumbaTrayIcon.getInstance().addToSystemTray( // FrameManager.getInstance().getActiveFrameMediator() // .getFrameMediator());
// the java methods return a nice week of year, we need hard facts
// mouse hovers over activity
// check if happens on the selected activity
// remember selected activity
// SizeConstraint sConstr4 = new SizeConstraint(new AtFixed(0), new // AtFraction(1), 0.0f);
// ShapeGradientPaint titlePaint = new ShapeGradientPaint(new Color(255, // 150, 150), new Color(255, 200, 200), 0, 0.7f, 0.7f, false);
// call the postStartups of the modules // e.g. check for default mailclient
// SizeConstraint sConstr3 = new SizeConstraint(new AtFixed(0), new // AtFraction(1), 0.0f);
// we are done - clear the progress bar
// generate UID for new message
// skip if account information is not available
// Check if the message is already cached
// remove mail-checking stuff
//retry copy
// this message is already cached
// Parse Message from DataStorage
// get header from cache
// create output stream
// get references
// message doesn't exist (this shouldn't happen here)
// message isn't cached // -> just return header from cache
// update MessageFolderInfo
// remove message from disk
// fireMessageRemoved(uid, getFlags(uid));
// Must be out of sync!
// cached headerfield list
// Check if still consistent
// oops, something went wrong
// header cache is stored in "headerlist" subfolder
// write message source to file
// for each message in folder i
// get message source from folder
// add check box for incl. of headers
// close output stream
// append newline
// for each message
// increase progressbar value
// mark messages
// un-mark messages
// no configuration available, create default config
// train bayesian filter
//vfolder.showFilterDialog((AbstractMailFrameController) getFrameMediator());
// cancel here if user requests
// skip if user didn't enable this option
// execute command
// set columba.color flag
// move message to user-configured folder (generally "Junk" // folder)
// create new locale xml treenode
// which kind of color?
// add source to destination folder
// get references to selected folder and message
// define criteria
// no message selected.
// uid for messages to save
"/*			 * classLoader = ClassLoader.getSystemClassLoader();			 */"
// set properties for virtual folder // default is inbox if parent is null
// get sender
// get folder that is going to be moved
"//	register for status events"
// get destination folder
// save headercache
// add sender to addressbook
// skip if no reference available
// end of loop over selected messages
// show dialog
//setup save dialog
// save message source under selected filename
// file exists, user needs to confirm overwrite
// remove source folder
// get charset from message
// get name of folder
// setup filters and filename for file chooser dialog
// mark message
// saving last selected message to the folder
// rename folder
// determine type of body part
// get source references
// expunge folder
// store whether all headers should be incl.
// Add default extension if no extension is given by the user
// use body as is
// list of prefixes
// default value
// First determine which charset to use
// mark quotings with special font
// test on extension
// read configuration from options.xml file
// create header table
// create css-stylesheet string
// create array and return
// loop over all headers
// process header value
// add toolbar button between last button and cancel button
// Print each message
// decode message body with respect to charset
// check if virtual folder, if yes, do not use these uids, use the // real uids instead
// uid for messages to print
// for every message
// selected folder
// selected messages
// Header
// the header key for date field
// Footer
// Setup print document for message
// ignore leading weekday name (e.g. "Mon,"), since this // seems to give problems during parsing
// special handling for dates
// *20030531, karlpeder* setting headerKeys to lowercase for // lookup!
// Add header information to print
// create a print object and return it
// Add body of message to print
// end of for loop over uids to print
// fall back to use the Date header contents directly
// print the print document (i.e. the message)
// create new local xml treenode
// try to fix broken html-strings
// create temporary file and save validated body
// if we have a result
// true ~ scaling allowed
"/*	 * Class under test for void remove(Object)	 */"
// search all messages which match this filter
// stop background-manager so it doesn't interfere with // shutdown manager
// If a msg has been read, import it into Columba
// setting lastSelection to null
// for each filter
// We are done - clear the status message after a delay
// clear
// initialize progressbar
// get filter list from folder
// Fetch the headers of the new messages ...
// If there is still a parent -> remove it
// Can't happen
// if "automatically apply filter" is selected & there // are // new // messages
// perform other environment configurations
//Update is unnecessary
// add command to scheduler //MainInterface.processor.addOp(command);
// parse all message files to recreate the header cache
// size of message
// we are done
"//	true/false"
// headerList.clear();
// priority as integer value
// was this message already fetched from the server?
// message flags
// host from which this message was downloaded
// properly decoded subject
// short from, containing only name of person
// message color
// POP3 message UID
// these are cached by default
//return h;
// Update the list of new and local uids
// save default headerfields, as defined in RFC822
// save other internal headerfields, of non-boolean type
// internally used headerfields // these are all boolean values, which are saved using // a single int value
// load boolean headerfields, which are compressed in one int value
// if value doesn't exist, use false as default
// load other internal headerfields, non-boolean type
// Compute the number of new messages
// Trigger Synchronization
// only called by FolderFactory
// next position in the local uid list
// if creating new folder
// Ensure sizes are correct
// Check if the mailbox has changed
// Seems to be no change!
// Compare inner loop
// Still not found -> do a binary search
// Check if all local uids have been deleted
// removedLocalUids = localUids.size() - 1 - position;
// all messages are new
// Fetch Pack outer loop
// Number of deleted messages is computed from exists on imap and local // newMessages
// Copy the header
// .. and set the flags
// First deleted all local uids that // are larger than the largest remote uid
// fire message added updates
// Number of deleted messages is computed from exists on imap and // local // newMessages
// Pack size is min 10, max 200 else mailboxsize / 10
// Build a list of the new uids
"/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#getObservable()	 */"
// IMAP Folders have no own lock ,but share the lock from the Root // to ensure that only one operation can be processed simultanous
// get IMAP rootfolder
// We found the uid of a deleted message // -> remove it from the headerlist
// Check if maybe no message at all got copied // In this case we are finished here
// the implementation of the search function. It returns always the position of the FIRST found word.
// update the local flags and ensure that the MailboxInfo is correct
// get header with UID
// update the HeaderList
// Parser the header
// Reenable Updating the mailbox
// locking mechanism
// MATCH ANY
// find colum
// if folder doesn't exist already
// Remove of lock didn't work -> delete by hand
// no delimiter found // -> this is already the final folder // if folder doesn't exist already
// recursively go on
// create and tag all subfolders on server
// maybe remove this folder
// private Filter filter; // private JDialog dialog;
// Check the Noinferior flag
// Buffer for collecting data from // the "characters" SAX event.
// Find special
// first clear all flags
// search for a folder thats on the IMAP account // first try to find the local translation of special
// This fixes the strange behaviour of the courier imapserver // which sets the \Noselect flag on INBOX
// Trigger synchronization of the IMAPFolder
// Trigger any pending Flag syncs
// Reenable the action
// has the imap account no trash folder using the default trash folder
// Find old numbers
// create reference of newly arrived messages
// Get the new numbers
// this is necessary to do!
// line contains "@" (evolution mbox style) or //  -> import message in Columba
// Check if index is consitent with mailbox
// MATCH_ALL
// line contains "-" (mozilla mbox style) //  -> import message in Columba
// we support 3 address types (work/home/other)
// enable lucene search index by default
// update message starts of following messages
// Could not delete the file - possibly someone has a lock on it
//delete the file containing the message in the file system
// Add all found virtual uids to the result
// selecting the message
// pass the work to IMAPStore
// filter is disabled
// ... delete it when Columba exists instead
// A list of all files that seem to be messages (only numbers in the name) //new Object[list.length];
"/*		 * worker.setDisplayText( ""Search Result: "" +		 * notDefaultEngineResult.size() + "" messages found in "" +		 * (System.currentTimeMillis() - startTime) + "" ms"");		 */"
// check for new headers
// result = mergeFilterResult(v, uids, match); // only for debugging purpose // printList( result );
// we found a suitable folder -> set it
// MATCH_ANY
// clear status bar message now we are done (with a delay)
// return searchMessages(filter, null);
//  This list is reduced, because most search requests can be  // answered anyway, using locally cached headerfields
// Find all VirtualFolders and rewrite the FolderReference
//super.removeFolder(); // do nothing
// Search again
// generally we can just use the same login for both servers
// set sort-string/displayname
// show neat error dialog here
// Find the body text part
// Convert the src uids back to virtual uids
// If no flags filter the seach is still valid
// only called by FolderTreeModel.createDirectories() and FolderTreeModel.add()
// copy all properties to the subfolder
// create default configuration
// redo the seach for the flags criteria
// if creation failed
// lets find a good name for our new vfolder
// create new subfolder
// update tree-view
// Create a src uid array
// Check if all uids are still exisiting
// change to new folder
// fire updates
// remove from virtual folder
// remove from source folder
// not supported
// We need to get the locks of all folders
"// GradientPaint painter = new GradientPaint(0, 0, midColor.brighter(), // 0, 5, midColor); // g2.setPaint(painter); //		 // g2.fillRect(0,0,w,5); //		 // new GradientPaint(0, h-1, midColor, 0, h-1-5, Color.red); // g2.setPaint(painter); //		 // g2.fillRect(0,h-5,w,5);"
// First try to get the lock of the virtual folder
"/*		 * ColumbaHeader header = (ColumbaHeader) headerList.get(uid);		 * header.getAttributes().put(key, value);		 */"
// deactivate the folder
// Copy the rest
// Update the Virtual Header
// if no folder was passed as argument, use global options
// global option
// not supported by virtual folder
"/*     * validates a hostname, i.e.:     * mail.myhost.com     * mail.us.myhost.com     * 127.0.0.1     * */"
// add column to JTable column model
// create element if not available
// use folder specific options
// add columns
// only local options have overwrite attribute
// use global options
// use folder-based options
// save width
// remove all child nodes
// should we re-use the last remembered selection?
// these are the items, enabled as default
// resize column width
// no messages in this folder
// changing the selection to the first/last row based on ascending // state
// sorting order
// row count == 0 --> empty table
// if a lastSelection for this folder is set // getting the last selected uid
// enable max occurrences
// if we search in The MessageConroller
// ViewItem viewItem = getViewItem();
// use global settings
// listen to changes in the Subject to update the title bar // of the message composer window
// remove disabled column
// check for new messages
// get the message controller
// check if we should use the folder-based configuration // or the global table configuration
// init model (defaults to empty plain text message)
// Global # 1
// if no account exists, return
// @author Erich Schaer, Dmytro Podalyuk
// East Europe # 10
// West Europe # 4
// Automatic Generation of Groups
// composer can either edit in html or plain text mode // listen for configuration changes
// if message contains attachments
// East Asian # 17
// Hack to ensure charset is set correctly at start-up
// add splitpane to the center
// init controller for the editor depending on message type
// set model based on configuration
// create default element if not available
// ignore this
// remove all components from container
// West Asian # 30
// show signature viewer
// email addresses and phone numbers
// create splitpane containing the bodytext editor and the // attachment panel
// set first name
// show attachment panel if necessary
// update panel
// re-paint composer-view
// enable/disable html toolbar
// update ComposerModel based on user-changes in ComposerView
"/*		 * return isToolbarEnabled(ACCOUNTINFOPANEL);		 */"
// default ~ plain text
// Setup DnD for the text and attachment list control.
// convert body text to comply with new editor format
// sync model with the current (old) view
// retrieve Command of filter action
// switch editor and resync view with model
// change ui container
// sync view with new update to date model
// save charset
// close composer
// hide signature viewer
// save html state
// Display error ? // As it is inmutable
// original: "^[a-zA-Z0-9]+@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,4}+$";
"/* (non-Javadoc)	 * @see org.frapuccino.addresscombobox.PatternSeparatedAutoCompleter#acceptedListItem(java.lang.Object)	 */"
// Remove leading space after the separator character so that it is not removed from the text component's document, below. 
// more initialization
// set message
// clear view
// notifyListeners();
// if this is no URI
// fill hashmap with all available contacts and groups
// Surround the selected element with double-quotes, if necessary
//model.setHeaderField("X-Priority",(String) view.getSelectedItem());
// remove from view
//      Get Tooltip for Icon
//setCellRenderer(new ListRenderer());
// remove from model
//setModel(listModel);
// font configuration
// add attachments (mimeparts) from view to the model
// transfer attachments from model to view
// set formatted name
// transfer attachments from view to model // clear existing attachments from the model
// add attachments (mimeparts) from model to the view
// attachment controller doesn't support copy actions
// currently used font
// attachment controller doesn't support copy-operation
// size of font
// view.setSelectionInterval(0, view.count() - 1);
"//	name of font"
// add listener to changes
// hide/show attachment panel
// ********** Methods necessary to hide view from clients ********
// if account selection changes, reload signature file
// register interest on configuration changes
// use default font settings
//SubjectDialog dialog = new SubjectDialog(composerInterface.composerFrame);
// check if we are currently editing a draft message
// remove listener from old account selection
// get "Drafts" folder of account
// view data ->model
// get selected account
// -> we need to replace old message
// message is already cached // try to compare the headerfield count of // the actually parsed message with the cached // headerfield count
// I need revalidate if node is root. but why?
// get mimeparts
// get list of all selected folders
//shortcut key
// We need to parse // get message with UID
// mark as read, mark as draft
// update view accordingly
// small icon for menu //putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("send-later-16.png"));
// private MainInterface mainInterface;
// required for SwingWorker 3
// initialize MimeHeader as RFC822-compliant-message
//ComposerModel model = (ComposerModel) // ((ComposerController)getFrameController()).getModel();
//  add all attachments
// add all attachments
// build "quoted" message
// skip if bodypart (already added as quoted text)
// store header after processing
// Text: Addition of > before each line
// Add addresses to the addressbook
// get answer from template
// choose template
// retrieve headerlist of tempate folder
// template folder has uid=107
// Add all recipients to the collected addresses
// user pressed OK
// get bodytext of template message
// remove duplicates
// From which account is this mail?
// set subject ; mod:20040629 SWITT
"//$NON-NLS-1$			"
// ======== dialogPane ========
// html
// we only need the first message
// setRowMargin(5);
// get message flags
// get selected messages
// set From for redirecting; new: 20040629 SWITT
// Text: take org. message; mod:20040629 SWITT
// Html: Insertion of text before and after original message
// action buttons for moving contacts
// skip if message is *not* marked as spam
"// 	Stick with the default charset"
// addressbook list
// recipient lists
// models for addressbook/recipients lists
// labels
// b2.nextLine();
"/*	 * public IHeaderItemList[] getHeaderItemLists() { return headerItemList; }	 */"
"//			toListModel.clear(); //			ccListModel.clear(); //			bccListModel.clear();"
// get color from factory // ->factory shares color objects to save memory
// mark message as spam
// CellConstraints cc = new CellConstraints();
// register for changes to editor type (text / html)
// register for changes to the editor // controller.addContainerListenerForEditor(this);
// create virtual folder (is attached to parentFolder)
// builder.add(paraLabel, cc.xy(1, 7));
// view = editor.getView();
// private JTextPane view;
// selection in the paragraph combo box
// clear ignore flag
// only do something if ignore flag is not set
// enable controls if we are not in html edit mode
// int selectedIndex = sizeComboBox.getSelectedIndex();
// if no text is specified, we are done now
// set paragraph formatting according to the selection
// // This doesn't handle ChangedCharsetExceptions correctly. // view.setText(text);
// other IOExceptions than ChangedCharsetException
// delete old contents
// clear existing text
// load contents into document
// select the menu item corresponding to present format
// get list of all folders
// set paragraph formatting according to the given action
// register for text cursor/caret and formatting changes // to select/deselect action
//centerPanel.setLayout( new BoxLayout( centerPanel, BoxLayout.Y_AXIS ) );
//dialog.getContentPane().setLayout( new BoxLayout( dialog.getContentPane(), BoxLayout.Y_AXIS ) );
// END public ExternalEditor()
// ensure that we are currently in the contact component
// remember old font properties
// set last name
// add all additional names (middle names)
// END public class ExternalEditor
// set new text
// execute application, enabling blocking
//centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) );
"//		 for each JComboBox item"
"/*JPanel panel = new JPanel();panel.setLayout( new BoxLayout( panel, BoxLayout.X_AXIS ) );panel.add( hostLabel );centerPanel.add( panel );*/"
// First print a quote
// Do we have to insert a quoteprefix?
// here)
// 2 columns // rows are added dynamically (no need to define them
// @author: fdietz
// update tree label
// update configuration
// two different root folders // -> get inputstream from source-folder and add it to // -> destination-folder as inputstream // -----> moving of raw message source // (works also for copying from local to IMAP folders, etc.
//Create the file
// !!! Size = 12 // create filter configuration // -> check if <Subject> <contains> pattern <test>
// setup dialog title, active filter and file name
// add all nicknames
// add all prefixes
// disable selected item
// let exception handler process other errors
// String value = (String) theList.getSelectedValue();
// reactivate
// private ConfigFrame frame;
// disable the actionlistener for this period // to avoid an unwanted port check
// Update the Port
// Default Port
// insert into message right after <body...>
//this.frame = frame;
//private ConfigFrame frame;
// POP3s / IMAPs
// set website/homepage
//pathButton.setMargin( new Insets( 0,0,0,0 ) );
//typeComboBox.setMargin( new Insets( 0,0,0,0 ) );
// DateFormat
// TODO factor up into GenBaseImpl //
// EATM Call the deprecated method which does the same thing  // but might have an override in older code.
// Unused?
// TODO factor up into GenBaseImpl? //
// call workaround
// TODO deprecate (since getPluginClass() is no longer called) //
// Ensure that this race condition is thread safe; it doesn't matter who wins the race. //
// TODO // This assumes we only get a SET notification, which isn't a good assumption. //
//DMS handle this well.
//FB TBD can we come up with a better algorithm for choosing the default label feature?
//DMS should we let this exception out?
//DMS What if Eclipse is running, but an invalid facade has been specified?  We still should format code, use encoding,...
//DMS  Do a better job with specific exceptions? Just use chained RuntimeExceptions?
// If the delegate URI can be handled as a file,  // we'll hope that renaming it will be really efficient. //
//DMS Why not this? //new SubProgressMonitor(progressMonitor, 1));
// Assume that it's an attribute for now. // It will/could become a reference if the type resolves to an EClass. //
// Do nothing for now, and avoid propagating the exception.   // How should builders handle cancel?
// this is a fall-back, however, this should never be called
// TODO fix the space above
// TODO REMOVE THIS BOGUS EMPTY LINE
// TODO handle class cast exception better.
// I don't know if we should be run this deferred  // because we might have to give the editor a chance to process the viewer update events  // and hence to update the views first. //  //
// This is a big festering hack to make the images the right size from the start. //
// EATM Demand create metadata; needs to depend on processing mode...
// TODO This is really quite attrocious since there is code that will assume an iterator that returns strings!
//TBD return (user selected subset?) of referenced packages that contain super classes of classes in this package.
// call the workaround
// //TBD rethink where exactly some of the following methods belong (GenModel or GenPackage) //
// if there are multiple variables in declaration,  // separate this variable fragment into a separate declaration
// EATM this would be wrong.
// REVISIT: Remove this code.
// The label is not used. //
// Motif kludge: we would get something random instead of null. //
// TODO So what should be the eType be now? //
// This runs the operation, and shows progress. // (It appears to be a bad thing to fork this onto another thread.) //
// EATM Kind of hacky.
// This is a kludge to deal with enumerators, which crash the doSwitch. //
// This is copied from ItemProviderAdapterFactory. //
// EATM This might be better written as a single loop for the EObject case? //
// Second alternative should be getModelProject()?
// TODO Hack that should be removed.
// TODO // Specialize this to return a resource locator for messages specific to this validator. // Ensure that you remove @generated or mark it @generated NOT
// TODO // I'm concerned that folders will often return 401 or even 403. // So should we consider something to exist even though access if unauthorized or forbidden? //
// Only file-scheme URIs will be re-encoded. If a URI was decoded in the workaround // above, and Platform.resolve() didn't return a file-scheme URI, then this will return // an decoded URI. //
// This functionality should eventually go away, as it is replaced by model exporters. // We'll just delegate to the deprecated GenPackage method. The monitor isn't used, so we won't pass it. //
// The eAnnotations and eGenericType are possible containment references.  // We'll move them instead of copying //
// Note: Registry based authority is being removed from a // new spec for URI which would obsolete RFC 2396. If the // spec is added to XML errata, processing of reg_name // needs to be removed. - mrglavas.
// temporary structure to hold node's attributes + namespaces in scope
// HACK: reading encoding
// Because of the old factoring approach in the create method,  // it might be the case that the state of the old value has changed by the time we get here, // and in that case, we don't want to duplicate the removals in this code. //
// REVISIT: Remove this code. // Store port value as string instead of integer.
// TODO // This is faster than many charAt() calls. //
//REVISIT: do we really need to support block names as in Unicode 3.1 //         or we can just create all the names in IsBLOCKNAME format (XML Schema REC)? //
// Bubble sort // Why? -- In many cases, //         this.ranges has few elements.
// Per Schema 1.0 it is not clear if the result returned should be a valid URI.  // For the future if we plant to support IRIs then it is better not to massage // the initialValue.  // We should thought consider where would be the best way to validate anyURI values -- EL
// Note that the way they are sorted, the values of index[i++] always increase, // so the objects are added from right to left in the list. // // EATM  TODO // // We could make this more efficient by grouping the adds when indices increment by one, // so that a single grouped notification would result. //
// TODO deprecate (since no longer used by getEditPluginClass(), getEditorPluginClass(), getTestSuiteClass()) //
// if there are multiple variables in declaration,  // separate this variable fragment into a separate declaration    
//DMS factor this into a method? Use a non-static subclass? 
//DMS this doesn't really produce nice output. //
//FB TBD filter out volatile and other inappropriate links?
// I don't know if this should be run this deferred // because we might have to give the editor a chance to process the viewer update events // and hence to update the views first. // //
// TODO processing instructions are not sent to recordValues
// TODO comments are not sent to recordValues
// TODO Ignore for now.
// TODO handle situation when ASTJNode is removed (compilationUnit is null)
//TBD return super classes of classes in this package that come from a delegate package.
// if current char is comma, insert line break after it // // we should be able to find the comma because the range for enum constants includes all trailing comments up to the separator // if TargetSourceRangeComputer of ASTRewrite changes, this logic should change to skip comments // see org.eclipse.emf.codegen.merge.java.facade.ast.CommentAwareSourceRangeComputer#getEnumConstantSourceRange(ASTNode)
// TODO translation
// TODO Binary incompatibility; an old override must override putAll.
// This runs the options, and shows progress. // (It appears to be a bad thing to fork this onto another thread.) //
// we should be able to find the comma because the range for enum constants includes all preceding comments up to the previous constant // if TargetSourceRangeComputer of ASTRewrite changes, this logic should change to skip comments // see org.eclipse.emf.codegen.merge.java.facade.ast.CommentAwareSourceRangeComputer#getEnumConstantSourceRange(ASTNode)
// TODO we should generate this.
// TODO What about the instance type name and the fact that we should be matching its type argument structure? // If they match so far, we must assume they are okay and then check all the arguments. //
// Set of options that we want to control
// get the end position of the range for the previous node
// adding 'at' allows distinguish annotations from other members // (i.e. inner class verses annotation of a class) //
// Get the adapter from the factory. //
// No methods added.
"/*   * Javadoc copied from interface.   */"
// add trailing comments if necessary
// If the target is read-only, we can ask the platform to release it. //
// If entries don't have the same feature, the feature maps aren't equal. //
// Merge with an existing file. //
// Walk up the superpackages, collecting the package names. // Because empty packages are ommitted from the GenModel, we need to walk up the EPackages. //
// Any features that delegate to features in this package. //
// See java.lang.Class.getName() javadoc for explanation of array encoding.
// Additional useful character classes, including characters valid in certain // URI components and separators used in parsing them out of a string.  // // | ucschar | escaped
"/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */"
// If the target is read-only, we can ask the platform to release it, and it may be updated in the process. //
// find start position of farthest preceding comment
// was the details button pressed?
// Set up the tree viewer. //
// Process the children of the UnitTreeNode recursively. //
// Create a code formatter for this compilation unit, if needed. //
// If the name isn't qualified, it might be a primitive or from java.lang. Otherwise, assume it's in the current // package and use the nsPrefix for the qualified package name. //
// Determine the base URL by looking for the plugin.properties file in the standard way. //
// The notification for this list is being thrown by the // delegating list //
// Make sure our popups work. //
// remove type, insert enum
// We need to screen out duplicates in the unlikely event that we have two //  features with the same class-qualified name. We'll only generate one property //  string in that case and let the user add the second one manually, if necessary. //
// build mapping from classes to list of features that use them
// This runs the options, and shows progress. //
// no paths: keep query only
// Select the root object in the view. //
// else absolute path: keep it and query
// Listen to selection so that we can handle it is a special way. //
// The algorithm for the order of the features in this list should never change. // Also, the fact that a new list is created whenever the contents change  // is something else that should never change. // There are clients who rely on both these behaviors,  // and they will need to agree to any change, // so that they can adjust their own code. //
// This ensures that we handle selections correctly. //
// Create an adapter factory that yields item providers. //
// Get the current time in milliseconds since the epoch  // and adjust it to match the epoch required by the specification. //
// Get the first selected element. //
// Otherwise, the path needs only the remaining segments.
// log the error, ignore the change and continue
// absolute path or no path -> absolute path
// Do a base 64 conversion by turning every 3 bytes into 4 base 64 characters //
// create a composite with standard margins and spacing
// source method return type is array (getExceptions), target is not array (i.e. addException)
// And we need to set it on any cached GenModels holding the special Ecore and XML packages. //
"/**   * Calls <code>validateXXX</code> for the corresponding classifier of the model.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */"
// This is the page for the tree viewer //
// empty last segment -> trailing separator
// Refresh the necessary state. //
// A set command without a feature sets the value of this wrapper, hence replacing it with a new wrapper. So, // we need a special command wrapper that selects this new wrapper as the affected object. //
// Maintain a (weak hash) set on the type parameter of all referencing generic types. //
// Force the project to be setup properly. //
"/*    * Javadoc copied from interface.   */"
// WizardContainer variables
// return getPrefixedName("EditorPlugin");
//EParameter
// retrieve source node corresponding to target //
// Ignore.
// Create a default .jetsettings file file
// Subclasses may overrride 
// Save the resources to the file system. //
// Set the selection to the widget. //
// ETypeParameter
// Save only resources that have actually changed. //
// This is only at avoid needing an @SuppressWarnings("unchecked") on the EMFObservableList
// This is the method that gets invoked when the operation runs. //
// Ignore this since we will throw an exception when all else fails.
// Fill 3 of value (byte) -19
// for enum constants use special range
//ETypedElement
// So if the resolved object is also present... //
//EcorePackage
// Subclasses may override this method
// Create resource
// Something went wrong that shouldn't. //
// Create package meta-data objects
// Fill 68 of value (byte) -19 // Fill 9 of value (byte) 33 // Fill 36 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 30 of value (byte) -19 // Fill 56 of value (byte) 33 // Fill 89 of value (byte) -19 // Fill 18 of value (byte) 33 // Fill 7 of value (byte) -19 // Fill 14 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 46 of value (byte) 33 // Fill 70 of value (byte) -87 // Fill 26 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 36 of value (byte) 33
// getObjectsToDetachGen() should be changed only if required
// If a newline from the previous character data remains, add a generator for it. //
// Obtain or create and register package
// remove the node
// Initialize simple dependencies
// Fill 11 of value (byte) 33
// Obtain other dependent packages
// If the intersection is empty, i.e., no ancestor is in the mapping... //
// Create classes and their features
// Continue with a different approach.
// Initialize created meta-data
// If this mapping isn't a parent, it's children definitely won't be either. //
// Set bounds for type parameters
// Make sure the collections aren't identical... //
// Initialize enums and add enum literals
// Add supertypes to classes
//FB used to check for parent != null. // Need to find the top most model object not including the resource. // parent instanceof Eobject only checks for trees in model object space.
// FeatureMapEntry
// Do the work within an operation because this is a long running activity that modifies the workbench. //
// ResourceChange
// Isolating the new objects
//FeatureChangeImpl
// set features and properties
// cache result
// This is the page for the list viewer //
// insert line break and comment out the first line if needed // note that first line might move backward beyond node start (e.g. if a comma of the previous enum constant has been commented out)
//ResourceChangeImpl
// If we change to pattern defaults, will have to specify plain suffix in no main package case. //
// feature is instance of EAttribute
// Different than the Edit and Editor projects, this method is invoked while  // generating the model plugin xml.
// Make sure that all the old values are cached.
// Include only non-duplicate namespace declarations. //
//EDataType
// Create the command stack that will notify this editor as commands are executed. //
// Try to select the items in the current content viewer of the editor. //
// caches the list value.
// Set the editors selection based on the current viewer's selection. //
//ChangeFactory
// Set of options that we want to copy from the current definition        
// Sorting only the genModels
// We need to be careful that we don't end up requiring the no namespace package  // just because the feature is unqualified. //
// Register package validator
// We must have a qualifier for an attribute that needs qualified. //
//System.err.println("DEBUG: fixed-only: "+this.fixedString);
// cached already?
// see if prefix already exists in current context
// Initialize classes and features; add operations and parameters
// default implementation does nothing
// Initialize package
// Walk up the super types until we reach a root. //
//ChangeSwitch
// Try to select the affected objects. //
// Continue with no instanceClass. 
// Unwrap collection. //
//case Notification.REMOVE_MANY:
//case Notification.REMOVE:
// Look for a matching element in the classifier's package but don't bother with the XML type package's document root. //
// Create data types
//EGenericTypeImpl
//return eContainer;
"/*   * INTERNAL: this is a specialized method to add attributes for a top/root element   */"
// create containment one.
// it's intentional to keep going
// Initialize data types
// Don't really unset it.
//ETypeParameterImpl
// Stop only on cancel. //
// System bar.  
// Continue to try a different approach.
// Produce the supplemental character as an entity
// Keep trying until all else has failed.
// If we can't determine it by reading the file, // look at the preferences instead.
//ETypedElementImpl
// Since we're invoking plugged-in code, we must be defensive against cycles. //
// Subclasses may override
// Combine the two lists. //
//EcoreFactoryImpl
// We not sure the encoding supports this code point, so we write it as a character entity reference.
// Keep trying until all else false.
// no property
"/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */"
//EParameterImpl
// Identifies a file-type absolute URI.
// Only handle classifiers from this package. //
// ChangeDescription
// FeatureChange
// If it is an unqualified name, we will assume it refers to a type parameter, since we don't support default package. //
// Mark meta-data to indicate it can't be changed
// We effectively passed null, "" to look up the general-content feature. //
// EGenericType
// insert line break at the first line if there is something before the node start and the beginning of the line
//EcoreFactory
// EATM Leave this disabled for now. //
// Fill 3078 of value (byte) 33 // Fill 156 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 90 of value (byte) -19 // Fill 6 of value (byte) 33 // Fill 22 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19
// Give all generator adapters the chance to do setup work. //
//  Remove any non-Java dependencies from being added. //
// clear old values
// We can't update any properties via just a URL connection.
// Trim off the segments corresponding to the package nesting. //
// Ignore any exceptions and assume the class isn't available.
// For an archive URI, check for the plugin.properties in the archive. //
// create the IV for the password generation algorithm
// Opening the detail area
// DocumentRoot
// We do not want to diagnose any errors that have already been diagnosed by a super type. // Although we ignore all the first super's features, there may be mixin classes that still would result in duplicates. //
// loop for all commented out nodes
// We need to be careful that the proxy may be resolved while we are attaching this adapter. // We need to avoid attaching the adapter during the resolve  // and also attaching it again as we walk the eContents() later. // Checking here avoids having to check during addAdapter. //
// Produce different levels of diagnostic depending whether the names are exactly the same or only matching. //
// Switch to the new selection provider. //
// Look for duplicates among the generic super types. //
// Keep trying other member types until all have failed.
// Match against every other operation but this one. //
// Fake a selection changed event to update the menus. //
// The referencing generic type must be contained to be in scope //
// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
// If none of the generic super types are bounded, then we've failed. //
// append extra dimensions since they are not stored in Type object
// Check if the bound specifies a classifier... //
// Trim off the "bin" or "runtime" segment. //
// The classifier of an attribute's generic type must be a data type. //
// Compact the results to remove unmatched objects //
// If neither approach finds a contradiction, we must assume they are okay and then check all the arguments. //
// If we didn't find the plugin.properties in the usual place nor in the archive... //
// The type arguments of a generic super type must not be a wildcard. //
// If we can open  an input stream, then the plugin.properties is in the folder, and we have a good base URL. //
// If we still don't have a good base URL, complain about it. //
// Consider the classifiers in a special way  // to take into account the fact they they often acts as wrappers for instance type names // and that two classifiers that wrap the same instance type name should be considered equal. //
// Create the mapping domain with a special command stack. // 
// The content outline is just a tree. //
// If we are still on the root mapping itself... //
// If the type also specifies a classifier... //
// Yield that mapping, create a stack, record it as the next one to prune, and add it to the stack. //
// I.e., the classifiers are considered equal if they wrap the same non-null type. //
// Consider the instance type names they wrap  // to see if they are non-null and equal. //
// Get the top iterator, retrieve it's result, and record it as the one to which remove will be delegated. //
// If the result about to be returned has children... //
// Record the iterator as the next one to prune, and add it to the stack. //
// Then eObject1 must be that match. //
// There will be no iterator to prune. //
// While the current iterator has no next... //
// if the given class is subclass of enum and node is of subclass of type
// Only if the feature kind is unspecified should we return a match. // Otherwise, we might return an attribute feature when an element is required,  // or vice versa. This also can be controlled by XMLResource.OPTION_LAX_FEATURE_PROCESSING. //
// Pop it from the stack. //
// If the stack is empty, we're done. //
// Pop it off the stack. //
// Generate a 48 bit node identifier;  // This is an alternative to the IEEE 802 host address, which is not available in Java. //
// Get the next one down and then test it for has next. //
// If there is an iterator to prune. //
"/*   * Javadoc copied from source.   */"
// You can only prune once. //
// Undo the preparation for previous and continue.
// We don't create an iterator stack until the root mapping itself has been returned by next once. // After that the stack should be non-empty and the top iterator should yield true for hasNext. //
// printAdapters();
// Keys that will be used to record visibility for the accessors. //
// If that iterator is still at the top of the stack... //
// If the referenced EObjects aren't equal, the feature maps aren't equal. //
// Allow for a bit-shift of growth. //
// If eObject2 has been compared already... //
// Keep popping the stack until an iterator that has a next is at the top. //
// The feature maps must be equal. //
// Conditionally create the data. //
// The first case is the most common case. // It is slightly cheaper to call add without an index since an index will be range checked. //  
//  ++modCount //
// If we find a match, make this generic type be for this type parameter, // and then stop the whole process.
// clockseq_low
// Guard for no data. //
// The system clock has been rewound so the clock sequence must be incremented  // to ensure that a duplicate UUID is not generated. //
// Suppress default constructor for noninstantiability.
// ++modCount //
// Ensure that anything can be handled, even if it's not recognized. //
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.DOMHelper#getValue(org.w3c.dom.Node)   */"
// Strip off the array indices if any. //
// The entity handler is the best place to resolve and deresolve URIs since it can do it there just once to produce the entity. // So most often the entity handler will be a URI handler as well and when used as a URI handler will be an identity handler. //
// Create a page, set the title, and the initial model file name. // //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
//MappingRootImpl
// Prepare for CreateSibling item addition or removal. // //$NON-NLS-1$ //$NON-NLS-1$
// Fill 3 of value (byte) -87
// Ignore it if we've already set generic versions of these //
// String getPackageID();
// // EMFEdit generation //
// Returns whether this class implements any of the given features.
// ignore rules for nodes of different class
// Remember the static instance. //
//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), substituteOldValue, substituteNewValue, msg.getPosition());
//Class/genFeature.override.javajetinc //for
// Create a command to do parentMapping.getNested().remove(mapping). // //subcommands.appendAndExecute(new RemoveCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), mapping));
// Path segments cannot contain '[' or ']' since pchar // production was not changed by RFC 2732.
// Fill 5 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 7 of value (byte) -87
// processing unknown feature with xsi:type (xmi:type)
//Class/implementedGenOperation.override.javajetinc //for
// Bidirectional references need to use this less efficient approach because some //  or all of the changes may already have been made from the other end. //
// returns the package in which this enum literal is defined // returns the name of the enum literal get method in the package interface
// If the proxy holder can hold many values, // it may contain a duplicate that resulted when the other end was processed as an IDREF // and hence did both sides of the bidirectional relation. //
// // Data //
"/*     * Javadoc copied from interface.     */"
// Pretend there is an xmlns="" because we really need to ensure that the null prefix  // isn't used to denote something other than the null namespace. //
// do not add a new line if there is one
// Fill 15 of value (byte) 33 // Fill 9 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
// Excise the new root from the document root. //
// Don't hold onto a duplicate reference to the last object. //
// If processSchemaLocations is specified, treat these as XML Schema locations
// Give it all back to the garbage collector. //
// there is only whitespace after enum constant on the same line - do not add line breaks
// Write the capacity. //
// This happens when processing an element with simple content that has elements content even though it shouldn't. //
// Fill 11 of value (byte) 33 // Fill 27 of value (byte) -19 // Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 46 of value (byte) 33 // Fill 26 of value (byte) -19 // Fill 5 of value (byte) 33
// record node's attributes
// Fill 4 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 519 of value (byte) 33 // Fill 3 of value (byte) -87
// There's an EObject on the stack already. //
//FB The following method is copied from com.ibm.etools.b2b.util.StringUtility //FB because the mapping framework cannot have a dependency on b2b. What we really //FB need to do is get methods like this moved to vabase so that everyone can //FB use them. // change all occurrences of oldPat to newPat
// If it is changing... //
// Test for a same document reference that would usually be handled as an IDREF. //
// Check for scheme, which must be before '/', '?' or '#'. Also handle // names with DOS drive letters ('D:'), so 1-character schemes are not // allowed.
// Need not to call setSource() because // a caller can not access this match instance.
// Only creates the other pages if there is something that can be edited //
// Create the listener on demand. //
"/*           * The pattern contains a fixed string.           * The engine checks with Boyer-Moore whether the text contains the fixed string or not.           * If not, it return with false.           */"
// handler.unparsedEntityDecl(name, publicId, systemId, notationName);
// Ignore close since we don't want to let the parser close the stream when it's done.
// We'll try adding a shallow copy of the clipboard contents, instead of a full copy. // Note: we can't just try adding the clipboard contents itself, because the copy may be a //       different type then what's on the clipboard (e.g. EJB Field -> RDB Column). //
"/*           * The pattern has only fixed string.           * The engine uses Boyer-Moore.           */"
// Fill 6 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 8 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19
// handler.notationDecl(name, publicId, systemId);
// EDate is far too often overridden to provide a different mapping, and therefor the default is somewhat obscure. // So, it's best to delegate to the factory. //
// This seems to be a pretty sweet formula that supports good growth. // Adding an object to a list will create a list of capacity 4,  // which is just about the average list size. //
"/*     *  Convert attribute values:     *  & to &amp;     *  < to &lt;     *  "" to &quot;     *  \t to &#x9;     *  \n to &#xA;     *  \r to &#xD;     */"
// caching parser does not parse 2nd file in the same way (javadoc of package for example) // hence, new parser is created every time this method is called
// Fill 7 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 13 of value (byte) -19 // Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19
// This should be transparent. //
// | ucschar | escaped
// ModifierOp // CharOp  for CHAR, BACKREFERENCE, CAPTURE, ANCHOR, 
// Fill 7 of value (byte) -19
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#addChild(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */"
// process eStructuralFeatures for association end(Role) //
// STRING
// xsi:nil // xsi:type // xmlns:xsi // xsi:schemaLocation // xsi:noNamespaceSchemaLocation
// Look for a substitution group feature in the feature's containing class' containing package. //
// It's intentional to keep going.
// Check which directive it is. //
//iri = iri || containsNonASCII(fragment);
// Check if it's an anonymous type. //
// for RANGE or NRANGE
// We only get here if we should do this. //
//reader.reset(start); //return false;
// Write all the entryData; there will be size of them. //
// Fill 2 of value (byte) -19
// Overlapped // src:    o--------o // sub:  o----o // sub:      o----o // sub:          o----o // sub:  o------------o
// Restore the capacity, if there was any. //
// Read all size number of entryData. //
// This just represents going back to the unset state, but that doesn't affect the contents of the list. //
// String-parsing implementation.
// Create a page for the selection tree view. //
// generateColor();
// this.ranges is sorted and compacted.
// Fill 2 of value (byte) 49 // Fill 26 of value (byte) -3 // Fill 2 of value (byte) 33
// Create annotations // http://www.w3.org/XML/1998/namespace
// src1:    o--------o // src2:          o----o // res:           o--o // Reuse src2
//  Interpret the body of a nested ownedComment as a comment-type and assign it as the EAnnotation.source of the parent. //
// X{2,6} -> XX(X(X(XX?)?)?)?
// Internal bootstrap uses Literals constants, so we must force initialization this inner interface first. //
//iri = iri || containsNonASCII(device);
// Open an editor on the new file. //
// Trying to match the following productions: // hexseq = hex4 *( ":" hex4) // hex4   = 1*4HEXDIG
"/*           * Checks whether the expression starts with "".*"".           */"
// Parse the attr-val pairs. //
// Skips ')'
// create field initializer from enum constant's arguments and body
"/*                       * Saves current position to avoid                       * zero-width repeats.                       */"
// off -> next of '}'
// different scheme: need complete, absolute URI
// Apply the change. //
"/*           * Straightforward matching.           */"
// Delete the change information because it is invalid now that the objects have been changed. //
// Static initializer for archiveSchemes.
// Apply the change and reverse the change information. //
// Compute the URL for where the classes for this project will be located. //
//this.iri = iri;
// \ + c // backsolidus // POSIX Character class such as [:alnum:]
"/*      public RegularExpression createRegex(String regex, int options) throws ParseException {          Token tok = this.parse(regex, options);          return new RegularExpression(regex, tok, this.parennumber, this.hasBackReferences, options);      }      */"
// Compute the URLs for all the output folder of all the project dependencies. //
//tok.dumpRanges();
// Define a class loader that will look in the URLs first,  // and if it doesn't find the class there, uses the emitter's loader. //
// Single character // [a-zA-Z] // [^a-zA-Z] // ^ $ ... // literal String  // X* // X*? // X? // X?? // X|Y // ( and ) // \1 \2 ... // (?=...) // (?!...) // (?<=...) // (?<!...) // (?>...) // (?ims-ims:...) // (?(..)yes|no)
// Define a class loader that will look up the class in the bundle, // and if it doesn't find it there, will look in the parent. //
//************************************************************************ //*    class RoseToken                                                   * //************************************************************************
// Strip off the trailing "_" and load that class. //
// Since the granularity of time in Java is only milliseconds,  // add an adjustment so that the time is represented in 100s of nanoseconds. // The version number (1) is multiplexed into the most significant hex digit. //
// Check that the class is actually different from the one that's directly visible to the JETEmitter. //
// Filtered for property keys to remove duplicates.
"/*   * Javadoc copied from base class.   */"
// '|' // '*' // '+' // '?' // '(' // ')' // '.' // '[' // '\' // '^' // '$' // '(?:' // '(?=' // '(?!' // '(?<=' // '(?<!' // '(?>' // '(?[' // '[:' in a character class // '(?#' // '(?' [\-,a-z,A-Z] // '(?(' // '-[' in a character class
// Kick of a Java build if not already in a build. //
// src:    o--------o // sub:  o------------o // res: empty // Reuse sub
// Add the new entries, including source, JRE container, and added variables and classpath containers.  //
// This will deal with all the subcommands to modifying the root mapping tree. //
// Skips ']'
// 32 is the number of bits in `int'.
// Construct a proper URL for relative lookup. //
// src1:    o--------o // src2:      o----o // res:       o----o // Reuse the rest of src1
// Create a proper feature map entry. //
// set original node of annotations (to allow get methods to work correctly)
// Determine all the bundles that this project depends on. //
// This call should get the files checked out from version control if the project is a 'team' project. //
// Like isStringType(), but still returns true even if multiplicity-many. //
// Reverse the objects to attach and detach lists. //
// this.offset points the next of '?'. // modifiers ::= [imsw]* ('-' [imsw]*)? ':'
// Make sure the changed values of bidirectional reference lists are cached before we //  start to apply the change. //
// This case will be handled special during apply //
// If it doesn't correspond to a bundle, then try to process it as a project in the workspace. //
//System.err.println("CLOSURE: "+min+", "+max);
// Must be in 0x0040-0x005f
// for CLOSURE
"/*  public String getImportedInstanceClassName()  {    return getGenModel().getImportedName(""org.eclipse.emf.ecore.EEnumLiteral"");   }*/"
// there is only whitespace on this line - no need for line break
// This handles Rose 2003 format, e.g., // Logical View::JavaException[40722F9D0294] //
// for STRING
// move all children to the type, converting enum constants to fields // // fields that are created by conversion from enum constants must be inserted after // the last final field that is used in constructors for initializers
// ESCAPE U+001B // FORM FEED U+000C // LINE FEED U+000A // CRRIAGE RETURN U+000D // HORIZONTAL TABULATION U+0009 //case 'v':  c = 0x0b;  break; // VERTICAL TABULATION U+000B
// Add JETBuilder //
// Literal char // . // XY // X|Y|Z // X* // [a-zA-Z] etc. // [^a-zA-Z] etc. // (X) or (?:X) // // ^ $ \b \B \< \> \A \Z \z // *? +? // strings // back references // (?=...) // (?!...) // (?<=...) // (?<!...) // (?>...) // (?ims-ims:...) // (?(...)yes|no)
// clone includeStack without cloning contents //
"/*               *  a|b|c -> FC_TERMINAL               *  a|.|c -> FC_ANY               *  a|b|  -> FC_CONTINUE               */"
// Create .jetproperties file //
// Mark the bound as unspecified so that it won't be considered many // but can nevertheless be recognized as being unspecified and perhaps still be treat as many. //
// Store the current state in stack. //
// If all the objects aren't used up by the above, then we can't do the command. //
// Perl extension
// New Template Container Entryfield
// If there's no position, the list is being cleared. //
// Set the new variables. //
// If the template path points at a project with a JET Nature,  // then we will assume that the templates we want to use are already compiled in this plugin Java project. // 
// When we attached we have to recompute the erasure of the type parameter. //
//build table of Pf values
// Create a key set that supports add. //
// Suppress default constructor for non-instantiability.
// Get previous state in stack. //
// VAJ kludge //
"/*                  result.addRange(0, RegularExpression.LINE_FEED-1);                  result.addRange(RegularExpression.LINE_FEED+1, RegularExpression.CARRIAGE_RETURN-1);                  result.addRange(RegularExpression.CARRIAGE_RETURN+1,                                  RegularExpression.LINE_SEPARATOR-1);                  result.addRange(RegularExpression.PARAGRAPH_SEPARATOR+1, UTF16_MAX);                  return 1;                  */"
// Make sure we have something to pop. //
// Map to EClass, EEnum or EInerface. // Note that we do not map structure and primitive type class. //
// Register the file, and read its content: //
// The system time hasn't changed so add some increment of 100s of nanoseconds to guarantee uniqueness. //
// Is stack created ? (will happen if the JET file we're looking at is missing. //
// Use an alternate if we can't write to this one. //
// And delegate the call. //
// The method is not a structural feature, so it's modeled as an operation. //
// Continue with the established base URL.
// Consume the open quote: //
// Do allow an existing build.properties to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
// Restore parser state: //
// Filter out explicit EObject from super types, except in the Ecore package itself, or if it appears in the @model superTypes. //
// Check for an equal sign: //
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
// Get the attribute value: //
// insert line break if there is non-whitespace before end of the line
//an error  like "3c[Pad]r", "3cdX", "3cXd", "3cXX" where X is non data
// Don't do any of the other normally dynamic JETEmitter project processing. //
"/* (non-Javadoc)   * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()   */"
// Get the existing classpath and remove the project root if necessary. // Any new non-duplicate entries will be added to this. //
// Schema Rec. {Datatypes} - Punctuation  // Pi - initial quote // Pf - final quote
// note: hierarchical -> authority != null
// End of the useBean tag. //
// '::' represents at least one 16-bit group of zeros.
// // EMF.Editor generation //
// XMLesque Close tags //
// Parse as an attribute=value: //
// We can create the RemoveCommand for an uncontrol, but we must defer creating an AddCommand // to control until run(), when the user specifies a target resource. //
// // Tests generation //
// Reached EOF: //
// Resolve relative URI to base URI - see RFC 2396 Section 5.2 // In some cases, it might make more sense to throw an exception // (when scheme is specified is the string spec and the base URI // is also specified, for example), but we're just following the // RFC specifications
// Create annotations // http:///org/eclipse/emf/ecore/util/ExtendedMetaData
// Map to an eClass. //
// Until the encoding can be specified within the template  // we need to assume an encoding capable of working with any character set.
//FB TBD different objects for ecore model!
// Check end of quote, skip closing quote: //
// note: absolutePath -> hierarchical
// Get the attribute name: //
/*0A00..0A7F;*/
// Attempt to parse authority. If the section is an empty string // this is a valid server based authority, so set the host to this // value.
// Delete the ActionContributionItems with matching action. //
// search backwards starting from character before ':'.
// Don't remove the adapter if the object is in a different resource  // and that resource (and hence all its contents) are being cross referenced. //
/*0D00..0D7F;*/
// If the second character wasn't ':', in order to be valid, // the remainder of the string must match IPv4Address,  // and we must have read exactly 6 16-bit groups.
// Skip derived features. //
// The include succeeded, so if there is an alternative and we're not skipping, we need to start. //
// check for authority - RFC 2396 5.2 #4 // if we found a host, then we've got a network path, so we're done
// Include derived relations only if they won't also come from mixed or a group. //
// 6f - remove ending "<segment>/.." where "<segment>" is a // complete path segment
// If this is just a proxy being resolved... //
// RFC 2396 states that hostnames take the form described in  // RFC 1034 (Section 3) and RFC 1123 (Section 2.1). According // to RFC 1034, hostnames are limited to 255 characters.
// Force the raw type to be resolved so we don't resolve this endlessly. //
// rightmost domain label starting with digit indicates IP address // since top level domain label can only start with an alpha // see RFC 2396 Section 3.2.2
// Update the classifier and hence the raw type as normal. //
// RFC 2732 only allows '[' and ']' to appear in the opaque part.
/*10A0..10FF;*/
// Map to an EClass. //
// Look for an end-of-comment or end-of-tag: //
// We've either reached the end of the string, the address ends in // an IPv4 address, or it is invalid. scanHexSequence has already  // made sure that we have the right number of bits. 
// A section is not allowed without a preceding include with alternative. //
// To encode special characters in anyURI, by using %HH to represent // special ASCII characters: 0x00~0x1F, 0x7F, ' ', '<', '>', etc. // and non-ASCII characters (whose value >= 128).
// // XML Schema anyURI specific information //
// An expression with more that 931 "+" will break Sun and IBM javac compilers. //
// If a newline from the previous character data remains, leave it around to be processed as if it appeared in the included file. //
// Fill 58 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 11 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19
// The include failed, so if there is an alternative, we don't skip it. //
// Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
// At development time, the real factory may not be available. Just return null. //
// This pop is safe because a section couldn't have been started without an include that pushed. //
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#doConvertToNode(java.lang.Object)   */"
/*16A0..16FF;*/
// Cannot start with a '.', '-', or end with a '-'.
// Process this first. //
// Ignore this now //
// Don't overwrite exising file
// Register our directive. //
// Create an import manager for this compilation unit
// Ignore it if there are multiple comments. //
// Three arguments are expected: the .xml jControlModel URI, the source java URI, and the target java URI. //
// Interprets escaped characters according to Java literal rules, with one // exception: a single \ is taken literally, not as an error.
// Fill 81 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 3714 of value (byte) 33
// protected static final EStructuralFeature CONTAINING_FEATURE = new EReferenceImpl(); // protected static final EStructuralFeature CONTAINER = new EReferenceImpl();
// Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 8 of value (byte) -19
/*2FF0..2FFF;*/
// Fill 3 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getPackage(java.lang.String)   */"
// Fill 21 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 7 of value (byte) -87
// Entry entry = new Entry(eObject, CONTAINER); // return (InternalEObject)map.get(entry);
// Fill 23 of value (byte) -19
// This should never be called. //
// Fill 4 of value (byte) -87 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 7 of value (byte) 33
// Fill 16 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 6 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87
// check for valid escape sequence
// If there isn't an executable command we should maybe try a link operation, but only if we're allowed and not doing a link. //
// return a correctly sized result
/* EATM getDecoratedAdapterFactory().*/
// Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 8 of value (byte) -19
// Fill 2 of value (byte) -19 // Fill 6 of value (byte) -87
/*A000..A48F;*/
// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33
"/*   * @deprecated   */"
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getFeatures(org.eclipse.emf.ecore.EClass)   */"
/*FB50..FDFF;*/
// Fill 5 of value (byte) -87 // Fill 11 of value (byte) 33 // Fill 84 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 90 of value (byte) -19
// eContainer = newContainer; // eContainerFeatureID = newContainerFeatureID;
// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -19
// When setting the resource to null we assume that detach has already been called in the resource implementation //
// Fill 10 of value (byte) -19
// Stop listening to the old one. //
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getInfo(org.eclipse.emf.ecore.ENamedElement)   */"
// Ignore the further-most javadoc //
// Create annotations // http://www.eclipse.org/emf/2002/Ecore
/*FF00..FFEF;*/
// Get what's left of the segments after trimming the prefix.
/*1D400..1D7FF;*/
// added since this encoding only differs w.r.t. presentation 
// Fill 3 of value (byte) -87 // Fill 6 of value (byte) 33 // Fill 40 of value (byte) -19 // Fill 7379 of value (byte) 33 // Fill 20902 of value (byte) -19 // Fill 3162 of value (byte) 33 // Fill 11172 of value (byte) -19 // Fill 92 of value (byte) 33 // Fill 8190 of value (byte) 33
// <p>A valid opaque part must be non-null and non-empty. It may contain // any allowed URI characters, but its first character may not be // <code>/</code> 
// Start listening to the new one. //
// Add ASCII Letters and ASCII Hex Numbers
// Create the source and target JDOMs. //
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.edit.tree.TreePackage * @generated */"
//ADD THOSE MANUALLY //F0000..FFFFD; "Private Use", //100000..10FFFD; "Private Use" //FFF0..FFFD; "Specials", 
// Neither 'scheme:' or 'scheme:#fragment' are valid URIs.
// Create a pattern dictionary for each. //
// note: segments.length > 0 -> hierarchical
// Compute the offset in the sequence of bit patterns for this feature ID // and then get the bit pattern at that index. //
// check to see if this is the current doc - RFC 2396 5.2 #2 // note that this is slightly different from the RFC spec in that // we don't include the check for query string being null // - this handles cases where the urispec is just a query // string or a fragment (e.g. "?y" or "#s") - // see <http://www.ics.uci.edu/~fielding/url/test1.html> which // identified this as a bug in the RFC
//  We expect this failure when running stand-alone //
// use a stack to accumulate segments
// Compute the index within that bit pattern for this feature ID // and fetch that bit at that index. //
// Initialize classes and features; add operations and parameters //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
// For isSet, we only need to check the bit and return -1 when the bit is 0. //
// If the value index set, there's no index to return. //
// Empty statement.
//return value != null && value.length() != 0 && //  value.charAt(0) != SEGMENT_SEPARATOR && //  validate(value, URIC_HI, URIC_LO, true, true);
// This just notifies those things that are affected by the selection. //
// no validation needed since all components are from existing URIs
// If the result is not a proxy, cache it. //
// Server based authority.
// can check against path characters because the set // is the same except for '/' which we've already excluded.
// Initialize all the fields from the command parameter. //
// Check that port is well formed if it exists. // REVISIT: There's no restriction on port value ranges, but // perform the same check as in setPort to be consistent. Pass // in a string to this method instead of an integer.
"/*   * (non-Javadoc)   *    * @see org.eclipse.jface.window.Window#close()   */"
// IPv6 addresses are 128-bit, so there can be at most eight sections.
"/*   * All Eclipse-dependent operations are delegated to this class. This pattern avoids any runtime failure due to   * missing dependencies in the stand-alone case.   */"
//return value != null && validate(value, SEGMENT_CHAR_HI, SEGMENT_CHAR_LO, true, true);
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#insertSibling(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode, boolean)   */"
// Count just the bits up to this one. // Note that shifting 32 bits is a no op. //
// This might be invalid or an IPv4address. If it's potentially an IPv4address, // backup to just after the last valid character that matches hexseq.
// Determine the index for the feature and return the value at that index, if an index is assigned. //
// Fill 7 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 10 of value (byte) 33 // Fill 17 of value (byte) -87
// Determine if an index is assigned. //
// Determine the index. //
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage * @generated */"
// If it's newly allocated, add a new value, and indicate there was no previous value. //
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#getChildren()   */"
// Don't use 'cotinue' for this loop. // single-range | from-to-range | subtraction
// Initializing the Character Flag Array // Code generated by: XMLCharGenerator.
// Forward the interned value. //
// We'll assume that the copy command can execute and that adding a copy of the clipboard // is the same test as adding the clipboard contents itself. //
// If it's a parameterized type... //
// both prefix (if any) a localpart must be valid NCName
// The instance class name is the erasure. //
// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33 // Fill 53 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 28 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 55 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 2 of value (byte) 33
// If the name isn't a qualified name and isn't a primitive type, it's assumed to denote some arbitrary type parameter. //
// Fill 68 of value (byte) 33
// Be sure to pick up any trailing [] brackets. //
// If the bundle can't be found the normal way, try to find it as the base URL. // If that also doesn't work, rethrow the original exception. //
// Is the first character a special character, i.e., something other than '@'? //
// note: isRelative() -> hierarchical
// Returns null if the specified value is null or would be a valid path // segment array of a URI; otherwise, the value of the first invalid // segment. 
// Fill 3 of value (byte) -19 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 2 of value (byte) -19 // Fill 16 of value (byte) 33
// Is it the start of a source URI of an annotation? //
// Recompute the read only state. //
//return value == null || validate(value, SEGMENT_CHAR_HI, SEGMENT_CHAR_LO, true, true);
// Refresh any actions that may become enabled or disabled. //
// Go through class super types to catch constraints from other packages
// Fill 5 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 11 of value (byte) 33 // Fill 4 of value (byte) -19
// Empty.
// Fill 3 of value (byte) -87 // Fill 18 of value (byte) 33
// note: authority == null -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
// Fill 4 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19
// if the node is less than 1 line long, but its contents is replaced by multiple lines, // comment out each line in it
// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19
// Find the closing '%' //
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.BasicExtendedMetaData#isFeatureKindSpecific()   */"
// cause a syntax error
// Fill 8 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 145 of value (byte) 33 // Fill 46 of value (byte) -19
// Decode all encoded characters. //
// If that fails, determine the URL for the class itself. // The URL will be of one of the following forms, // so there are a few good places to consider looking for the plugin.properties. // // For a plugin.xml with runtime="common.jar": // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="runtime/common.jar": // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/runtime/common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="." where the plugin is jarred: // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="." where the plugin is not jarred. // file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/org/eclipse/emf/common/CommonPlugin.class // // Running in PDE with bin on classpath: // file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/bin/org/eclipse/emf/common/CommonPlugin.class //
// Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
// Check for a count, i.e., a '.' followed by a number. //
// Look for trailing count. //
// Look for a matching named element. //
// return eContainerFeatureID;
// Find the uppermost class loader in the hierarchy that can load the class. //
// Fill 6 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 6 of value (byte) -87
// JControlModel.class is used with classNames that were not found //
// Fill 33 of value (byte) -19 // Fill 7 of value (byte) 33 // Fill 20 of value (byte) -87
// Register with the upper most class loader that's able to load the class. //
// Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19
// This let's us test whether the string exists as a file. // If not, we try as a URI. //
// ...or if it's a wildcard or group feature.  Also, make it FeatureMap-typed. //
// First try to see if this class has an eInstance  //
// Try and get the resource selection to determine a current directory for the file dialog. //
// Remember the file. //
// Do the work within an operation. //
// no authority: use base's
// Create a resource set //
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getNamespace(org.eclipse.emf.ecore.EPackage)   */"
// Get the URI of the model file. //
// Returns true if the given value is an archive scheme, as defined by // the org.eclipse.emf.common.util.URI.archiveSchemes system property. // By default, "jar", "zip", and "archive" are considered archives.
// If the feature is a bidirectional reference with a multiplicity-many reverse, a composite reverse, // or a multiplicity-1 reverse that is already set (on value), then we'll switch things around and  // execute this command a little differently, because otherwise it's not undoable. //
// Add the initial model object to the contents. //
// If a sibling has been specified, add the best index possible to each CommandParameter. //
// Save the contents of the resource to the file system. //
// There are attributes to handle.
// Make sure the file ends in ".ecore". //
// genPackage can be a broken proxy
// Create a page, set the title, and the initial model file name. //
// We never directly set a multiplicity-many feature to a list directly.  Instead, we remove the old values // values, move the values that remain, and insert the new values.  If all old values are removed, we'll still // set it to an empty list, or unset it, as appropriate.  //
// Get the resource... //
// This gives us a directory... //
// Set this for the container. //
// if the relative path is empty or ends in an empty segment, a parent  // reference, or a self reference, add a trailing separator to a // non-empty path
// This returns a name like employeeNumber formatted like 'Employee Number' // This returns the same as getCapName unless it starts with "is" in which case the "is" is stripped  // This returns the name to be used in accessor method names; it's the same as getCapName, unless this is the key or value of a map entry, for which "Typed" is prepended // This returns the name of the get array-based accessor method for the list feature. // This returns the name of the get accessor method for the feature, i.e., either "is" or "get" is prefixed to getAccessorName
// For a many-to-many association, the command can only be undoable if the value or owner is last in its // respective list, since the undo will include an inverse add.  So, if the value is last, but the owner is // not, we create an undoable compound command that removes from the opposite end and then inserts the new // value. //
// eVirtualIndexBits[offset] = newIndexBits;
// If there is no list to add to, no collection or an empty collection from which to add, or the index is out of range... //
// eVirtualValues = newValues;
// This is package,  // so check the package information if this is in cat file. // If it is, then load the .cat file into the tree thereby traversing it; // otherwise, just traverse the tree. //
// no device: use base's
// Add a listener to set the most recent command's affected objects to be the selection of the viewer with focus. //
// Setting at an index. Make sure the index is valid, the type is valid, and the value isn't already in a // unique feature. Record the old value. //
// since base must be hierarchical, and since a non-hierarchical URI // must have both scheme and opaque part, the complete absolute URI is // needed to resolve to a non-hierarchical URI
// Make sure it's okay. //
// If the other end is a many, then we should remove the owner from the old value's opposite feature so that undo will put it back. //
// Look for a likely plugin name. //
// Create type parameters
//if found "no data" just return null
// If it's a platform plugin URI, include it in the map. //
// Keep track of all the entry features that are already in the feature map and that will be added, excluding // XML text, CDATA, and comments (if we're in a mixed type). //
// else keep authority, device, path, and query
// Determine the values to be added and add them at the right position. //
// note: it's okay for two URIs to share a segments array, since // neither will ever modify it
// Find the fragment root so that we can generate to the right location (by default). //
"/*   * Returns the base portion of the dynamic template path.   */"
"/*   * (non-Javadoc)   *    * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)   */"
// Remember it. //
// Either delegate the call or return nothing. //
// Now we could check that the adapter implements interface ITableItemFontProvider. //
// It's okay for there not be a precompiled template, so fail quietly.
// We don't need to encode here because the only platform resource URIs in the map are for projects // whose names are the same as corresponding plug-in IDs, and hence never need to be encoded // (see EcorePlugin.computePlatformResourceToPlatformPluginMap()). //
// There must be at least one match. //
"/*     * (non-Javadoc) Method declared on Dialog.     */"
// GenTypeParameter
// This implements the following order of preference: //   1. full refresh and update //   2. full refresh (add update if necessary) //   3. refresh element with update //   4. refresh element (if necessary) //   5. update element // 
// GenTypedElement
// The try/catch provides backwards compatibility with the old resource // key, "_UI_CreateChild_label", and should be removed at the next // release, when we can expect users to regenerate. //
// EATM Color startColor = display.getSystemColor(SWT.COLOR_LIST_SELECTION);
//GenRuntimeVersion
// These will be the children belonging to this feature. //
//GenModelPackage
// There is no executable command, so we'd better nix the whole deal. //
// this returns either "attribute", "attribute list", "reference", or "reference list"
// Do the encoding. //
// Get the target object from the item widget and the mouse location in it. //
// add variable fragment to new declaration
// Determine if we can create a valid command at the current location. //
// Load the resource through the editing domain. //
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getType(org.eclipse.emf.ecore.EPackage,   *      java.lang.String)   */"
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2xml.Ecore2XMLPackage * @generated */"
// Otherwise, the source should be available now as event.data, and we // can create the command. //
// Either the IEditingDomainItemProvider or ITreeItemContentProvider item provider interface can give us // the children. //
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2xml.Ecore2XMLPackage * @generated */"
//GenModelFactory
// current document reference: keep no path or query
// Ignore if there is not substantial change. //
// lower all except the last upper case character if there are // more than one upper case characters in the beginning. // e.g. XSDElementContent -> xsdElementContent // However if the whole string is upper case, the whole string // is turned into lower case. // e.g. CPU -> cpu
// Look for each unwrapped object as a value of a wrapper, replacing it with the first one found. //
// GenAnnotation
// It must be an unsettable feature to be empty and considered set. //
// matching authorities and no device or path removal
// always keep fragment, even if null, and use scheme from base; // no validation needed since all components are from existing URIs
// Check to see if a container is being put into a contained object. //
//(new AddCommand(domain, mapping, mapping.ePackageMapping().getMapping_Nested(), siblingsToReparent));
// // Static initialization //
/* Trick to import java.util.* without warnings */
// Do allow an existing MANIFEST.MF to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
// If there isn't an executable command we should maybe try a copy operation, but only if we're allowed and not doing a link. //
"/*     * The type string must be qualified by its package uri, e.g. DTD.xmi:DTDElement.     * The package uri is used to look up the package by calling RefRegister.getPackage(uri).     */"
// This will be the default return value. //
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.mapping.action.AddRootBottomAction#getBottomsToAdd()   */"
// Try again. //
// Otherwise, we could check that the adapter implements interface IItemColorProvider. //
// Now we could check that the adapter implements interface ITableItemColorProvider. //
// This turns a featureless set command into an operation to create a mapping. // This is invoked during drag and drop. //
//GenEnumImpl
// We've switch the operation! //
// Select the new file resource in the current view. //
// If the type isn't Object, we need to cast. If it's a primitive, we need to unbox. //
// use a stack to accumulate segments of base, except for the last // (i.e. skip trailing separator and anything following it), and of // relative path
// Now we want to find all the other objects with this same parent. // So we can collection siblings together and give the parent control over their removal. //
// We can't have a null name, in case we're using EMOF serialization. //
// Determine the object's parent. //
// If it's an interface, then it will be treated as an EClass //
// this returns either "EAttribute" or "EReference"
// Continue to compute the offset.
// Defer the handling of the opposite. //
// this guard is for extra security, but should not be necessary
// Do this first for better error message during setEParameterProperties. //
// set properties
// Index counters into indices1, indices2, and indices.  //
// Just remember it; it's encoded later during execution, which is more efficient. //
// Remove objects from the owner list by index, starting from the end. //
//GenModelFactoryImpl
// We don't want to insert an object before or after itself... //
// add IANA to Java encoding mappings.
// Create a code formatter for this compilation unit, if needed
// This is the feedback we use to indicate drop on; it will only be used if the command is executable. //
// Get the resource parent, if its a file. //
// We'd like the collection of replacements selected after this replace completes. //
// Repeatedly select the lower index and corresponding object, and advance past the selected pair. //
// Wrap any new children and add them to the map. Remove each current child from the set of old children. //
// Ignore this soft dependency when it's not satisfied.
// Simply remove the object from the owner list. //
// Make up a unique new name here. //
// Prepare for CreateChild item addition or removal. //
// Check all the siblings to see which if any should now be nested under this new mapping. // The are accumulated into a list so that they can be removed as a single command with a single notification. //
// J9 2.2 has problems assigning null to a Class variable. // 
// always returns original value
// Use the original to do the add, but only if it's of the same type as the copy. // This ensures that if there is conversion being done as part of the copy, // as would be the case for a cross domain copy in the mapping framework, // that we do actually use the converted instance. //
// add added super interfaces to the array
// Special case for a reference to Ecore to ensure that flag settings are respected and are set only for Ecore itself. //
// not supported in JDOM    
// only 1 fragment left - revert the changes
// We'll assume that all the CreateCopyCommand's and InitializeCopyCommand's can execute. //
// split is performed
// For RemoveCommand, we will find the owner by calling EditingDomain.getParent() on the object(s) being removed. //
// not supported in JDOM
// setResourceFactoryRegister(new ExtensibleContextResourceFactoryRegister()); //EATM setResourceFactoryRegister(new ContextResourceFactoryRegister());
// name already contains ".*" - unset on demand property
// Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33
// Three arguments are expected: the .xml getControlModel() URI, the source java URI, and the target java URI. //
// For lists, maps, and feature maps, the default is many-valued, which can be overridden by an upper-bound declaration. //
// If there is no Ecore representation or it's invalid, e.g., when - is used to omit a specification, then just use the Java representation. //
// Containers are transient by default unless explicitly annotated otherwise. //
// Consider each GenModel location URI for each required plugin. //
// Prepare for CreateSibling item addition or removal. //
// Get extra icon and bounds for first column of ExtendedTableTreeItem. //
// Force an update because Eclipse hides empty menus now. //
// If the notification is an IViewerNotification, it specifies how ViewerRefresh should behave.  Otherwise fall // back to NotifyChangedToViewerRefresh, which determines how to refresh the viewer directly from the model // notification. //
// Remove any menu items for old selection. //
// A SetCommand needs to go through SetCommand.create() to ensure it can execute and undo. //
// Query the new selection for appropriate new child/sibling descriptors //
// Generate actions for selection; populate and redraw the menus. //
// Draw ellipses, offset if down. //
// Empty extension to limit the effect of suppressing the deprecation warning.
"/*  protected Command createSetCommand(EditingDomain domain, Object owner, Object feature, Object value)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, SetCommand.class, new CommandParameter(owner, feature, value));  }  protected Command createCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)  {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, CopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createCreateCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, CreateCopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createInitializeCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, InitializeCopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createRemoveCommand(EditingDomain domain, Object owner, Object feature, Collection collection)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, RemoveCommand.class, new CommandParameter(owner, feature, collection));  }  protected Command createReplaceCommand(EditingDomain domain, Object owner, Object feature, Object value, Collection collection)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, value, collection));  }  protected Command createAddCommand(EditingDomain domain, Object owner, Object feature, Collection collection, int index)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, collection, index));  }  protected Command createMoveCommand(EditingDomain domain, Object owner, Object feature, Object value, int index)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, value, index));  }  protected Command createDragAndDropCommand    (EditingDomain domain, Object owner, float location, int operations, int operation, Collection collection)  {    DragAndDropCommand.Detail detail = new DragAndDropCommand.Detail(location, operations, operation);    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, DragAndDropCommand.class, new CommandParameter(owner, detail, collection));  }*/"
// Iterate over all the plugin IDs to determine the dependency closure. // The list grows as the plugins are visited. //
// Look into SubContributionItems //
// else keep device, path, and query
// If it's really a contained child, return the feature for it. //
// We'll need to keep track of the information we use to create the // command, so that we can recreate it in drop.
// Changes to the parameters should also update the label. //
// Returns true if the non-relative path includes segments that would be // collapsed when resolving; false otherwise.  If preserveRootParents is // true, collapsible segments include any empty segments, except for the // last segment, as well as and parent and self references.  If // preserveRootsParents is false, parent references are not collapsible if // they are the first segment or preceded only by other parent // references.
//The shared instance.
// Ignore the unset notification for an isMany feature; the value is boolean in this case. //
// If necessary, get a command that replaces unwrapped values by their wrappers in the result and affected objects. //
// InputStream contents = new ByteArrayInputStream(bytes);
// Now we could check that the adapter implements interface ITableItemLabelProvider. //
// If we have children to remove for this feature, create a command for it. //
// Create helpers to cache and supply information for unique naming
//GenAnnotationImpl
// create OK and Cancel buttons by default
// Set the error message text // See https://bugs.eclipse.org/bugs/show_bug.cgi?id=66292
// Walk the fields. //
// index of first segment that is different between endPath and startPath
// If the local transfer supports this data type, switch to that data type //
// Create the options model. //
// drop last segment from base, as in resolving
// treat an empty base path as the root absolute path
// Create enums
// This is for backwards compatibility, since the constructor may have been overridden before it was expected // to set actionDelegate. //
//(eType instanceof EDataType)
//GenModelPackageImpl
// Determine the required plugins. //
// In column 0, the drop-down is indented past the collapse/expand icon. //
// Does nothing
// user rejects a relative path: keep absolute or no path
// Draw the icons. //
// I assume that the editorInput is a file object. //
// matching devices and no path removal
// Clear the import manager
// order genPackages by putting firstGenPackage (if non-null) first
// Remember the viewer and listen to SWT.DragDetect to alert the start of the drag operation. //
//GenFeatureImpl
"/*        text = new Text(composite, SWT.SINGLE | SWT.BORDER);        text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL                | GridData.HORIZONTAL_ALIGN_FILL));*/"
// If the value is null, the key is a referenced object
// keep query and select relative or absolute path based on length
"/*   * Set from {@link #isChildren children} if unset, and return value.   */"
// Handle the creation of the model from the modelFile. //
"/*   * For debugging purposes.  May be removed in the future.   */"
// Go through class super types to catch any from other packages
// For the control case, we need a dialog to ask for the URI and obtain the resource, then we create the command. //
// support for 1047, as proposed to be added to the  // IANA registry in  // http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0049.html
// If we aren't getting the domain from the workbench part... // This happens when this action is used for a global popup action. // We try to get the editing domain from one of the objects in the selection. // //DMS editingDomain == null) ?
// scan feature lists for those with multiple elements and return them
// Nothing more to do and we don't want to do the default stuff below. //
//GenTypedElementImpl
//data type
// else keep shorter absolute path
// If we aren't doing an operation... //
// EObject is handled by default case
// Clean up the command if there is one.  If we need it again in drop, // we'll recreate it from dragAndDropCommandInformation. //
// Changes to parameter types should also update the operation's label. //
// Convert to an EReference. //
// escaped unicode form
// If we've found thing with type parameters, search them for a match.
// Filter out types that aren't permitted. //
// We need the wrapper, not the item provider, to handle a DragAndDropCommand; the move, add, remove, etc. commands // that implement it will have their values unwrapped as usual. //
// Restore the persistent command stack, if need be. //
// Create a generic super type with an EClass as the classifier for each super interface in the @model representation //
// An operation is declared via the kind property or, for backwards compatibility, by specifying parameters // (though attribute or reference kind takes precedence). //
// No index specified when removing all elements. //
// Check if the name is qualified //
// Avoid allowing choices that will lead to duplicates. //
// return getPresentationPackageName() + "." + getEditorPluginClassName();
// // EMF.Edit generation //
// Find the modeled package for the import and look up the name there. //
//  Avoid allowing a choice that will lead to duplicates. //
// Just to be helpful, we'll recognize a type of org.eclipse.emf.ecore.util.FeatureMap and convert it to EFeatureMapEntry. // This way a dataType need not be specified. But, we won't do this if recordDemandCreateEDataType is false, so we don't // change the instanceClass of a new EDataType that's implicitly being defined for FeatureMap. //
// Ensure that there are enough type arguments to match the number of type parameters. //
// Wrappers from the old command parameter must be considered in order for cut and paste to work. //
// You cannot add any children for a type parameter. //
// Look for the sibling value or an equivalent in the new child's feature. If it is found, the child should // immediately follow it. //
// <clinit>()
// Otherwise you can't make it a child. //
// Let them choose type parameters as well. //
//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
//TBD 
// If it is a list type value... // 
//GenPackageImpl
//   protected JETEmitter extendedItemProviderEmitter = null;
// Iterate over all the child references to factor each child to the right reference. //
// Don't care about plugin class; we can generate a model without one.
//subcommands.appendAndExecute(new RemoveCommand(domain, mapping, mapping.ePackageMapping().getMapping_Nested(), nestedMappings)); //subcommands.appendAndExecute(new AddCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), nestedMappings));
// When the value is changed, the property sheet page doesn't update the property sheet viewer input // before refreshing, and this gets called on the obsolete wrapper. So, we need to read directly from the // model object. // //return value;
//GenModelImpl
// Otherwise, we could check that the adapter implements interface IItemLabelProvider. //
// 6 is the size of (value
// Do not allow an existing MANIFEST.MF to be overwritten, as the tests project is originally generated from scratch. //
// user demands a relative path or the absolute path is longer
// It's definitely a package if expected constants eNAME, eNS_PREFIX, or eNS_URI appear. //
// bottom-label-case
// This ensures that the CreateCopyCommand will be executed by StrictCompoundCommand.prepare(). //
// Do not allow an existing build.properties to be overwritten, as the tests project is originally generated from scratch. //
// Fill 16 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 4 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 10 of value (byte) -19 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
// Handle eOpposite specially. //
// If this owned object is equal to one from the collection... //
// If there is more than one exact match, we must get an index number; //
// Fill 5 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
// Filter out classes that aren't permitted. //
//GenModelValidator
// Read all the values into an array. //
// This can't execute if there is no owner list  // or the owner list doesn't contain the value being replaced or  // there are not replacements. //
"/* (non-Javadoc)   * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcoreMapping#getOutputEPackage()   */"
//GenModelSwitch
// Now we'll do recursive MatchMapping. // (We need to iterate over a copy, since we modify the underlying list in the loop.)
// This guard is needed to ensure that clear doesn't make the resource become loaded. //
// This is done to ensure that this new copy is treated as an output by the domain. // The CreateMappingCommand will rely on this setting. //
// If we haven't yet encrypted or decrypted, generate a key. This key will  // only be used for encryption. Decryption keys are always derived from // the header of the input stream itself.
// colorMap.put(CLR_GRAD_START, clr1);
// write the header to the output stream. this has the format  // (delimeters are not written): // PBE IV|ENCRYPTION IV|ENCRYPTED KEY LENGTH|ENCRYPTED KEY
// We'd like the collection of things added to be selected after this command completes. //
// Iterate over the children to find the owner. //
// Handle the same document proxies, which may have problems resulting from the // other end of a bidirectional reference being handled as an IDREF rather than as a proxy. // When we are done with these, we know that funny proxies are now resolved as if they were handled as IDREFs. //
// Merges this URI's relative path with the base non-relative path.  If // base has no path, treat it as the root absolute path, unless this has // no path either.
// Make up a unique new name here. // //$NON-NLS-1$
//removeCommand = RemoveCommand.create(domain, mappingRoot, mappingRoot.ePackageMapping().getMapping_Nested(), mappingRoot.getNested());
// We don't want to move insert an object before or after itself... //
// The CipherOutputStream shoudln't close the underlying stream //
// return getProviderPackageName() + "." + getEditPluginClassName();
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#remove(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */"
// an absolute URI needs no resolving
// note: these assertions imply that neither this nor the base URI has a // relative path; thus, both have either an absolute path or no path
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#insertSibling(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode, boolean)   */"
// Simply add the collection to the list. //
// note: device != null -> hierarchical
// <p>A valid fragment may be null or contain any allowed URI characters.
"/*   * Returns the dynamic template path, an ordered list of URIs corresponding to locations under which to find   * templates.   */"
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.AbstractJNode#computeQualifiedName()   */"
// Ignore the exception and return false.
// note: query != null -> hierarchical
//return value == null || validate(value, URIC_HI, URIC_LO, true, true);
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.MappingPackage * @generated */"
//datatype
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.change.ChangePackage * @generated */"
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.EcorePackage * @generated */"
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getName(org.eclipse.emf.ecore.EClassifier)   */"
// We do not want to diagnose any error that have already been diagnosed by a super type. //
// Creates the model from the editor input //
"/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcorePackage * @generated */"
// Tests the non-null string value to see if it contains only ASCII // characters in the set represented by the specified 128-bit bitmask, // as well as, optionally, non-ASCII characters 0xA0 and above, and, // also optionally, escape sequences of % followed by two hex digits. // This method is used for the new, strict URI validation that is not // not currently in place.
// If the workbench part changes... //
/* backward compatibility with old generated overrides */
// For a many-to-1, we use SetCommand.create() to create the command to remove the opposite reference; // a RemoveCommand on its opposite will actually result. //
// add all converted fields after the last final field  // that is used in initializers of the converted fields
"/*   * Char buffer for HTML data   */"
// if endPath is shorter than startPath, the last segment of endPath may // not be compared: because startPath has been collapsed and had its // last segment removed, all preceding segments can be considered non- // empty and followed by a separator, while the last segment of endPath // will either be non-empty and not followed by a separator, or just empty
// Ignore because we'll rethrow the original exception eventually.
// path form demands an absolute path: keep it and query
// Continue processing dynamically as normal.
// Iterate over all the operations but skip all the operations in the first super. //
// For feature maps, test that the entry feature is a valid type, that the entry value is an instance of it, // that there is not already something in a document root, and that there is not already something in a // single-valued entry feature. //
// pure obfuscated genius!
// Match close.
// Take care of the quoting here.
// skip empty segments and self references; push everything else
// For a 1-to-many association, doing the set as a remove and add from the other end will make it undoable. // In particular, if there is an existing non-null value, we first need to remove it from the other end, so // that it will be reinserted at the correct index on undo.  //
// Close NCSA like attributes "->"
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getFeatureKind(org.eclipse.emf.ecore.EStructuralFeature)   */"
// super is called on converted node
// Convert the selection to a collection of the selected objects. //
// assume length will grow by 10% (average line length is 20 characters)
// Ignore the version
// Reached EOF:
// Close variable like attributes "%>"
// XMLesque Close tags
// Command line execution methods
// Compute a map of resource location URIs to logical namespace URIs // so that cross references will be resolved via package registry when deserialized.  //
// For a many-to-1 or 1-to-1 association, if the opposite reference on the new value is already set to // something, we need a compound command that first explicitly removes that reference, so that it will be // restored in the undo. //
/////////////////////////////////  PUSH  /////////////////////////////////////
// check whether the character is in the range 0x30 ~ 0x39
/////////////////////////////////  SWEEP  /////////////////////////////////////
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.AbstractJNode#getChildren()   */"
/////////////////////////////////  PULL  /////////////////////////////////////
// The referencedEPackages list is used to track the packages for // which is necessary to create the stub GenModel.  So if the ePackage // is referenced by an existing GenPackage, it doesn't need to be added to // referencedEPackages.
"/*    // PULL Name    //    targetPackage.setName(sourcePackage.getName());*/"
// If we're not setting a new resource, attach it to the old container's resource.
// apply target parent pattern first
// Include each required plugin of the starting project and the exported ones of all the required projects. //
// do not crash when control model is not set
/////////////////////////////////  CLONE AND MAP  /////////////////////////////////////
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getName(org.eclipse.emf.ecore.EStructuralFeature)   */"
/////////////////////////////////  SORT  /////////////////////////////////////
// We will create an EAttribute, EReference, or an EOperation. //
// Read value until delimiter is found:
// Check whether there are parameters; the special attribute and reference rules only apply for the case of no arguments. //
// System.err.println("Warning: Cannot clone '" + sourceNode.getContents() + "'");
// redo the markup since nodes changed now
// use new node from now on
// Look through the imports of the containing compilation unit. //
//purpose: using charset from 'targetFile' to encode in-memory  //         'newContents' object into bytes //modifer: Wu Zhi Qiang //date:    Aug 25, 2004 //action:  first get the charset from 'targetFile', then use it  //         to encode the 'newContents' object into bytes
// Ignore the exception.
/////////////////////////////////  HEADLESS INVOCATION  /////////////////////////////////////
// For any entry that doesn't correspond to a plugin in the running JVM, compute a URL for the classes. //
// We don't want keyType and valueType on a map type specification in a package interface. // But, we also use qualified model information when defining a feature with suppressed get accessor // on the interface, and we do want to include these properties in that case. //
// Ignore CHAR tokens. // ** // **
// Back up over the whitespace.
// target method is NOT addSuperInterface
// by default nodes are marked up
// if the parent is not in target, there is no point on checking the child
// ;DEVANAGARI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;BENGALI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;GURMUKHI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;GUJARATI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;ORIYA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;TAMIL SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;TELUGU SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;KANNADA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;MALAYALAM SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;THAI CHARACTER PHINTHU;Mn;9;ON;;;;;N;THAI VOWEL SIGN PHINTHU;;;; //;TIBETAN MARK HALANTA;Mn;9;ON;;;;;N;TIBETAN VIRAMA;;;;
// If the flag will straddle two fields, bump it to the next one. //
// Fill 2 of value (byte) -87
// Update the containing map, if necessary. //
// We expect there to be at least one archive path. //
// Characters to use in escaping.
// If there is a provider base class from outside this class that has already been generated, get the create // child references from it. We'll check for any type-compatible classes introduced in this package. //
// Private constructor for use of static factory methods.
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#addChild(org.eclipse.emf.codegen.merge.java.facade.JNode)   */"
// for all nodes but some use default extended range
//iri = iri || containsNonASCII(authority);
// if there are multiple variables in the same field declaration, create declaration with only 1 variable
// Private constructor for use of platform factory methods.
//iri = iri || containsNonASCII(query);
// Debugging method: converts the given long to a string of binary digits.
// replace or append
// Returns the upper half bitmask for the given ACSII character.
// skip whitespace, up to the end of the line
// && uri.charAt(i) == FRAGMENT_SEPARATOR (implied)
// enable tracking for nodes that have string content
// apply header
// enable tracking for commented out nodes
// Fill 4 of value (byte) -87 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 9 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
// Returns the lower half bitmask for the given ASCII character.
// return the line number of the start of the node
//MappingPackageImpl
// revert all current edits for this node
// this line has been commented out, return next line number
// Find the appropriate parent mapping, which at the very least, should be the mapping root itself. //
// if there is anything after the node on the same line, insert line break
// Separators for parsing a URI string.
// comment out all lines of the node itself, from firstLine to last line
// This is tricky and is done for each object here rather than once for the owner of the addCommnd. // We want to make sure the object is really part of the conceptual tree induced by the domain. //
// next position is checked as well
// We can't blindly cache the genModel, since we need to support moving the GenPackage to another container, // but the cast is expensive, so we'd like to do it no more than absolutely necessary. //
// handle the case when there is a replace edit that covers these lines
// If it's the selection viewer, then we want it to select the same selection as this selection. //
// if there is any content after the node on the same line, insert line break (to prevent commenting out extra content)
// skip all lines that replace edit covers
// should not happen, re-throw exception
// make sure that dummy edit is not in the tree
// char at currentPos is copied as well
// It belongs to this package if the delegate feature is from this package, // or the class is from this package and either there is no delegate feature or the delegate feature is from some used package. //
// lastPos, currentPos points at the next chars that will be copied later
// if there is anything before the node on the same line, create line break and comment out the first line of the node
// copy last piece if any
// Set URIs of EPackage-containing resources: output resource to desired target URI, and others to package // namespace URIs (so cross-references will be resolved via package registry when deserialized).  //
// if comma is on a line by itself, comment it out but do not insert the line break
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#insertSibling(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, boolean)   */"
// if previous node is not commented out, but all the following nodes are, comment out a comma (constant separator)
// We need to filer out duplicates in the unlikely event that we have two // features with the same class-qualified name. We'll only generate one property // string in that case and let the user add the second one manually, if necessary. //
// if previous node is not commented out, but all following are
// Since we will do the processing recursively, we need to ensure we don't stack overflow if there is a circular super type. //
// Fill 18 of value (byte) -19 // Fill 13 of value (byte) 33 // Fill 12 of value (byte) -19
// delete variable fragment from old declaration
// cat(unit) file referenced by mdl file
// Ignore features from the first super type. //
//volatile
//listRewrite.remove((ASTNode)modifier, null);
// Uses a cache to speed up creation of a URI from a string.  The cache // is consulted to see if the URI, less any fragment, has already been // created.  If needed, the fragment is re-appended to the cached URI, // which is considerably more efficient than creating the whole URI from // scratch.  If the URI wasn't found in the cache, it is created using // parseIntoURI() and then cached.  This method should always be used // by string-parsing factory methods, instead of parseIntoURI() directly.
// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19
// super.collectNewChildDescriptors(newChildDescriptors, object);
// this could be method body, for example
// A primitive type can only be used as the generic type of a typed element. //
// range to look for comments
// Discard the old editing domain. //
// Skip an archive accessor to be handled by delegation to the scheme in nested URL. //
// userinfo can contain alphanumerics, mark characters, escaped // and ';',':','&','=','+','$',','
// return eProperties;
// set javadoc
// add Java to IANA encoding mappings //fJava2IANAMap.put("8859_1",    "US-ASCII"); // ?
// Returns the int value of the given hex digit.
// the for loop's condition finds the separator 
// Parse to count the archive paths that must will be delegated to the nested URL based on the number of schemes at the start. //
// Fill 25 of value (byte) 33 // Fill 9 of value (byte) -19 // Fill 6 of value (byte) -87
// Assume that we aren't running.
// assume that the node is being moved (to allow insertion after)
//MappingPackage ePackage = ((MappingRoot)object).ePackageMapping();
// And even if it is contained, it must not be a forward reference. // eTypeParameterIndex == index is allowed when the type parameter is  // the type argument of the bound, though //
// remove all existing modifiers
// append extra dimensions if any
// create new modifiers and add to rewrite
// We can also optimize single valued reverse.  //
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.EcorePackage * @generated */"
// Create a proxy in the correct way and pop it. //
// null -> relative URI reference
// If eCore, set the ENamedElement name //
//If it was not a warning or an diagnostic then return the diagnostic image
// Maintain a list of classifiers for looking up conflicts. //
//Only one example per wizard
//Ecore2XMLFactory
// XMLMap
// append [] if it is variable arity parameter (@see JLS3 8.4.1, http://java.sun.com/docs/books/jls/third_edition/html/classes.html#300870)
//XMLInfoImpl
// Fill 6 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 62 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 6 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 11 of value (byte) 33
// AnyType
// No image is a good default. //
// Applicable only to a hierarchical URI.
// Apply a redirection pattern, if specified. //
// create new node and replace it all by original contents
// make all enum constants to be on separate lines
// Avoid unnecessary out.write("") statements...
// set comment and initializer as strings
"/*   * (non-Javadoc)   *    * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,   *      org.eclipse.jface.viewers.ISelection)   */"
// set annotation contents
// reg_name = 1*( unreserved | escaped | "$" | "," |  //            ";" | ":" | "@" | "&" | "=" | "+" )
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLLoad#load(org.eclipse.emf.ecore.xmi.XMLResource, org.w3c.dom.Node, java.util.Map)   */"
// update the wrapped object map
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#getContext(org.eclipse.emf.codegen.merge.java.facade.JNode)   */"
// skip nodes in hierarchy that can not be converted to JNode (i.e. VariableDeclarationFragment)
// If there is no root object, we're dealing with an EAttribute feature instead of an EReference feature. // So create an instance of simple any type and prepare it to handle the text content. //
// get rewriter
// path - everything up to query string or fragment
// insert new declaration before this one
// if there is an element with end position <= rangeEndPos
"/*   * Computes the default path for the given GenModel. This was previously the implementation of getTemplatePath().   */"
// extend range backward
// We can't want to do encoding of platform resource URIs by default yet.    //
// create map of field names to fields
// Create the output stream to the temporary file and the input stream for the delegate URL. //
//boolean iri = false;
// extend to include the comment at the same line as the position 
// else - there is a comment that ends exactly at rangeEndPos    
// handle field declarations separately
// the previous element must have end position <= rangeEndPos
//last 2 bits should be zero
// else - there is a comment that starts exactly at rangeStartPos
// && commandParameter instanceof MappingCommandParameter)
// extend range forward
// increments the position to add the white spaces
// add trailing whitespace
// set source
//Create a label if there are no children to force a smaller layout
// Returning null here causes RemoveCommand.create(domain, mappedObjectItemProvider) to be delegated //  to MappedObjectItemProvider.createCommand() and there we return a command to remove mappedObject instead. // // return null;
// mark the node as moved if node has been removed      
// enable commenting out
// Initialization is deferred until adapters are attached to all the objects of interest and we're // about to ask them to generate. //
// Counter for the number of 16-bit sections read in the address.
// disable commenting out
// Determine the inverse map from plugin IDs to their registered GenModel locations. //
// A cache of URIs, keyed by the strings from which they were created. // The fragment of any URI is removed before caching it here, to minimize // the size of the cache in the usual case where most URIs only differ by // the fragment.
// mark the node to be removed
// We'll rethrow the original exception, not this one.
// if are dealing with original, not cloned node
// CellEditor.setValue() calls isCorrect() to validate the value that is about to be set. We are doing conversion // between the value and a corresponding string, and we would usually like to validate the string. Because // setValue() is final, we cannot do that conversion there, so we need to record what we're trying to validate and // work around the problem in isCorrect(). // 
// stringValue not null, nodeValue is null
"/*   * If this is an {@link #isIRI IRI}, converts it to a strict ASCII URI,   * using the procedure described in Section 3.1 of the   * <a href=""http://www.w3.org/International/iri-edit/draft-duerst-iri-09.txt"">IRI   * Draft RFC</a>.  Otherwise, this URI, itself, is returned.   *   * This unused code is included for possible future use...   */"
// insert new values
// convert only fields of the same type as parent
// move all children to the enum, converting some fields to constants
// set the type to create
// include line comments following end of the nodes into the range
// move annotations
// set arguments and body
// update the wrapped object
// unable to set arguments or body
// check if there is just whitespace between position and start of the comment
// create field declaration with 1 variable declaration fragment
//DEBUG //System.err.println("isRegisterNonXS: "+name);
// Record the part. //
// replace type by enum
// insert nodeToInsert after targetNode
// convert enum constants and add to list of converted constants
// move the node
// set initializer
// set arguments
// set the whole initializer
// set the body
// update last field that is used
// set the arguments to the constructor
// perform split if there is more than 1 fragment
// return the whole declaration contents (not just variableDeclarationFragment)
// set rewritten node to be the original
// Not overlapped // src1: o-----o // src2:         o-----o // res:  empty // Reuse src2
// check number of fragments
"/* * This class provides encode/decode for RFC 2045 Base64 as * defined by RFC 2045, N. Freed and N. Borenstein. * RFC 2045: Multipurpose Internet Mail Extensions (MIME) * Part One: Format of Internet Message Bodies. Reference * 1996 Available at: http://www.ietf.org/rfc/rfc2045.txt * This class is used by XML Schema binary format validation * * This implementation does not encode/decode streaming * data. You need the data that you will encode/decode * already on a byte array. * * @author Jeffrey Rodriguez * @author Sandy Gao */"
// create a copy of declaration
// set annotations contents
// Create a temporary file where the existing contents of the archive can be written  // before the new contents are added. //
// System.err.println("Logged throwable: --------------------"); // throwable.printStackTrace();
// Ensure correct indentation for a top level attribute. // // elementNames.add("mark");
// New Template Container Label
// container specification group
"/*   * @since 2.4   */"
// xmlns="" declaration // Example #1: <a><q-name>q</q-name><b xmlns="abc"/></a> // Example #2: <a xmlns="abc"><b xmlns=""/><c xmlns="abc2"/></a> // Example #3: <a xmlns:a="abc"><b xmlns:a="abc2"/></a>
"/*     *  Convert element values:     *  & to &amp;     *  < to &lt;     *  "" to &quot;     *  \n to line separator     *  \r should be escaped to &xD;     */"
// will point at the character after 0 to 3 octal digits
"/*   * Create an XML processor that is aware of XML Schema specified.   * @param schemaURIs - a URI {@link org.eclipse.common.util.URI} which point to an XML Schema   */"
// Return the original URI.
// Just print an error message.
// Title.  
// Ignore the exception and return the original URI.
// Assume the class is not available.
// Just return the default.
// do not insert line break if there is only whitespace after comma
// This is just a marker interface.
// This case happens when the IDE is brought up with the editor already open //
// For an archive URI, check for the path in the archive. //
// Continue processing if the file doesn't exist so that we try create a new empty one.
// set lexical handler
// If we didn't find the path in the usual place nor in the archive... //
// The loop resolves the cross references by visiting them.
// If they don't have the same class, they can't be equal. //
// This may be called directly on an EObject for the case of a containment. //
// Assume that it's not available.
// Preload.
// No new methods.
// Listen to title changes. // getViewPart().addPropertyListener(this);
//ListChangeImpl
// Wrap the current input as a zip stream, and record it for loop-based recursion. //
// return getPrefixedName("EditPlugin");
//ChangePackage
// If the generic type is a different wildcard, it doesn't match. //
// turn the password into an AES key
//   public String getExtendedItemProviderClassName() //   { //     return getPrefixedName("ItemProviderAdapter"); //   }
// process documentation info and create eEnumLiteral for each line //
// EAnnotation
// Create a new or replaced entry and continue processing the remaining archives. //
//getList(entry).clear();
// Subclasses MUST override this function
// return eVirtualIndexBits[offset];
// return minimumCapacity;
// return eVirtualValues;
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource#load(org.w3c.dom.Node, java.util.Map)   */"
// Continue and return null.
//ChangePackageImpl
// Ignore exceptions.
//ChangeFactoryImpl
// Ensure that cached ePackage is forgotten.
//EAnnotationImpl
// ListChange
// If the attribute is set, record it's old value. //
// Force this to be initialized as well.
// Ignore the exception since we will throw one when all else fails.
//EcoreValidator
// If we didn't detach it from an old resource already, detach it from the old container's resource. //
// Fill 230 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 10 of value (byte) 33 // Fill 39 of value (byte) -19 // Fill 9 of value (byte) 33
//EOperation
// Create a page for the parent tree view. //
// Check to make sure that every object in the collection has an ancestor that is contained in this mapping. //
// generate the key
// Record them as generic streams to record state during the loop that emulates recursion. //
// If we can open  an input stream, then the path is there, and we have a good URL. //
// Continue and try to close.
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcorePackage * @generated */"
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#addChild(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */"
// Decrypt the key bytes
// now create the encryption cipher 
"/* (non-Javadoc)   * @see org.eclipse.emf.mapping.MappingRoot#canCreateMapping(java.util.Collection, java.util.Collection, org.eclipse.emf.mapping.Mapping)   */"
"// Read the header of the encrypted file.				"
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.change.ChangePackage * @generated */"
// add leading hanging comments to the previous node, // hence, only comments immediately preceding the node will be in the range for removal
// just make a copy of the base if spec is empty
// generate the IV for encryption
"/*    * @see org.eclipse.emf.ecore.InternalEObject#eSetProxyURI(org.eclipse.emf.common.util.URI)   */"
// this is the key we will use to encrypt the data 
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.edit.tree.TreePackage * @generated */"
// Create a title bar.
"/* (non-Javadoc)   * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction, org.eclipse.jface.viewers.ISelection)   */"
// now create the decrypt cipher
// Only do this once.
// If we haven't yet generated a key, just use this one
// ECLIPSE-DEPEND-BEGIN
"/* (non-Javadoc)   * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#init(org.eclipse.ui.IWorkbenchWindow)   */"
// Ignore the bound if the value is too big.
// ECLIPSE-DEPEND-END
"/*    * @see org.eclipse.emf.ecore.EObject#eIsProxy()   */"
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#createCompilationUnit(java.lang.String, java.lang.String)   */"
// Invoke generator adapters for each object. //
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#addChild(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode)   */"
"/*     * (non-Javadoc)     *      * @see org.eclipse.jface.dialogs.Dialog#createButtonsForButtonBar(org.eclipse.swt.widgets.Composite)     */"
// Ignore it if it isn't a class. Not being a class is diagnosed for the generic type itself. //
// Ensure that the class loader for this class will be used downstream. //
// Two slashes means we may have authority, but definitely means we're either // matching net_path or abs_path. These two productions are ambiguous in that // every net_path (except those containing an IPv6Reference) is an abs_path.  // RFC 2396 resolves this ambiguity by applying a greedy left most matching rule.  // Try matching net_path first, and if that fails we don't have authority so  // then attempt to match abs_path. // // net_path = "//" authority [ abs_path ] // abs_path = "/"  path_segments
// Don't bother complaining about things with no name, // since there are constraints for that problem. //
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#insertSibling(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, boolean)   */"
//EcoreSwitch
// A document root can have multiple ID attributes because there can be multiple global element or attribute declarations of type ID  // and these will be the ID in the complex types that reference them, // i.e., they aren't really the ID of the document root. //
// For performance, skip matching all the features of the first super type. //
// Action bar.
// note that the copied tree should not be modified by wrapped ASTJField // // the copied tree will have source ranges for all nodes in the source file, // hence, the get methods in the new ASTJField will not return the right contents
// Checks whether the string contains any more segments after the one that // starts at position i.
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#add(org.eclipse.emf.ecore.ENamedElement, org.eclipse.emf.ecore.xmi.XMLResource.XMLInfo)   */"
"/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#remove(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */"
// if we get to this point, we need to resolve relative path // RFC 2396 5.2 #6
// Create the key from the key bytes
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage * @generated */"
// List subList(EStructuralFeature feature, int from, int to); // EList list(EStructuralFeature feature);
// This must have no fewer segments than the prefix.  Since the prefix // is not the root absolute path, its last segment is empty; all others // must match.
// create new field and replace it all by original contents
// Fill 31 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 53 of value (byte) -19
// If this is a hierarchical URI reference and prefix is a prefix of it, // returns the portion of the path remaining after that prefix has been // trimmed; null otherwise.
// Encodes a complete URI, optionally leaving % characters unescaped when // beginning a valid three-character escape sequence.  We can either treat // the first or # as a fragment separator, or encode them all.
// Returns the character encoded by % followed by the two given hex digits, // which is always 0xFF or less, so can safely be casted to a byte.  If // either character is not a hex digit, a bogus result will be returned.
// check for scheme - RFC 2396 5.2 #3 // if we found a scheme, it means absolute URI, so we're done
// If the scheme specific part is opaque, it can contain '[' // and ']'. uric_no_slash wasn't modified by RFC 2732, which // I've interpreted as an error in the spec, since the  // production should be equivalent to (uric - '/'), and uric // contains '[' and ']'. - mrglavas
// Returns the shortest relative path between the the non-relative path of // the given base and this absolute path.  If the base has no path, it is // treated as the root absolute path.
// Validates all of the URI components.  Factory methods should call this // before using the constructor, though they must ensure that the // inter-component requirements described in their own Javadocs are all // satisfied, themselves.  If a new URI is being constructed out of // an existing URI, this need not be called.  Instead, just the new // components may be validated individually.
// There is no match if the types are different // and they don't each specify the same non-null instance class name. //
// Interpret it as part of the name. //
// The string must contain inappropriate whitespace, so find the index for the first difference. //
// When used as a generic super type, there must be a classifier that refers to a class. //
// Don't complain about the literals if they are the same as the names and the names collide. //
"/* * EncodingMap is a convenience class which handles conversions between  * IANA encoding names and Java encoding names, and vice versa. The * encoding names used in XML instance documents <strong>must</strong> * be the IANA encoding names specified or one of the aliases for those names * which IANA defines. * <p> * <TABLE BORDER=""0"" WIDTH=""100%""> *  <TR> *      <TD WIDTH=""33%""> *          <P ALIGN=""CENTER""><B>Common Name</B> *      </TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER""><B>Use this name in XML files</B> *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER""><B>Name Type</B> *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER""><B>Xerces converts to this Java Encoder Name</B> *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">8 bit Unicode</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">UTF-8 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">UTF8 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 1</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-1 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-1 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 2</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-2 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-2 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 3</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-3 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-3 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 4</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-4 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-4 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin Cyrillic</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-5 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-5 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin Arabic</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-6 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-6 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin Greek</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-7 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-7 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin Hebrew</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-8 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-8 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">ISO Latin 5</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ISO-8859-9 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">ISO-8859-9 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: US</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-us *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Canada</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-ca *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Netherlands</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-nl *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Denmark</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-dk *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp277 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Norway</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-no *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp277 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Finland</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-fi *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp278 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Sweden</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-se *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp278 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Italy</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-it *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp280 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Spain, Latin America</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-es *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp284 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Great Britain</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-gb *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp285 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: France</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-fr *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp297 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Arabic</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-ar1 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp420 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Hebrew</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-he *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp424 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Switzerland</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-ch *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp500 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Roece</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-roece *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp870 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Yugoslavia</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-yu *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp870 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Iceland</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-is *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp871 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">EBCDIC: Urdu</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">ebcdic-cp-ar2 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">IANA *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">cp918 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Chinese for PRC, mixed 1/2 byte</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">gb2312 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">GB2312 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Extended Unix Code, packed for Japanese</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">euc-jp *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">eucjis *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Japanese: iso-2022-jp</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">iso-2020-jp *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">JIS *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Japanese: Shift JIS</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">Shift_JIS *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">SJIS *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Chinese: Big5</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">Big5 *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">Big5 *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Extended Unix Code, packed for Korean</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">euc-kr *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">iso2022kr *      </TD> *  </TR> *  <TR> *      <TD WIDTH=""33%"">Cyrillic</TD> *      <TD WIDTH=""15%""> *          <P ALIGN=""CENTER"">koi8-r *      </TD> *      <TD WIDTH=""12%""> *          <P ALIGN=""CENTER"">MIME *      </TD> *      <TD WIDTH=""31%""> *          <P ALIGN=""CENTER"">koi8-r *      </TD> *  </TR> * </TABLE> *  * @author TAMURA Kent, IBM * @author Andy Clark, IBM */"
// Can't have both a classifier and a type parameter. //
// Add Userinfo Characters
// The type parameter must be in scope and must not be a forward reference. //
// Ignore trailing whitespace
// Incorrect number of type arguments. //
// Have no arguments when they are allowed is only a warning. //
// Can't have both an upper and lower bound. //
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getClassifier(java.lang.String, java.lang.String)   */"
// Wildcards are only allowed in type arguments. //
"/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getFeature(org.eclipse.emf.ecore.EClass, java.lang.String, java.lang.String)   */"
// Can't have type arguments unless there is a classifier //
// Can't have a classifier or a type parameter as well as bounds. //
// Can only have bounds when used as a type argument. //
// remove/add the action bar from the view so to avoid // having an empty action bar participating in the view's // layout calculation (and maybe causing an empty bar to appear)
//MappingPackage ePackage = ((ComplexTypeConverter)msg.getNotifier()).ePackageMapping();
// We test their relationship either via them both being classes... //
// When the pane or any child gains focus, notify the workbench.
// If the are the same then it is bounded properly... //
// namespace context
// This is for the topDown feature. //
// The arguments, type parameters, lower bounds and upper bounds must be equal type arguments. //
// Set up the substitutions of any type parameters this class has with respect to the type arguments for them. //
// Ignore leading whitespace
// Determine if there is a bounding generic super type. //
// If there is a upper bound, the bound must bound it. //
// Create a new array. //
// Test if there are type parameters that might require substitution. //
// new declaration will not have fragments until performSplit() is called
// If there is a type parameter, one of its bounds must be bounded by the bound. //
// add leading comments
// If the generic type is a wildcard, it can't be bounded by another wildcard. //
// Failing all those cases, there must be an lower bound that bounds it. //
// If there is an lower bound, the type argument must bound it. //
// starting traverse file and build unit tree and table info
// If one is null (but the other is not) then they can't be equal. //
// If they both aren't null... //
// create OK and Details buttons
// If they are the same classifier, they are of course equal. //
// If one is null (but the other is not) then they are not equal. //
// If they are the same instance they are equal. //
// Go through the commands of the list. //
// Index should be -1.
// Define a class loader that looks up classes using the URLs or the parent class loader, // and failing those, tries to look up the class in each bundle in the running JVM. //
//EcoreAdapterFactory
// add the key/value pairs to the output string
"/*    public List subList(int from, int to)    {      return featureMap.subList(getEStructuralFeature(), from, to);    }*/"
// For the extended meta data to be created. //
// Reverse the test. //
// Iterate over the mappings in the tree. //
// --entryCursor;
// Don't cache this one as it will cause leaks because to dynamic demand created document roots and demand created EClasses. //
"/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.MappingPackage * @generated */"
// reset text edits; since this node is processed successfully, there is no need to revert these changes
// EEnumImpl overrides this to do nothing. // The only case that is special is when a more specific instance of AbstractEnumerator is generated/reused. //
// This forces the feature ids to be assigned. //
// Interprets escaped characters within the string according to Java // literal rules, with two exceptions: an unescaped " does not terminate // the string, and a \ not followed by b, t, n, f, r, ", ', u, or an octal // digit is taken literally, not as an error
// We can use == for EObjects and EnumLiterals. //
// A standalone base is a valid URI according to spec
// This is needed for internal bootstrapping of EGenericType's default value for eRawType. // It's simply not available before Ecore is constructed so we make it available and then patch what's missing. //
// replace some arguments by another field names (constants)
//  Public
// Continue with the unresolved URI.
// all implementations of Java 1.5 should support AES
// for enum constants, insert line break after the comma if there is anything after the comma
//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
// insert new line at the end of previous constant
// if needed, comment out a comma of the previous enum constant
// make sure that 1) we see only digits and dot separators, 2) that // any dot separator is preceded and followed by a digit and // 3) that we find 3 dots // // RFC 2732 amended RFC 2396 by replacing the definition  // of IPv4address with the one defined by RFC 2373. - mrglavas // // IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT // // One to three digits must be in each segment.
// create map of public static final field initializers to fields
// This should be the same as the logic in ResourceImpl.getEObject(String). //
// query - starts with ? and up to fragment or end
// if there is a comment with start position > rangeStartPos
// Prepare for CreateChild item addition or removal. // //$NON-NLS-1$ //$NON-NLS-1$
// Iterate over the owner list twice, first matching objects from the collection by identity (==), then matching // objects by value equality (.equals()). The positions of matched objects in the owner list are recorded, and // the objects are stored in the same order. The lists are then merged to form a final, in-order list of objects // and corresponding indices in ownerList. This is very important for undo to interpret the indices correctly. // Also, this yields exactly one object removed for each object in the collection, with preference given to // identity over value equality. //
// The next line leaves objectsBeforeApply with all the objects that were // added during the last recording.
// Closing the detail area
// Define gradient (blue to widget background color)
//lastCursor = -1; //prepared = 0;
// callers that plan to use this name without appending a suffix should call f.safeName(f.getName()) to make sure its not a keyword // this is a safe guaranteed uncapitalized form of the name // the safe name and cast to EObject, if necessary.
// Create the editing domain with a special command stack. //
// Validate now since the call we make after will skip validating.
// Count up the objects that will be removed. // The objects are exchanged to produce this list's order //
// for field declarations use variable declaration fragments instead
// convert only public static final fields
// The container class must be null for the open content features of the document root // to ensure that they are looked up in the actual eClass()  // rather than assumed to be a feature with a feature ID relative to the actual class. // Otherwise, it's good to have this optimization. //
// If the plugin.properties isn't within the root of the archive, // create a new URI for the folder location of the archive, // so we can look in the folder that contains it. //
// We don't create an iterator stack until the root mapping itself has been returned by next once. // After that the stack should be non-empty and the top iterator should yield true for hasNext.
// For demand created created packages we allow the list of classifiers to grow  // so this should handle those additional instances. //
// Ensure that this is a touch notification so to resource aren't marked as dirty. //
// menuManager.insertBefore("additions", new Separator("schema-actions")); // menuManager.insertAfter("schema-actions", generateSchemaAction);
"/*  public List subList(EStructuralFeature feature, int from, int to)  {    return null;  }*/"
// Undo the preparation for next and continue.
// If we can't create one, too bad.
//  /** //   * Simpler implementation that sets the range of any node to be the node and all preceding comments //   */ //  public SourceRange computeSourceRange(ASTNode node) //  { //    SourceRange range = new SourceRange(node.getStartPosition(), node.getLength()); // //    range = extendRangeBackward(findLeadingComment(node, getPreviousNode(node), false), range); // //    return range; //  }
// Handle the last byte at the end. //
// create JNode and set properties
// If the first object is null, the second object must be null. //
//   // Suppress default constructor for noninstantiability. //   private EcoreUtil() //   { //   }
"/*  List theList = new java.util.ArrayList();  protected List delegateList()  {    return theList;  }*/"
// Method created to increase the performance of regular expressions // by reducing the length of the string that is matched. //
// Failure to resolve is ignored.
// Depending on the action and the current state, we'll toggle the state. // i.e., for unset, we need to turn it off if it's on,  // and for set we need to turn it on if it's off. //
// Skip the dummy null object and test again. //
// If we are on the special resource set iterator, and there isn't really a next object at this point... //
// Finds the next occurrence of one of the characters in the set represented // by the given bitmask in the given string, beginning at index i. The index // of the first found character, or s.length() if there is none, is // returned.  Before searching, i is limited to the range [0, s.length()]. //
// Then eObject2 must be that previous match. //
// Create move commands for all the objects in the collection. //
// We know the first object isn't null, so if the second one is, it can't be equal. //
// Some character classes, as defined in RFC 2396's BNF for URI. // These are 128-bit bitmasks, stored as two longs, where the Nth bit is set // iff the ASCII character with value N is included in the set.  These are // created with the highBitmask() and lowBitmask() methods defined below, // and a character is tested against them using matches(). //
// If eObject1 and eObject2 are the same instance... //
// Look for the first non-XMI element. //
// Check all the values. //
// Assume from now on that they match. //
// Match them and return true. //
// If they don't have the same size, the feature maps aren't equal. //
// Value used to suppress visibility. //
// The values must be Java equal. //
// If this is a feature map... //
// If the first value is null, the second value must be null. //
// Neither eObject1 nor eObject2 have been compared yet.
// Since the first value isn't null, if the second one is, they aren't equal. //
// If it is in a resource, form the URI relative to that resource. //
// There is no reason they aren't equals. //
// Compare entries in order. //
// If the values aren't Java equal, the feature maps aren't equal. //
// EqualityHelper
// clockseq_hi
// The node identifier is already in network byte order,  // so there is no need to do any byte order reversing. //
// Set the most significant bit of the first octet to 1 so as to distinguish it from IEEE node addresses //
// If it's a proxy, use that. //
// We just woke up.
// Wait so that the clock can catch up and the time adjustment won't overflow.
// time_hi //
// time_mid //
// Ignore if we can't freeze.
// This case can only happen if we are reset to a mark and we've got lots of XMLNS attributes to write. //
// throws SAXException
// This is the cheapest and most common case. //
//fall through...
// If there is a temporary file... //
// System.err.println("add = ["+newString+"]");
// Deresolve all the URI against the current base URI. //
"/*   * Javadoc copied from interface   */"
// external schema locations should only be processed once, i.e. in the subsequent parse // there is no need to process those again.
// EMOF.isReadOnly = !Ecore.changeable
// SAXXMIHandler
// Ecore.changeable = !EMOF.isReadOnly
// Ignore whatever was set before. //
// handler.ignorableWhitespace(ch, start, length);
// Try to resolve the proxy locally. //
// If we are pessimistic, then we need to undo all the commands that we have executed so far. //
// And find the one that holds this proxy. //
// // Implement EntityResolver methods //
// // Implement DTDHandler methods //
// // Overwrite DefaultHandler methods //
// If the resolved object doesn't contain a reference to the proxy holder as it should. //
// We won't need to process this again later. //
// Compute the holder of the proxy //
// Move the resolved object to the right place, remove the proxy, and we're done. //
// EATM temporary for debug purposes only. //
// The proxy needs to be replaced in a way that updates both ends of the reference. //
// // Implement LexicalHandler methods //
// At least set the references that we were able to resolve, if any. //
// We won't need to process this again later.
// Set up a deferred extent so the document root we create definitely will not be added to the resource. //
// EATM Demand create metadata.
// check for simple feature
// Process the new root object if any. //
// Remove the document root's information from the top of the stacks. //
// If externalSchemaLocations are specified, process these ones as well
// Place the time into the byte array in network byte order. //
// time_low //
// If the command is executable, record and execute it. //
// The new root object is the actual new object since all sign of the document root will now have disappeared. //
// Handle namespaces
// This check is redundant -- see handleFeature method (EL)
// Ignore a whitespace only text entry at the beginning. //
// Try to get a general-content feature. // Use a pattern that's not possible any other way. //
// This handles the case of a substitution group. //
// This is for the case for a local unqualified element that has been bound. //
// We use null here instead of "" because an attribute without a prefix is considered to have the null target namespace...
// This only works for old globally registered things.
// Ignore it if we can't find it since we'll fail anyway.
// extend the array, if necessary
// Ignore since we expect this to fail because of early termination // and if there is some other kind of failure, then we'll simply not be able to match the content type.
// Entry entry = new Entry(eObject, CONTAINING_FEATURE); // return (EStructuralFeature)map.get(entry);
// Index of writing point // Index of processing point
// class AttributesProxy
// use the pool to retrieve the parser
// traverse element node
// record duplicate declaration for a given prefix (#3)
// release parser back to the pool
// record namespaces in scope //
// Don't read encoding - rely on XML parser to provide one via Locator2
// Create an simple any type wrapper for the attribute value and use that with the EReference. //
// true if seen xmlns="" declaration
// handler.resolveEntity(publicId, systemId);
// XMLLoad
// SAXXMLHandler
// If we are substituting an EAttribute for an EReference... //
// Once we see a lookup of an element in the null namespace, we should behave as if there has been an explicit xmlns="" //
// There really must be a package. //
// for any content prefix to URI mapping could be in namespace context
// Sort and eliminate duplicates caused by having both a regular package and a demanded package for the same nsURI. //
// recording a first declaration for a given prefix
// Make sure that the list will appear to be set to be empty. //
// record default ns declaration as duplicate if seen QName (#1) or seen xmlns="" (#2)
// since xmlns="" is default declaration, remove ""->empty_URI mapping
// push context
// resize array, if needed
// find uri in current context
// bind prefix to uri in current context
// prefix not found
// set parser features and properties
// uri not found
// caching turned on by the user
// DOM serialization
// Look for a matching element in the specified packages if there are any. //
// Look for a substitution group feature in the classifier's containing package. //
// set serialization options
// XMIHandler
// Look for a substitution group feature in the additional packages. //
// Process the super types if that's been specified. //
// Entities aren't supported for DOM.
// If there is no field, then we can't do this.
// value[outputPos];
// Process XML attributes
// Since the cycle is detected by checking if we hit "this" again, after many iterations we'll call this method recursively  // in case we started with something that wasn't part of a cycle but later traversed up to a cycle. //
// this is a root element
// for performance reasons saveNil and saveElement are not used
// Process XML elements
// Every codepoint is supported! 
// Normal (BMP) unicode code point. See if we know for a fact that the encoding supports it:
// We will use an xmi:Extension element for these
// ownedProperty???
// First try to see if this package's implementation class has an eInstance. //
// Go back and add all the XMLNS stuff. //
// The helper part assumes that the summary is likely based on the helper and will change when the helper is set. //
// create dummy documentElement
// Avoid a function call... //
// write doctype
"/*     *  Convert:     *  \n to line separator     */"
// Assume the class isn't available.
//System.err.println("Do sorting: "+this.ranges.length);
// boolean not
// register default options
// no property // no property
// EAnnotations denoting specific EMOF elements are serialized as their EMOF elements.  // Other EAnnotations are serialized as xmi:Extensions. //
// xmi:id // xmi:XMI // xmi:type // xmi:version // xmlns:xmi
// Token.CLOSURE
//XMLNamespaceFactory
// convert the target node to a compatible node //
//XMLTypePackage
// SimpleAnyType
// ret.next is null.
// Don't create anything.
//XMLTypeFactoryImpl
// do not validate on load. Check validity using Diagnostician.
//XMLTypePackageImpl
// Other escaped character.
//System.err.println("Starts at "+index);
//DocumentRootImpl
// Skips characters between '#' and a line end.
// Skips a white space.
// switch anchor type
//System.err.println("DEBUG: matchEnd="+matchEnd);
//System.err.println("Non-match in fixed-string search.");
// Internal use only. // The @ always matches line beginnings.
"/*           * Optimization against the first character.           */"
//System.err.println("DEBUG: with firstchar-matching: "+this.firstChar);
//case 0x0b:  ret = "\\v";  break;
// for CLOSURE, QUESTION
// Op.CHAR
"/**   * Performs escape encoding on the given string so that it can be represented using 1-byte characters.   * Any characters higher than 0xFF are replaced with an escape of the form \\uXXXX, where XXXX is the   * four-digit hex representation of the Unicode code point.   */"
//+this.fixedString
// This pattern has a fixed string of which length is more than one.
// ModifierOp
"/*    public ParseException(String mes) {        this(mes, -1);    }    */"
//System.err.println("Creates UnionOp");
// Legacy word characters
// RANGE, NRANGE
// Not overlapped // src: o-----o // sub:         o-----o // res: o-----o // Reuse sub
/*0B80..0BFF;*/
// This is the page for the table viewer. //
//System.err.println("Token#substractRanges(): Entry: "+this.ranges.length+", "+tok.ranges.length);
// Overlapped // src1:    o--------o // src2:  o----o // src2:      o----o // src2:          o----o // src2:  o------------o
// src:    o--------o // sub:  o----o // res:       o-----o // Reuse src(=res)
//System.err.println("Token#addRange(): "+start+" "+end);
// src:    o--------o // sub:          o----o // res:    o-----o // Reuse sub
// Not overlapped // src1:          o-----o // src2: o----o
// for UNIoN
// src1:    o--------o // src2:  o----o // res:     o--o // Reuse the rest of src1
// src1:    o--------o // src2:  o------------o // res:     o--------o // Reuse src2
// Not overlapped // src:          o-----o // sub: o----o
// s&0x1f : 0-31
// for UNION
// Count all the bits in the bit patterns up to this one in the sequence of bit patterns. //
// In a character class, this.chardata has one character, that is to say, // a pair of surrogates is composed and stored to this.chardata.
// Load the resource through the editing domain. // This will create a context and associate it with the resource set. //
// handle category escape
//this.setLocale(locale);
// Skips '.'
// Through down
// The one object in the resource's extent should be the root object. //
// conditional // this.offsets points the next of '('.
// Options
//tok = Token.createConcat(tok, this.parseFactor());
// Parses yes/no-patterns.
// this.offset points the next of '('
// Parses a condition.
// '(?:' // '(?(' // (?modifiers ... )
// such as (?-i)
// {min,max}
// separate fields with an empty line
// this.offset -> next of '{'
// Save the resource to the file system. //
// Set the value at the previously allocated index and return the previous value there. //
/*0B00..0B7F;*/
// If there is a cached result, return it. // We expect that if the package is set to be a proxy,  // the code in EPackageImpl.eSetProxyURI override will have cleared this value. //
// ***** Really?
// If we turn the package into a proxy, ensure that the child classifiers clear their cached container. //
// if not shorthands... // Here is no '-'.
// *** It is not a bug.
// Update the workbench's knowledge of the file's contents. //
/*20D0..20FF;*/
// **** We can not optimize.
// infinity
// When this.child.getMaxLength() < 0, // this returns minus value
//blockNames in UNICODE 3.1 that supported by XML Schema REC             
// This is the page for the table tree viewer. //
// Skip if there's an equality filter and the values aren't equal. //
// The methods were matched by a process that doesn't consider the // parameters
/*02B0..02FF;*/
// Look for the annotation with the matching source. //
// We can't find the class, so we don't want this class loader, // but instead want the last result that was able to load the class. //
// Don't push method annotations into redirected methods. //
// Create a resource for this file. //
// This just notifies those things that are affected by the section. //
/*0C80..0CFF;*/
/*0C00..0C7F;*/
// Ensures that this editor will only display the page's tab // area if there are more than one page //
/*0E80..0EFF;*/
/*0D80..0DFF;*/
/*0E00..0E7F;*/
/*0F00..0FFF;*/
/*13A0..13FF;*/
/*20A0..20CF;*/
/*1F00..1FFF;*/
/*1E00..1EFF;*/
/*2E80..2EFF;*/
// Search the local scope for a resolution of the type parameter name. //
// Create the source and target JCompilationUnit. //
// Set the instance type name instead, since that will also set the instance class name  // but this way will make undo restore the current instance type name correctly //
/*25A0..25FF;*/
// You can only add type arguments if there are type parameters not yet used up. //
// Only if you are contained by a generic type can you have bounds, // and only if there is no classifier or type parameter // and in that case the lower bound is returned only if that's the one that's set. //
// apply changes using ASTRewrite //
// Don't use the normal reference copying for eOpposite. //
// Write a signature that will be obviously corrupt // if the binary contents end up being UTF-8 encoded // or altered by line feed or carriage return changes. //
// If the list is empty, we need to add all the objects, // otherwise, the reference is bidirectional and the list is at least partially populated. //
// If an input stream can't be created, ensure that the resource is still considered loaded after the failure, // and do all the same processing we'd do if we actually were able to create a valid input stream. //
// apply additional edits like replacing or commenting out nodes //
/*2F00..2FDF;*/
// Build a list of the keys //
// Do the extent processing that should have been done for the root but was actualljy done for the document root. //
/*31A0..31BF;*/
// replace existing InsertEdit at this position // (case when previous node ends at the same position that current node starts at)
/*30A0..30FF;*/
/*FEFF..FEFF;*/
/*AC00..D7A3;*/
// Reserve a place to insert xmlns declarations after we know what they all are. //
/*FE50..FE6F;*/
/*A490..A4CF;*/
/*4E00..9FFF;*/
/*FE30..FE4F;*/
// create and try to add dummy edit to find the ReplaceEdit // this should be faster than lookup since underneath of addChild() binary search is used
/*F900..FAFF;*/
/*E000..F8FF;*/
/*FE20..FE2F;*/
/*FB00..FB4F;*/
/*2F800..2FA1F;*/
/*1D100..1D1FF;*/
/*1D000..1D0FF;*/
/*E0000..E007F;*/
// for all characters
// If we're creating a child under an object in a feature map, the selection will be the feature map entry. // We want to replace it with the model object. //
//missing 2 private use add manually
// Exit this loop
// [{ASSIGNED}]-[{M},{C}]
// Add it to the list and remove it from the other list. //
// Doing this just makes focus go to the default control, not the control that last has focus. // // super.setFocus();
// Commands should operate on the values, not their wrappers.  If the command's values needed to be unwrapped, // we'll back get a new CommandParameter. //
// synchronized // if null
// Subraction
// hangul_medial and hangul_final // extras
// This is CONCAT, and new child is CONCAT.
// base_char?
// Replace previous token by STRING
//System.err.println("Merge '"+previous+"' and '"+tok+"'.");
// CRRIAGE RETURN U+000D
// \ + c // backsolidus
// LINE FEED U+000A
// if not shorthands...
// if - is at the last position of the group
// Here is no '-'.
// c '-' ']' -> '-' is a single-range.
// return actucal char
// HORIZONTAL TABULATION U+0009
// Recursion
// Found '-' // Is this '-' is a from-to token?? // Skips '-'
// Add the binding to the provided hash table: //
// Create the copy //
// If we didn't find authority we need to back up. Attempt to // match against abs_path next.
// Check if we found a resolution for it. //
// Otherwise, recursively call ourselves to substitute it in context if necessary. //
// Unassigned
// Add back in the array indices if there are any. //
//One PAD  e.g. 3cQ[Pad]
// Just import the name or use it directly. //
//build table of Pi values
/*FE70..FEFE;*/
// Check if the host is a valid IPv6reference.
/*0A80..0AFF;*/
// Load the model and if it's not one already considered, e.g., a local version in the workspace, process its GenPackages. //
//Check if they are PAD characters //Two PAD e.g. 3c[Pad][Pad] //last 4 bits should be zero
// IViewPart view = getViewPart(); // titleLabel.setText(view.getTitle()); // titleLabel.setImage(view.getTitleImage());
// If we don't already have it, try to get the source early. We can't give // feedback if it's not available yet (this is platform-dependent). //
// Adding new aliases as proposed in // http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0058.html
// form integral number of 6-bit groups
// This implementation was changed to not introduce multi line content.
//should be divisible by four
// remove white spaces
// Add support for Cp1252 and its friends
// This came from trial and error, yielding decent results on all // platforms.  It should be consistent with activate(). //
// count characters that's not whitespace
//No PAD e.g 3cQl
// proposed addition (see above for details):
"/* * format validation * * This class encodes/decodes hexadecimal data * @author Jeffrey Rodriguez */"
// give up if we couldn't create the command; otherwise, use a // CommandActionDelegate to set the action's text, tool-tip, icon, // etc. or just use the default icon
//titleLabel.setBackground(null, null); // titleLabel.setForeground(null);
// Add ASCII Letters
// presence of the host (whether valid or empty) means // double-slashes which means generic uri
// Add ASCII Digits and ASCII Hex Numbers
//RFC 2732 added '[' and ']' as reserved characters
// REVISIT: //   j:CNS11643 -> EUC-TW? //   ISO-2022-CN? ISO-2022-CN-EXT?
// class EncodingMap
// // Public static methods //
// set rewriter on the new node
// Add Path Characters
// Add Scheme Characters
// Add Reserved Characters
// Add Mark Characters
// Just use null.
// Authority will be everything up to path, query or fragment
// find insertion point from returned result (-(insertion point) - 1) // commentIndex is the index of the first element with end position > rangeEndPos
// 6a - get all but the last segment of the base URI path
// check for absolute path - RFC 2396 5.2 #5
// assume {min,}
// userinfo is everything up to @
// 6c - remove all "./" where "." is a complete path segment
// through down
// 6b - append the relative URI path
// port
// 6d - remove "." if path ends with "." as a complete path segment
// host is everything up to last ':', or up to  // and including ']' if followed by ':'.
// Userinfo can contain alphanumerics, mark characters, escaped // and ';',':','&','=','+','$',','
// Check if the host is well formed.
// Check that userinfo is well formed if it exists.
// Points '('.
// Scan path. // abs_path = "/"  path_segments // rel_path = rel_segment [ abs_path ]
// Scan opaque part. // opaque_part = uric_no_slash *uric
// fragment - starts with #
// Check that that there are no more than three digits // in this segment.
// hostname      = *( domainlabel "." ) toplabel [ "." ] // domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum // toplabel      = alpha | alpha *( alphanum | "-" ) alphanum
// // Constants //
// RFC 1034: Labels must be 63 characters or less.
// domain labels can contain alphanumerics and '-" // but must start and end with an alphanumeric
// Registry based authority.
// Check if string is a potential match for IPv6reference.
// Fill 3 of value (byte) 49
// Check that this segment is not greater than 255.
// Address must contain 128-bits of information.
// Fill 15 of value (byte) -19
// Scan hex sequence before possible '::' or IPv4 address.
// HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
// Trailing zeros will fill out the rest of the address.
// 3. Scan hex sequence after '::'.
// This could be '::'.
// which ASCII characters need to be escaped
// There can be at most 4 hex digits per group.
// If encoding happened, create a new string; // otherwise, return the orginal one.
// Paint over the selected padding spaces with the // background colour.  On GTK, the whole item, not just // the text, is selected, so we don't do this. //
// for each character in the anyURI
// Fill 6 of value (byte) 49 // Fill 2 of value (byte) -71
// Fill 71 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 5 of value (byte) -19
// Fill 53 of value (byte) -19
// Fill 8 of value (byte) 33 // Fill 23 of value (byte) -19
// Fill 26 of value (byte) -3 // Fill 60 of value (byte) 33
//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
//MappingPackage ePackage = ((FunctionNamePair)msg.getNotifier()).ePackageMapping();
// Fill 20 of value (byte) -19
// Fill 10 of value (byte) -71
// Fill 44 of value (byte) -19
// for Ecore or something that explicitly extends it, we need to exclude // EObject, which is already handled by the default case
// Fill 10 of value (byte) -19 // Fill 8 of value (byte) -87 // Fill 13 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 6 of value (byte) 33
// Fill 7 of value (byte) -19 // Fill 3 of value (byte) 33
// We assume that the rootExtendsClass already implements it. //
// Fill 12 of value (byte) -19
// There needs to be another URL protocol right after the archive protocol, and not a "/". //
// Fill 66 of value (byte) -19
// Fill 31 of value (byte) -19
// Fill 36 of value (byte) -19
// there is anything else but comma after constant - insert line break
// Fill 23 of value (byte) -87
// When an object is controlled, the only change will be in the new resource's contents, so it must // refresh the whole viewer to hit the object's label. //
// Fill 15 of value (byte) -87 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) -87
// since enum constants are separated by commas, they should always have the default range // we can not extend their range or reduce it
// Fill 4 of value (byte) -19
// Fill 53 of value (byte) -19 // Fill 2 of value (byte) 33
// HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
//HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
// Stop if the next item will be out the event bounds. // The event bounds values are also misaligned on GTK. //
// check if given node should use the default range (i.e. node removed), // or extended range (i.e. surrounding nodes removed)
// Fill 3 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33
//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
// Fill 7 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 9 of value (byte) 33
// Fill 8 of value (byte) -87
// Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
// Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19
// Fill 5 of value (byte) -19 // Fill 2 of value (byte) 33
// Fill 22 of value (byte) -19
// Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33
// Fill 7 of value (byte) 33 // Fill 12 of value (byte) -87 // Fill 3 of value (byte) -19 // Fill 12 of value (byte) 33 // Fill 3 of value (byte) -87
// Fill 6 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19
// Fill 3 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 5 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -87
// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33
// Fill 8 of value (byte) -19
// Go directly to the right entry in the zip file,  // get the stream,  // and wrap it so that closing it closes the zip file. //
// Fill 2 of value (byte) -19 // Fill 7 of value (byte) -87 // Fill 5 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 9 of value (byte) -87
// Build list of wrapped children from the appropriate adapters. //
// Parse as an attribute=value:
// Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19
//fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
// If this entry isn't the end marker  // and isn't the matching one that we are replacing... //
// Fill 10 of value (byte) -87 // Fill 39 of value (byte) 33 // Fill 2 of value (byte) -19
// Simple cases: no mix-ins for no inheritance or for a single base class. //
// Fill 2 of value (byte) 33
// Mix-ins are everything after the base class. //
// This is for the in2out feature. //
// Strips an escaped white space.
// Try to transfer it by reading the contents of the temporary file  // and writing them to the output stream of the delegate. //
// If this is class has mixed content, the mixed feature should always be included, even if inherited, and come first. //
// Fill 6 of value (byte) 33 // Fill 4 of value (byte) -19
// Add all other create child features that this item provider is responsible for. //
// Fill 2 of value (byte) 33 // Fill 5 of value (byte) -19
// Either execute or redo the command, as appropriate. //
// Fill 8 of value (byte) 33
// isSpace(int):boolean
// Fill 4 of value (byte) 33
// Fill 40 of value (byte) 33
// Fill 7 of value (byte) -19 // Fill 40 of value (byte) 33
// Fill 9 of value (byte) 33
// Skip over the command that threw the exception. //
// This is for the out2in feature. //
// isMarkup(int):boolean
// Only return the feedback for an executable command. //
// isContent(int):boolean
// This is kind of tricky. // If the saveIndex was in the redo part of the command list which has now been wiped out, // then we can never reach a point where a save is not necessary, not even if we undo all the way back to the beginning. //
// Fill 7 of value (byte) -19 // Fill 211 of value (byte) 33 // Fill 13 of value (byte) -87 // Fill 4 of value (byte) 33
// isInvalid(int):boolean
// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33
// isValid(int):boolean
// Return whether there is a list, the value is in the list, and index is in range... //
// isName(int):boolean
// replace arguments that match the name of the fields with the initializer value of the field //
// isNCName(int):boolean
// encodings
"/*      * [5] Name ::= (Letter | '_' | ':') (NameChar)*      */"
// isPubid(int):boolean
"/*      * [7] Nmtoken ::= (NameChar)+      */"
"/*      * from the namespace rec      * [4] NCName ::= (Letter | '_') (NCNameChar)*      */"
// Set the range so that we re-check when we get into the other half. //
//order constants
// class XMLChar
// interface TypeValidator
// If this looks like a feature getter, a kind property will allow it to be recognized properly. //
// indicate that initializer has been changed // (required to not overwrite initializer if variables are split later)
// Remove from by position in reverse order. //
// keep comments between nodes when removing or moving nodes
// Type parameter casts can't be checked. //
// Break the cycle. //
// This ensures that we are dealing with actual MOF objects. //
// if the character is in the range 0x30 ~ 0x39, return its int value (0~9), // otherwise, return -1
//Ecore2XMLSwitch
// Check whether there is an opposite that needs attention. //
// 6e - remove all "<segment>/../" where "<segment>" is a complete // path segment not equal to ".."
// The byte is automatically widened into an int, with sign extension, // for shifting.  This can introduce 1's to the left of the byte, which // must be cleared by masking before looking up the hex digit. //
// buttonComposite has to be the first child of composite because subclasses are expecting this.
// This is to handle a genmodel produced by rose2genmodel. //
// If the object is an input or output object, then use it. //
// Process the children recursively. //
// Fill 5 of value (byte) -19 // Fill 41 of value (byte) 33
// Common to all URI types.
// Remove variables since the plugin.xml should provide the complete path information. //
// Look for a single-char work delimiter: //
//SimpleAnyTypeImpl
// oldWidth = table.getClientArea().width;
// The lower-cased schemes that will be used to identify archive URIs.
// Special segment values interpreted at resolve and resolve time.
// Consult the generator option for backwards compatibility. //
// Optimize the performance of applying the import regular  // expressions locating the last import line //      
// Don't do replacement if we just did one, or if previous line // ended with a semicolon. //
// Don't do replacement if previous line ended with a comment. //
// Returns the upper half bitmask for all the ASCII characters in the given // string.
// We can't undo it, so we'd better give up. //
// If the path isn't within the root of the archive,  // create a new URI for the folder location of the archive,  // so we can look in the folder that contains it. //
// Platform.resolve() doesn't work if the project is encoded. //
// There must be at least one archive path. //
// There should be at least one archive separator per scheme. //
// Parse to extract the archives that will be delegated to the nested URL based on the number of schemes at the start. //
// Skip a scheme for the archive accessor to be handled directly here. //
// Create the delegate URL. //
// The cutoff point to the next archive. //
//missing Specials add manually // 84
// Construct the input stream in a special efficient way for case of a file scheme. //
// Just get the stream from the URL. //
// The name to be used for the entry. //
// Skip over this archive path to the next one, since we are handling this one special. //
// Loop over the archive paths. //
// The entry name to be matched. //
// Wrap the input stream as a zip stream to scan it's contents for a match. //
// Skip to the next archive path and continue the loop. //
// Create the delegate URL //
// Record the input and output streams for closing in case of failure so that handles are not left open. //
// The most deeply nested output stream that will be returned wrapped as the result. //
// A buffer for transferring archive contents. //
// The name that will be used as the archive entry. //
// Wrap the current result as a zip stream, and record it for loop-based recursion. //
// Loop over the entries in the zip stream. //
// Transfer the entry and its contents. //
// Find the next archive path and continue "recursively" if there is one. //
// Get the Java literal expression for the value. //
// Create no entry since we are deleting and return immediately. //
// Ensure that it won't be closed in the finally block. //
// result = new XMLResource.XMLInfoImpl(); // result.setXMLRepresentation(XMLResource.XMLInfo.UNSPECIFIED);
// Wrap the deepest result so that on close, the results are finally transferred. //
// Make sure we close only once. //
// Close for real so that the temporary file is ready to be read. //
// Make sure they are closed no matter what bad thing happens. //
// Close in case of failure to complete. //
// Close if we created this. //
// If there are some... //
// The termination guard is in the body. //
// Otherwise, produce an expression that uses the appropriate factory to create a value from the literal. //
// src:    o--------o // sub:      o----o // res:    o-o    o-o // Reuse src(=right res)
// If the location indicates after, add one more. //
// Now is the best time to record isUndoable because later we would have to do all the executes again! // This makes canUndo very simple! //
// If we can't execute this one, we just can't do it at all. //
// The most recently processed command will never have been executed. //
// We want to unroll all the effects of the previous commands. //
// Iterate back over the executed commands to undo them. //
// Clear the list past the top. //
// If this owned object is one from the collection... //
// oldValue = owner.eGet(feature);
// Record the successfully executed command. //
// extend to include the comment at the same line as the position  // if there is nothing between the position and the comment
// note that string place holder adjusts indentation // to correct this trackAndReplace method is used below
// This forces isSaveNeded to always be true. //
// Only if we are at the remembered index do we NOT need to save. // //return top != saveIndex;
// Clear the list. //
//iri = iri || containsNonASCII(segments[i]);
//  Remember where we are now. //
// This is the default return value. //
// <p>A valid query may be null or contain any allowed URI characters.
// Compute the GeneratorData for the given object and its children, then for the parents of the given object. //
// If the base package isn't set but there is a parent package, us it's information instead. //
//XMLTypeValidator
//MappingPackage ePackage = ((ComplexTypeConverter)object).ePackageMapping();
//XMLTypeResourceImpl
// Ensure that the map for Ecore is not repeatedly populated and that Property maps to EReference rather than EAttribute. //
// Iterate forward over the undone commands to redo them. //
// This ensures that these useless state variables at least reflect the right value. //
// Copy to a list and allocate positions. //
// Give all generator adapters the chance to do tear down. //
// Ignore derived features. //
// end setting whole list
// If we aren't simply removing all the old values... //
// Determine the values that will remain and move them into the right order, if necessary. //
// If there are values to remove, append a command for them. //
// Look through all the references... //
// Is the feature an attribute of the owner... //
// Don't set the type if it's already set. //
// ((value != null) 
// Add the collection //
// Get the owner's meta object. //
// (value == null) && (oldValue != null) // Remove owner from the old value and unset if necessary. //
// The classifier of an references's generic type must be a class. //
// (value == null) && (oldValue == null) // A simple set/unset will suffice. //
// specify the exact parent of annotations
// If there is an owner. //
// ((value != null) && (oldValue != null)) // Need a compound command to remove owner from old value and add it to new value. //
// (value != null) && (oldValue == null) // Add owner to new value. //
// For consistency, we always set 1-1 container relations from the container end. //
// For a 1-to-1, we can directly create a SetCommand. //
// Make sure the container is not being put into a contained object. //
// We can try to do a drop on instead. //
// current document reference: use base path and query
// If must be of this type then. //
// String getCapPackageID(); // Includes features in other packages that delegate to those in this one.
// If the other end is single, then we should unset the owner from the old value's opposite feature so that undo will put it back. //
// If any objects are matched. //
// returns the package in which this feature is defined // returns the name of the feature get method in the package interface (e.g. Company_Name) // returns the name of the feature get method in the package interface (e.g. Xyz.eINSTANCE.getCompany_Name)
// Either set or unset the feature. //
// It must be an unsettable feature to be null and considered set. //
// Set the bounds so that we re-check when we are closer to the middle. //
// If it's a feature map, we'll need to validate the entry feature and enforce its multiplicity restraints. //
// Either set or unset the old value. //
// We'd like the owner selected after this undo completes. //
// Check that the object isn't already in a unique list. //
// Check type of object. //
// Check each object...  //
// Remove the collection from the list by index. //
// If we could do a drop insert operation... //
// if one is null, they'll all be null
// Possible scope for the ChangeRecorder
// If the location is near the boundary, we'll start by trying to do a drop insert. //
// boolean isGenerateEditPlugin(); // boolean isGenerateEditorPlugin();
// If there isn't something obviously wrong with the arguments... //
// We'll default to this. //
// Create commands to create copies of the children. //
// Prepare the right type of operation. //
// The feedback is set based on which half we are in. // If the command isn't executable, these values won't be used. //
// We'll always be wrong for these arguments, so don't bother re-checking. //
// We are near the middle, so we'll start by trying to do a drop on. //
// We can reset and try a drop insert instead. //
// If we can do a drop on operation. //
// Try to create a specific command based on the current desired operation. //
// When we match the owner, we're done. //
// If we can't determine the parent. //
// If the dragged objects share a parent... //
// This is the name of the model. //
// And add the copy. //
// Copy the collection //
// We don't want to copy insert an object before or after itself... //
// Just remove the objects and add them. //
// if optimize // if collection
// This can execute if there is an owner list and a collection and the owner list contains all the objects of the collection. //
// If we can't set the collection, try setting use the single value of the collection. //
// Add the value back in the right place. //
// Determine if the operation is executable. //
// Clean it up. //
// Set the range so that we re-check when we get aren't in the middle. //
// If the operation has changed significantly... //
// Reset as in the constructor. //
// Thread.dumpStack();
// Remove the collection of replacements. //
// Only return the operation for an executable command. //
// Just return the cached result. //
// Insert the collection at the right place. //
// Make sure each object conforms to the type of the feature. //
// An extent allows anything to be added. //
// Record the position of the value in the owner list. //
// Set the bounds so that we re-check when we get near the other end. //
// We'd like the replaced selected after this undo replace completes. //
// Set the arguments again. //
// Create a strict compound command to do a copy and then add the result //
// We need to check canExecute() here in case prepare() went down the "optimize" path. //
// This will actually execute the copy command in order to check if the add can execute. //
// Create a command to copy the clipboard. //
// This will determine canExecute as efficiently as possible. //
// Create a proxy that will create an add command. //
// Record the index. //
// Remove the object from the collection and add it to the equality list.  //
// always include fragment, even if null; // no validation needed since all components are from existing URIs
// Remove the object from the collection and add it to the identity list. //
// If either list is empty, the result is simply the other. //
// We'd like the owner selected after this remove completes. //
// Merge the lists. //
// Object iterators. //
// Allocate list and array for objects and indices. //
// Second pass: match by value equality. //
// Create view form.     //control = new ViewForm(parent, getStyle());
// This will execute the CreateCopyCommand's and then call canExecute on the InitializeCopyCommand's. //
// Create commands to create the copy object(s). //
// Record it for execution. //
// Create an initialize copy command for each of the created objects. //
// If there is a column object, just convert it to a string. //
// This will call prepare() which will partially execute the command. //
// Create a command to create a copy of the object. //
// If command has no owner specified //
// If the owner parameter is set, we delegate to the owner's adapter //
// If there is an adapter of the correct type... //
// Does this part provide an editing domain? //
//MappingFactoryImpl
// Remove and dispose any wrappers for remaining old children. //
//MappingHelperImpl
// Set the mapper to build an XSD2EcoreMappingRoot, if available. //
// We will iterate over the whole collection, removing some as we go. //
//MappingStrategyImpl
//TreeSwitch
// Take the first object, and remove it. //
// Get the next object and check if it has the same parent. //
// The parent is null, which implies a top-level removal, so create a self-removing command. //
// We will now create a command with this implied parent //
// Remove the object and add it as a sibling. //
// protected Object labelProvider;
// If no object is specified, but an existing sibling is, the object is // its parent. //
//return getDefaultValue(attribute.getEType());
// If any children were added or removed, reset the indices.
// This URI handler redirect the URI based on the mapping. //
// This handles IStructuredSelection. //
// We need to check canExecute() in case optimize is true. //
// Add in additional wrappers to search. //
// Computes a three-character escape sequence for the byte, appending // it to the StringBuffer.  Only characters up to 0xFF should be escaped; // all but the least significant byte will be ignored.
// If there are objects to populate... //
// Fill in the result array with labels and re-populate the original list in order. //
// No color is a good default. //
// No font is a good default. //
// Otherwise, we could check that the adapter implements interface IItemFontProvider. //
"/*   * Returns <code>true</code> if this URI contains non-ASCII characters;   * <code>false</code> otherwise.   *   * This unused code is included for possible future use...    */"
//public String getUpdateableText(Object object)
// Iterate over all the set feature to factor each child to the right reference. //
// Check that the value is type compatible with the entry feature. //
//FunctionPairImpl
// When the value is changed, the property sheet page doesn't update the property sheet viewer input // before refreshing, and this gets called on the obsolete wrapper. So, we need to read directly from the // model object. // //return needsEncoding(feature) ? encode((String)getEntryValue()) : getEntryValue();
//MappingPackage ePackage = ((MappingRoot)msg.getNotifier()).ePackageMapping();
// If the last object was deleted and the selection was in the property sheet view, the obsolete wrapper will // reference past the end of the list. //
// Fill in the array with labels. //
"/*      ResourceSet resourceSet = (ResourceSet)object;      childrenFeatures.add(ResourcePackage.eINSTANCE.getResourceSet_Resources());*/"
// First, try an existing implementation of getChildReference().  This provides backwards compatibility if that // method, now deprecated, was overridden. //
// Use an existing getReferenceValue() override. //
// If this object is compatible with this reference... //
// Get the index into the list via this call to super. //
// Find the index of a feature containing the sibling, or an equivalent value, in the collection of children // features. //
//MappingPackage ePackage = ((FunctionNamePair)object).ePackageMapping();
//XMLTypeFactory
// Add child descriptors contributed by extenders. //
// Set the index of the object value in the list via this call to super. //
// Build the collection of new child descriptors. //
// If we can open  an input stream, then the plugin.properties is there, and we have a good base URL. //
// For each CommandParameter with a non-null, multi-valued structural feature... //
// Ensure there are no extraneous style bits. //
//AnyTypeImpl
// Assign default style bits, if necessary, and ensure none conflict. //
//SpaceType
// find insertion point from returned result (-(insertion point) - 1) // commentIndex is an index of the first element that has start position > rangeStartPos 
// Otherwise, if a sibling feature was found, iterate through the children features to find the index of // the child feature...  //
// Iterator over all the child references to factor each child to the right reference. //
// If the child feature follows the sibling feature, the child should be first in its feature. //
// Subclasses may override to add descriptors.
// if there are no groups defined or matched, but the whole pattern matches, // then markup nodes with pattern name //
// Is this child in this feature... //
// On Motif, selection color may be set as background. //
// Is this object in this feature... //
"/*   * Returns the help context id for this property.   */"
// Restore original resource URI values. //
// If all the objects are used up by the above, then we can't do the command. //
// Create a command to set this to null and remove the object from the other list. //
// It's just a single value //
// Consume the rest of the appropriate children. //
// The "suffix" can actually be a substitution pattern for the package name. //
// Correct the index, if necessary. //
// Create a command for this feature, //
// Compute the relative index as best as possible. //
// Create a command for this feature,  //
// continue to next case
// Dispose the child wrappers. //
// All this logic is so that we only create a list if the adapter is set to more than one target. //
//XMLNamespacePackage
// We can enable the action as indicated by the command, // and we can set all the other values from the command. //
// If we have resolved to an EClass but we have an EAttribute, we can change it to be an EReference. //
//TreeAdapterFactory
// Unwrap value. //
// If the adapter factory is composeable, we'll adapt using the root. //
// If a new collection was allocated, continue to populate it. //
// create rewriter to record changes
// TreeNode
// Delegate the action for this object to the editing domain. //
// Draw the extra first-column image. //
// If the table is indenting, draw tree lines. //
//private final boolean iri; //private URI cachedASCIIURI;
// Is this the label feature? //
// case Resource.RESOURCE__IS_MODIFIED: // case Resource.RESOURCE__IS_LOADED: // case Resource.RESOURCE__IS_TRACKING_MODIFICATION: // case Resource.RESOURCE__RESOURCE_SET:
// Is this a containment reference child? //
// This ensure that this package itself is traversed even if the reference type is EObject... //
// Or a feature map child? //
// Overlay if the resource is the target for any controlled objects.  //
// Don't include controlled children here, they'll show up under their container. //
// Resource resource = (Resource)object; // childrenFeatures.add(ResourcePackage.eINSTANCE.getResource_Contents());
//TreeFactoryImpl
//TreePackage
//TreeNodeImpl
// If we have a good editing domain... //
//TreePackageImpl
// This guard is for extra security, but should not be necessary. //
// We will only deal with structured selections. //
// If there is a new one... //
"/*    super.collectNewChildDescriptors(newChildDescriptors, object);*/"
// Use up the command. // Note that notification will cause a new command to be created. //
//TreeFactory
// No point in keeping garbage. //
// We just can't do it. //
// Fill with background. //
// only handle structured selections
// Add the edit menu actions. //
// try to get editing domain from workbench part
// Show the colourless image. //
// if we found an editing domain, create command
// convert the selection to a collection of the selected objects
// Allocate the new collection, and populate it up to this point. //
// if the editing domain wasn't given by the workbench part, try to get // it from the selection
// Add our standard marker. //
// If the first wrapped value is found... //
// use up the command
//MappingPackage ePackage = ((FunctionPair)object).ePackageMapping();
// We use multi even for a single line because we want to respond to the enter key. //
// Remember the requested operation.
// If there are delegated features, add only those that aren't already in this package to the end of the list. //
// grabHorizontal = true;
//MappingPackage ePackage = ((FunctionPair)msg.getNotifier()).ePackageMapping();
// Add our other standard marker. //
// Clear the source data.  We won't need this again, since, if it was // available, it's already in the command. //
// Ensure that all proxies are resolved so that references into the controlled object will be saved to reference the new resource. //
// Cache the tree path for each object. //
// dropDown.addListener(SWT.Paint, dropDownListener);
// This is here only to support deprecated adapt(object) rather than adapt(object, Interface.class). // // supportedTypes.add(null);
// setEditor(null, null, -1);
// event is null when featureTableViewer is double clicked 
// event is null when choiceTableViewer is double clicked
// This should be consistent with paintControl(). // 
// Draw 3D effect on right-side button. //
// Draw outline. //
// Draw down arrow, offset if dropped. //
// Draw background of right-side button. //
"/*     * (non-Javadoc)     *      * @see org.eclipse.jface.window.Window#configureShell(org.eclipse.swt.widgets.Shell)     */"
// This is for the helper feature. //
// Execute it. //
// If so, revalidate the command. //
// Draw the text. //
// If the command can execute... //
// A command was created if the source was available early, and the // information used to create it was cached... //
// If we can't do anything else, we'll provide the default select feedback // and enable auto-scroll and auto-expand effects.
// This is for the typeMapping feature. //
// Clean up the state. //
// Otherwise, let's call the whole thing off. //
// Clear out any old information from a previous drag. //
// Recreate the command. //
// Check if the cached command can provide DND feedback/revalidation. //
//FIX:::
// create composite
// Remember the target; create the command and test if it is executable. //
// Keep track of any changes to the command information.
//We are not generating the manifest file if the plugin.xml exists. //
// If we don't have a previous cached command... //
// If this command can provide detailed drag and drop feedback... //
//do this here because setting the text will set enablement on the OK // button
// If not, dispose the current command and create a new one. //
// Use it for the operation and drag under effect. //
// FunctionPair
// Transfer the data and convert the structured selection to a collection of objects. //
// Check whether the current data type can be transfered locally. //
// Transfer the data and, if non-null, extract it. //
// Iterate over the data types to see if there is a data type that supports a local transfer. //
// If there was no old input, then we must be providing content for this part for the first time... //
// Walk the project looking for .java files to analyze. //
//    case Notification.TOUCH:
// Set the input to the widget. //
// n2.isLabelUpdate()
// Previously, we never updated the viewer on a resolve.  Now we post and merge it as appropriate. //
// We ignore non-changes for now. //
// If the index was previously assigned, return it. // Otherwise, return a negative result that encodes the newly assigned index. //
// Add a dummy GenModel for referenced packages. //
// Escape a string that will terminate the comment in which this will all be nested. //
// We set it and get back the interned string. // This way, when instanceClassName == instanceTypeName we know we should serialize only the class name. //
// We also need to set it on any GenModels holding any used or static packages that may be refered to. //
//  private static final long SCHEME_CHAR_HI = ALPHANUM_HI | highBitmask("+-."); //  private static final long SCHEME_CHAR_LO = ALPHANUM_LO | lowBitmask("+-.");
// Create the model project. //
// Determine which projects will need to be referenced. //
// no property // no property // no property
// Create resources for all the root EPackages. //
// The class is not available.
// Nested GenAnnotations
// removing the first space
// Subclasses may overwrite
// Handle application genmodel stub //
// Create resources for all the referenced EPackages // The referencedEPackage is a "local" instance of the realEPackage.  We  // will add the former to a resource that has the same URI of the later.
// Initialize the GenModel with all the computed data. //
// Now we should sort. //
// Compute the closure. //
// For arrays, consider the element type. //
// Convert reference to attribute if its type is an EDataType...  //
// Clean up the temporary container annotations for holding map entry classes until they are for sure needed. //
// Now we need to hook up opposites by finding the named feature in the type. //
// Restore all configured settings from the original. //
// Now we need to hook up keys by finding the named feature in the type. //
// Copy the children references  //
// Keep only the plugins that have GenModels for consideration. //
// Iterate over all projects to look at the manifests. //
// Also add each required plugin for consideration in the loop. //
// Create the EPackage on demand. //
// Check whether this has @model annotation contents. //
// Match them and accumulate the appropriate result. //
// use no encoding
// Create a generic super type with an EClass as the classifier for each super interface in the Java representation. //
// The class address was not equal, so we don't want this class loader, // but instead want the last result that was able to load the class. //
// Check whether this has @model annotation contents. // If not, it might be a package interface, for backwards compatibility. //
// Get the package name and see if there's an EPackage for it. //
// It's definitely a package if it was declared as such. //
// Additional attributes and references may be defined directly on the interface in order to allow the // get accessor method to have suppressed visibility. //
// Walk the methods. //
// This will catch inherited features, or additional things we don't want to worry about.
// Find Packages and Factories
// Otherwise it's treated as an EEnum //
// Handle the type, multiplicity and other ETypedElement attributes. //
// Each token in parameters will specify a dataType for the corresponding parameter, but can be overridden by a // parameter-name-prefixed dataType property. //
// The name is extracted and lower cased. //
// 7 is the size of (object
// The feature name is extracted lower cased. //
// Map to an EEnum.
// Drop the _ separators and normalize the case. //
// Set the EAttribute attributes. //
// Each token in exceptions will specify a data type for the corresponding exception. //
// We'll create one of these. //
// Set the EReference attributes. //
// If any of these attributes appear, this must be a reference. //
// Set the visibility annotations for the EstructuralFeature. //
// Process the annotations. //
// Set the EStructuralFeature attributes. //
// Check if it is exactly the name of a type parameter that's in scope. //
// Allow a distinct literal value to be provided, too. //
// The type can be augmented by specifying the it explicitly in the annotation. // This mostly makes sense only for many-valued typed elements, where the Java // type is a list and the item type needs to be specified. //
// continue with default processing
// Allow the value to be defined by an annotation or by the field's initializer //
// We want to resolve to this. //
// Returns the lower half bitmask for all ASCII characters between the two // given characters, inclusive.
// But, if name doesn't expand into field name, ignore it. //
// Returns the upper half bitmask for all AsCII characters between the two // given characters, inclusive.
// Allow a mixed case version of the name to be provided. //
// Returns the lower half bitmask for all the ASCII characters in the given // string.
// If we can't find it, try the simple name in the package... //
// This could potentially map every created model element to its corresponding Rose node. // However, for now we're only using it as needed. //
// Find an explicit import or the first wildcard import. //
//no caching
// If we still don't have one, we'll have to settle for an EDataType or EClass with an instance class name. //
// Find the modeled package for the name and look up the name there. //
// Create a resource set and load the model file into it. //
// The package not in a .cat file. //
// See if we already have the EDataType. //
// The package is in a .cat file. //
// It's okay for there not be a precompiled template, so fail quietly. // exception.printStackTrace();
// Returns whether the given character is in the set specified by the given // bitmask.
// If we still don't have one, we'll have to settle for a demand created EDataType or EClass, // so create a new EClassifier with a nice unique name. //
// If we don't have one yet, maybe it's one of the special types... //
// Converts null to length-zero array, and clones array to ensure // immutability.
// If there are any warnings other than raw type warnings, include all the warnings. //
// For the model information. //
// Avoid classifier name collisions. //
// Make array names legal. //
// Get the parent object. //
// Even primitives should be represented by a data type with a conventional (i.e. capitalized) name. //
// Add to package. //
// Map to an EPackage. //
// node is not marked up by now, but keep checking other rules 
// Map to an EDataType. //
// Map to EAttribute, or EEnumLiteral. //
// Map to an EParameter as input parameter for operation. //
// Add to an EClass //
// Map to an EOperation.
// If not we'll erase it to java.lang.Object. //
// Alternate, stricter implementations of the following validation methods // are provided, commented out, for possible future use...
// We will need to check the containment if we have to convert the EAttribute to an EReference later.  //
// <p>A valid scheme may be null, or consist of a single letter followed // by any number of letters, numbers, and the following characters: // <code>+ - .</code>
// 5 is the size of (list
// Load the schema and packages that were used to load the instance into this resource set. //
// try to retrieve the fully qualified name of the specified type...
// qualify type name if not already qualified...
// remove garbage characters...
// convert to dot-separated format if necessary...
// Store the base name for relative .cat file references. //
// Order first by number of features (descending) and then alphabetically (ascending) //
// Iterate over the whole tree to do this. //
// default value //
// We treat the feature as volatile if it is volatile itself or if it is  // a reference whose opposite end is volatile,  // unless that opposite volatile reference delegates to a feature map, // in which case, a full implementation of the references can be generated. //
//MappingFactory
// Remove zero width non-breaking space, which may be used as a byte order marker,  // and may be ignored according to the Unicode FAQ: http://www.unicode.org/unicode/faq/utf_bom.html#38 //
// A container must be transient. //
// Temporary WAS/WSAD migration option. //
// It was not found in the model class so check if primitive type. //
// setup attribute and parameter type //
// Convert attributes of with EClass type to references. //
// read mdl file...
// file is a mdl file // // get model name
// special case, traverse cat file or mdl file //
// could this happen?
// map properties even when isTreeOnly == true
//directoryName.length() > 0 && directoryName.charAt(0) == '$') 
// size should be 1
// Create a resource for this file. Don't specify a content type, as it could be Ecore or EMOF. //
//    top++;
// No additional features // MappingStrategy
// Record the records for the executed commands on the stack. //
// map to EReference when is navigable //
// Process the contents of the extent //
// This will not add duplicates. //
// This sets the parent so that the nodes can traverse to the root to find default eCore settings. //
// Load the Rose .mdl or .cat file, and create mappings for the objects. //
// Only one open quote. //
// Start second traverse to create mapping objects in memory. //
// Put all static package in the package registry. //
// This is the path of the target directory. //
//MappingPackage
// No additional features // TypeConverter
// MappingHelper
// FunctionNamePair
// Do we also have some non-input objects to copy? //
// For each mapping being removed... //
// MappingRoot
// Since input objects are read-only, we don't need to make a copy of them for the clipboard. // We can just put a pointer to the original object(s) on the clipboard. //
// Make sure the back pointers to this mapping from the mapped objects is set. //
// A valid authority may be null or contain any allowed URI characters except // for the following: <code>/ ?</code>
// Copy the name //
// Add any remaining object-index pairs from either set. //
//Resource resource = EcoreUtil.getURI(refObject).; FIX:::
// <p>A valid path segment must be non-null and may contain any allowed URI // characters except for the following: <code>/ ?</code> 
"/*   * (non-Javadoc)   *    * @see org.eclipse.emf.mapping.action.AddRootTopAction#getTopsToAdd()   */"
// Searches the specified string for any characters in the set represented // by the 128-bit bitmask.  Returns true if any occur, or false otherwise.
//return;
// Create commands to do mapping.getNested().addAll(siblingsToReparent). //
// For each mapping being added... //
// note: (absolutePath || authority == null) -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
// this will create the mapping as well
// If there are siblings that need to be reparented. //
//(new RemoveCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), siblingsToReparent));
// Create commands to do parentMapping.getNested().removeAll(siblingsToReparent). //
// If we can't create a temp file then we have to ignore the option.
// find prefix in current context
//(RemoveCommand.create(mappingDomain, mapping, mapping.ePackageMapping().getMapping_Outputs(), object)));
// return false if iteration should continue.
//commandList.add(RemoveCommand.create(mappingDomain, mapping, mapping.ePackageMapping().getMapping_Outputs(), object));
// Get the corresponding type. //
// Type matching never matches inputs that are already mapped
// Create the copy from this corresponding type. //
// Remove all the mappings from the root. //
// We have done our preparation. Now ask the super to validate. //
// Copy the type //
// Skips '-'
// This is the tricky part where we set the encoding  // that we'd like to have decoded as a series of commands to execute after this command has completed. //
// If eCore, return the ENamedElement name //
// top-label-separator
// Tests whether this URI's path segment array is equal to that of the // given uri.
// If the owner and the copy are of the same type, we can proceed with the command, i.e. no override. // If not, we will skip this command by returning a do-nothing override. //
// If there is an adapter of the correct type, return the item label //
// If this is a RemoveCommand for a root input object, direct it to the MappingRoot. //
// remove all sourceSeparator characters
// Tests two objects for equality, tolerating nulls; null is considered // to be a valid value that is only equal to itself.
// type-mappings
// add a targetSeparator in front of every upper case character
// Tests two strings for equality, tolerating nulls and optionally // ignoring case.
// sourceSeparator == LABEL_NO_SEPARATOR
// top-label-forms
// relative path: merge with base and keep query (note: if the // base has no path and this a non-empty relative path, there is // an implied root in the resulting path) 
// top-label-case
//Ecore2EcoreFactory
// bottom-label-forms
//Ecore2EcorePackage
//MappingSwitch
// encrypt the input
// we don't want to include the line comments immediately before an import in the  // returned range
"/* (non-Javadoc)   * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcoreMapping#getInputEPackage()   */"
//if // for // for
// An interface should be abstract, but this makes sure of that fact. //
//Ecore2EcoreSwitch
// Adds a segment to a stack, skipping empty segments and self references, // and interpreting parent references.
// For CreateChildCommand, we will find the owner by calling EditingDomain.getParent() on the first selected object
// special care must be taken for a root's parent reference: it is // either ignored or the symbolic reference itself is pushed
// unless we're already accumulating root parent references, // parent references simply pop the last segment descended
// If extending an interface, its mix-ins must be included, since there is no implementation to handle them. //
// If we've found thing with type parameters, search them for a match. //
// XMLInfo
//Ecore2XMLPackage
// missing attribute
// this is the case that starting process rose file by passing cat file name // this is a special case. // normally, user should pass mdl file instead of cat file //  // file is a cat file // modelTree did contain quid info
//XMLMapImpl
// invalid element
//Ecore2XMLFactoryImpl
//Ecore2XMLPackageImpl
// We either remove the root mapping or we use the iterator that returned the most recent next mapping. //
// Set the editor's selection based on the current viewer's selection. //
// Many inherited methods must be overridden to handle this case. //
// Since we only use this right on an operation, we always want to include the keyType and valueType, and we never // want to qualify the property names. //
// If there are any arguments and they are not unbounded wildcards, casts can't be checked. //
// We need to be conservative and diagnose a problem only if we are quite sure that type is built-in  // and hence that the lack of a default value really represents a problem with being unable to convert the literal to a value. // 
// Or we test their relationship via their instance classes, if they have them. //
// Some XML types declare nebulous Object mappings. // They actually map to internal types that shouldn't be generated into code. //
// This guards the switch. //
// If there is a base XML or Ecore type, use one of the two corresponding built-in factories to create a value from the literal string. //
// Clean up any old project information. //
//MappingImpl
// The bound is a wildcard with no constraints. //
// See if a GenModel is registered for the package's URI, and if so, try to load it. //
// If that didn't work, just synthesize one. //
// EATM  // Foreign Model
// Any features from one package that delegate to features in another. //
// If there are features delegating across packages, add only those that aren't already being generated. //
// a single separator, possibly preceded by some parent reference // segments, is redundant
// an empty path needs to be replaced by a single "." if there is no // query, to distinguish it from a current document reference
// Collapses non-ending empty segments, parent references, and self // references in a non-relative path, returning the same path that would // be produced from the base hierarchical URI as part of a resolve.
// if the path is non-empty and originally ended in an empty segment, a // parent reference, or a self reference, add a trailing separator
//TypeConverterImpl
// Returns a string representation of this URI for debugging, explicitly // showing each of the components.
// If the new prefix has segments, it is not the root absolute path, // and we need to drop the trailing empty segment and append the tail // segments.
"/*        featureMap.add(eStructuralFeature, cursor++, o);        expectedModCount = featureMap.getModCount();        ++entryCursor;        ++lastCursor;        // lastCursor = -1;        // prepared = 0;*/"
// Add all classes from this package first, to guarantee they get the // simple names
// Don't even consider it unless this is hierarchical and has scheme, // authority, device and path absoluteness equal to those of the prefix.
// If the prefix has no segments, then it is the root absolute path, and // we know this is an absolute path, too.
// Barring a better result, this will be the result. //
// The prefix really is a prefix of this.  If this has just one more, // empty segment, the paths are the same.
// Do this here because getExtendedMetaData() is used during initialization  // and the mappings are are populated the first time it's fetched // which will miss the packages we add as we initialize the tree. //
// rewriter is required for set methods
// If we can't add it, it must already be in the list so find it and move it to the end. //
// Both eObject1 and eObject2 are not null. // If eObject1 has been compared already... //
// Encodes the given string, replacing each ASCII character that is not in // the set specified by the 128-bit bitmask and each non-ASCII character // below 0xA0 by an escape sequence of % followed by two hex digits.  If // % is not in the set but ignoreEscaped is true, then % will not be encoded // iff it already begins a valid escape sequence.
// Tests whether an escape occurs in the given string, starting at index i. // An escape sequence is a % followed by two hex digits.
// Multiple jet directives.
// There's no reason they aren't equal, so they are. //
// If the set states are the same, and the values of the feature are the structurally equal, they are equal. //
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable
//perhaps not really necessary...
// todo : what else to do here?
//TODO: disable batch loading if lockMode > READ?
//TODO: to handle concurrent writes correctly, the client should pass in a Lock
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*
//note there is a wierd implementation in the client side
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.
// Do we need to drop constraints before dropping tables in this dialect?
"/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"
// Does this dialect support check constraints?
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start
// Does this dialect support the UNIQUE column syntax?
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:
// Does this dialect support the FOR UPDATE syntax?
// todo : what is the implication of this?
// todo : YUCK!!!
// todo : again, how *should* this work for non-pojo entities?
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?
//TODO: really bad, evil hack to fix!!!
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?
//TODO: better to degrade to lazy="false" if uninstrumented
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?
//Icky workaround for MySQL bug:
// we have to set up the table later!! yuck
//TODO: Somehow add the newly created foreign keys to the internal collection
// This inner class implements a case statement....perhaps im being a bit over-clever here
//TODO: merge into one method!
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()
// TODO: what type?
//TODO: inefficient
//FIXME: get the PersistentClass
// todo : we can remove this once the deprecated ctor can be made private...
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here
//TODO: redesign how PropertyAccessors are acquired...
// TODO : not so sure this is needed...
//create an index on the key columns??
"/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a			 * slightly higer level in the stack (to get all the information we need)			 * Right now HbmBinder does not support the			 */"
//TODO: improve this hack!
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).
//use of trim() here is ugly?
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()
// can happen because of the multiple ways Cache.remove() // can be invoked :(
//ick!
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load
//TODO: should this be Session.instantiate(Persister, ...)?
//TODO: suck this into initLaziness!
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).
//TODO: is this right??
//ie. the subquery! yuck!
//use of a stringbuffer to workaround a JDK bug
//TODO: copy/paste from recreate()
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL
// todo : this eventually needs to be removed
// todo : remove
//just to help out during the load (ugly, i know)
// hack/workaround as sqlquery impl depend on having a key.
//TODO: handle the case of a foreign key to something other than the pk
//TODO: assumes all collections disassemble to an array!
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).
//TODO: deprecated, remove eventually
//TODO possibly relax that
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)
//use a degenerated strategy for backward compatibility
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.
// get the right object from the list ... would it be easier to just call getEntity() ??
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)
//TODO: this dependency is kinda Bad
//TODO: get SQL rendering out of this package!
// why does this matter?
// important, to account for newly saved entities in query // todo : some kind of check for new status...
//TODO: can we *always* use the "null property" approach for everything?
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...
// sql-server, at least needed this dropped after use; strange!
// is it necessary to register %exact since it can only appear in a where clause?
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays
// Does this dialect support the ALTER TABLE syntax?
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy
//TODO: reenable if we also fix the above todo
// orphans should not be deleted during copy??
// orphans should not be deleted during merge??
//TODO: suck this logic into the collection!
// todo : we can actually just determine this from the incoming EntityEntry-s
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't
// this class has no proxies (so do a shortcut)
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)
// todo : need map? the prob is a proper key, right?
//TODO: better to pass the id in as an argument?
//do we even really need this? the update will fail anyway....
//TODO: would it be better to do a refresh from db?
"/**	 * This form used from annotations (?).  Essentially the same as the above using a	 * resultset-mapping reference, but without cacheMode, readOnly, and comment.	 *	 * FIXME: annotations do not use it, so it can be remove from my POV	 * @deprecated	 *	 *	 * @param query The sql query string	 * @param resultSetRef The result-set-mapping name	 * @param querySpaces Any specified query spaces (used for auto-flushing)	 * @param cacheable Whether the query results are cacheable	 * @param cacheRegion If cacheable, the region into which to store the results	 * @param timeout A JDBC-level timeout to be applied	 * @param fetchSize A JDBC-level fetch-size to be applied	 * @param flushMode The flush mode to use for this query	 * @param parameterTypes parameter type map	 * @param callable Does the query string represent a callable object (i.e., proc)	 */"
//TODO: ugly here:
//TODO: not quite sure about the full implications of this!
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...
// todo : should we check the current isolation mode explicitly?
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?
"/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */"
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!
// TODO : better way?!?
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...
//TODO:this is only needed during compilation .. can we eliminate the instvar?
// TODO : absolutely no usages of this constructor form; can it go away?
//TODO: is this a bit ugly?
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate
// TODO : remove these last two as batcher is no longer managing connections
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...
// implicit joins are always(?) ok to reuse
//TODO: used to be exprNoParens! was this needed?
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.
// we do not know either type //BLIND GUESS!
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)
// short-circuit for performance...
// not absolutely necessary, but does help with aggressive release
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop
//yuck!
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...
//TODO: make this a bit nicer
// yuck!
// todo : potentially look at optimizing these two arrays
//note that i parameter is now unused (delete it?)
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur
//TODO: optimize this better!
//TODO: should we allow suffixes on these ?
//TODO: is this really necessary????
// TODO : not sure the best way to handle this. // The non-performant way :
//TODO: is there a better way?
//The class is now way to complex!
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...
//name from a super query (a bit inelegant that it shows up here)
//real hacky... // used to count the nesting of parentheses
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)
// FIXME Hacky workaround to JBCACHE-1202
//TODO: COPY/PASTE FROM SessionImpl, pull up!
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...
//Must be done here because of side-effect! yuck...
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?
//work around a bug in all known connection pools....
//TODO: reuse the PreLoadEvent
// Need a better way to define the suffixes here...
//workaround for WebLogic
//TODO: temporary
// TODO : YUCK!!!  fix after HHH-1907 is complete
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be
//This is not very nice (and quite slow):
//TODO: get SQL rendering out of here
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?
// worrying about proxies is perhaps a little bit of overkill here...
// todo : throw exception?  maybe warn if not the same?
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?
// TODO: copy/paste from ManyToOneType
//TODO: code duplication with SingleTableEntityPersister
// todo : throw exception?
//should this interface extend PropertyMapping?
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:
//TODO: implement caching?! proxies?!
// is this really necessary?
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call
//TODO: this is a bit arbitrary, expose a switch to the user?
"/**	 * @return collection removal	 * FIXME: even if isInverse=""true""?	 */"
// TODO: Fix this so it will work for non-POJO entity mode
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:
//TODO: would be nice to handle proxy classes elegantly!
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?
//TODO: is there a more elegant way than downcasting?
//TODO: remove use of instanceof!
//TODO: perhaps this should be some other RuntimeException...
//Yuck:
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors
//TODO: design new lifecycle for ProxyFactory
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here
// TODO: Should this really return null?  If not, figure out something better to do here.
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...
// create an index on the key columns??
//is this ok?
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names
// perhaps this should be an exception since it is only ever used // in the above method?
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)
//this is kinda the best we can do...
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */
//TODO: this needn't exclude subclasses...
//TODO: we use two visitors here, inefficient!
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()
//I suppose?
"// TBD should this be varbinary($1)? //		registerColumnType(Types.VARBINARY,     ""binary($1)"");"
//shortcut
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective
// TODO : probably better to calculate these and pass them in, as it'll be more performant
// todo : should we additionally check the current isolation mode explicitly?
//TODO: simply remove this override //      if we fix the above todos
// todo : is there really any reason to kkeep trying if this fails once?
// TODO : not sure this is correct, could not find docs on how to do this.
//HSQL has no Blob/Clob support .... but just put these here for now!
"// merges don't cascade to uninitialized collections //			//TODO: perhaps this does need to cascade after all...."
// yick!  need this for proper serialization/deserialization handling...
//TODO: should orphans really be deleted during lock???
// todo : move to StringHelper?
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);
// TODO: It would be really, really nice to use this to also model components!
//TODO: move to .sql package!!
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)
// TODO : add this info to the translator and aggregate it here...
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases
//TODO: code duplication with JoinedSubclassEntityPersister
//TODO: refactor to .sql package
//TODO: *two* hashmap lookups here is one too many...
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface
// Do we need to qualify index names with the schema name?
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer
//TODO: inefficient if that cache is just going to ignore the updated state!
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()
//TODO:refactor + make this method private
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()
//kinda ugly, but needed for collections with a "." node mapping
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...
//TODO: move to .sql package, and refactor with similar things!
//TODO: I am not so sure about the exception handling in this bit!
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties
// append the SQL to return the generated identifier //TODO: suck into Insert
//This is really ugly, but necessary:
// todo : modify the class definition if not already transformed...
//TODO: should we use SELECT .. FOR UPDATE?
"/** Create an action that will evict collection and entity regions based on queryspaces (table names).	 *  TODO: cache the autodetected information and pass it in instead.	 **/"
//TODO: is this 100% correct?
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..
//TODO: move into collection type, so we can use polymorphism!
// TODO should we just collect these like with the collections above?
// todo : should really move this log statement to CollectionType, where this is used from...
//hum ... should we cascade anyway? throw an exception? fine like it is?
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.
//TODO: copy/paste from insertRows()
//TODO: suck into event class
//TODO: never reached, since getTypeName() actually throws an exception!
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider
// xmlforest requires a new kind of function constructor
// TODO Is this a valid operation on a timestamps cache?
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used
// TODO Why not use the timestamp in a DataVersion?
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)
// unhappy about this being public ... is there a better way?
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...
// TODO: Replace this with a more elegant solution.
// short cut check...
//TODO: to handle concurrent writes correctly, this should return a Lock to the client
// this is ugly here, but needed because its a subquery
// TODO : will need reference to session factory to fully complete HHH-1907
// inheritance cycle detection (paranoid check)
// TODO: encapsulate the protected instance variables!
//polymorphism comment above
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.
// TODO: handle TypeDefs
//TODO: get all properties, not just the fetched ones!
//TODO: native ids
// TODO: bindpropertyresults(alias, returnElem)
//TODO: handle property-ref
//TODO: validate existing of property with the chosen name. (secondpass )
//TODO: check that entry.getIdentifier().equals(requestedId)
// TODO: RESTRICT VIOLATION
//TODO: assertion only, could be optimized away
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"
// TODO: toLowerCase was not done before. Only used in Template.
//TODO: arithmetic expressions, multiple new Foo(...)
// TODO: not visible to the user!
//TODO: proxies!
//TODO: can we limit stored procedures ?!
//TODO: formulas ?
// TODO: better error message since we actually support composites if names are explicitly listed.
//TODO: use these in methods above
//TODO: cache the persister, this shows up in yourkit
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables
//TODO: create uk loaders for component properties
// TODO : still need to make CollectionPersisters EntityMode-aware
//TODO: terrible implementation!
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()
// TODO: check if key contains the owner ID
//TODO: cache this in an instvar
// TODO : temporary initial step towards HHH-1907
// todo : remove this once ComponentMetamodel is complete and merged
//TODO: add owner argument!!
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings
//TODO: unnecessary for databases with ANSI-style joins
//TODO: maybe call it getRowSelection() ?
//TODO: make this handle multiple collection roles!
//TODO: include the rowids!!!!
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here
// TODO : or should we return 'containsTableAlias'??
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...
//TODO: avoid this for non-new instances where mightBeDirty==false
//TODO: theoretically non-threadsafe...
// todo : look at optimizing these...
// todo : cache this sql...
"/**	 * TODO: Check if Mimer SQL cannot handle the way DB2 does	 */"
//TODO: if we are using identity columns, fetch the identifier
//TODO check there is no actual definition elemnents when a ref is defined
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )
//TODO: return new Lock(ts);
// TODO : why aren't these the same?
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!
//TODO mappings.getLogicalTableName(ownerTable)
//TODO: if lock.getTimestamp().equals(ts)
//TODO: always true for now, but not if we later decide to support elements() in the from clause
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:
// See if the user configured a multiplexer stack
//root entity comes *last*
//==elementType ??
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)
//identifier collections not supported for 1-to-many
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...
// update removed rows fks to null
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );
"//			buf.append( selectFragment( lhsAlias, """" ) )//ignore suffix for collection columns!"
// initialize the Set of queried identifier spaces (ie. tables)
//use suffix for the entity columns
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent
// the class hierarchy structure
// remove the current element from insertions. It will be added back later.
//private final String rootTableName;
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...
//INITIALIZATION:
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//not null ... (start with 1) is implicit
// continue loop
// return existing object or initialized proxy (unless deleted)
// the list of entity names that indicate the batch number
//disassembled state gets put in a new array (we write to cache by value!)
// Add these directly to the executions queue
// Execute the SQL:
//sort the updates by fk
// This could also just be true all the time...
// the mapping of entity names to their latest batch numbers.
//chop the last union (all)
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"
//TODO: check this....
// for deprecated saveOrUpdateCopy()
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class
//expressionTerminators.add(","); // deliberately excluded
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression
// Multi-param numeric dialect functions...
// Use theta style (for regression) // Move the node up, after the origin node.
// Multi-param date dialect functions...
// add the main query
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//add the restriction to the outer select
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22
// This assumes you will want to ignore any update counts 
//skip the FROM keyword in params
// Custom sql
// return a newly loaded object
// make it circular-reference safe
//Cope with special cases of AND, NOT, ()
// subclass closure properties
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!
// SUBCLASSES
//need to hydrate it.
//starts with 1, implicitly
// instantiate a new instance
// simple nullability constraint
//we need to upgrade the lock mode to the mode requested
"//	register the type of the out param - an Oracle specific type"
// look for a proxy
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
// evicts don't cascade to uninitialized collections
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
// might happen with a managed connection
// don't need subclass tables, because they can't appear in conditions
// not final-static to avoid possible classcast exceptions if using different oracle drivers.
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
//private List aliases = new ArrayList();
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
// register resolvers set via Environment property
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)
//update all the modified entries
// special case where we need to force incloude all subclass joins
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection
// binary %Stream // character %Stream
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);
// assumes that types are all of span 1
// hibernate impelemnts cast in Dialect.java
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list
//its the given optional object
//decide which ResultSet to get the property value from:
// properties of this class, including inherited properties
// otherwise assume the parent is the the criteria that created us
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
// we can go straight to the first required row
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)
//before adding to collection!
// discriminator column
// Code to handle subclasses of topClass
//NONE, because its the requested lock mode, not the actual! 
//private final Map propertyTableNumbersByName = new HashMap();
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap
// CLASS + TABLE
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.
// required to exception table // iconst_0 // i
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)
// checkcast // cast the bean into a raw bean
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)
// checkcast (case of primitive type) // invokevirtual (case of primitive type)
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).
/* | this | bean | args | i | raw bean | exception | */
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).
// new // BulkAccessorException
//"as" is not in KEYWORDS
// getfield // get field "$JAVASSIST_CALLBACK" defined already
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~
// dup
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel
// putfield // put field "$JAVASSIST_CALLBACK" defined already
// Configure the cache to use our TM
/* local variables | this | callback | */
// find the batch number associated with the current association, if any.
// invokeinterface
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}"
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// byte
// the column doesnt exist at all.
// note that %string is deprecated
//If the object is already loaded, return the loaded one
// create new lock that times out immediately
// convenience methods relating to operations across arrays of types...
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.
// DISCRIMINATOR
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.
// %upper is deprecated
// let this take precedence if defined, since it works for // assigned identifiers
//throw new UnsupportedOperationException("Can't write to a readonly object");
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed
// The syntax used to add a foreign key constraint to a table.
"//note: it is conceptually possible that a UserType could map null to //	  a non-null value, so the following is arguable:"
// note: interfaces is assumed to already contain HibernateProxy.class
// identifier-commalist
//assembled state gets put in a new array (we read from cache by value!)
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!
// disassemble named parameters
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction
// remove all collections for the entity from the session-level cache
// invokeinterface // callback.write*(..)
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// JOINS
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.
// classes mentioned in extends not available - so put it in queue
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//propertyTableNumbersByName.put( prop.getName(), join );
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally
//Access cached SQL
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//figure out which tables need to be fetched
"//	private final List persisters = new ArrayList();"
//figure out which columns are needed
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy
//figure out which formulas are needed
//get em on the second pass!
//render the SQL
// local cache, so we use synchronization
// SQL strings
"/*public static Object[] clone(Class elementClass, Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass, array.length );		System.arraycopy(array, 0, result, 0, array.length);		return result;	}*/"
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//if there is no resulting row, return null
// *load_1 // each type
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html
// The optional SQL string defined in the where attribute
//pass this as an argument only to avoid double looking
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...
// added this caching as I noticed that getType() is being called multiple times...
//information about lazy properties of this class
// If there are any scalars (non-entities) selected, render the select column aliases.
//information about all columns/formulas in class hierarchy
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ( (Column) discrim.getColumnIterator().next() ).setType(type);
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// dynamic filters attached to the class-level
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// assume we are in an auto-commit state
// CUSTOM SQL
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);
// model.getKey().setType( new Type( model.getIdentifier() ) );
// The syntax used to add a column to a table
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:
// Completely optional cascading drop clause.
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.
// PROPERTIES
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );
// IDENTIFIER
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods
// VERSION
//operations which cascade as far as the collection also cascade to collection elements
//WHERE STRING
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
// SUBCLASS PROPERTY CLOSURE
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.
//before add :-)
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization
// Handle any filters applied to the class level
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case
// only one-to-one is lazy fetched
// replicate does cascade to uninitialized collections
//note early exit here:
"/**	 * Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */"
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
//deliberately ignore return value!
//strip leading ", "
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.
//otherwise return the "hydrated" state (ie. associations are not resolved)
// The name of the SQL function that transforms a string to lowercase
//null owner ok??
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...
// automatically makes a column with the default name if none is specifed by XML
// just ignore
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...
// if the property mapping consists of all formulas,  // make it non-updateable
// the user specifically supplied insert="true", // which constitutes an illegal combo
// if the property mapping consists of all formulas,  // make it insertable
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)
//Custom SQL
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );
// return
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);
//bad cast
"/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/"
//property-refs for associations defined on a //component are not supported, so no need to slice
// we have an embedded composite identifier
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)
//stops flush being called multiple times if this method is recursively called
// Create a new FROM node for the referenced class.
// performance op to avoid the array search
// now get an existing proxy for each row element (if there is one)
// ORPHAN DELETE (used for programmer error detection)
// empty means no scoping
//Enable for HHH-440, which we don't like:
/*(LockMode) anything*/
//this.forceCacheRefresh = forceCacheRefresh;
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set
// an "embedded" component (composite ids and unique) // note that this does not handle nested components
// and perform the load
// ALIASES
// cache these since they are stateless // this one could even be static...
// a nested composite element
//Must occur after resolving identifiers!
// Get the persister for the _subclass_
// aliases for composite-id's
"//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery, //				processor.getAlias2Persister(), //				processor.getAlias2Return(), //				aliases, //				collAliases, //				collPersisters, //				suffixes, //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();"
// Fetch embedded identifiers propertynames from the "virtual" identifier component
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
// embedded composite ids ( alias.idname1, alias.idname2 )
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections
// TODO: skip formulas?
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// invokeinterface // invoke Enabled.getInterceptFieldCallback()
// hibernate seems to ignore this type...
//don't need filters for the static loaders
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock
//do two passes, for collection property-ref!
"/*public boolean dropTemporaryTableAfterUse() {		//we have to, because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/"
// select the correct row by either pk or rowid
"//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass, getterNames, setterNames, propTypes //			);"
//TODO: eventually, rowIdName[j]
//include the discriminator and class-level where, but not filters
//lazy = !join;
//not absolutely necessary, but helps for some //equals()/hashCode() implementations
// this is a property of the table, which we are updating
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)
// This should only be possible if the caches are constructor injected 
// transactions marked for rollback-only cause some TM impls to throw exceptions
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression
"// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance), we really cannot pro0perly define equality for // 		this transformer"
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property
// contained elements:
// for non-inverse one-to-many, with a not-null fk, add a backref!
//to stop the class from being unloaded
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).
// for objects that came in via update()
//use dialect default properties
// increment the version number (if necessary)
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default
//information about all properties in class hierarchy
"//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( ""Bytecode provider name : "" + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );"
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// we are using "all" or "dirty" property-based optimistic locking
// orphans should be deleted during save/update
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string
// do a check
"//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();"
"//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}"
//materialize associations (and initialize the object) later
"//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907"
//fetch="join" overrides default laziness //fetch="join" overrides default laziness
// drop them in reverse order in case db needs it done that way...
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)
"//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}"
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...
// it is or was referenced _somewhere_
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here
// the root of the incoming property path matched one // of the embedded composite identifier properties
// add normal properties
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// add the discriminator
// handles arrays and newly instantiated collections
// if either its role changed,
//noncritical, swallow and let the other propagate!
// we will need to create new entries
// this piece is needed for usage in select clause
// no-op. We don't own the cache so we shouldn't stop it.
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself
// Get the names of the columns used to link between the collection // owner and the collection elements.
//let's assume that there is only one lazy fetch group, for now!
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type
// don't even bother trying to read any further
// prepend value and type list with null for any positions before the wanted position.
//+ "_" + referencedColumnName not used for backward compatibility
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// this property belongs on the table and is to be inserted
// need to extract the component values and check for subtype replacements...
// add the primary key
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return
"//		registerColumnType( Types.BLOB, 16777215, ""mediumblob"" ); //		registerColumnType( Types.BLOB, 65535, ""blob"" );"
// delegate already handles PK columns
//ie. e.status==DELETED
// kept for backward compatibility until after the 3.1beta5 release of HA
// legacy behavior, apply the bridge...
//if an exception occurs during flush, user must call rollback()
// Turn off includeSubclasses on all FromElements.
// can't just return null here, since that would // cause an owning component to become null
// the object is transient or detached
// Now update only the tables with dirty properties (and the table with the version number)
// Render the SQL query
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );
// TODO : shouldnt inserts be Expectations.NONE?
//a proxy cannot be transient and it breaks ForeignKeys.isTransient
//don't bother trying to update, we know there is no row there yet
// This is the root level node. // Generate an explicit from clause at the root.
// CHECK
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).
//if all fields are null, we might need to delete existing row
//note: updates to joined tables can't be batched...
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// starting index
// object have been loaded with setReadOnly(true); HHH-2236
"/**	 * Build a ResultSetMappingDefinition given a containing element for the ""return-XXX"" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */"
"//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();"
// Write any appropriate versioning conditional parameters
//check if the detached object being merged is the parent
//Render the SQL query
// determine if the collection elements are entities...
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued
// Let return-propertys override whatever the persister has for aliases.
// We should use the _current_ object state (ie. after any updates that occurred during flush)
// might need to run a different filter entirely after the flush // because the collection role may have changed
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode
"//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)"
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead
/* COLUMN and TABLE should be renamed but it would break the public API */
// For many-to-many joins, use the tablename from the queryable collection for the default text.
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;
// For the case of dynamic-update="true", we need to generate the UPDATE SQL
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Default to collections sharing entity cache if there is one
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);
// don't need to check laziness (dirty checking algorithm handles that)
"/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect(), 				factory.getDefaultCatalog(), 				factory.getDefaultSchema() 		);*/"
// For the case of dynamic-update="false", or no snapshot, we use the static SQL
//abort the save (the object is already saved by a circular cascade)
// if not "get", then try "is"
// remove initial " and "
// Default to sharing the entity cache if there is one
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces
// For the case of dynamic-insert="true", we need to generate the INSERT SQL
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases
// For the case of dynamic-insert="false", use the static SQL
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins
//a shortcut if its location didn't change!
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// new collections that get found + wrapped // during flush shouldn't be ignored
// meant to handle dynamic instantiation queries...
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)
// Always add the collection's query spaces.
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.
// detached collections that get found + reattached // during flush shouldn't be ignored
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.
// we need to utilize dynamic delete statements
// otherwise, utilize the static delete statements
// intentionally empty
"/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/"
//final boolean forceCacheRefresh,
//just a performance opt!
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.
// used to set the type of the parent dot node
//all joins join to the pk of the driving table
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type
//notice that we skip the first table; it is the driving table!
// aliases named identifier ( alias.idname )
//skip the driving table
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//get 'em in the right order (not that it really matters)
//NOTE EARLY EXIT!
// trying via forName() first to be as close to DriverManager's semantics
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness
"//	private boolean showSql; //	private boolean formatSql;"
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
// try to make sure we don't wrap and already wrapped session
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.
//render the where and from parts
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.
// allow these to go through the the real session no matter what
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
//we *could* regerate this inside each called method!
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//now render the joins
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn
// create a new batch for this type. The batch number is the number of current batches.
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This will add the new from element to the origin.
//now render the select clause
// The keyword used to insert a row without specifying // any column values
//now tie it all together
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?
//insert/update/delete SQL
// The keyword used to specify a nullable column.
//select SQL
//overriden to avoid System.exit
//no need to check laziness, dirty checking handles that
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Fully resolve the map reference, create implicit joins.
// break the outer loop !!!
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);
// The basic implementation is to simply use the node's text
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using
//cascade to current collection elements
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//not really necessary, but good for consistency...
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used
// we can't cascade to non-embedded elements
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache
//a newly instantiated collection can't have orphans
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates
// check the version unsaved-value, if appropriate
// Create the SessionFactory from hibernate.cfg.xml
// handle orphaned entities!!
// check the id unsaved-value
"// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 		NOTE: decided to put this here rather than in the above loop as I was nervous about the performance //		of the loop-in-loop especially considering this is far more likely the 'edge case'"
// check to see if it is in the second-level cache
//Custom SQL (would be better if these were private)
// our column span is the number of columns in the PK
// For property references generate <tablealias>.<columnname> as <projectionalias>
// KEY
//force immediate execution of the insert
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Loaded entity instances, by EntityUniqueKey
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Identity map of EntityEntry instances, by the entity instance
// Write HTML footer
// Entity proxies, by EntityKey
// delete does cascade to uninitialized collections
// Snapshots of current database state for entities // that have *not* been loaded
// NativeSQL: collect key column and auto-aliases
// Identity map of array holder ArrayHolder instances, by the array instance
//cannot occur
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...
// try "get"
// pass control along to the rest of the processing chain
// Set of EntityKeys of deleted objects
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query
"/*protected void initPropertyPaths(			final String path,			final Type type,			final String[] columns,			final String[] formulaTemplates,			final Mapping factory)	throws MappingException {		//addFormulaPropertyPath(path, type, formulaTemplates);		initPropertyPaths(path, type, columns, formulaTemplates, factory);	}*/"
// Downgrade locks
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
// do nothing...
// Deserialize //-----------------------------------------------------------------------
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.
"//	public boolean isShowSqlEnabled() { //		return showSql; //	} // //	public boolean isFormatSqlEnabled() { //		return formatSql; //	}"
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set
/*(array==null) ? tempList.size() :*/
//sort the updates by pk
// should be safe to only ever expect EntityPersister references here
//optimize the hash size to eliminate a rehash.
//unwrap the object
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
// the entity associated with the current action.
// this page intentionally left blank :)
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance
//initialize + unwrap the object
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// do not do anything
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param
//return the proxied object
// else no collection element, but also no owner
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!
//overwrite old proxy
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries
// early exit...
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)
// or should it actually throw an exception?
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...
// The property is a component...
// the ids are fully resolved, so compare them with isDirty(), not isModified()
//cant instantiate
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);
//if it is a property of an embedded component, invoke on the "identifier"
// otherwise:
// starts with the name of a mapped class (new style)
//treat it just like a new collection
// skip finalize methods
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!
//do this work only at the very highest level of the load //don't let this method be called recursively
"//	public static JDBCException newJDBCException(String string, SQLException root, String sql) { //		string = string + "" ["" + sql + ']'; //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root, sql); //	} // //	public static JDBCException newJDBCException(String string, SQLException root) { //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root); //	}"
//note that each iteration of the loop may add new elements
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>
"/* This can never happen because this rule will always eliminate the child NOT.			case NOT:				return x.getFirstChild();			// (NOT (NOT x) ) => (x)*/"
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.
//no point doing this if NONE was requested
// while constructor is running
//there is probably a row there, so try to update //if no rows were updated, we will find out
// note: interface is assumed to already contain HibernateProxy.class
//do nothing to avoid a lazy property initialization
// interfaces // arguments
//Not called at runtime so doesn't matter if its slow :)
//TODO!
// Chop off the rest of the tree.
// Get the caller
// prefer re-generation of identity!
// Get the caller principals
// refresh doesn't cascade to uninitialized collections
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);
"/*public boolean isNonExistant(EntityKey key) {		return nonExistantEntityKeys.contains(key);	}*/"
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().
"/*public boolean isNonExistant(EntityUniqueKey key) {		return nonExistentEntityUniqueKeys.contains(key);	}*/"
//special case ... this is the leaf of the containment graph, even though not immutable
// iterate all the entities currently associated with the persistence context.
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed
// does this entity entry pertain to the entity persister in which we are interested (owner)?
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy
//check if the managed object is the parent
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.
// otherwise, the proxy was pruned during the serialization process
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast
// adds remove as a sort-of alias for delete...
//return lhsPersister.getSubclassPropertyColumnNames(property);
// saves / updates don't cascade to uninitialized collections
//EARLY EXIT
// create our own copy of the user-supplied tuplizer impl map
//if the identifier is quoted, remove the quotes
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)
//truncate the identifier to the max alias length, less the suffix length
//full joins are not supported.. yet!
"//		 You may still have other ResultSets or update counts left to process here //		 but you can't do it now or the ResultSet you just got will be closed"
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1
// properly handle property-ref-based associations
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy
// add another (inner) nested select // add the main query // close off the inner nested select
"//		origin.addDestination( destination ); // This was the cause of HHH-242 //		origin.setType( FROM_FRAGMENT );			// Set the parent node type so that the AST is properly formed. // The destination node will have all the FROM text. // The parent node is a collection join too (voodoo - see JoinProcessor)"
// then handle any user-defined entity modes...
// strip off any leading 'and' token
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
// if the condition is not already there...
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop
//dontSpace.add("'");
"//	public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {"
//for MySQL
// Detect discriminator values...
"/**	 * Set a custom entity resolver. This entity resolver must be	 * set before addXXX(misc) call.	 * Default value is {@link org.hibernate.util.DTDEntityResolver}	 *	 * @param entityResolver entity resolver to use	 */"
// Handle any filters applied to this collection
//handle a property-ref
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)
//HashMap columnsUnique = new HashMap();
//null caused some problems
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join
// cascade the refresh prior to refreshing this entity
//not sure if this would ever be null but wanted to be careful
//even on inverse="true"
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information
// register hibernate types for default use in scalar sqlquery type auto detection
// If true then execute db updates, otherwise just generate and display updates
// SQLFunction implementation
// we only release the connection
//we only check the version when _upgrading_ lock modes
// deprecated option...
// only carry on if the method has no parameters
//woops we got an instance of another class hierarchy branch
// COMPOSITE-ID
// Create an OuterJoinGenerator for this dialect.
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback
// we need to step through the rows one row at a time (slow)
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Create an DotNode AST for the path and resolve it.
//its already loaded so don't need to hydrate it
// orphans should be deleted during delete
// swallow it, and continue to roll back JTA transaction
"// here, we have two possibilities: // 		1) the property-name matches the explicitly identifier property name //		2) the property-name matches the implicit 'id' property name"
// so the transaction is already rolled back, by JTA spec
// we found a collection element in the result set
// this method is a noop if there is a Synchronization!
// register the standard dialect resolver
// why is all others non final ?
// even though we might find a pre-existing element by join path, we may not be able to reuse it...
// HELLA IMPORTANT OPTIMIZATION!!!
"/*return that.type.equals(type) && 			EqualsHelper.equals(that.value, value);*/"
//null child could occur for no from clause in a filter
// The 'from element' that the property is in.
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping
// WebSphere, however, is not a sane JEE/JTA container...
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.
// for sane JEE/JTA containers, the transaction itself functions as its identifier...
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...
//swallow, the transaction was finished
//will be ignored, using the existing Entry instead
// 60 seconds
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
// Don't hold a transactional lock for this 
// some collections are not lazy:
// Fix up the resident flag
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries
// Set the attributes of the property reference expression.
// the current batch number is the latest batch for this entity type.
//take a snapshot
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables
// Never evict this node
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by
// Create the join element under the from element.
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved
// Moved here from SelectClause [jsd]
// pre-determine and cache the hashcode
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)
// Make sure the root node for the region exists and  // has a DataVersion that never complains
"//			ps.close(); //just close it; do NOT try to return it to the pool! //NOTE: early exit!"
// map of EntityMode -> Tuplizer
//Now write the values of fields onto the prepared statement
// this is a virtual id property...
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)
//this one needed only for guessEntityMode()
"/* will check current level if some of them are not null		 * or sublevels if they exist		 */"
// Build the dynamic-map tuplizer...
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
// then dom4j tuplizer, if dom4j representation is available
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)
// do the work
// if its an uninitialized proxy it can't be transient
// We've been here before
//return the id, so we can use it to reset the proxy id //return result;
// return false here, as most databases do not properly support this construct...
// put the "standard" tuplizers into the tuplizer map first
// hit the database, after checking the session cache for a snapshot
// found a ctor, but it was not publicly accessible so try to request accessibility
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).
"//	private final SessionFactoryImplementor sessionFactory;"
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object
// cached for efficiency...
// sql server just returns automatically
"//		this.sessionFactory = sessionFactory;"
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//it was not embedded, so the argument is just an id
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance
//where fragment must be empty!
// or its key changed
"//					int parameterStart = getWalker().getNumberOfParametersInSetClause(); //					List allParams = getIdSelectParameterSpecifications(); //					Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();"
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// we will need to remove ye olde entries
// add the current fragment to the THETA_JOINS node
// force initialize!
// lock doesn't cascade to uninitialized collections
//return currentId;
//unquotedIdentifierColumnName = null;
//reset the id
//addInitializedCollection(collection, persister, id);
// CollectionPropertyMapping processes everything except 'index'.
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"
//reset the version
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.
// the default is to simply not lazy fetch properties for now...
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'
// else if it's elements changed
"//		 This assumes you will want to ignore any update counts "
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES
// now rebuild the insertions list. There is a batch for each entry in the name list.
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...
// session-start/post-flush persistent state
// allow the CollectionSnapshot to be serialized
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners
// Add the second join, the one that ends in the destination table.
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE
// Create SQL_TOKEN nodes for the columns.
// "current" means the reference that was found during flush() 
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...
// ignore this row of results! Note the early exit
// Add the new node to the map so that we don't create it twice.
"//		return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();"
//not final because proxy factory creation can fail
// Register the FromElement with the FROM clause, now that we have the names and aliases.
// superclass entity-name
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// cascade-save to collections AFTER the collection owner was saved
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...
// "loaded" means the reference that is consistent  // with the current database state
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized
//init the aliases, after initing the constructornode
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 
// Multi-param string dialect functions...
// during flush, we navigate the object graph to // collections and decide what to do with them
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// The 'from element' that represents the elements of the collection.
// legacy behavior (with no abstract attribute specified)
// Constructors are always considered scalar results.
// Get ready to start adding nodes.
//use the id column alias
// Collection Types:
// #3 - note that this is also true of "datetime - :param"...
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)
//note: this affects the return value!
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated
// Generate the inner join -- The elements need to be joined to the collection they are in.
// otherwise, perform a "deep equivalence" check...
// Need to account for allowable '_' within the variant
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.
// If there is no WHERE node, make one.
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch
// Add the type to the list of returned sqlResultTypes.
// create one
// persists don't cascade to uninitialized collections
//lobs cannot be compared
//Blobs are ignored by merge()
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.
//value is the entity name
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
//optimization
// the map of batch numbers to EntityInsertAction lists
//optimization //optimization
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query
//re-snapshot
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...
// for convenience to save some lookups
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx
//NOTE: this is not updated when properties are fetched lazily!
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.
//EARLY EXIT!
"//	public List getCollectionAliases() { //		return collectionAliases; //	} // //	/*public List getCollectionOwners() { //		return collectionOwners; //	}*/ // //	public List getCollectionOwnerAliases() { //		return collectionOwnerAliases; //	} // //	public List getCollectionPersisters() { //		return collectionPersisters; //	} // //	public Map getAlias2Persister() { //		return alias2Persister; //	} // //	/*public boolean isCollectionInitializer() { //		return isCollectionInitializer; //	}*/ // ////	public List getPersisters() { ////		return persisters; ////	} // //	public Map getAlias2OwnerAlias() { //		return alias2OwnerAlias; //	} // //	public List getScalarTypes() { //		return scalarTypes; //	} //	public List getScalarColumnAliases() { //		return scalarColumnAliases; //	} // //	public List getPropertyResults() { //		return propertyResults; //	} // //	public List getCollectionPropertyResults() { //		return collectionResults; //	} // // //	public Map getAlias2Return() { //		return alias2Return; //	}"
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();
//xml is the entity name
//named query parameter
//tolerates nulls
// check to see if our "propPath" actually // represents a property on the persister
// Add the token to the AST.
// Use the table fromElement and the property name to get the array of column names.
// Set up the cache factory
// we need to strip off the embedded parens so that sql-gen does not double these up
//memory optimization
/*sqlResultTypeList,*/
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).
// metaType is assumed to be single-column type
// End unit of work
// ROW ID
//MULTITABLES
"//			final List extendsQueue,"
// Make sure JBC doesn't look one up
// Get all the select expressions (that we just generated) and render the select.
// visit width-first, then depth
// If the uresolved property path isn't set yet, just use the property name.
// Look through the FromElement's children to find any collections of values that should be fetched...
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...
// collections of values
// copied from Session:
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.
// this should not happen since the DTD prevents it
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT
//check basic level one nullablilty
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.
//values is not null and is checkable, we'll look deeper
// Possibly handle :something parameters for the query ?
//for non null args, check for components and elements containing components
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:
//cache the hashcode
"/*public PropertyProjection project() {		return Projections.property(getPropertyName());	}*/"
//persistent collections may have components
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).
//test out the optimizer:
"//		registerColumnType( Types.VARCHAR, 16777215, ""mediumtext"" );"
// IDENT might be the name of a class.
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster
//TODO!!!
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
//arbitrary on clause ignored!!
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
// from javax.naming.Referenceable
// both are Timestamps
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!
// at least one is a plain old Date
//swallow it (the transaction _was_ successful or successfully rolled back)
//check for all components values in the collection
// after *all* persisters and named queries are registered
//do the test
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// If close() is called, guarantee unbind()
// or BYTE // or TEXT? // or MONEY
//noop
"//			        ( implied && DotNode.useThetaStyleImplicitJoins ) ) {"
// if the corresponding SQL value is NULL, the reader we got is NULL as well
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.
// Fetch Reader content up to the end - and put characters in a StringBuffer
// Return StringBuffer content as a large String
// The where clause was added to eliminate this statement from Brute Force Searches.
//or Types.LONGVARCHAR?
//TODO
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them
// for non-arrays, we don't need to know the element class //elementType.returnedClass();
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested
//different nullability rules for pk/fk
// if the types report logical equivalence, return true...
//cache this
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias
//only really need new array during semiresolve!
// classic translator does not support collection of ordinal // param metadata
//unwrap it
// an unfetched association can only point to // an entity that already exists in the db
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases
// let the interceptor inspect the instance to decide
"/*	 * The types represented in the SQL result set.	 *	 * @return The types represented in the SQL result set.	 */"
// let the persister inspect the instance to decide
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//TODO!!!!!!!
// Create a new FILTERS node as a parent of all filters
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.
// Establish the region root node with a non-locking data version
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;
//nothing to do
// we use the assumed value, if there is one, to avoid hitting // the database
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...
//int count = 0;
// putfield // new value of the field
//not really necessary, I guess...
//Clobs are ignored by merge() operation
//the first key found after the given key
// collections cannot be compared
//remember the uk value
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly
// collections don't dirty an unversioned parent entity
// return false;
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception
//NOTE: we avoid joining to the next table if the named property is just the foreign key value
// the key is the owning entity itself, so get the ID from the key
//checkForEnd = false;
//ignore subselect keywords
// copy elements into newly empty target collection
//end of array, start filling again from start
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection
//we ran out of keys to try
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...
//the first id found after the given id
//we ran out of ids to try
// get the elements back into the target making sure to handle dirty flag
// check if collection is currently being loaded
// check if it is already completely loaded, but unowned
// initialize this collection
// create a new collection wrapper, to be initialized later
// Some JDBC drivers erroneously return an empty array here for a null DB value :/
//cannot batch fetch by unique key (property-ref associations)
// we already know current is not null...
//the owner of the association is not the owner of the id
// ----------------------------------------------------------- Constructors
// ----------------------------------------------------- Instance Variables
// --------------------------------------------------------- Public Methods
// Compare the two maps for equality
// Simple tests that require no synchronization
//Sybase fail if we don't do that, sigh...
// stream closed in the finally
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
// try to "pretty print" it
// otherwise, just dump it
//its an interface so we can't really tell anything...
// use default behavior
//NOTE: early return
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere
// Clone //-----------------------------------------------------------------------
// Serialize //-----------------------------------------------------------------------
// warning: can cause a recursive calls! (proxy initialization)
/* static methods only - hide constructor */
/*&& !('_'==character)*/
// returnign null!
// includes last '.'
// +1 to include the following '.'
// first time we find match!
// entityNames may now include slashes for the representations //classname may be an inner class
// wrapped iterators
// index of current iterator in the wrapped iterators array
// the current iterator
// the last used iterator
//it was a boolean expression
// call this before any Iterator method to make sure that the current Iterator // is not exhausted
//doable if needed
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)
// peek ahead
// if we reach the end of the string w/o finding the // matching end, that is an exception
// there were no queued additions // and the role has a cache
// Print page
// and this is not a forced initialization during flush
// we have a placeholder, spin forward till we find the end
// make sure spinning forward did not put us past the end of the buffer...
// First, try to locate this resource through the current // context classloader.
// Next, try to locate this resource through this class's classloader
// Next, try to locate this resource through the system classloader
// Anywhere else we should look?
// would need an IdentitySet for this!
//Arrays.asList doesn't do primitive arrays
// aload_0
//faster?
//pass the entity-name, if not a collection-id
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement
// the name of a class
// Its the listener class name
//allow 9,8,7,6,5,4,3,2,1
// default to element set if no elements() specified
// look for the instance by uuid
// first, lets determine whether to apply cglib or javassist based instrumentation...
// Make sure we don't override previous set values
//entirely optional!!
// Its the listener instance (or better be)
//readResolveObject
//cfg.setProperty("hibernate.show_sql", "true");
// Defensive, convenience methods
// Make sure you log the exception, as it might be swallowed
// Begin unit of work
// Write HTML header
// Handle actions
// Start the session to be used for this request
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// make the session available to the session factory's "current context"
// remove session from "current context"
// Eager fetch the collection so we can use it detached
"/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode(""participants"", FetchMode.JOIN)                .add( Expression.eq(""id"", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */"
// End of first unit of work
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);
// Begin second unit of work
// Reattachment of aPerson
// The getEmailAddresses() might trigger a lazy load of the collection
// We need our tm, so get it now and avoid doing other work // if there is a problem
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// the cache of the actual plans...
// (AS is always optional, for consistency with SQL/OQL)
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction
// is a primitive type // invokespecial
// Start performing the updates
// array of primitive type // do nothing
// jdbc params are 1-based
// don't care...
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style
//important: reuse the same event instances for performance!
// don't care about other param types here, just those explicitly user-defined...
//handle <=, >=, !=, is not, not between, not in
// named parameter
// could be either an ordinal or JPA-positional parameter
// strip the " where "
// a peek ahead showed this as an JPA-positional parameter
// make sure this "name" is an integral
// at the very least cleanup the data :)
//60 seconds
//cannot be instantiated
// transfer an explicitly defined entity name // handle the lazy attribute
//keep the behavior consistent even for boundary usages
// perform the actual work
//do the failfast put outside the scope of the JTA txn
// get meta's from // <joined-subclass>
//ignore!
// parameters on the property mapping should // override parameters in the typedef
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute
// DYNAMIC INSERT
// so we "clock over" on the first invocation
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// finally handle the exception
// a "detached" collection that belonged to a different entity
"//	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { //		this.componentTuplizerFactory = componentTuplizerFactory; //	}"
//element //index -> id
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization
//saveOrUpdateCopy() is deprecated!
// Set it!
// collectionPersister should not be null, but we don't want to throw // an exception if it is null
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);
// a "detached" collection that originally belonged to the same entity
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list
"//		 You may still have other ResultSets or update counts left to process here  //		 but you can't do it now or the ResultSet you just got will be closed "
"// Note: For object <-> SQL datatype mappings see: //	 Configuration Manager | Advanced | SQL | System DDL Datatype Mappings // //	TBD	registerColumnType(Types.BINARY,        ""binary($1)""); // changed 08-11-2005, jsl"
// See if the second lookahed token can be an identifier.
// Case 2: The current token is after FROM and before '.'.
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type
// (EQ NULL b) => (IS_NULL b)
// Create nodes that track line and column number.
// Add NOT if it's negated.
// (EQ a NULL) => (IS_NULL a)
// The path AST should be a DotNode, and it should have been evaluated already.
//Force a substitution!
// if // if // Otherwise, handle the error normally.
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock
// now update the object .. has to be outside the main if block above (because of collections)
//Named Queries:
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed
//grab its state saved at deletion
// grab its current state
// this will throw an error if there's something wrong.
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)
//slice, to get the columns for this component //property
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!
// substitutes into values by side-effect
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object
// (NOT (EQ a b) ) => (NE a b)
// compare to cached state (ignoring collections unless versioned)
// if it was dirtied by a collection only
// check nullability but do not perform command execute // we'll use scheduled updates for that.
// This 'dot' expression now refers to the resulting from element.
// (NOT (LIKE a b) ) => (NOT_LIKE a b)
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value
// ie. we never have to null out a reference to // an uninitialized proxy
// (NOT (NOT_LIKE a b) ) => (LIKE a b)
//give the Interceptor a chance to modify property values
//now we might need to recalculate the dirtyProperties array
//use the current version
// object loaded by update()
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack
"// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	* currently, not yet used..."
// dirty check against the usual snapshot of the entity
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility
// wrap up any new collections directly referenced by the object // or its components
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...
// upgrade the lock if necessary: //lock(result, lockMode);
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush
// (NOT (NE a b) ) => (EQ a b)
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in
// Sub-insertions should occur before containing insertion so // Try to do the callback now
// (NOT (LE a b) ) => (GT a b)
// (NOT (GE a b) ) => (LT a b)
// (NOT (LT a b) ) => (GE a b)
//the entity is not associated with the session, so //try interceptor and unsaved-value
// ... and the expected token type was an identifier, then:
// igndore it...
// [jsd] The fix for HHH-558...
// If the token can tell us if it could be an identifier...
// we are now at a new tree level
// dirty check against the database snapshot, if possible/necessary
// the Interceptor handled the dirty checking
// Use the delegate.
// get meta's from <subclass>
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// get the id from the object
// do the put outside the scope of the JTA txn
//what is the version on the database?
/// HHH-2378
//will result in a SQL UPDATE:
//else do nothing (don't even reassociate object!)
// no existing row - do an insert
// --- Inner classes (moved here from sql-gen.g) ---
// reference type
// should be the first, but just to be safe...
//return a proxy if appropriate
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed
// ... and the token could be an identifer and the error is // a mismatched token error ...
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role
// return new uninitialized proxy
// this object was already loaded
// Entity was found in second-level cache...
// intializes result by side-effect
// NOTE : ( max - 1 ) because first is zero-based while max is not...
// A shallow query is ok (although technically there should be no fetching here...)
// Delegate to the QueryLoader...
// Remember the parameters for the compilation.
// -- Package local methods for the QueryLoader delegate --
// double
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );
// Use the token as an identifier.
//some statistics
//safe from concurrent modification because of how entryList() is implemented on IdentityMap
// Transform the tree.
// Parse the query string into an HQL AST.
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()
//only needed during compilation phase...
// Update the status of the object and if necessary, schedule an update
// Schedule updates to collections:
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations
//the database has changed now, so the subselect results need to be invalidated
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set
// PHASE 1 : Parse the HQL into an AST.
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity
//get a snapshot
"/*public final Currency getCurrency(int col) throws HibernateException {		return (Currency) get(col);	}*/"
// right represents a joins originating from left...
// If the query is already compiled, skip the compilation.
// remember that ordinal parameters numbers are 1-based!!!
// all clear
// Ignore the token class name parameter, and use a specific token class.
//this is a query and we are loading multiple instances of the same collection role
// EARLY EXIT!!!
// before any callbacks, etc, so subdeletions see that this deletion happened first
// Ensures that containing deletions happen before sub-deletions
// cascade-delete to collections BEFORE the collection owner is deleted
// cascade-delete to many-to-one AFTER the parent was deleted
// if it is an initialized proxy, let cascade // handle it later on
//assign the requested id to the proxy, *before* //reassociating the proxy
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()
//initialize properties of the event:
//return the id in the event object
//TRANSIENT or DELETED
// assume this is a newly instantiated transient object // which should be saved rather than updated
// this is a transient object with existing persistent state not loaded by the session
// check two "adjecent" nodes at the top of the from-clause tree
//cachedState,
//a "detached" collection!
// if the collection belonged to a different entity, // clean up the existing state of the collection
//log.debug( "calling onLoad()" );
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session
//ie. the entity came in from update()
//we need to check even if it was not initialized, because of delayed adds!
//NOTE: EARLY EXIT!
// if template is null we just write the function out as it appears in the hql statement
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// find any entities that are still transient after retry
// Initialize SQL nodes here.
// Check the persistence context for an entry relating to this // entity to be merged...
//DELETED
// Set the unresolved path in this node and the parent. // Set the text for the parent.
// 60 second lock timeout
"/*				 * Property prop = new Property(); prop.setName(""id"");				 * prop.setPropertyAccessorName(""embedded""); prop.setValue(id);				 * entity.setIdentifierProperty(prop);				 */"
//before cascade!
// continue...; we'll find out if it ends up not getting saved later
// cascade first, so that all unsaved objects get their // copy created before we actually copy
// check that entity id = requestedId
// Not a collection? // Return the entity property mapping.
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:
"//		origin.addDestination(destination); // Add the query spaces."
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.
"//explicit = true;	// This is an explict Select. //ArrayList sqlResultTypeList = new ArrayList();"
//sqlResultTypeList.add( type ); // Generate the select expression.
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...
// cascade first, so that all unsaved objects get their  // copy created before we actually copy
//copyValues works by reflection, so explicitly mark the entity instance dirty
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.
// no need to even collect this information if the persister is considered multi-table
// as soon as we encounter our first letter, return the substring // from that position
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object
//for arrays, replaceElements() may return a different reference, since //the array length might not match
// should not be able to reach last without maxPosition being set // unless there are no results
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch
// PERSISTER
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer
//maintain correct duplication if loaded in a cartesian product
"/*DataSource unpooled = DataSources.unpooledDataSource(				jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS)			);*/"
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array
// long
// Set the existing pool flag to true
// Validate that an alias name was provided to determine which pool to use
// We have created the pool ourselves, so shut it down
//the load() which takes an entity does not pass an entityName
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...
//it does not refer to an alias of a projection, //look for a property
// do nothing for persistent instances
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//assume true, since we don't really know, and it doesn't matter
// Show the modified AST.
// NOTE : firstRow is zero-based
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.
// Tell the dot node about the join type.
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//otherwise recreate the mapping between the collection and its key
// Create a parameter specification for the collection filter...
// Attach any mapping-defined "ORDER BY" fragments
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result
// Make sure that the persister is versioned
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful
// this function has a template -> redirect output and catch the arguments
// use the id assigned to the instance
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
// If the data type is not an association type, it could not have been in the FROM clause.
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators
//first look for a reference to a projection alias
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// If there are no collection fetches, then no further checks are needed
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.
// Make #@%$^#^&# sure no alias is applied to the table name
// switch
// Use the explicitly declared select expression; determine the // return types indicated by each select token
// select clauses for insert statements should alwasy be treated as shallow
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...
// Alias references and identifiers use the same node class.
// make a new one
// these are just two unrelated table references
// again, both should be FromElements
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.
// PHASE 3 : Generate the SQL.
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)
"//			paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );"
// we are already processing a dot-structure
// Should mean that no such property was found
// Initialize the error handling delegate.
// Was there an explicit select expression?
// Resolve everything up to this dot, but don't resolve the placeholders yet.
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)
// Just add a 'not' parent.
// First, save off the pertinent ids, as the return value
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)
// First, save off the pertinent ids, saving the number of pertinent ids for return
// Start performing the deletes
// Don't forget to resolve the argument! // Resolve the collection function now.
// otherwise, everything ok.
// Re-arrange the tree so that the collection function is the root and the lhs is the path.
//    protected RegionRootListener listener;
// inject the WHERE after the parent
// Never include subclasses for implied from elements.
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root
// Prepare the left hand side and get the data type.
// If this dot has already been resolved, stop now.
// The property is another class..
// Otherwise, this is a primitive type.
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
// For Timestamps, we default to a separate config
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse
// again, null != null here
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery
// we know only the lhs-hand type, so use that
// the referenced node text is the special 'id'
// only the identifier property field name can be a reference to the associated entity's PK...
// Append the new property name onto the unresolved path.
// Tell the destination fromElement to 'includeSubclasses'.
// If the lhs is a collection, use CollectionPropertyMapping
// Don't resolve the node again.
//lists, arrays //sets, maps, bags
// we have something like : "? [op] rhs"
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another
// Make sure we don't re-release the same cache
// We use a different delegate than the non-optimistic superclass default
// we have something like : "lhs [op] ?"
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );
//isSet = collection.isSet(); //isSorted = collection.isSorted();
// we know only the rhs-hand type, so use that
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit
// Double check the distributed cache
// Get an exclusive right to update JBC for this key from this node.
// one or the other needs to be a datetime for us to get into this method in the first place...
// Add the condition to the join sequence that qualifies the indexed element.
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)
// Now, set the text for this node.  It should be the element columns.
// Get the function return value type, based on the type of the first argument.
// This will call initialize(tok)!
// mutation depends on the types of nodes invloved...
// logic operators by definition resolve to booleans
// Generated select expressions are already resolved, nothing to do.
// The path may be a reference to an alias defined in the parent query.
// The HQL class alias refers to the class name.
// Associate the table alias with the element.
// try the parent FromClause...
// Make sure that all from elements registered with this FROM clause are actually in the AST.
// Invoke setScalarColumnText on each constructor argument.
// Collect the select expressions, skip the first child because it is the class name.
// return an empty Type array
// We ensure ASYNC semantics (JBCACHE-1175)
// if there is no order by, make one
// Initial load from JBC
// Find the WHERE; if there is no WHERE, find the FROM...
// Now, inject the newly built ORDER BY into the tree
// logic operators by definition resolve to boolean.
// Render the identifier select fragment using the table alias.
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).
// will still be issued when it used to be null
// Otherwise, use the property mapping.
// The standard comparator types are not Serializable but are singletons
// ignore!
// Generate implicit joins, only if necessary.
// If the property is a special collection property name, return a CollectionPropertyMapping.
// Collection of components.
// construct the cache
//ie. 60 seconds
// We need to seed the version value as part of this bulk insert
// make sure the lhs is "assignable"...
// false indicates to not generate parens around the assignment
// currently allowed...
// in non-select queries, the only time we should need to join is if we are in a subquery from clause
//return classAlias == null ? className : classAlias;
// This is an explicit FROM element.
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.
// Fetch can't be used with scroll() or iterate().
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.
// we need to wrtap the param in a cast()
// Since this is an explicit FROM element, it can't be implied in the FROM clause.
// Do nothing, eplicit from elements are *always* in the projection list.
// propertyName refers to something like collection.size...
// property name is a sub-path of a component...
// Notify the FROM element that it is being referenced by the select.
// DotNode uses null here...
// We represent a from-clause alias
// we are the RHS of the DOT representing a naked comp-prop-ref
// we represent a naked (simple) prop-ref
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...
// assume this ident's text does *not* refer to a property on the given persister
// just ignore it for now, it'll get resolved later...
// This is not actually a constant, but a reference to FROM element.
// these pieces are needed for usage in select clause
// assume we do *not* refer to a property on the given persister
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)
// set the Transaction Isolation if defined
// naked property-refs cannot be used with an aliased from element
// do *not* over-write the column text, as that has already been // "rendered" during resolve
// Look up class name using the first identifier in the path.
// toggle autoCommit to false if set
// Add to the query spaces.
// return the connection
// If the from element isn't in the same clause, create a new from element.
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join
// Get the configurator files (if available)
// A collection of entities...
// A collection of components...
// Default the Proxool alias setting
// A collection of scalar elements...
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted
// Don't include sub-classes for implied collection joins or subquery joins.
// Treat explict from elements in sub-queries properly.
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Append the stem to the proxool pool alias
// Configured using the JAXP Configurator
// Configured using the Properties File Configurator
// Remember Isolation level
// If the provider was leeching off an existing pool don't close it
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )
// the "root from-element" in correlated subqueries do need this piece
// Create the FROM element for the target (the elements of the collection).
// If the join is implied, then don't include sub-classes on the element.
// not really a many-to-one association *necessarily*
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.
//always overwrite nonversioned data
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.
//public Currency getCurrency(int col) throws HibernateException;
// Get the class name of the associated entity.
// default is POJO
// use setParameter for null values
//  origin, path, implied, columns, classAlias,
/*implied*/
// For implied many-to-many, just add the end join.
// Interceptor returned null, so do the dirtycheck ourself, if possible
// Note this!!
// Error message constants.
// the standard SQL function name is current_timestamp...
//scan for next non-whitespace token
// This causes the factory to instantiate the desired class.
//private Type[] sqlResultTypes;
//private CacheEntry cacheEntry;
"//		TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );"
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
"/*public Type[] getSqlResultTypes() {		return sqlResultTypes;	}*/"
//sqlResultTypeList.add( type );
// Always add the type to the return type list.
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).
// this entity defines proeprty generation, so process those generated // values...
// add the fetched entities
// just especially for the trivial collection filter
// need to look it up from the persistence-context
//sort first by role name
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//update last non-whitespace token, if necessary
//then by fk
"// nothing to do		"
/*ArrayList sqlResultTypeList,*/
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!
// remove initial ", "
// Generate the select expression.
// now update all changed or added rows fks
"//			boolean put = persister.getCache().insert(ck, cacheEntry);"
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.
// Generate the property select tokens.
// Get the function name node.
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...
// Method expressions in a SELECT should always be considered scalar.
// areturn // return the value of the field
//do nothing - we only need to notify the cache...
//sort first by entity name
// If this is 'elements' then create a new FROM element.
//then by id
// Not elements(x)
// Dialect function
// to be safe...
// Collection 'property function'
// If the constant is an IDENT, figure out what it means...
// no transformations took place, so handle it as we would a // non-instrumented class
// IDENT is a class alias in the FROM.
// Resolve to an identity column.
// see if the entry represents a class file
// Otherwise, it's a literal.
// the name of an entity class
//the class discriminator value
// Add a space before the display text.
// Find or create the WHERE clause
// child == parent.getFirstChild()
// set the name of bulk accessor.
// invokespecial
// aload_1 // load bean
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().
// checkcast // cast bean
// Put the FILTERS node before the HQL condition and theta joins
// astore_3 // store bean
// add the current fragment to the FILTERS node
// Create a new THETA_JOINS node as a parent of all filters
// aload_2 // args
// Put the THETA_JOINS node before the HQL condition, after the filters.
// First, try to get the persister using the given name directly.
// iconst_i // continue to aastore // growing stack is 1
// unable to locate it using this name
// If that didn't work, try using the 'import' name.
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)
// locate the registered function by the given name
// determine the type of the first argument...
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.
// Append the text of the current node.
// If the node has a first child, recurse into the first child.
// new
// If there is a second child (RHS), recurse into that child.
// aload_3 // load the raw bean
// invokevirtual
// aastore // args
// istore_3 // store i
// aload_1 // load the bean
/* current stack len = 0 */
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.
// this is used during SqlGenerator processing
// start region to handling exception (BulkAccessorException)
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.
/*&& StringHelper.isNotEmpty( frag )*/
// iinc 3, 1
// The FROM fragment will probably begin with ', '.  Remove this if it is present.
// aload 4 // load the raw bean
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p
// oracle sql-state code for deadlock
// aload_2 // load the args
// Otherwise, try to use the no-arg constructor
// iconst_i
// eat it and try next
// aaload
// checkcast
//default mode
// checkcast (case of reference type)
/* current stack len = 2 */
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible
// end region to handling exception (BulkAccessorException)
// register in exception table
// Private constructor - stops checkstyle from complaining.
//reset the dotcount (but not the path) //after reset!
//after reset!
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here
// dotcount>=2
/* local variables | target obj | each oldvalue | */
// astore 5 // store exception
// aload 5 // load exception
/* | this | bean | args | raw bean | */
// iload_3 // i
// Do the corresponding RHS
// invokespecial // BulkAccessorException.<init>
// athrow
// WARNING: classfile only
//if its "id"
//swallow
//or its the id property name
//join = q.createJoinFragment(useThetaStyleJoin);
/* local variable | this | */
//important!!
// an association
// aload_0 // load this
//allow index() function:
// aload_1 // load callback
// case of non-static field
// log a message about potential connection leaks
// getfield // get each field
// ifnonnull
// *return // each type
// *store_1 // each type
//many-to-many
// ldc // name of the field
//opening paren in new Foo ( ... )
//if we are inside a new Result(), but not inside a nested function
// invokeinterface // invoke Callback.read*() // each type
//special case
// the name of an SQL function
//this is basically a copy/paste of OrderByParser ... might be worth refactoring
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p
// return aliases not supported in classic translator!
//register collection role
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.
// The keyword used to specify an identity column, if identity column key generation is supported.
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows
//crossJoins.add(name);
//ie no select clause in HQL
// invokeinterface // enabled.getInterceptFieldCallback()
// ifnonnull (label1)
// we are the LHS of the DOT representing a naked comp-prop-ref
// *load_1
//ie. no select clause
// putfield
//there _was_ a select clause
// return ;
// ldc // field name
// getfield // old value of the field
// return the concrete type, or the underlying type if a concrete type // was not specified
// not array
// array of reference type
//q.addCollection(collectionName, collectionRole);
// boolean
// char
// short
// classic parser does not support bulk manipulation statements
// float
// This is called when it's time to fully resolve a path expression.
// can't cache this stuff either (per-invocation)
// This is the legacy behaviour for HQL queries...
// bad type
// not known!
// boolean, byte, char, int, short
//Need this, since join condition can appear inside parens!
//expressionOpeners.add(","); // deliberately excluded
//Mainly for OSCache
//decrement the lock
//recache the updated state
// noop
//null clientLock is remotely possible but will never happen in practice
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.
// disassemble positional parameters
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)
// this is called from SettingsFactory irregardless; trivial to simply disregard
// Do nothing; subclasses may override.
// TABLE
//Inside a BETWEEN ... AND ... expression
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean
//ie. a many-to-many
//Cope with [,]
//Cope with a continued path expression (ie. ].baz)
//Cope with a subselect
// use the id value of a newly instantiated instance as the unsaved-value
//Close extra brackets we opened
//take note when this is a boolean expression
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load
// no-op; CCS did not have such a concept
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.
//process a token, mapping OO path expressions to SQL expressions
//Open any extra brackets we might need.
//Cope with special cases of AND, NOT, )
// the next one up must also be
// Add any joins
// get meta's from <hibernate-mapping>
// get meta's from <class>
//path expression
// DB-OBJECTNAME
// just decrement the lock, don't recache // (we don't know which transaction won)
// MUTABLE
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!
// WHERE
// POLYMORPHISM
// properties that we have tried to load, and not found in the database
// the path expression continues after a ]
// careful with this!
// the path expression ends at the ]
// "finish off" the join
//NOTICE: no " or . since they are part of (compound) identifiers
//cannot instantiate
// start by looking for HQL keywords...
// inner joins can be abbreviated to 'join'
// 'outer' is optional and is ignored
// now anything that is not a HQL keyword
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions
// treat it as a classname
// treat it as a path expression
// starts with a path expression (new style)
//allow ODMG OQL style: from Person p, p.cars c
//handle quoted strings
// VERSION / TIMESTAMP
// Primary key constraint
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity
//ignore whitespace
//do replacements
//handle HQL2 collection syntax
// uuid.hex is deprecated
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//hilo params
//sql = query;
//for EJB3
// performance opt
//sql = update;
//hilo config
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");
//count++;
// go ahead and set the lazy here, since pojo.proxy can override it.
// DYNAMIC UPDATE
// IMPORT
// BATCH SIZE
// we need to dirty check collections, since they can cause an owner // version number increment
// SELECT BEFORE UPDATE
// OPTIMISTIC LOCK MODE
//first element of array is reserved for the actual instance we are loading!
// do nothing until we hit the rsult set containing the generated id
// Use the delegate, resolve identifiers as FROM element aliases.
// Loaded entity instances, by EntityKey
// if the given name is un-qualified we may neen to qualify it
// the default...
// cascade-save to many-to-one BEFORE the parent is saved
// properties
// joined subclasses
//even process null collections
//keep the existing version number in the case of replicate!
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );
// Identity map of CollectionEntry instances, by the collection wrapper
// TABLENAME
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// join.getKey().setType( new Type( lazz.getIdentifier() ) );
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
// prepare and execute the insert
// COLUMN(S)
// if everything went ok, commit the transaction and close the obtained // connection handle...
//fetch the generated id in a separate query
// we just hit the last position
// scroll ahead
// scroll backward
// column index
// we have not yet hit the last result...
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//column unique-key
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Caches
//Generators:
// cache region is defined by the root-class in the hierarchy...
//JNDI + Serialization:
//checking for named queries
//stats
// Check named HQL queries
//prevents this session from adding things to cache
//for a dynamic-class
//test this entity to see if we must query it
//NOTE EARLY EXIT
// for backward-compatability
// ignore this error for now
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization
// look for existing collection as part of the persistence context
// Make sure this is a defined parameter and check the incoming value type
// for each of the defined parameters, make sure its value // has been set
//we never need to apply locks to the SQL
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// select-range is terminated by declaration of "from"
// for an any
// insertable simply because that is the user did not specify // anything; just override it
// properties generated on update can never be updateable...
// updateable only because the user did not specify  // anything; just override it
// the user specifically supplied update="true", // which constitutes an illegal combo
// ROLENAME
// first, try to load it from the temp PC associated to this SS
// otherwise immediately materialize it
// no auto-flushing to support in stateless session
// FETCH STRATEGY
//after setting values to object, entityMode
// SORT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// unsorted, natural, comparator.class.name
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// set up second pass
// do not auto-flush while outside a transaction
// this is an internal error of some sort...
//do not return a proxy! //(this option indicates we are initializing a proxy)
// for an any // we will have to use reflection
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query
// not for internal use:
// otherwise, we only need to flush if there are in-memory changes // to the queried tables
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted
// decode row selection...
// basically just an adapted copy of find(CriteriaImpl)
// we need to writeObject() on this since interceptor is user defined
// the old-time stand-by...
// parameter bind values...
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy
// use old (HB 2.1) defaults if outer-join is specified
// we have a CGLIB enhanced entity
// we have a Javassist enhanced entity
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// should *not* need to grow beyond the size of the total number of columns in the rs
// should probably no-op commit/rollback here, at least in JTA scenarios
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// explicitly perform no checking...
// used from testsuite
// GENERATOR
// register synch; stats.connect()
// calls executeBatch()
//no big deal
// no big deal
// see explanation above...
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.
// EARLY EXIT!!!!
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ID UNSAVED-VALUE
// VERSION UNSAVED-VALUE
// not necessarily a *unique* property reference
// Bind the where
// refer to comment in StatefulPersistenceContext.addCollection()
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Note : success = false, because we don't know the outcome of the transaction
// Bind the order-by
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.
// Bind the filters
"// overriding inherited meta attribute. HBX-621 & HBX-793			"
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.
//SessionFactory name:
//JDBC and connection settings:
//Interrogate JDBC metadata
// user supplied JDBC connections
// Transaction settings:
//SQL Generation settings:
//Query parser settings:
// Second-level / query cache:
//SQL Exception converter:
//Statistics and logging:
//postInitialize() will be called after initialization
// cannot handle single quotes
//Schema export:
"// todo : for 4.0 //	private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); // this is the legacy logging 'category'..."
//if dotted and not load-collection nor return-join //regular property
// don't even bother trying to read further
"//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 //	private BytecodeProvider bytecodeProvider;"
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// generated properties can *never* be insertable...
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"//	public BytecodeProvider getBytecodeProvider() { //		return bytecodeProvider; //	} // //	void setBytecodeProvider(BytecodeProvider bytecodeProvider) { //		this.bytecodeProvider = bytecodeProvider; //	}"
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map
"//	protected List extendsQueue;"
"//		extendsQueue = new ArrayList();"
"//		componentTuplizerFactory = new ComponentTuplizerFactory();"
// if doc is null, then for whatever reason, the cached file cannot be used...
// position cursor to the last row
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading
// This method may be called many times!!
// force the proxy to resolve itself
// this is equivalent to the old behavior...
//if null, owner will be retrieved from session
"//			Iterator iterator = extendsQueue.iterator();"
"//		Iterator iter = extendsQueue.iterator();"
// found
//final String queryString, 
"//	private final List extendsQueue;"
//<String, String>
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227
//orphan delete not supported for EntityMode.DOM4J
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
//we can reuse it for each row
//can't reuse in this case
//needed for SOAP libraries, etc
// any earlier proxy takes precedence
// First we need to suspend any current JTA transaction and obtain // a JDBC connection
//if we only returned one entity, query by key is more efficient
// the element has been removed from the set
// the element has changed
//Careful: these methods do not initialize the collection.
//needed so that we remove this collection from the second-level cache
// override on some subclasses
//override on some subclasses
//do this bit after setting initialized to true or it will recurse
// create the collection holding the Orphans
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access
// iterate over the *old* list
/*(array==null) ? tempList.get(i) :*/
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)
//write(); -- doesn't
// this is the regression style determination which matches the logic of the classic translator
// handle empty collection
//handle empty collections
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)
// finally, what it's all about...
// here we do not bother with the discriminator.
// validate() instances of Validatable
//null version means the object is in the process of being loaded somewhere else in the ResultSet
//problematic for <key-many-to-one>!
//use the id passed in
// The property is a collection...
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!
//search for it //note that this code is incorrect for other than one-to-many
//a composite key
// if no batch, use "foo = ? and bar = ?"
//it must be a collection fetch
// needed later for many-to-many/filter application
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...
// belong to other persister // belong to other persister
// we found it
//we can use an inner join for the many-to-many
//disable a join back to this same association
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!
//alias may be null //EARLY EXIT
// if it is a compound path
// if its the root criteria, we are done
// otherwise, recurse
//the criteria instance
// the entity name
//not found in inner query , try the outer query
//it refers to an alias of a projection
//should never happen, i think
// Convert the string value into the proper type.
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us
// Otherwise, this is an ordinary value.
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")
// List OPERATIONS:
"//	private final String[] sqlAliases; //	private final String[] sqlAliasSuffixes;"
// this is only needed (afaict) for ResultTransformer processing...
// replace {....} with corresponding column aliases
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop
// apend everything up until the next encountered open brace
//pad with nulls from the current last element up to the new index
// it is a simple table alias {foo}
// passing through anything we do not know : to support jdbc escape sequences HB-898
// The current alias is referencing the collection to be eagerly fetched
// it is a property reference {foo.bar}
"//	private final List scalarTypes = new ArrayList(); //	private final List scalarColumnAliases = new ArrayList();"
// Now, process the returns
// already been processed...
// Make sure the owner alias is known...
"//		scalarColumnAliases.add( typeReturn.getColumnAlias() ); //		scalarTypes.add( typeReturn.getType() );"
// If this return's alias has not been processed yet, do so b4 further processing of this return
"//			collectionOwnerAliases.add( ownerAlias );"
// from Map
// from SortedMap
// cannot be instantiated
//inject the data
//default pool size 20
// if debug level is enabled, then log the password, otherwise mask it
// register a cleanup synch
// wrap the session in the transaction-protection proxy
// then bind it
// limit the methods available if no transaction is active
// allow these (deprecated) methods to pass through
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!
//private String propertyName;
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );
//" collection_ where " +
//unsupported
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"
// currently only the Hibernate-supplied DbTimestampType is supported here
//implicit polymorphism not supported (would need a union)
//pull off the last ", "
//always do an INSERT, and let it fail by constraint violation
//by default, natural-ids are "immutable" (constant)
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)
// astore 4 // store the raw bean
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...
// grrr... for differentiation of mysql storage engines
//String[] keyCols = collPersister.getKeyColumnNames();
// Oracle did add support for ANSI CASE statements in 9i
//refresh() does not pass an entityName
// Informix doesn't have a bit type
// (NOT (GT a b) ) => (LE a b)
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~
//pre H3.2 behavior: super.getReturnType(ct, m);
// finally use the sqltype if == on Hibernate types did not find a match.
//because numeric can be anything
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// standard sql92 functions (can be overridden by subclasses)
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// by default we report no support
//sqlResultTypes = selectClause.getSqlResultTypes();
// by default we report no support for NOWAIT lock semantics
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//by default
// This is now handled earlier in this method.
// -- Loader implementation --
// -- Loader overrides --
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)
// here assume SQLServer2005 using snapshot isolation, which does not have this problem
// --- Query translator methods ---
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time
//" cascade";
// -- Implementation private methods --
//trim off the length/precision/scale
// CHECK VIOLATION
// UNIQUE VIOLATION
// FOREIGN KEY VIOLATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user
// to support dialects that have their own identity data type
// NOT NULL VIOLATION
// ALL OTHER
// Register the type of the out param - PostgreSQL uses Types.OTHER
// seems to have spotty LOB suppport
// HHH-2300
// ignore (probably H2 not in the classpath)
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//used also for generation of FK names!
//usually useless
//do not add unique constraint on DB not supporting unique and nullable columns
//for backward compatibility, disable this:
//may be final //may be final //may be final
//may be final
// may be final
// Custom SQL
//Primary key constraint
// ignore it...
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// not null is implicit
// Display the dialect version.
// nothing to do in a stateful session
// The RDMS concat() function only supports 2 parameters
//flat recursive algorithm
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Original Dialect.java returns " for update";
//pass the column name (a generated id almost always has a single column)
//needed to satisfy KeyValue
// Verify the state of this new method in Hibernate 3.0 Dialect.java
// Origial Dialect.java returns true;
// index should be last column listed
// *** Sequence methods - start. The RDMS dialect needs these
// methods to make it possible to use the Native Id generator
//if it is a formula index, use the element columns in the PK
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns
// *** Sequence methods - end
// Used with DROP TABLE to delete all records in the table.
// no foreign key element of for a one-to-many
//TODO: we could just return all false...
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
// the object is persistent
// RDMS supports the UNION ALL clause.
// Multi-param dialect functions...
// function templates
//not null is implicit
// this assumes schema support, which is present in 1.8.0 and later...
// HSQLDB only supports READ_UNCOMMITTED transaction isolation
//the entity is associated with the session, so check its status
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.
// new methods in dialect3
"/*public boolean supportsForUpdateNowait() {		return false;	}*/"
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...
// iterate entries ordered by capacity to find first fit
// add new ordered map
// expected type is intrinsic here...
//return memberPersister.getPropertyType(propertyName);
//return memberPersister.toColumns(alias, propertyName);
//return memberPersister.getType();
/*&& !indexIsFormula*/
"//		return !isOneToMany();"
//instanceof AssociationType;
// we need to determine the best way to know that two joinables // represent a single many-to-many...
//strip leading ','
//public boolean isSubselectLoadable();
//columns
//SQL statements
//extra information about the element type
//types
// custom sql
//private final String unquotedIdentifierColumnName;
"//		return ""select CURRENT_TIMESTAMP from RDB$DATABASE"";"
// dynamic filters specifically for many-to-many inside the collection
// dynamic filters for the collection
//registerColumnType data types
// IBID for current_time and current_date
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)
// Tell hibernate to use getBytes instead of getBinaryStream
// No batch statements
//ELEMENT
"/*		 * We might want a special case for 19,2. This is very common for money types		 * and here it is converted to 18,1		 */"
//no pointbase BIT
//no pointbase TINYINT
// NativeSQL: collect element column and auto-aliases
// INDEX AND ROW SELECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table
// NativeSQL: collect index column and auto-aliases
"//		registerColumnType( Types.CLOB, 16777215, ""mediumtext"" ); //		registerColumnType( Types.CLOB, 65535, ""text"" );"
"//		registerColumnType( Types.VARCHAR, 16777215, ""mediumtext"" ); //		registerColumnType( Types.VARCHAR, 65535, ""text"" );"
//GENERATE THE SQL:
//not all classpersisters implement PropertyMapping!
// Handle any filters applied to this collection for many-to-many
//if there is a user-specified loader, return that //TODO: filters!?
"// Take care of any entities that might have // been evicted!	"
// Run a subquery loader
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that
//Sybase BIT type does not support null values
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).
//needed by arrays
"//		 This assumes you will want to ignore any update counts"
//TODO: something with formulas...
//an assertion
// Remove all the old entries
//create all the new entries
//delete all the deleted entries
//insert all the new entries
"/*			Implement String += value;			According to the JLS, value may be anything.			In BeanShell, we'll disallow VOID (undefined) values.			(or should we map them to the empty string?)		*/"
/* this should be before dockables are initialized */
// is this right?
// should we do this for both cases above?
// need to loosen this to any throwable... do we need to handle // that in interpreter somewhere?  check first...
// fucking GTK look and feel
"/*		Note: this implementation is temporary. We currently keep a flat		namespace of the base name of classes.  i.e. BeanShell cannot be in the		process of defining two classes in different packages with the same		base name.  To remove this limitation requires that we work through		namespace imports in an analogous (or using the same path) as regular		class import resolution.  This workaround should handle most cases 		so we'll try it for now.	*/"
// copy and paste from bsh/classpath/ClassManagerImpl.java...
// I wish I could make this "friendly" to only NameSpace
// undocumented hack to allow browser actions to work. // XXX - clean up in 4.3
// Look for a default invoke() handler method in the namespace // Note: this code duplicates that in NameSpace getCommand() // is that ok?
// This should be per instance
// Can we use the proxy mechanism to cast a bsh.This to  // the correct interface?
// redundant with constructor
"/*		Issues to resolve here...		1) In which classloader should we define the class?		if there is a BshClassLoader should we define it there?		2) should we use reflection to set it in a non-bsh classloader		if there is one or should we always create a bsh classloader		(and expose its defineClass)?	*/"
// could refactor these a bit
"/*	Note: This class essentially just delegates most of its methods to its	parent.  The setVariable() indirection is very small.  We could probably	fold this functionality back into the base NameSpace as a special case.	But this has changed a few times so I'd like to leave this abstraction for	now.*/"
// simplified these settings a little...
"/*		Should check for strict java here and use isJavaAssignable() instead	*/"
// workaround for Swing rendering labels starting // with <html> using the HTML engine
// Look for a default invoke() handler method in the namespace // Note: this code duplicates that in This.java... should it? // Call on 'This' can never be a command
// this method is a nightmare
// ConsoleInterface // The interpreter reflexively implements the console interface that it  // uses.  Should clean this up by using an inner class to implement the // console for us.
// Case-insensitive fs workaround
"/*			Wrap nulls.			This is a bit of a cludge to address a deficiency in the class			generator whereby it does not wrap nulls on method delegate.  See			Class Generator.java.  If we fix that then we can remove this.			(just have to generate the code there.)		*/"
// switch eats a multi-level break here? // not empty statement
// Check for field on object  // Note: could eliminate throwing the exception somehow
// XXXX re-evaluate this // can getSuper work by itself now? // If we're a class instance and the parent is also a class instance // then super means our parent.
"/*		I wish protected access were limited to children and not also 		package scope... I want this to be a singleton implemented by various		children.  	*/"
// Imported full name wasn't found as an absolute class // If it is compound, try to resolve to an inner class.   // (maybe this should happen in the BshClassManager?)
"/*	Can't this be combined with run() ?	run seems to have stuff in it for interactive vs. non-interactive...	compare them side by side and see what they do differently, aside from the	exception handling.	*/"
// Null value is just a declaration // Note: we might want to keep any existing value here instead of reset
// Can this be factored out...?   // Should be be adding the L...; here instead?
"/* 							Catch the mismatch and continue to try the next							Note: this is innefficient, should have an 							isAssignableFrom() that doesn't throw 						*/"
// should use try/finally here to pop ns
"/*			Note: this could be made clearer by adding an inner class for the			cases and an object context for the child traversal.		*/"
// hack... sticking to first interpreter that resolves this // see comments on type instance variable
// Note: incorrect here - we are using the hack in bsh class // manager that allows lookup by base name.  We need to eliminate // this limitation by working through imports.  See notes in class // manager.
"/* 		This is the namespace in which the method is set.		It is a back-reference for the node, which needs to execute under this 		namespace.  It is not necessary to declare this transient, because 		we can only be saved as part of our namespace anyway... (currently).	*/"
// Replace this is Cocoa API calls later
// Scripting classes currently requires accessibility // This can be eliminated with a bit more work.
// This could be static
"/*	Thanks to Slava Pestov (of jEdit fame) for import caching enhancements.	Note: This class has gotten too big.  It should be broken down a bit.*/"
"/**    * Register an attribute declaration for later retrieval.    * Format:    * - String type    * - String default value    * - int value type    * *TODO: do something with attribute types.    */"
"/*				TODO:					to get cast and boxing working e.g.					e.g. Byte [] ia = { 1, 2 }					If the baseType is a wrapper type then we need to get the 					primitive TYPE class for the base type here in order for 					the cast to allow it... Then boxing will happen naturally in					the Array.set().					e.g. Integer [] ia = { 1, 2 }				*/"
"/*		Note: We will ll move this behavior out to a subclass of 		NameSpace, but we'll start here.	*/"
// This is a particularly nasty bit // of code, that checks for a parameter // entity reference but peeks ahead to // catch the '%' in parameter entity // declarations.
// Should cache this subject to classloader change message // Evaluation of the formal parameter simply resolves its // type via the specified namespace.. it doesn't modify the // namespace.
"/*	Notes:	It would not be hard to eliminate the use of org.objectweb.asm.Type from	this class, making the distribution a tiny bit smaller.*/"
// stupid: caret will automatically be incremented
/* Spacing workaround */
// I don't know of any other way to fix this, since invoking this // command from a menu results in the focus owner being the menu // until the menu goes away.
// a little hack for reverse replace and find
// Static methods that operate on compound ('.' separated) names // I guess we could move these to StringUtil someday
"/*	Note: which of these things should be checked at parse time vs. run time?*/"
// this part sucks
// Windows bug workaround in case a YES/NO confirm // was shown
// clear name resolvers... don't know if this is necessary.
"/* this is stupid and misleading.					 * but 'path' is not used anywhere except					 * the above line, and if this is done					 * after the 'continue', then we will					 * either hang, or be forced to duplicate					 * it inside the buffer == null, or add					 * a 'finally' clause. you decide which one's					 * worse. */"
// I'm too tired to think of a better way // to handle this right now.
// hacked BufferIORequest to send VFSUpdates in case // two stage save is off now...
// some other primitive // should avoid calling methods on primitive, as we do // in Name (can't treat primitive like an object message) // but the hole is useful right now.
// Change the parent (which was the class static) to the class instance // We really need to check if we're a static inner class here first... // but for some reason Java won't show the static modifier on our // fake inner classes...  could generate a flag field.
// this is where checked exceptions piss me off. this method only uses // a StringReader which can never throw an exception...
// If any subexpressions didn't terminate, they don't count // TODO check if this code ever gets hit
// Parse pattern into tokens.  Does anyone know if it's more efficient // to use char[] than a String.charAt()?  I'm assuming so.
"/*		Note: object is only used here for precondition... get rid of it?	*/"
// Why both of these?
// Cut off from parent, we must have our own class manager. // Can't do this in the run() command (needs to resolve stuff) // Should we do it by default when we create a namespace will no // parent of class manager?
"/*		Note: the bsh command code should probably not be here...  we need to		scope it by the namespace that imported the command... so it probably		needs to be integrated into NameSpace.	*/"
// This could be smarter...
// It was explicitly imported, but we don't know what it is. // should we throw an error here??
"/*		Note: we need a form of eval that passes the callstack through...	*/"
"/* 		Primary interpreter set and get variable methods		Note: These are squeltching errors... should they?	*/"
// Workaround for JDK bug 4071281, where system.in.available()  // returns too large a value. This bug has been fixed in JDK 1.2.
"/*				Somewhat of a hack.  If the special fields are visible (we're				operating relative to a 'this' type already) dissallow further				.this references to prevent user from skipping to things like				super.this.caller			*/"
// Should clean this up to a single return statement
"/*	Implementation notes:	Note: we may need some synchronization in here	Note on version dependency:  This base class is JDK 1.1 compatible,	however we are forced to use weak references in the full featured	implementation (the optional bsh.classpath package) to accomodate all of	the fleeting namespace listeners as they fall out of scope.  (NameSpaces	must be informed if the class space changes so that they can un-cache	names).  	<p>	Perhaps a simpler idea would be to have entities that reference cached	types always perform a light weight check with a counter / reference	value and use that to detect changes in the namespace.  This puts the 	burden on the consumer to check at appropriate times, but could eliminate	the need for the listener system in many places and the necessity of weak 	references in this package.	<p>*/"
"/*		Note: this impor pattern is becoming common... could factor it out into		an importedObject Vector class.	*/"
// not sure if we should really recurse here for explicitly imported // class in parent...  
// The following two boolean checks were tacked on. // This could probably be smoothed out.
"/*		Notes:		This is broken.  It finds public but less specific methods over		non-public but more specific ones.		findMostSpecficMethod() needs to be rewritten to eliminate 		findAccessibleMethod.  We should implement the findMostSpecificMethod 		that uses the publicOnly flag.  FindMostSpecificMethod should also		operate in two passes to give standard Java assignable matches priority		over extended bsh type matches.	*/"
//{{{ UnixWorkaround constructor
// drag and drop support // I'd just move the code to // JEditTextArea but it // depends on JDK 1.4 APIs
// next version: remove this
// compatibility kludge for jEdit 3.1 and earlier
// stupid scrollbar policy is an attempt to work around // bugs people have been seeing with IBM's JDK -- 7 Sep 2000
// this is a weird hack. // we don't want C+e a to insert 'a' in the // search bar if the search bar has focus...
// AHA! // this is probably the only way to fix this
// this is a dirty hack and it relies on the fact // that updates for parents are sent before updates // for the changed nodes themselves (if this was not // the case, the browser wouldn't be updated properly // on delete, etc). // // to avoid causing '> 1 request' errors, don't reload // directory if request already active
// we consume this to work around the bug // where A+TAB window switching activates // the menu bar on Windows.
"/* I guess translated events do not have the 'evt' field set		so consuming won't work. I don't think this is a problem as		nothing uses translation anyway */"
// this is a hack, and really needs to be done better.
// copy and paste from RESyntaxMatcher to make syntax package // independent of jEdit itself
// stupidity
// This doesn't seem very correct, but it fixes a problem // when setting the initial caret position for a buffer // (eg, from the recent file list)
// don't try this at home
"/* silly that we reference the vertical				   scroll bar here directly. we do this so				   that the horizontal scroll bar is flush				   with the vertical scroll bar */"
// XXX clean up this conditional
// Temporary hack to support inner classes  // If the obj is a non-static inner class then import the context... // This is not a sufficient emulation of inner classes. // Replace this later...
// workaround for Swing's annoying processing of // labels starting with <html>, which often breaks
// fucking GTK look and feel!
// hack so that 'select all' does not change current buffer
"/* if an occurence occurs at the		beginning of the selection, the		selection start will get moved.		this sucks, so we hack to avoid it. */"
"/* Silly bug workaround #8694. If you look at the above code,		 * note that we restore the saved caret position first, then		 * scroll to the saved location. However, the caret changing		 * can itself result in scrolling to a different location than		 * what was saved; and since moveCaretPosition() calls		 * updateBracketHighlight(), the bracket highlight's out of		 * bounds calculation will rely on a different set of physical		 * first/last lines than what we will end up with eventually.		 * Instead of confusing the user with status messages that		 * appear at random when switching buffers, we simply hide the		 * message altogether. */"
"/* this is a sloppy hack to fix bug				   ""[ 677902 ] hitting return after collapsed				   fold""				   the idea is that if we extend the range then				   the problem described in the bug happends, so				   if the insert is at the very end of the range				   we don't extend it, instead we push the				   insert into the next range, however for this				   to work properly we also have to mess with				   screen line counts. */"
// need this bullshit scroll bar policy for the preferred size // hack to work
// XXX if we keep the createClassManager in getClassManager then we can axe // this?
"/*	Note: This class is messy.  The method and field resolution need to be	rewritten.  Various methods in here catch NoSuchMethod or NoSuchField	exceptions during their searches.  These should be rewritten to avoid	having to catch the exceptions.  Method lookups are now cached at a high 	level so they are less important, however the logic is messy.*/"
// the sooner ppl move to the new api, the less we'll need // crap like this
// Nasty hardcoded values
/* XXX magic number */
/* Workaround for uncooperative Windows L&F */
// have to do this hack until VFSPath class is written
// stupid Swing
// none of the others are ever meant to be // removed. retarded, eh? this needs to be // fixed eventually, for plugins might // want to do weird stuff to jEdit's UI
// this is retarded. excuse me while I drool // and make stupid noises
// retarded GTK look and feel!
// should probably error
// there must be a better way of fixing this... // the problem is that this method can sometimes // be called as a result of a text area scroll // event, in which case the caret position has // not been updated yet.
// Perhaps here we would want to guard with // a property for parallel backups or not.
// this is such a bad way of doing it, but oh well...
// while this might be questionable, some // menus depend on properties
// Get available screens // O(n^3), this is nasty, but since we aren't dealling with // many items it should be fine
//{{{ Methods that really shouldn't be public...
//{{{ UnixWorkaround class
// Perhaps if Xerces wasn't slightly brain-damaged, we would // not need this
// moved to GUIUtilities as it makes no sense being here.
// Hack... need a more direct way of obtaining a view? // JEditTextArea.getView() method?
// REVIEW How do we resolve this discrepancy?!
// ugly workaround
//{{{ Windows work around
// hack since HelpViewer needs a URL...
// Why is object in the args?
// should implement getMinimumLength() -- any ideas?
// Move me to classpath/ClassManagerImpl???
// they never taught you this in undergrad computer science
// (should we cache info in not a class case too?)
// wtf?
"/*	 *  XXX: hairy code that is basically just a functional(?) port of some	 *  other code i barely understood	 */"
"/*			First try for an accessible version of the exact match.			This first lookup seems redundant with below, but is apparently			needed.  This whole thing is messy.		*/"
// work around for broken FTP plugin!
// hack to move the spaces to the front
// This feels sloppy, especially for non-U.S. locales.
// hack to get fixed length 'length' field
// // We have to deal with assembly!!! // The programmer can be writing little 32 byte chunks for all // we know, and we must assemble complete records for writing. // REVIEW Maybe this should be in TarBuffer? Could that help to //        eliminate some of the buffer copying. //
// Hack done to fix bringing the window to the front. // At least on windows, Frame.toFront() doesn't cut it. // Remove the isWindows check if it's broken under other // OSes too.
"/*		This method should be rewritten to use getFields() and avoid catching		exceptions during the search.	*/"
// hack...
// This should probably be in Reflect.java
"/*		Notes: See notes on findMostSpecificMethod.		This method should be rolled into findMostSpecificMethod.	*/"
"/*		Note: is using SignatureKey in this way dangerous?  In the pathological		case a user could eat up memory caching every possible combination of		argument types to an untyped method.  Maybe we could be smarter about		it by ignoring the types of untyped parameter positions?  The method		resolver could return a set of ""hints"" for the signature key caching?		There is also the overhead of creating one of these for every method		dispatched.  What is the alternative?	*/"
// crusty workaround
"/* workaround for A+keys producing				 * garbage on Windows */"
"/* addToFavorites(), which is a static method		 * (for convinience) needs an instance of the		 * VFS to pass to VFSManager.sendVFSUpdate(),		 * hence this hack. */"
// Allow getThis() to work through BlockNameSpace to the method // namespace // XXX re-eval this... do we need it?
// these are used to eliminate code duplication. i don't normally use // the visitor or "template method" pattern, but this code was contributed // by Peter Cox and i don't feel like changing it around too much.
// fuck me dead
// stupid hack to handle referencing // a rule set that is defined later!
// JDK 1.4 workaround
// should the next two be public, maybe?
"/*		Note: this method and resolveExpectedJavaField should be rewritten		to invert this logic so that no exceptions need to be caught		unecessarily.  This is just a temporary impl.		@return the field or null if not found	*/"
"/*		Note: we need a singleton here so that things like 'this == this' work		(and probably a good idea for speed).		Caching a single instance here seems technically incorrect,		considering the declaringInterpreter could be different under some		circumstances.  (Case: a child interpreter running a source() / eval() 		command ).  However the effect is just that the main interpreter that		executes your script should be the one involved in call-backs from Java.		I do not know if there are corner cases where a child interpreter would		be the first to use a This reference in a namespace or if that would		even cause any problems if it did...  We could do some experiments		to find out... and if necessary we could cache on a per interpreter		basis if we had weak references...  We might also look at skipping 		over child interpreters and going to the parent for the declaring 		interpreter, so we'd be sure to get the top interpreter.	*/"
"/* 			Resolve relative to a class type			static field, inner class, ?		*/"
// some regexps (eg ^ by itself) have a length == 0, so we // implement this hack. if you don't understand what's going on // here, then go back to watching MTV
// Optimization - If classOfStaticMethod is set then we have already  // been here and determined that this is a static method invocation. // Note: maybe factor this out with path below... clean up.
// this will probably not get used // Object type
// Windows JDK workaround
// this listener priority thing is a bad hack...
"/* This doesn't look pretty and mode line should			 * probably be split up into seperate			 * components/strings			 */"
"/* this is stupid and misleading.				 * but 'path' is not used anywhere except				 * the above line, and if this is done				 * after the 'continue', then we will				 * either hang, or be forced to duplicate				 * it inside the buffer == null, or add				 * a 'finally' clause. you decide which one's				 * worse. */"
"/* workaround for hang if match was					 * zero-width. not sure if there is					 * a better way to handle this */"
"/* On Windows, paths of the form X: list the last *working		 * directory* on that drive. To list the root of the drive,		 * you must use X:\.		 *		 * However, the VFS browser and friends strip off trailing		 * path separators, for various reasons. So to work around		 * that, we add a '\' to drive letter paths on Windows.		 */"
// On Unix, set permissions of port file to rw-------, // so that on broken Unices which give everyone read // access to user home dirs, people can't see your // port file (and hence send arbitriary BeanShell code // your way. Nasty.)
// ??? this should only be called with // fully loaded action set
// broken Eclipse workaround! // 24 Febuary 2004
"/*		Notes:		This is broken.  It finds public but less specific methods over		non-public but more specific ones.		This method needs to be rewritten to eliminate findAccessibleMethod.		We should implement the findMostSpecificMethod that uses the publicOnly		flag.  FindMostSpecificMethod should also operate in two passes to give		standard Java assignable matches priority over extended bsh type		matches.	*/"
// XXX: This should not be hardcoded
// INTERVAL OPERATOR: //  {x} | {x,} | {x,y}  (RE_INTERVALS && RE_NO_BK_BRACES) //  \{x\} | \{x,\} | \{x,y\} (RE_INTERVALS && !RE_NO_BK_BRACES) // // OPEN QUESTION:  //  what is proper interpretation of '{' at start of string?
// XXX: does this really belong here?
// We do need to save every possible point, but the number of clone() // invocations here is really a killer for performance on non-stingy // repeat operators.  I'm open to suggestions...
"/*		Note: this should really just throw NoSuchFieldException... need		to change related signatures and code.	*/"
// Split the methods into constructors and regular method lists
// need to add static block here
"/** * An output stream that compresses into the BZip2 format (without the file * header chars) into another stream. TODO: Update to BZip2 1.0.1 * * @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a> */"
"/**    * Parse the XML declaration.    * <pre>    * [25] XMLDecl ::= '&lt;?xml' VersionInfo EncodingDecl? SDDecl? S? '?&gt;'    * [26] VersionInfo ::= S 'version' Eq ('""1.0""' | ""'1.0'"")    * [33] SDDecl ::= S 'standalone' Eq ""'"" ('yes' | 'no') ""'""    *               | S 'standalone' Eq '""' (""yes"" | ""no"") '""'    * [78] EncodingDecl ::= S 'encoding' Eq QEncoding    * </pre>    * <p>([80] to [82] are also significant.)    * <p>(The <code>&lt;?xml</code> and whitespace have already been read.)    * <p>TODO: validate value of standalone.    * @see #parseTextDecl    * @see #checkEncoding    */"
// implement the recursion for getClassImpl()
// Need some format checking here
// Need to calculate this... just fudging here for now.
// TODO: Also check REG_ANCHORINDEX vs. anchor
// skip header bytes // maybe should check if they're valid or not?
"/*		Debug utils are static so that they are reachable by code that doesn't		necessarily have an interpreter reference (e.g. tracing in utils).		In the future we may want to allow debug/trace to be turned on on		a per interpreter basis, in which case we'll need to use the parent 		reference in some way to determine the scope of the command that 		turns it on or off.	*/"
"/**    * Parse an element-content model.    * [42] elements ::= (choice | seq) ('?' | '*' | '+')?    * [44] cps ::= S? %cp S?    * [45] choice ::= '(' S? %ctokplus (S? '|' S? %ctoks)* S? ')'    * [46] ctokplus ::= cps ('|' cps)+    * [47] ctoks ::= cps ('|' cps)*    * [48] seq ::= '(' S? %stoks (S? ',' S? %stoks)* S? ')'    * [49] stoks ::= cps (',' cps)*    * *NOTE: the opening '(' and S have already been read.    * *TODO: go over parameter entity boundaries more carefully.    */"
// this convention may change...
"/**    * Parse the attribute type.    * [54] AttType ::= StringType | TokenizedType | EnumeratedType    * [55] StringType ::= 'CDATA'    * [56] TokenizedType ::= 'ID' | 'IDREF' | 'IDREFS' | 'ENTITY' | 'ENTITIES' |    *                        'NMTOKEN' | 'NMTOKENS'    * [57] EnumeratedType ::= NotationType | Enumeration    * *TODO: validate the type!!    */"
//{{{ PluginManagerProgress constructor
//{{{ getRate() method
//{{{ writeMarkers() method
//{{{ Instance variables
//{{{ Private members
//{{{ addNotify() method
//{{{ foldLevelChanged() method
// this will result in a slight speed up, since we // don't need to read the DTD anyway, as AElfred is // non-validating
//{{{ startElement() method
//{{{ createTOC() method
//{{{ SelectionHandler class
// ensures that active view is saved last, // ie created last on next load, ie in front // on next load
//{{{ MemoryStatus class
//{{{ writeStringArray() method
//{{{ nextTip() method
/* Create the buttons */
//{{{ contentRemoved() method
//{{{ InstallButton class
//{{{ undo() method
// We can't do the backward scan if start == 0
// Create a new hashtable if necessary.
//{{{ getName() method
//{{{ LineElement constructor
//{{{ _save() method
"/*			Try super import if available			Note: we do this last to allow explicitly imported classes			and packages to take priority.  This method will also throw an			error indicating ambiguity if it exists...		*/"
//{{{ clear() method
/* --- Begin static members --- */
/*@bgen(jjtree) ReturnStatement */
/*arbitrary flag*/
// Leave buffer in a consistent state if // an error occurs
// the code above builds a 1-indexed suffix array, // but we shift it to be 0-indexed, ignoring the // original 0-th element
//{{{ _addKeyBinding() method
//{{{ load() method
// Setting a typed variable is always a local operation.
//{{{ bufferOpened() method
//{{{ _contentInserted() method
//{{{ isExpanded() method
//{{{ loadToolButton() method
//{{{ setLineEndOffset() method
// return type is a class
"/*     * index in zptr[] of original string after sorting.     */"
//{{{ updateModel() method
// used for the stringReplace and beanShell replace radio buttons, // so that the user can press tab to go from the find field to the // replace field in one go
//{{{ hashCode() method
// file begins with UTF-8-Y signature. // discard the signature, and read // the remainder as UTF-8.
//{{{ getFirstInvalidLineContext() method
// Use CONTENT_UNDECLARED to avoid overwriting // existing element declaration.
//{{{ invalidateScreenLineCounts() method
// Don't overstrike if we're on the end of // the line
//{{{ HideLibrariesButton class
//{{{ registerFoldHandler() method
//{{{ getLastView() method
//{{{ KeywordMap constructor
// Change import precedence if we are a class body/instance
//{{{ getFoldHandlers() method
//{{{ physDown() method // scroll down by physical line amount
// Default implementation... subclasses can extend this.
// null 'from' type corresponds to type of Primitive.NULL // assign to any object type
//{{{ unregisterFoldHandler() method
// statical import fields from the interface so that code inside // can refer to the fields directly (e.g. HEIGHT)
//{{{ setBounds() method
// Read the external identifiers.
//{{{ stop() method
// Point to return statement point if we had one. // (else it was implicit return? What's the case here?)
//{{{ getIcon() method
//{{{ DockingOptionPane constructor
//{{{ setExpansion() method
//{{{ createEditPane() method
//{{{ start() method
// repaint the gutter so that the border color // reflects the focus state
//{{{ invoke() method
//System.err.println("x overflow");
//{{{ Inner classes
/* Non word character selection behavior */
/*onlyStatic*/
"/*				Evaluate block in two passes: 				First do class declarations then do everything else.			*/"
//{{{ ActionHandler class
//{{{ AnimatedIcon constructor
// complete-word command needs a list of all non-alphanumeric // characters used in a keyword map.
// End constructors
/* Structure highlight */
/* --- End instance data --- */
// we're removing from // the first visible to after // the last visible
//{{{ Static initializer
// the vfs browser has what you might call // a design flaw, it doesn't update properly // unless the vfs update for a parent arrives // before any updates for the children. sorting // the list alphanumerically guarantees this.
//{{{ getExpansion() method
//{{{ StatusBarOptionPane constructor
//{{{ _createInputStream() method
// if 'temp' is true, hide search bar after user is done with it
"/* gutterBorderWidth = new JTextField(jEdit.getProperty(			""view.gutter.borderWidth""));		addComponent(jEdit.getProperty(""options.gutter.borderWidth""),			gutterBorderWidth); */"
//{{{ FoldHandler() constructor
// unwrap any primitives
// wrapper to primitive // Convert value to Primitive and check/cast it.
//{{{ getFoldModes() method
//{{{ invalidateSelectedLines() method
//{{{ ButtonLayout class
//{{{ StyleRenderer constructor
//{{{ getTableCellRendererComponent() method
/*onlystatic*/
//{{{ setValueAt() method
//{{{ ButtonCellRenderer class
//{{{ getAbbrevField() method
//{{{ foldHandlerChanged() method
//{{{ xToScreenLineOffset() method
//{{{ getField() method
//{{{ toggleOverwriteEnabled() method
//{{{ _runScript() method
//{{{ getSelection() method
// we expand those that are non-empty, and // remove those that are empty
// no field, try property acces
// Word boundary means input[index-1] was a word character // and input[index] is not, or input[index] is a word character // and input[index-1] was not //  In the string "one two three", these positions match: //  |o|n|e| |t|w|o| |t|h|r|e|e| //  ^     ^ ^     ^ ^         ^ // is current character a letter or digit? // is previous character a letter or digit?
// we need this public not protected
// start at 1 not 0 to skip Token.NULL
// not a field, try property access
// so an empty cd drive is not reported as a file
// redraw the whole table because a second shortcut // might have changed, too
// set the method parameters in the local namespace
// JEditTextArea.scrollTo() needs this to simplify // its code
// UNDONE When File lets us get the userName, use it!
//{{{ getBeforeCaretTextArea() method
// primitive to wrapper type
// how much an occurrence in the title is worth
//{{{ setRate() method
//{{{ getColumnName() method
//{{{ setIcon() method
//{{{ getCompletions() method
//{{{ updateEnabled() method
//{{{ ActionBar constructor
//{{{ ModeProperties class
//{{{ goToActionBar() method
// Bind to any port on localhost; accept 2 simultaneous // connection attempts before rejecting connections
//{{{ getFrames() method
//{{{ getCursor() method
// Only allow legal Java assignment unless we're a CAST operation
//{{{ complete() method
//{{{ removePosition() method
//{{{ CompletionPopup class
//{{{ getMenuName() method
//{{{ isHorizontalLayout() method
// alias
// because its preferred size can be quite wide, we // don't want it to make the browser way too big, // so set the preferred width to 0.
// Figure out what we're reading from.
//{{{ closeView() method
// only add the Plugins branch if there are OptionPanes
/* exit does editor event & save */
//{{{ getCode() method
// bsh.system
//{{{ EnhancedMenu constructor
//{{{ loadModeCatalog() method
"/*	Thanks to Sreenivasa Viswanadha for suggesting how to get rid of expensive	lookahead here.*/"
// if only one, clean, 'untitled' buffer is open, we // replace it
// if the caret is on a collapsed fold, collapse the // parent fold
// site properties are loaded as default properties, overwriting // jEdit's system properties
// maintain backwards compatibility
// this vfs has an extended attribute which is not // in the list. add it to the end with a ref count // of 1
//{{{ update() method
//{{{ Package-private members
// the first sub-fold. used by JEditTextArea.expandFold().
// copy of indexes // copy of sizes // instructions to be resized // future offset of a jump instruction
"/*				If equals() is not explicitly defined we must override the 				default implemented by the This object protocol for scripted				object.  To support XThis equals() must test for equality with 				the generated proxy object, not the scripted bsh This object;				otherwise callers from outside in Java will not see a the 				proxy object as equal to itself.			*/"
// set rename to false if > 1 file selected
//{{{ addCurrentToHistory() method
"/* EnhancedMenu has a reference to EditBusStub, but not the other	 * way around. So when the EnhancedMenu is being garbage collected	 * its finalize() method removes the EditBusStub from the edit bus. */"
//{{{ TipOfTheDay constructor
"/* FontRenderContext frc = new FontRenderContext(				null,false,false);			Rectangle2D bounds = getFont()				.getStringBounds(getTime(),frc);			Dimension dim = new Dimension((int)bounds.getWidth(),				(int)bounds.getHeight());			setPreferredSize(dim);			setMaximumSize(dim); */"
//{{{ ok() method
//{{{ getFoldLevel() method
// init the callstack.  
// bsh.cwd
// References may be allowed
//{{{ actionPerformed() method
// don't want it to show "0 bytes" for size, // etc.
// private members
// ends current block (with many new successors)
// evaluate finally block
/*BshClassManager*/
// Look for scripted class object
// applets can't see sys props
//{{{ goToPrevMarker() method
// bsh.interactive
// adds a new (u, insert) entry in the allIndexes and allSizes arrays
// still need to call the status check even if the option is // off, so that the write protection is updated if it changes // on disk
//{{{ cancel() method
// in case already initialized; un-initialize it
//{{{ changedUpdate() method
// Install an *instance* of this method in the namespace. // See notes in BshMethod 
// this helps a little
"/*         * Iterate up to N_ITERS times to improve the tables.         */"
//{{{ KeyHandler class
// // Constants for input. //
// try to sync up the console
// Don't generate private constructors
//{{{ setModel() method
//}}} //{{{ Symbol...
//{{{ DocumentHandler class
"/* //{{{ HelpIndex constructor	public HelpIndex(String fileListPath, String wordIndexPath)	{		this();	} //}}} */"
//{{{ ActionTextField class
// Read the value, normalizing whitespace // if it is not CDATA.
//{{{ insertUpdate() method
// older jEdit versions used a DOCTYPE of CATALOG, which // is incorrect since the DOCTYPE must be the name of the // root element, which is MODES.
//{{{ getWrappedDimension() method
// component that will parent any dialog boxes
//{{{ isToolsJarAvailable() method
//{{{ init() method
//{{{ getToolTipLocation() method
// never called
//{{{ CompleteWord constructor
//}}} //{{{ MARK_FOLLOWING
//{{{ CloseDialog constructor
// set non proxy hosts list
// UCS-4 must begin with "<!XML" // 0x00 0x00 0x3c 0x00: UCS-4, unusual (2143)
//{{{ Max line length
//{{{ SelectLineRange constructor
// jump offset // GOTO_W // newOffset now computed from start of GOTO_W
// bsh.help
//{{{ FontSelectorDialog constructor
// on a reload, the fold handler doesn't change, but // we still need to re-collapse folds. // don't do this on initial fold handler creation
//{{{ getDockable() method
//{{{ loadSystemProps() method
// show tip of the day
//{{{ loadUserProps() method
// bsh
// ONE-OR-MORE REPEAT OPERATOR //  + | \+ depending on RE_BK_PLUS_QM //  not available if RE_LIMITED_OPS is set
// end AbstractOptionPane implementation
// computes the stack size variation. In order not to recompute several // times this variation for the same Item, we use the intVal field of // this item to store this variation, once it has been computed. More // precisely this intVal field stores the sizes of the arguments and of // the return value corresponding to desc.
//{{{ ListHandler class
// Begin BeanShell Modification - made conditional on debug
//{{{ minimumLayoutSize() method
//{{{ closeBuffer() method
// if it's not in the class hash, and not marked as // non-existent, try loading it from the CLASSPATH
//{{{ getIconHeight() method
// ( (this.assemLen + numToWrite ) < this.recordBuf.length )
// create a copy of this dockable window and float it
"/*		Perform a cast, cast check, or assignability check.		@param toType the class type of the cast result, which may include			primitive types, e.g. Byte.TYPE.  toType may be null to indicate a			loose type assignment (which matches any fromType).		@param fromType is the class type of the value to be cast including			java primitive TYPE classes for primitives.			fromType should be null to indicate that the fromValue is or would			be Primitive.NULL		@param fromValue an Object or bsh.Primitive primitive value (including			Primitive.NULL or Primitive.VOID )		@param checkOnly If checkOnly is true then fromValue must be null.			FromType is checked for the cast to toType...			If checkOnly is false then fromValue must be non-null			(Primitive.NULL is ok) and the actual cast is performed.		@throws UtilEvalError on invalid assignment (when operation is			assignment ).		@throws UtilTargetError wrapping ClassCastException on cast error 			(when operation is cast)		@param operation is Types.CAST or Types.ASSIGNMENT		@see Primitive.getType()	*/"
// fixes the hang that can occur if we 'save as' to a new // filename which requires re-sorting
//{{{ completeWord() method
"/*                 * Complete the big bucket [ss] by quicksorting                 * any unsorted small buckets [ss, j].  Hopefully                 * previous pointer-scanning phases have already                 * completed many of the small buckets [ss, j], so                 * we don't have to sort them at all.                 */"
"/*			Try imported packages, e.g. ""import foo.bar.*;""			in reverse order of import...			(give later imports precedence...)		*/"
//{{{ dispose() method
"/*                throw new EvalError(					""Sourced file: ""+sourceFileInfo+"" parser Error: "" 					+ e.getMessage( DEBUG ), node, callstack );				*/"
// if the last key was a numeric keypad key // and NumLock is off, filter it out
//{{{ Buffer management methods
//{{{ addKeyBinding() method
// only complete current buffer's keyword map
// Pick screen with largest intersection
//{{{ isSelected() method
//{{{ ThreadProgress constructor
//{{{ Get properties
// '+ 1' so that findWordEnd() doesn't pick up the space at the start
//{{{ updateMiscStatus() method
//}}} //{{{ show popup if > 1
// scan from selection to end failed, so // scan from start to selection
// build a list of unique words in all visible buffers
//{{{ getToolTipText() method
//{{{ getNonAlphaNumericWordChars() method
// These JComponent methods provide the appropriate points // to subscribe and unsubscribe this object to the EditBus
//{{{ if there is only one competion, insert in buffer
//{{{ setBlockCaretEnabled() method
// check for match at start of line
// // Buffers for decoded but unparsed character input. //
// -------------------------------------------------------------------------- // Fields for the control flow graph analysis algorithm (used to compute the // maximum stack size). A control flow graph contains one node per "basic // block", and one edge per "jump" from one basic block to another. Each node // (i.e., each basic block) is represented by the Label object that // corresponds to the first instruction of this basic block. Each node also // stores the list of it successors in the graph, as a linked list of Edge // objects. // --------------------------------------------------------------------------
//{{{ loop through all lines of current buffer
//}}} //{{{ Word character...
//{{{ try to find matching keywords
//{{{ getDockableWindowManager() method
// reinit the callstack
// ok, this one seems to confuse newbies // endlessly, so log it as NOTICE, not // ERROR
//{{{ Completion class
//{{{ insertSelected() method
// Note: if we want methods declared inside blocks to be accessible via // this.methodname() inside the block we could handle it here as a // special case.  See also resolveThisFieldReference() special handling // for BlockNameSpace case.  They currently work via the direct name // e.g. methodName().
/*, CallStack callstack */
// $ at end is literal //}}}
//{{{ RotatedTextIcon class
//{{{ createFieldPanel() method
//{{{ statusUpdate() method
// If we find some other // character that follows // a \r, so it is not a // Windows file, and probably // a Mac file
// begin source and eval
// Pass 1: compute preferred row heights / column widths
// break out of inner for loop to check next char //}}} //{{{ Handle end of MARK_FOLLOWING
// Check for explicit return of value from void method type. // retControl.returnPoint is the Node of the return statement
//{{{ contentInserted() method
// allocate the array to store the initializers // description of the array // The other dimensions default to zero and are assigned when  // the values are set.
"/* construct a BeanShell snippet instead of				 * invoking directly so that user can record				 * property changes in macros. */"
// setting the message to 'null' causes the status bar to check // if a recording is in progress
// opcode of current instruction // bytes to be added after this instruction
// Check for surrogates: 00000000 0000xxxx yyyyyyyy zzzzzzzz //  (1101|10xx|xxyy|yyyy + 1101|11yy|zzzz|zzzz: 
// collapse all nodes, as suggested on user mailing list...
// attempting to expand non-word char
// If there aren't enough repeats, then fail
// switch namespace and special var visibility
// // Attributes //
// evaluate the instance portion of the block in it // Evaluate the initializer block
//{{{ Update line info and line context arrays
// Generate code to call ClassGeneratorUtil to get our switch index  // and give us args...
// add all items in current to doables array
// These are, respectively, the first and last tokens in our linked list // If there is only one token, firstToken == lastToken
"/* Returns the node on the top of the stack, and remove it from the     stack.  */"
//{{{ runTemporaryMacro() method
// updates current and max stack sizes only if opcode == NEW // (stack size variation = 0 for ANEWARRAY, CHECKCAST, INSTANCEOF)
//case ClassWriter.FIELD: //case ClassWriter.METH: //case ClassWriter.IMETH:
//doesnt exist?? //pf.setOrientation(PageFormat.REVERSE_PORTRAIT); //then just do the next best thing
"//System.err.println(""y="" + y + "",offsetY="" + offsetY //	+ "",size.height="" + size.height //	+ "",win.height="" + win.getHeight());"
// not in settings directory or jEdit home directory. // no need to reload anything.
// Number of subexpressions in this token.
//{{{ getFiles() method
// // The current XML handler interface. //
// don't show splash screen if there is a file named // 'nosplash' in the settings directory
// Generate the code implementing the alternate constructor switch
//{{{ getPrevVisibleLine() method
//{{{ saveSettings() method
//{{{ setMessageAndClear() method
//{{{ removeMarker() method
//{{{ preferredLayoutSize() method
//{{{ TextAreaDialog constructor
// if a directory is selected, create new dir in there. // if a file is selected, create new dir inside its parent.
"/* For example, if the current fileset is a directory,		 * C+g will find the next match within that fileset.		 * This can be annoying if you have just done an		 * incremental search and want the next occurrence		 * in the current buffer. */"
// coming out of background mode. // no views open. // no buffers open if args empty.
/*isStatic*/
// replaces GOTO with GOTO_W, JSR with JSR_W and IFxxx <l> with // IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx is the "opposite" opcode // of IFxxx (i.e., IFNE for IFEQ) and where <l'> designates the // instruction just after the GOTO_W.
"/* to avoid data loss, only do this if the above			 * completed successfully */"
"/* TableColumn col1 = getColumnModel().getColumn(0);		col1.setMinWidth(20);		col1.setMaxWidth(20);		col1.setPreferredWidth(20); */"
// because this method is called for *every* VFS update, // we don't want to scan the tree all the time. So we // use the following algorithm to determine if the path // might be part of the tree: // - if the path starts with the browser's current directory, //   we do the tree scan // - if the browser's directory is 'favorites:' -- we have to //   do the tree scan, as every path can appear under the //   favorites list // - if the browser's directory is 'roots:' and path is on //   the local filesystem, do a tree scan
//{{{ saveUserProps() method
/*fromValue*/
//{{{ setFrames() method
//{{{ loadPluginProps() method
"/*             * Compute MTF values for the selectors.             */"
// Number of characters in 'buf' array. // InputStream.read() doesn't always fill the // array (eg, the file size is not a multiple of // IOBUFSIZE, or it is a GZipped file, etc)
//{{{ WindowTableModel class
//{{{ setMessageComponent() method
//{{{ removeUpdate() method
//{{{ updateCaretStatus() method
//{{{ WorkThreadListener implementation
// Primitive (not null or void) to Object.class type
//}}} //{{{ TERMINATE
//{{{ getActionNames() method
// don't obscure existing message
/* boolean */
// so if view is closed in the meantime...
// General case - performe the instanceof based on assignability
//{{{ findWordEnd() method
/* can happen when switching buffers sometimes */
// for backwards compatibility
//{{{ setMessage() method
"/*		The interpretation of an ambiguous name is context sensitive.		We disallow a generic eval( ).	*/"
// Begin BeanShell Modification - moved body to overloaded getMessage()
// updates max locals only (no stack change)
//{{{ getCacheableActionNames() method
// resolves previous forward references to label, if any
// End BeanShell Modification - override error methods and toString
/* package-private for speed */
//{{{ createPosition() method
//{{{ contains() method
//{{{ componentResized() method
"/* 			Here we catch any EvalError from the interpreter because we are			using it as a tool to load the command, not as part of the			execution path.		*/"
//{{{ Action hints
//{{{ getProperty() method
// this.index is index of next pos relative to charAt(0)
//{{{ setProperty() method
//{{{ size() method
//{{{ addPluginProps() method
//{{{ removePluginProps() method
// set flag that next should fail next time?
// Listener interfaces
//{{{ getDefaultRootElement() method
//actions.clear();
//}}} //{{{ Counterclockwise rotation
// sanity check during development
//{{{ getStandardRuleSet() method
//{{{ removeNotify() method
// NON-WHITESPACE OPERATOR //  \S
// Error conditions from GNU regcomp(3) manual
//{{{ copy() method
//{{{ setDirectory() method
//{{{ paintComponent() method
//{{{ bufferClosed() method
// updates the global max stack size
//{{{ removeLayoutComponent() method //}}}
// case of a backward jump with an offset >= -32768, or of a forward jump // with, of course, an unknown offset. In these cases we store the offset // in 2 bytes (which will be increased in resizeInstructions, if needed).
//{{{ ToolTipLabel class
// 2-byte sequence: 00000yyyyyxxxxxx = 110yyyyy 10xxxxxx
// NULL return null as type... we currently use null type to indicate  // loose typing throughout bsh.
//{{{ MouseHandler class
// visitInsn // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // visitIntInsn // - // visitLdcInsn //int LDC_W = 19;           // - //int LDC2_W = 20;          // - // visitVarInsn // - // - // - // - //int ILOAD_0 = 26;         // - //int ILOAD_1 = 27;         // - //int ILOAD_2 = 28;         // - //int ILOAD_3 = 29;         // - //int LLOAD_0 = 30;         // - //int LLOAD_1 = 31;         // - //int LLOAD_2 = 32;         // - //int LLOAD_3 = 33;         // - //int FLOAD_0 = 34;         // - //int FLOAD_1 = 35;         // - //int FLOAD_2 = 36;         // - //int FLOAD_3 = 37;         // - //int DLOAD_0 = 38;         // - //int DLOAD_1 = 39;         // - //int DLOAD_2 = 40;         // - //int DLOAD_3 = 41;         // - //int ALOAD_0 = 42;         // - //int ALOAD_1 = 43;         // - //int ALOAD_2 = 44;         // - //int ALOAD_3 = 45;         // - // visitInsn // - // - // - // - // - // - // - // visitVarInsn // - // - // - // - //int ISTORE_0 = 59;        // - //int ISTORE_1 = 60;        // - //int ISTORE_2 = 61;        // - //int ISTORE_3 = 62;        // - //int LSTORE_0 = 63;        // - //int LSTORE_1 = 64;        // - //int LSTORE_2 = 65;        // - //int LSTORE_3 = 66;        // - //int FSTORE_0 = 67;        // - //int FSTORE_1 = 68;        // - //int FSTORE_2 = 69;        // - //int FSTORE_3 = 70;        // - //int DSTORE_0 = 71;        // - //int DSTORE_1 = 72;        // - //int DSTORE_2 = 73;        // - //int DSTORE_3 = 74;        // - //int ASTORE_0 = 75;        // - //int ASTORE_1 = 76;        // - //int ASTORE_2 = 77;        // - //int ASTORE_3 = 78;        // - // visitInsn // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // visitIincInsn // visitInsn // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // visitJumpInsn // - // - // - // - // - // - // - // - // - // - // - // - // - // - // - // visitVarInsn // visiTableSwitchInsn // visitLookupSwitch // visitInsn // - // - // - // - // - // visitFieldInsn // - // - // - // visitMethodInsn // - // - // - //int UNUSED = 186;         // NOT VISITED // visitTypeInsn // visitIntInsn // visitTypeInsn // visitInsn // - // visitTypeInsn // - // visitInsn // - //int WIDE = 196;           // NOT VISITED // visitMultiANewArrayInsn // visitJumpInsn // - //int GOTO_W = 200;         // - //int JSR_W = 201;          // -
//{{{ quicksort() method
// hopefully another caret update will come?
// 1st step: // As explained above, resizing an instruction may require to resize another // one, which may require to resize yet another one, and so on. The first // step of the algorithm consists in finding all the instructions that // need to be resized, without modifying the code. This is done by the // following "fix point" algorithm: // - parse the code to find the jump instructions whose offset will need //   more than 2 bytes to be stored (the future offset is computed from the //   current offset and from the number of bytes that will be inserted or //   removed between the source and target instructions). For each such //   instruction, adds an entry in (a copy of) the indexes and sizes arrays //   (if this has not already been done in a previous iteration!) // - if at least one entry has been added during the previous step, go back //   to the beginning, otherwise stop. // In fact the real algorithm is complicated by the fact that the size of // TABLESWITCH and LOOKUPSWITCH instructions depends on their position in // the bytecode (because of padding). In order to ensure the convergence of // the algorithm, the number of bytes to be added or removed from these // instructions is over estimated during the previous loop, and computed // exactly only after the loop is finished (this requires another pass to // parse the bytecode of the method).
// nodes remember from where they were sourced
// jump offset // GOTO_W
// this should never throw an exception.
// This reloads the token marker and sends a message // which causes edit panes to repaint their text areas
"/* Determine installation directory.		 * If the jedit.home property is set, use that.		 * Then, look for jedit.jar in the classpath.		 * If that fails, assume this is the web start version. */"
// create a panel with a BoxLayout. Can't use Box here // because Box doesn't have setBorder().
"/*			Look ahead and short circuit evaluation of the rhs if:				we're a boolean AND and the lhs is false.		*/"
//int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537; //compressOutOfMemory ( totalDraw, n );
//{{{ setTemporaryProperty() method
// End BeanShell Modification - moved body to overloaded getMessage()
//{{{ unsetProperty() method
"/* 			Create the root ""bsh"" system object if it doesn't exist.		*/"
//{{{ resetProperty() method
// end JcmdProcessTest.java
// Check that the attribute doesn't // already exist!
// // helper methods //
// We have to open our own stream // to the URL.
//{{{ getActiveView() method
//{{{ charData() method
"/*         * Nodes and heap entries run from 1.  Entry 0         * for both the heap and nodes is a sentinel.         */"
// if any directories are selected, add // them, otherwise add current directory
//{{{ getBottomDockingArea() method
//}}} //{{{ KEY_TYPED...
//{{{ getTime() method
//{{{ DockableWindowManager constructor
//Font font = UIManager.getFont("Label.font");
// NON-ALPHANUMERIC OPERATOR //  \W
"/*             * Now ftab contains the first loc of every small bucket.             * Calculate the running order, from smallest to largest             * big bucket.             */"
"/*         * Now the selectors.         */"
//{{{ Clock constructor
//{{{ makeServerScript() method
//{{{ Clock class
// don't show menu items to dock into a plain view
// returns Object covering both Double and Boolean return types
// this is package-private so that the painter can use it without // having to call getSelection() (which involves an array copy)
// -------------------------------------------------------------------------- // Constructor // --------------------------------------------------------------------------
// do operating system specific stuff (creating startup // scripts, installing man pages, etc.)
//{{{ HistoryTextField constructor
//{{{ TreeHandler class
//{{{ DockableWindowCompare class
// Read the default value.
"/*             * Use simpleSort(), since the full sorting mechanism             * has quite a large constant overhead.             */"
"/*         * In the various block-sized structures, live data runs         * from 0 to last+NUM_OVERSHOOT_BYTES inclusive.  First,         * set up the overshoot area for block.         */"
//{{{ showPopupMenu() method
//lhs.assign( null, false );
// pushes handler block onto the stack of blocks to be visited
// End BeanShell Modification - added sourceFile info
// failsafe, set the Line as the origin of the error.
"/*                 * copy 1                 */"
//{{{ doAWTRequests() method
//{{{ propertiesChanged() method
"/*			We jump through some hoops here to handle arbitrary cases like			unset(""bsh.foo"");		*/"
// // Utility flag: have we noticed a CR while reading the last // data chunk?  If so, we will have to go back and normalise // CR/LF. //
// add the source file info and throw again
/* this ensures that the first line is always visible */
"/*  					Don't auto-unwrap wrappers (preserve identity semantics)					FALL THROUGH TO OBJECT OPERATIONS BELOW.				*/"
// optimization for common case
// end source and eval
//{{{ isVisible() method
// this notifies each display manager editing this // buffer of the screen line count change
// end primary set and get methods
// No, it is not.
//{{{ getEnterAddsToHistory() method
// Careful here: // else fall through to override and install the new typed version
//{{{ getAfterCaretTextArea() method
//{{{ removeExtendedAttributes() method
//{{{ ScrollLineCount class
// Default is c:\windows under win98, $HOME under Unix
//{{{ MemoryStatus constructor
"/*this originally handled postfix array dimensions...void VariableDeclaratorId() #VariableDeclaratorId :{ Token t; }{  t=<IDENTIFIER> { jjtThis.name = t.image; }  ( ""["" ""]"" { jjtThis.addUndefinedDimension(); } )*}*/"
//{{{ setSelectAllOnFocus() method
// If this is a unary increment of decrement (either pre or postfix) // then we need an LHS to which to assign the result.  Otherwise // just do the unary operation for the value.
// adds the instruction to the bytecode of the method
// End ConsoleInterface
"/*             * Recompute the tables based on the accumulated frequencies.             */"
//{{{ newView() method
"/*	Note: this class is final because we may test == Primitive.class in places.	If we need to change that search for those tests.*/"
// show 'close' item if at least one selected // file is currently open
//{{{ setEnterAddsToHistory() method
//{{{ getSelectAllOnFocus() method
//{{{ doTypeSelect() method
//{{{ splitVertically() method
//{{{ getInstantPopups() method
//{{{ setInstantPopups() method
// check if download failed
// so that it doesn't resize...
// Look for a known signature.
//{{{ addToolBar() method
// Set the new status
// next succeeds // is a match // try next option
//{{{ mousePressed() method
// Add the '0-repeats' index // positions.elementAt(z) == position [] in input after <<z>> matches
//{{{ doBackwardSearch() method
// invalidate the old selection
//{{{ ColorPickerDialog class
"/* fireTableRowsInserted(startIndex + 1,				startIndex + list.size() + 1); */"
//{{{ processKeyEvent() method
// These variables are package scope for fast access within the engine // execution flags this match was made using
//{{{ getModel() method
// ZERO-OR-ONE REPEAT OPERATOR / STINGY MATCHING OPERATOR //  ? | \? depending on RE_BK_PLUS_QM //  not available if RE_LIMITED_OPS is set //  stingy matching if RE_STINGY_OPS is set and it follows a quantifier
//{{{ unsplit() method
//{{{ getSelectedFiles() method
//{{{ processMouseEvent() method
//{{{ FocusHandler class
//{{{ mouseReleased() method
//{{{ rename() method
//{{{ PanelWindowContainer constructor
//   //  End mutable instance variables. // ---------------------------------------------------------
// Order of body and condition is swapped for do / while
// we don't want duplicate // entries in the kill ring
//{{{ DockBorder class
// Determine the current content type.
//{{{ getExpandOnInput() method
//{{{ CompletionPopup constructor
//{{{ setExpandOnInput() method
// can't shift floats
//{{{ historyPrevious() method
//{{{ MarkerHighlight class
// evaluate the expression
// if relative, fix up to bsh.cwd
// UCS-4 must begin with "<!XML" // 0x00 0x00 0x00 0x3c: UCS-4, big-endian (1234)
// set transient fields
"/*			Lots of preconditions checked here...			Once things are running smoothly we might comment these out			(That's what assertions are for).		*/"
//{{{ equals() method
// converts temporary opcodes 202 to 217 (inclusive), 218 and 219 // to IFEQ ... JSR (inclusive), IFNULL and IFNONNULL
// no body?
// Read the first four bytes for // autodetection.
"/* Magic: UNTITLED is only set if newFile param to		 * constructor is set, NEW_FILE is also set if file		 * doesn't exist on disk.		 *		 * This is so that we can tell apart files created		 * with jEdit.newFile(), and those that just don't		 * exist on disk.		 *		 * Why do we need to tell the difference between the		 * two? jEdit.addBufferToList() checks if the only		 * opened buffer is an untitled buffer, and if so,		 * replaces it with the buffer to add. We don't want		 * this behavior to occur with files that don't		 * exist on disk; only untitled ones.		 */"
//{{{ mouseDragged() method
// in the future we will want something better, // eg. having an 'evt' object passed to // EditAction.invoke().
// Read the XML/Encoding declaration.
/* new JEditLauncherOSTask(installer) */
//{{{ getSelectedColor() method
"/* When closing the last buffer, the BufferUpdate.CLOSED			 * handler doesn't call setBuffer(), because null buffers			 * are not supported. Instead, it waits for the subsequent			 * 'Untitled' file creation. */"
//{{{ doForwardSearch() method
// Yay, we're finally there
// creates a new Edge object or reuses one from the shared pool
// down arrow
// no parenthesis on previous line (prevLineParenWeight == 0) so the normal indenting rules are used
// have to do this because setText() sets index to -1
//{{{ HistoryBorder class
"/* Call this to reinitialize the node stack.  It is called     automatically by the parser's ReInit() method. */"
// Delete existing copy
//initCallStack( namespace );
//{{{ ColorWellButton constructor
//{{{ historyNext() method
// use the low-level property setting code // so that if we have a buffer-local // property with the same value as a default, // later changes in the default don't affect // the buffer-local property
// null callstack, one will be created for us 
// according to krisk this looks better on OS X...
// replaces the temporary jump opcodes introduced by Label.resolve.
// Read an XML or text declaration.
// Search for a matching tuple, and // return the string if we find one.
// Get the syntax token at 'offset' // only tokens with the same type will be checked for // the corresponding bracket
// so you the avid code reader should use MODES as the // DOCTYPE instead, but we still let old catalogs through // to avoid annoying users.
// only select other whitespace in this case
// Attempt to detect the encoding.
//{{{ scrollDownPage() method
"/* fireTableRowsUpdated(index,index);		fireTableRowsDeleted(index + 1,lastIndex); */"
// initializes the previous Edge object...
// even though this class is called AbstractOptionPane, it is not really // abstract, since BufferOptions uses an instance of it to lay out its // components.
// Don't show the welcome message if jEdit was started // with the -nosettings switch
"/*			Child is array initializer.  Evaluate it and fill in the 			dimensions it returns.  Initialized arrays are always fully defined			(no undefined dimensions to worry about).  			The syntax uses the undefinedDimension count.			e.g. int [][] { 1, 2 };		*/"
//{{{ spacesToTabs() method
//{{{ doctypeDecl() method
//{{{ loadSiteProps() method
/* they're too troublesome */
// case ClassWriter.MANA_INSN:
// Here, we have seen an odd number of backslash's followed by a 'u'
//{{{ getLineOfOffset() method
//{{{ getHandlerForFileName() method
//{{{ dragAndDropCallback() method
//{{{ KEY_PRESSED...
//{{{ maybeReloadDirectory() method
// // Entities //
//{{{ ColorWell class
//{{{ showClipText() method
// map loose return type to Object
//{{{ initTextArea() method
//{{{ handleMessage() method
//{{{ updateButtons() method
//{{{ getBeanShellReplace() method
/* case KeyEvent.VK_SEPARATOR: */
//{{{ StatusBar constructor
// need to let \b through so that backspace will work // in HistoryTextFields
//{{{ PasteFromListDialog constructor
// People have reported hangs with JDK 1.4; might be // caused by modal dialogs being displayed from // windowActivated()
//{{{ getSelectedClipText()
// for the parent directory right-click; on the click we select // the clicked item, but when the popup goes away we select the // currently showing directory.
//{{{ numericKeypadKey() method
// add interpereter and namespace to args list
//{{{ reload() method
"/* reference counter allows us to remove a column from		 * the table when no directory using this column is		 * visible */"
//{{{ setRegister() method
// for ABI compatibility
//{{{ If reloading root, update parent directory list
// label == null means no configurable options
"/*			Is it a simple variable name?			Doing this first gives the correct Java precedence for vars 			vs. imported class names (at least in the simple case - see			tests/precedence1.bsh).  It should also speed things up a bit.		*/"
// like TABL_INSN
//{{{ getBufferHistory() method
// eg, trying to bind C+n C+p if C+n already bound
// --------------------------------------------------------- // The following instance variables mutate during evaluation and should // be reset by the reset() method where necessary
// Find the bsh method
//Log.log(Log.WARNING,this,"VFS update: request already in progress");
// Call script "invoke( String methodName, Object [] args );
// a default equals() testing for equality with the This reference
// Check if a plugin with the same name // is already loaded
// see VFSBrowser.browseDirectory()
// Start the entity.
// As long as there's nothing in the // read buffer, try reading more data // (for an external entity) or popping // the entity stack (for either).
// save a file -> sends vfs update. if a VFS file dialog box // is shown from the same event frame as the save, the // VFSUpdate will be delivered before the directory is loaded, // and before the path is set.
//{{{ expandAbbrev() method
//{{{ getPreferredSize() method
//{{{ InputHandler constructor
//{{{ FileRootsVFS constructor
"/* We do this stuff because the browser is not able to handle	 * more than one request yet */"
//{{{ FilesChangedDialog constructor
"/*				If we have type info and the child is an array initializer				pass it along...  Else use the default eval style.				(This allows array initializer to handle the problem... 				allowing for future enhancements in loosening types there).				*/"
//{{{ Renderer class
// There's an explicit character stream.
// record \n and \t on lines specially so that auto indent // can take place
"/* case MouseEvent.MOUSE_ENTERED:				toolTipInitialDelay = ttm.getInitialDelay();				toolTipReshowDelay = ttm.getReshowDelay();				ttm.setInitialDelay(200);				ttm.setReshowDelay(0);				super.processMouseEvent(evt);				break;			case MouseEvent.MOUSE_EXITED:				ttm.setInitialDelay(toolTipInitialDelay);				ttm.setReshowDelay(toolTipReshowDelay);				super.processMouseEvent(evt);				break; */"
// I guess ideally all browsers // should have views, but since they // don't, we just use the active view // in that case, since some actions // depend on a view being there and // I don't want to add checks to // them all
// Push the boolean constant 'true' (for declaredOnly)
// REMIND: calling isDirectory() on a floppy drive // displays stupid I/O error dialog box on Windows
//{{{ valueChanged() method
//{{{ FavoritesMenuButton constructor
/* Line seperator */
// Normal condition.
//{{{ selectAll() method
// if the user pressed eg C+e n n in the // search bar we want focus to go back there // after the prefix is done
//{{{ showSplashScreen() method
//{{{ isPrefixActive() method
//{{{ GutterOptionPane constructor
// is it a header?
// null some variables so that retaining references // to closed views won't hurt as much.
// Push the existing status.
// to avoid having to deal with read/write locks and such, // we insert the loaded data into the buffer in the // post-load cleanup runnable, which runs in the AWT thread.
// Make the URL absolute.
// paths on case-insensitive filesystems are stored as lower // case in the hash.
// Create a new read buffer. // (Note the four-character margin)
//{{{ check if we have to stop parsing
// Flush any remaining data.
/* value */
// queue of redos. first is most recent, last is oldest
// // Notations. //
////////////////////////////////////////////////////////////////////// // Major syntactic productions. //////////////////////////////////////////////////////////////////////
//{{{ runScript() method
//{{{ Paint token backgrounds
//{{{ invokeAction() method
//{{{ getStartOffset() method
//{{{ removeAllKeyBindings() method
//{{{ isDragEnabled() method
//{{{ removeKeyBinding() method
//{{{ resolveEntity() method
// we create a stream tokenizer for parsing a simple // stack-based language
// // Flags for parsing context. //
//{{{ getLastAction() method
// can happen if the user presses C+w twice real // quick and the buffer has unsaved changes
//{{{ getLength() method
//{{{ readNextChar() method
// Parse the first content particle
//{{{ getRepeatCount() method
//{{{ construct() method
//{{{ getLastActionCount() method
// if this successor has not already been pushed onto the stack...
//{{{ Entry class
// bytecode of the method // indexes in b // loop indexes
//{{{ LineManager constructor
// try mode-specific abbrevs first
// This constructor is used for convenience when we know the set beforehand, // e.g. \d --> new RETokenOneOf("0123456789",false, ..) //      \D --> new RETokenOneOf("0123456789",true, ..)
//{{{ RecentHandler class
// Add tryMatch to list of possibilities.
//{{{ Protected members
"/*			If we didn't find a class or variable name (or prefix) above			there are two possibilities:			- If we are a simple name then we can pass as a void variable 			reference.			- If we are compound then we must fail at this point.		*/"
// if we've got an object, resolve the method
// Ease debugging... // XThis.this refers to the enclosing class instance
// Special:
//{{{ setSelection() method
// for backwards compatibility with plugins that fiddle with // jEdit's UI layout
//{{{ transactionComplete() method
//{{{ getElementCount() method
// this is either style.getBackgroundColor() or // styles[defaultID].getBackgroundColor()
// so that end followed by up arrow will always put caret at // the end of the previous line, for example //setMagicCaretPosition(Integer.MAX_VALUE); //}}}
// push this constructor index number onto stack
/*paramTypes*/
// else set it and return
// stop checking rules if there was a match
// execute the action
// reads and copies instruction
//{{{ Figure out some minor things
//{{{ WindowTableModel constructor
// // Location. //
"//Log.log(Log.DEBUG,jEdit.class,""Adding edit mode "" //	+ mode.getName());"
//{{{ initBufferSwitcher() method
// Get the ConstructorArgs selector field from ConstructorArgs
"/*     * index of the last char in the block, so     * the block size == last + 1.     */"
// If repeat was true originally, clear it // Otherwise it might have been set by the action, etc
//{{{ resetLastActionCount() method
//{{{ updateTitle() method
//cv.visitLineNumber( index, labels[index] ); // push this before args
// OK, add it to the end of the // bucket.
//{{{ MyFocusManager class
// leave null
// can't happen
// DIGIT OPERATOR //  \d if RE_CHAR_CLASS_ESCAPES is set
//{{{ MyFocusTraversalPolicy class
// selected a header; skip to the next row
"/* A conditional node is constructed if its condition is true.  All     the nodes that have been pushed since the node was opened are     made children of the the conditional node, which is then pushed     on to the stack.  If the condition is false the node is not     constructed and they are left on the stack. */"
// 1-byte sequence: 000000000xxxxxxx = 0xxxxxxx
// only set if all buffers saved/closed
// updates current stack size (max stack size unchanged because stack // size variation always negative in this case)
// first of all, if this action set a // readNextChar, do not clear the repeat
//{{{ MouseWheelHandler class
// should normally be
// remember the last executed action
//{{{ handleKey() method
"/*		Disallowing VOIDs here was an easy way to support the throwing of a 		more descriptive error message on use of an undefined argument to a 		method call (very common).  If it ever turns out that we need to 		support that for some reason we'll have to re-evaluate how we get 		""meta-information"" about the arguments in the various invoke() methods 		that take Object [].  We could either pass BSHArguments down to 		overloaded forms of the methods or throw an exception subtype 		including the argument position back up, where the error message would		be compounded.	*/"
//{{{ invokeReadNextChar() method
//{{{ JCheckBoxList constructor
// stop people doing dumb stuff like C+ENTER 100 C+n
//{{{ getValues() method
//{{{ TextAreaTransferHandler class
// For evaluation
"/*		Note: bshmethod needs to re-evaluate the method return type here.		This is broken.	*/"
//{{{ userInput() method
//{{{ goToPrevBracket() method
// Read the encoding.
// positional parameters will be inserted where $1, $2, $3, ... // occurs in the expansion
"/* if user drops into the same			selection where they started, do			nothing. */"
//{{{ actionPerformed() class
//{{{ Handle abbrevs of the form abbrev#pos1#pos2#pos3#...
// -------------------------------------------------------------------------- // Fields to optimize the creation of {@link Edge Edge} objects by using a // pool of reusable objects. The (shared) pool is a linked list of Edge // objects, linked to each other by their {@link Edge#poolNext} field. Each // time a CodeWriter needs to allocate an Edge, it removes the first Edge // of the pool and adds it to a private list of Edge objects. After the end // of the control flow analysis algorithm, the Edge objects in the private // list of the CodeWriter are added back to the pool (by appending this // private list to the pool list; in order to do this in constant time, both // head and tail of the private list are stored in this CodeWriter). // --------------------------------------------------------------------------
// have to check again since above might set // NEW_FILE flag
//{{{ isOK() method
//{{{ progressUpdate() method
// For `reload' command
// Only on initial load
// 4-byte sequence: 11101110wwwwzzzzyy + 110111yyyyxxxxxx //     = 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx // (uuuuu = wwww + 1)
//{{{ Do some stuff once loading is finished
// if reloading a file, clear dirty flag
// case of a backward jump with an offset < -32768. In this case we // automatically replace GOTO with GOTO_W, JSR with JSR_W and IFxxx <l> // with IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx is the "opposite" opcode // of IFxxx (i.e., IFNE for IFEQ) and where <l'> designates the // instruction just after the GOTO_W.
//{{{ invokeLastAction() method
// try and merge existing selections one by // one with the new selection
// Invoke the block, overriding namespace with localNameSpace
"/* if user drops into a selection,				replace selection */"
//{{{ getSelectedValue() method
// now done in NameSpace automatically when root // The classes which are imported by default //globalNameSpace.loadDefaultImports();
// Instead of passing these around to each method, we just store them // as instance variables. Note that this is not thread-safe.
// Also cache it in the static namespace... //classStaticNameSpace.cacheClass( name, genClass );
//{{{ AboutDialog constructor
//{{{ if there are no requests, execute AWT requests immediately
//{{{ LabelRenderer class
// If multiple threads log stuff, we don't want // the output to get mixed up
// Resolved the variable
"/* 			Create non-interactive local interpreter for this namespace			with source from the input stream and out/err same as 			this interpreter.		*/"
//{{{ maximumLayoutSize() method
//{{{ cacheDockableWindows() method
//{{{ finalize() method
// two additional bytes will be required to replace this // GOTO or JSR instruction with a GOTO_W or a JSR_W
// five additional bytes will be required to replace this // IFxxx <l> instruction with IFNOTxxx <l'> GOTO_W <l>, where // IFNOTxxx is the "opposite" opcode of IFxxx (i.e., IFNE for // IFEQ) and where <l'> designates the instruction just after // the GOTO_W.
//System.err.println("cleaned up weak ref: "+deadref);
//{{{ UndoManager constructor
//{{{ registerDockableWindow() method
//{{{ floatDockableWindow() method
// register the Options dialog as a TreeSelectionListener. // this is done before the initial selection to ensure that the // first selected OptionPane is displayed on startup.
//{{{ pushElement() method
// If found cache the full name in the BshClassManager
// ------------------------------------------------------------------------- // Exceptions table entries, max stack size and max locals // -------------------------------------------------------------------------
// changes temporary opcodes 202 to 217 (inclusive), 218 and 219 // to IFEQ ... JSR (inclusive), IFNULL and IFNONNULL
//{{{ AboutPanel class
// get rid of keys we never need to handle
//{{{ startDocument() method
//{{{ DockableListHandler constructor
/* get all positions from offset to the end, inclusive */
//{{{ Constants
// set proxy host
// return the newly created 'untitled-1'
//{{{ setRepeatCount() method
//{{{ peekElement() method
//{{{ getCellRenderer() method
// Handle ".class" suffix operation // Prefix must be a BSHType
// releases all the Edge objects used by this CodeWriter
//{{{ popElement() method
//{{{ DockableListHandler class
//{{{ showDockableWindow() method
//{{{ getCachedDockableNames() method
//{{{ getColumnCount() method
//{{{ Static part of class
//{{{ Lay out independent buttons
//{{{ createPopupMenu() method
//{{{ getRegisteredDockableWindows() method
// control flow analysis algorithm: while the block stack is not empty, // pop a block from this stack, update the max stack size, compute // the true (non relative) begin stack size of the successors of this // block, and push these successors onto the stack (unless they have // already been pushed onto the stack). Note: by hypothesis, the {@link // Label#beginStackSize} of the blocks in the block stack are the true // (non relative) beginning stack sizes of these blocks.
//{{{ unloadDockableWindows() method
// check whether shortcut is a prefix to others
// Save the element info.
//{{{ canClose() method
//{{{ Buttons
// Try looking up the element
// Insert the content model, if any.
// Read the entity name, and prepend // '%' if necessary.
// Make a new one if necessary.
// for SPACE or S+SPACE we pass the // key typed since international // keyboards sometimes produce a // KEY_PRESSED SPACE but not a // KEY_TYPED SPACE, eg if you have to // do a "<space> to insert ".
// view text areas temporarily blank out while a buffer is // being loaded, to indicate to the user that there is no // data available yet.
//{{{ searchDone() method
//{{{ Factory class
// theoretically a segment could // have seg.offset != 0 but // SegmentBuffer never does that
"/*			Note: some interesting things are going on here.			1) We swap instead of push...  The primary mode of operation 			acts like we are in the enclosing namespace...  (super must be 			preserved, etc.)			2) We do *not* call the body block eval with the namespace 			override.  Instead we allow it to create a second subordinate 			BlockNameSpace child of the forNameSpace.  Variable propogation 			still works through the chain, but the block's child cleans the 			state between iteration.  			(which is correct Java behavior... see forscope4.bsh)		*/"
//{{{ OpenAction constructor
// if auto wrap is on, always restart search. // if auto wrap is off, and we're called from // a macro, stop search. If we're called // interactively, ask the user what to do.
//{{{ Factory constructor
//{{{ getMinimumSize() method
//{{{ Sorting methods
//{{{ addComponent() method
//{{{ Instance part of class
// updates current stack size (max stack size unchanged)
// If both original args were Primitives return a Primitive result // else it was mixed (wrapper/primitive) return the wrapper type // Exception is for boolean result, return the primitive
//{{{ FloatAction constructor
"/*		invokeMethod() here is generally used by outside code to callback		into the bsh interpreter. e.g. when we are acting as an interface		for a scripted listener, etc.  In this case there is no real call stack		so we make a default one starting with the special JAVACODE namespace		and our namespace as the next.	*/"
//{{{ getModeProperties() method
// See if the application wants to // redirect the system ID and/or // supply its own character stream.
// make default be true for the next // action
// non-interactive, return control now
// See if we should place this toolbar before any others
//{{{ getView() method
// Method body can only use 'return' statment type return control.
//|| ( getParent()!=null && getParent().classStatic != null ) 
// show extra "expecting..." info
"/*	 *  to avoid our skip table having a length of 2 ^ 16, we hash each	 *  character of the input into a character in the alphabet [\x00-\xFF]	 *  using the lower 8 bits of the character's value (resulting in	 *  a more reasonable skip table of length 2 ^ 8).	 *	 *  the result of this is that more than one character can hash to the	 *  same index, but since the skip table encodes the position of	 *  occurence of the character furthest into the string with a particular	 *  index (whether or not it is the only character with that index), an	 *  index collision only means that that this heuristic will give a	 *  sub-optimal skip (i.e. a complete skip table could use the differences	 *  between colliding characters to maximal effect, at the expense of	 *  building a table that is over 2 orders of magnitude larger and very	 *  sparse).	 */"
// map null to Primtive.NULL coming in...
// if localscoping switch follow strictJava, else recurse
"/*	Methods for interacting with Parser */"
// UCS-2 with a byte-order marker. // 0xfe 0xff: UCS-2, big-endian (12)
//{{{ RolloverButton constructor
//{{{ FloatAction class
//{{{ ToggleAction class
// pops a block from the stack
//{{{ StyleRenderer class
//{{{ getScreenLineEndOffset() method
//{{{ ToggleAction constructor
//{{{ literalBeanShellReplace() method
// squeltch security exception, filenotfoundexception
// Save settings in case user kills the backgrounded // jEdit process
//{{{ removeDockableWindow() method
//{{{ ensure we don't have empty space at the bottom or top, etc
// Don't beep if the user presses some // key we don't know about unless a // prefix is active. Otherwise it will // beep when caps lock is pressed, etc.
// has body, else just for side effects
// install user-selected packages
//{{{ setMode() method
//{{{ LineContext class
// Make a tmp namespace to hold the original constructor args for // use in eval of the parameters node
// Get the instance initializer block from the static This 
"/* This protects against stupid people (like me)		 * doing stuff like buffer.setMode(jEdit.getMode(...)); */"
//{{{ addEntry() method
// Set the instance This reference on the instance
//{{{ markTokens() method
//{{{ Indentation
//{{{ getProperties() method
//{{{ removeTrailingWhiteSpace() method
// no whitespace
//{{{ getPosition() method
//{{{ shiftIndentLeft() method
//{{{ setIconPath() method
//{{{ shiftIndentRight() method
"/**    * Parse a conditional section.    * [63] conditionalSect ::= includeSect || ignoreSect    * [64] includeSect ::= '<![' %'INCLUDE' '[' (%markupdecl*)* ']]>'    * [65] ignoreSect ::= '<![' %'IGNORE' '[' ignoreSectContents* ']]>'    * [66] ignoreSectContents ::= ((SkipLit | Comment | PI) -(Char* ']]>'))    *                           | ('<![' ignoreSectContents* ']]>')    *                           | (Char - (']' | [<'""]))    *                           | ('<!' (Char - ('-' | '[')))    * *NOTE: the '<![' has already been read.    * *TODO: verify that I am handling ignoreSectContents right.    */"
//{{{ getDockableTitle() method
// Begin BeanShell Modification - super constructor args // null node, null callstack, ParseException knows where the error is.
//{{{ removeLayoutComponent() method
//{{{ _getDirectoryEntry() method
//{{{ _listDirectory() method
// blank line
// computes the true beginning stack size of this successor block
//{{{ addDockableWindow() method
//{{{ toggleDockableWindow() method
//{{{ getValueAt() method
//{{{ closeCurrentArea() method
// SILLY: allow for anti-aliased characters' "fuzz"
//{{{ hideDockableWindow() method
// the search works by starting the anchor (first character // of the pattern) at the initial offset. as long as the // anchor is far enough from the enough of the text for the // pattern to match, and until the pattern matches, we // compare the pattern to the text from the last character // to the first character in reverse order. where a character // in the pattern mismatches, we use the two heuristics // based on the mismatch character and its position in the // pattern to determine the furthest we can move the anchor // without missing any potential pattern matches.
// do some platforms throw exceptions if the file does not exist // when we ask for the canonical path?
//{{{ isDockableWindowVisible() method
//{{{ _canonPath() method
// No matter what happends... stops us from leaving buffer // in a bad state
//{{{ getDockableWindow() method
"/*    * Ordinals for various reasons why an Error of this type can be thrown.    */"
//{{{ getViews() method
//{{{ DirectoryEntryCompare class
"// last possible start position of a match with this pattern; // this is negative if the pattern is longer than the text // causing the search loop below to immediately fail //int last_anchor = reverseSearch //	? offset + pattern.length - 1 //	: length - pattern.length;"
// position variable for pattern test position
//{{{ isDockableWindowDocked() method
//{{{ getDefaultColorFor() method
// true number of bytes to be added (or removed) from this // instruction = (future number of padding bytes - current number // of padding byte) - previously over estimated variation = // = ((3 - newOffset%4) - (3 - u%4)) - u%4 // = (-newOffset%4 + u%4) - u%4 // = -(newOffset & 3)
// access flags
//    szptr = zptr;
//{{{ addLayoutComponent() method
//{{{ getScreenLineCount() method
//{{{ getAllPluginEntries() method
//{{{ PluginOptions constructor
// this makes HyperSearch much faster
"/* When doing a 'save as', the path to save to (path)		 * will not be the same as the buffer's previous path		 * (buffer.getPath()). In that case, we want to create		 * a backup of the new path, even if the old path was		 * backed up as well (BACKED_UP property set) */"
//{{{ getWhat() method
//{{{ getLeftDockingArea() method
// initially zero, so that we always show the first message
//{{{ getTopDockingArea() method
//{{{ close() method
// 3 = loop again, 2 = loop ended, 1 = last pass, 0 = done
// we don't care
"/*	 *  the 'skip' array is used to determine for each index in the	 *  hashed alphabet how many characters can be skipped if	 *  a mismatch occurs on a characater hashing to that index.	 */"
//{{{ finishResizing() method
//{{{ SettingsActionHandler class
//{{{ setResizePos() method
// I'm not sure when this can happen, // but it does sometimes, witness the // jEdit bug tracker.
//{{{ getColumnOnOtherLine() method
/* otherwise just insert the text */
"/** * A constant pool item. Constant pool items can be created with the 'newXXX' * methods in the {@link ClassWriter} class. */"
//{{{ getRightDockingArea() method
// Insert the attributes, if any.
// we remember which classes we don't exist // because BeanShell tries loading all possible // <imported prefix>.<class name> combinations
// since subsequent macros with the same name are ignored, // load user macros first so that they override the system // macros.
// correctly handle text flavor + file list flavor // + text area read only, do an or of all flags
// // Constructor //
// for toolbar display
"/*         * Now the selectors         */"
//{{{ paintChildren() method
// begin ActionListener implementation
//{{{ DropHandler class
//{{{ getShortcut() method
//{{{ Entry constructor
// This is necessary to have a file opened from the Finder // before jEdit is running set as the currently active // buffer.
// ask whether to override that other shortcut
// Make it executable
// Tags plugin likes to call this method at times other than // startup; so we need to fire a SearchSettingsChanged to // notify the search bar and so on.
// I'm lazy
//{{{ layoutContainer() method
//{{{ OptionsDialog constructor
//{{{ ModeProperties constructor
// True if a \n was read after a \r. Usually // means this is a DOS/Windows file
// Pass 2: redistribute free space
// // When we get here we have EITHER: //   o An empty "assemble" buffer. //   o No bytes to write (numToWrite == 0) //
//{{{ Lay out docking areas
"/* we don't do this in Buffer.insert() so that				   we can insert multiple files at once */"
////////////////////////////////////////////////////////////////////// // XML query routines. //////////////////////////////////////////////////////////////////////
// don't want 'New File' to create a read only buffer // if current file is on SQL VFS or something
////////////////////////////////////////////////////////////////////// // Constructors. ////////////////////////////////////////////////////////////////////////
//System.err.println("foldLevelChanged " + (start-1) + " to " + textArea.getLastPhysicalLine() + "," + end);
//{{{ Lay out dependent buttons
/* equal to first visible line */
// // Elements //
//{{{ BufferChangeHandler class
//{{{ // lazily create skip and suffix arrays for either the // search pattern, or the reversed search pattern
// No variable or class found in 'this' type ref. // if autoAllocateThis then create one; a child 'this'.
//{{{ Position tool bars if they are managed by us
// if the buffer count becomes 0, then it is guaranteed to // become 1 very soon, so don't do anything in that case.
// only for docked
// wait for it to be painted to ensure progress is updated // continuously
"/* this property is only loaded and saved if				 * the 'current buffer' file set is selected.				 * otherwise, it defaults to on. */"
"/*		Note: bshmethod needs to re-evaluate arg types here		This is broken.	*/"
// if strictJava mode, check for loose parameters and return type
// only set if open
// WORD END OPERATOR  //  \> if ????
//{{{ adjustDockingAreasToFit() method
// -------------------------------------------------------------------------- // Methods to compute offsets and to manage forward references // --------------------------------------------------------------------------
//{{{ invalidateLayout() method
// (?:) // *?,??,+?,{}? // (?=)(?!) // \A,\Z // \d,\D,\w,\W,\s,\S within [] // (?#)
//{{{ getLayoutAlignmentX() method
// if we got here, no unused display manager in list
//{{{ TextAreaSelection class
//{{{ getLineEndOffset() method
"/*	 *  a good introduction to the Boyer-Moore fast string matching	 *  algorithm may be found on Moore's website at:	 *	 *   http://www.cs.utexas.edu/users/moore/best-ideas/string-searching/	 *	 */"
// we don't know the right hand side of the assignment yet. // has at least one setter of the right name?
//{{{ getLayoutAlignmentY() method
// if chain returns false, it "rejected" the token due to // an optimization, and next was combined with lastToken
//{{{ recordInput() method
//{{{ paintChunkBackgrounds() method
//{{{ StyleTableModel constructor
// // QuickNotepadActions implementation //
/*autoalloc*/
// JSR_W
// WORD BREAK OPERATOR //  \b if ????
// if at least one property listed here is true, // load the plugin
//////////////////////////////////////////////////////////////////////// // Constants. ////////////////////////////////////////////////////////////////////////
// multiple files w/ word bonus
/* XXX */
// send full range of events to avoid breaking plugins
"/*     * always: in the range 0 .. 9.     * The current block size is 100000 * this number.     */"
// -------------------------------------------------------------------------- // Utility methods: instruction resizing (used to handle GOTO_W and JSR_W) // --------------------------------------------------------------------------
"/*			If we've fallen through here we are no longer resolving to			a class type.		*/"
//{{{ Position center (edit pane, or split pane)
// the +1's ensure that 99 gets 3 digits, 103 gets 4 digits, // and so on.
//{{{ getDefaultProperty() method
// 2nd step: // copies the bytecode of the method into a new bytevector, updates the // offsets, and inserts (or removes) bytes as requested.
//{{{ loadProps() method
//{{{ moveDown() method
// getClassInstance() throws exception if not there
// can't override prefix shortcuts
//{{{ showBufferSwitcher() method
// returns false with outdated cache
// no duplicates, check for all-whitespace string
"/*                 * Set group start & end marks.                 */"
//{{{ Mode constructor
//{{{ Private members // used to mark words to ignore (see constructor for the list)
// we might have been closed as a result of // the above
// tool bar and status bar gets added in propertiesChanged() // depending in the 'tool bar alternate layout' setting.
"/*			Is it a class name?			If we're just starting eval of name try to make it, else fail.		*/"
// Java object
// skip throws
// Do not evaluate methods this() or super() in class instance space // (i.e. inside a constructor)
// Set the default entities here.
"/*         * Decide how many coding tables to use         */"
// Set up the input variables
// -------------------------------------------------------------------------- // Direct conversion from classes to type descriptors, // without intermediate Type objects // --------------------------------------------------------------------------
// private to prevent invocation with param that isn't a primitive-wrapper
//{{{ getLastPhysicalLine() method
"/*             * Generate an initial set of coding tables             */"
// endIndex is now position at a ')','\)'  // nextIndex is end of string or position after ')' or '\)'
//{{{ isCellEditable() method
// run jEditLauncher installation
// -1 so that the last isn't checked
// For operator-assign operations save the lhs value before evaluating // the rhs.  This is correct Java behavior for postfix operations // e.g. i=1; i+=i++; // should be 2 not 3
// nameSpaceChanged() on new variable addition
//{{{ getExtendedState() method
"/* replaceBtn = new JButton(jEdit.getProperty(""search.replaceBtn""));		replaceBtn.setMnemonic(jEdit.getProperty(""search.replaceBtn.mnemonic"")			.charAt(0));		grid.add(replaceBtn);		replaceBtn.addActionListener(actionHandler); */"
// Trying to cast primitive to an object type // Primitive.NULL can be cast to any object type
// forward jump
//{{{ addRuleSet() method
// number of nodes on stack // current mark
// set an untyped variable directly in the block
//}}} //{{{ Clockwise rotation
// ...and adds it to the successor list of the currentBlock block
// remove action sets, dockables, etc so that user doesn't // see the broken plugin
// Special handling at end of input for e.g. "$"
// create app start script
// replaces old bytecodes with new ones
// find end of subexpression
// freeze the callstack for the stack trace.
//{{{ updateUI() method
//{{{ getTokenMarker() method
//{{{ getTreeCellRendererComponent() method
// linked list of tokens (sort of -- some closed loops can exist)
// appends the [head ... tail] list at the beginning of the pool list
"/*                 * Calculate the cost of this group as coded                 * by each of the coding tables.                 */"
// // Base external identifiers for resolution. //
// removes b from the pool
// the problem with this is that if we have two edit panes // looking at the same buffer and the file is reloaded both // will jump to the same location
// adds the previous Edge to the list of Edges used by this CodeWriter
// returns the positions of the resized instructions
// later on we need to know if certain code is called from // the main thread
//{{{ saveGeometry() method
//}}} //{{{ Insert the expansion
// JDK 1.4 adds methods to obtain a drive letter label and // list the desktop on Windows
//{{{ GZipped setting
//{{{ setFoldLevel() method // Also sets 'fold level valid' flag
//}}} //{{{ Bottom...
/* do nothing! */
// Push nulls for various args of invokeMethod // interpreter // callstack // callerinfo
"/* call sendBreak after fixed number of			 * lines of stdout are read			 */"
//{{{ DockableLayout class
// get the title here, not in the factory constructor, // since the factory might be created before a plugin's // props are loaded
// Note: it's ok to cache class resolution here because when the class // space changes the namespace will discard cached names.
"/*                 * Increment the symbol frequencies for the selected table.                 */"
//{{{ getCheckedValues() method
//{{{ DummyRenderer class
// If only one new file is open which is clean, just close // it, which will create an 'Untitled-1'
// backward jump
//{{{ endElement() method
//{{{ createDockableWindow() method
"/* substitute result of matching the rule start				 * into the end string.				 *				 * eg, in shell script mode, <<\s*(\w+) is				 * matched into \<$1\> to construct rules for				 * highlighting read-ins like this <<EOF				 * ...				 * EOF				 */"
//{{{ setTokenMarker() method
// Order these from longest to shortest // Start by assuming longest (more repeats)
//{{{ isManagingFocus() method
// This String will be returned by getVersion()
// check whether this shortcut already exists
// remember old values, in case action changes them
//{{{ getSymbolicName() method
// Big enough for a \r\n pair // lookBehind[0] = most recent // lookBehind[1] = second most recent
// Define the new class in the classloader
// Skip whitespace at the end.
// Is this it? // Is the class public or can we use accessibility?
"/*                 * copy 2                 */"
/* we don't handle key pressed A+ */
// - don't do these checks while a save is in progress, // because for a moment newModTime will be greater than // oldModTime, due to the multithreading // - only supported on local file system
// resolve symlinks to avoid loops
// true (non relative) max stack size
// Create the class static namespace
// so that we don't see the same tip again if the user // clicks 'Next Tip'
/* --- End static members --- */
// Precalculate these so we don't pay for the math every time we // need to access them.
//{{{ handleNoWordBreak() method
// updates current stack size (max stack size unchanged because stack // size variation always negative or null)
// Method invocation // (LHS or non LHS evaluation can both encounter method calls)
//{{{ getNextRequest() method
// on by default
"/*         * And finally, the block data proper         */"
// fix for "[ 865589 ] 0-byte files should open using // the default line seperator"
//{{{ doAWTRequest() method
// if the file size is not known, start with a resonable // default buffer size
"/*                 * Process big buckets, starting with the least full.                 */"
"/*             * The main sorting loop.             */"
// create a DirectoryEntry manually // instead of using _vfs._getDirectoryEntry() // since so many VFS's have broken // implementations of this method
// fill in defaults for these from system properties if the // corresponding buffer.XXX properties not set
// check to see if the instance has already been initialized // (the case if using a this() alternate constuctor)
// the start and end flags will be wrong with reverse search enabled, // but they are only used by the regexp matcher, which doesn't // support reverse search yet. // // REMIND: fix flags when adding reverse regexp search.
// Java does not support this encoding so // we have to handle it manually.
// just as if Enter was pressed in another // text field
// we didn't have a component previously, so // create a border
"/*	Gather modifiers for a class, method, or field.	I lookahead is true then we are being called as part of a lookahead and we	should not enforce any rules.  Otherwise we validate based on context	(field, method, class)*/"
//{{{ WorkThreadHandler class
// this ensures that undo can clear the dirty flag properly // when all edits up to a save are undone
"/*         * Now another magic 48-bit number, 0x177245385090, to         * indicate the end of the last block.  (sqrt(pi), if         * you want to know.  I did want to use e, but it contains         * too much repetition -- 27 18 28 18 28 46 -- for me         * to feel statistically comfortable.  Call me paranoid.)         */"
/*LDC2_W*/
"/*             * Transmit the mapping table.             */"
"/*			Is it a bsh script variable reference?			If we're just starting the eval of name (no base object)			or we're evaluating relative to a This type reference check.		*/"
//{{{ updateAssignedTo() method
// begins a new current block, // resets the relative current and max stack sizes
// Stop script kiddies from opening the edit // server port and just leaving it open, as a // DoS
// Anchor position refers to the index into the source input // at which the matching operation began. // This is also useful for the ANCHORINDEX option.
// show "remove" button
// Either class sun.tools.javac.Main or // com.sun.tools.javac.Main must be there:
//{{{ getFocusTraversalKeysEnabled() method
//Remember to make this an option later //NSApplication.sharedApplication().hide(jEdit.getPlugin("MacOSPlugin"));
////////////////////////////////////////////////////////////////////// // High-level I/O. //////////////////////////////////////////////////////////////////////
// GOTO_W
// ... and we save them in order not to recompute them in the future
// check for match inside line
//{{{ setShortcut() method
// Try to load the module // don't refer to it directly here or we're dependent upon it
// Fail silently, since we may be using UFS
// the above sizes have not been computed yet, so we compute them...
// // I/O information. // // current reader // current input stream // current line number // current column number // type of input source // stack of input soruces // current external entity // current character encoding. // how many bytes read from current source.
// updates the instructions addresses in the // catch, local var and line number tables
// no stack change, but end of current block (with one new successor)
// types for NEWARRAY
// analyses the successors of the block
// ends current block (with one new successor)
//{{{ getPluginIcon() method
// Some Java versions return the clipboard // contents using the native line separator, // so have to convert it here
// Push the name of the method as a constant
// user cancelled???
//case Constants.PUTFIELD:
"/*         * The back end needs a place to store the MTF values         * whilst it calculates the coding tables.  We could         * put them in the zptr array.  However, these values         * will fit in a short, so we overlay szptr at the         * start of zptr, in the hope of reducing the number         * of cache misses induced by the multiple traversals         * of the MTF values when calculating coding tables.         * Seems to improve compression speed by about 1%.         */"
// in case macro file name has a space in it. // spaces break the view.toolBar property, for instance, // since it uses spaces to delimit action names.
// now that we know how many chars there are, get the width.
// -------------------------------------------------------------------------- // Static initializer // --------------------------------------------------------------------------
// ignore if already added. // see comment in loadMacros().
// computes the stack size variation
// clone() separates a single match from the chain
// changes the opcode of the jump instruction, in order to be able to // find it later (see resizeInstructions in CodeWriter). These // temporary opcodes are similar to jump instruction opcodes, except // that the 2 bytes offset is unsigned (and can therefore represent // values from 0 to 65535, which is sufficient since the size of a // method is limited to 65535 bytes).
// // EBComponent implementation //
//throw new CError();
// ask whether to remove the old shortcut
// Wait for pending I/O requests
//{{{ getKeyBinding() method
// over estimation of the number of bytes to be added to this // instruction = 3 - current number of padding bytes = 3 - (3 - // u%4) = u%4 = u & 3
// // Attribute methods //
"/*     * If you are ever unlucky/improbable enough     * to get a stack overflow whilst sorting,     * increase the following constant and try     * again.  In practice I have never seen the     * stack go above 27 elems, so the following     * limit seems very generous.     */"
// helper method to get Font from plugin properties
// throw new IOException("Invalid block size");
// on insert, start search from beginning of // current match. This will continue to highlight // the current match until another match is found
//for backwards compatibility, the color variable is stored also as a property
// -------------------------------------------------------------------------- // Utility methods: control flow analysis algorithm // --------------------------------------------------------------------------
// Useful for debugging purposes
// -------------------------------------------------------------------------- // Other public methods // --------------------------------------------------------------------------
//{{{ ensureCapacity() method
//}}} //{{{ Paint bracket scope
//{{{ synchronizeMultiFileSettings() method
// If the param is typed check assignability
// Start with a little cheat -- in most // cases, the entire sequence of // character data will already be in // the readBuffer; if not, fall through to // the normal approach.
// Look for a declaration subset.
//{{{ append() method
// allocates a byte vector of this size, in order to avoid unnecessary // arraycopy operations in the ByteVector.enlarge() method
// computes the real size of the bytecode of this class
"//		Log.log(Log.DEBUG,this,""Running in AWT thread: "" + request);"
// -------------------------------------------------------------------------- // Implementation of the ClassVisitor interface // --------------------------------------------------------------------------
//{{{ goToNextWord() method
// Find longest match of them all to observe leftmost longest
// we were the first to add an update; // add update sending runnable to AWT // thread
//{{{ getCaretLine() method
//{{{ smartEnd() method
//{{{ filesActivated() method // canDoubleClickClose set to false when ENTER pressed
//{{{ getSelectedText() method
//{{{ getStructureMatch() method
//{{{ goToStartOfLine() method
// case MANA_INSN:
// check whether the other shortcut is the alt. shortcut
// for compatibility with older jEdit versions
// to hide current line highlight
// we have binding foo // but user asks to remove foo bar?
//{{{ getNonAlphaNumericChars() method
//{{{ getStructureHighlightColor() method
// impl note: since multiple searches now allowed, // extra level in hierarchy
// Check for backup.directory, and create that // directory if it doesn't exist
"/*				If this was a literal ""super"" reference then we allow recursion				in setting the variable to get the normal effect of finding the				nearest definition starting at the super scope.  On any other				resolution qualified by a 'this' type reference we want to set				the variable directly in that scope. e.g. this.x=5;  or 				someThisType.x=5;								In the old scoping rules super didn't do this.			*/"
//{{{ setSortType() method
// the entire save operation can be aborted...
//{{{ loadMenuItem() method
// proxy port
// skips 0 to 3 padding bytes
//{{{ Delegate methods
//{{{ getPhysicalLineOfScreenLine() method
// when the text area switches to us, it will do // a reset anyway
// opcodes                  // visit method (- = idem)
//{{{ loadMenu() method
// invalid regexp, ignore // return true to avoid annoying beeping while // typing a re
// special case: no current development version
// since recentBuffer will be set to the one that // was closed
// old plugins expected jEdit 4.1-style // behavior, where a PropertiesChanged // was sent after plugins were started
// this is handled a little differently from other jEdit settings // as the splash screen flag needs to be known very early in the // startup sequence, before the user properties have been loaded
"// If recurse, set global untyped var, else set it here.	 //NameSpace varScope = recurse ? getGlobal() : this; // This modification makes default allocation local"
//{{{ Screen line stuff
// synchronized
// Check for PCDATA alone.
// check escape rule of parent
// index+1 works for [^abc] lists, not for generic lookahead (--> index)
// still have to call this even if it equals the // old one so that the offset manager sets the // validity flag!
// The object instance has already been initialzed by another // constructor.  Fall through to invoke the constructor body below.
"/* if the VFS supports renaming files, we first			 * save to #<filename>#save#, then rename that			 * to <filename>, so that if the save fails,			 * data will not be lost.			 *			 * as of 4.1pre7 we now call vfs.getTwoStageSaveName()			 * instead of constructing the path directly			 * since some VFS's might not allow # in filenames.			 */"
"//item.setImage(NSWorkspace.sharedWorkspace().iconForFile( //	buffs[i].getPath()));"
// Figure out if this is a start tag // or an empty element, and dispatch an // event accordingly.
// loop until the subset ends
"/* read() and write() must be kept perfectly in sync...		 * its a very simple file format. doing it this way is		 * faster than serializing since serialization calls		 * reflection, etc. */"
// If it had a different type throw error. // This allows declaring the same var again, but not with // a different (even if assignable) type.
// add the JARs before checking deps since dep check might // require all JARs to be present
//{{{ InputPane class
// we don't need two identical shortcuts
"/*		Our children are a prefix expression and any number of suffixes.		<p>		We don't eval() any nodes until the suffixes have had an		opportunity to work through them.  This lets the suffixes decide		how to interpret an ambiguous name (e.g. for the .class operation).	*/"
//{{{ KeyBinding class
// put forNameSpace it on the top of the stack // Note: it's important that there is only one exit point from this // method so that we can swap back the namespace.
// -------------------------------------------------------------------------- // Fields // --------------------------------------------------------------------------
//{{{ addOptionGroup() method
//{{{ addMarker() method
//{{{ FontSelectorDialog class
//{{{ setEOLMarkerColor() method
// we keep the first non-null frc we get, since sometimes // we get invalid ones on subsequent pages on Windows
// UCS-2 without a BOM must begin with "<?XML" // 0x3c 0x00 0x3f 0x00: UCS-2, little-endian, no byte-order mark
// auto-detect encoding within the gzip stream.
//{{{ run() method
//{{{ _setScreenLineCount() method
//{{{ this ensures that the text area's look is slightly // more consistent with the rest of the metal l&f. // while it depends on not-so-well-documented portions // of Swing, it only affects appearance, so future // breakage shouldn't matter
"/* 				Try toObject() which knows how to work through inner classes				and see what we end up with 			*/"
// Interpreter.debug("Simple var LHS...");
// empty line. inherit previous line's fold level
// Superclass method invocation? (e.g. super.foo())
/* in collapsed range */
"/* Having all the info packed into an int is not very OO and makes the	 * code somewhat more complicated, but it saves a lot of memory.	 *	 * The new document model has just 12 bytes of overhead per line.	 * LineContext instances are now internalized, so only a few should	 * actually be in the heap.	 *	 * In the old document model there were 5 objects per line, for a	 * total of about 100 bytes, plus a cached token list, which used	 * another 100 or so bytes. */"
"/*			Some duplication for ""super"".  See notes for ""this"" above			If we're in an enclsing class instance and have a superclass			instance our super is the superclass instance.		*/"
// skips instruction
// if one line's chunks are invalid, remaining lines are also // invalid
"/*		Perform a suffix operation on the given object and return the 		new value.		<p>		obj will be a Node when suffix evaluation begins, allowing us to		interpret it contextually. (e.g. for .class) Thereafter it will be 		an value object or LHS (as determined by toLHS).		<p>				We must handle the toLHS case at each point here.		<p>	*/"
//{{{ Marker constructor
// pushes this successor onto the stack
/*LDC_W*/
//{{{ _setContent() method
//{{{ redo() method
// If type already assignable no cast necessary // We do this last to allow various errors above to be caught. // e.g cast Primitive.Void to Object would pass this
// copy text before gap
// remove the bsh:// // get the index of the : between the host and the port is located
// getAssignable would catch this for typed param
// If lastWasCR is true, // we just read a \r followed // by a \n. We specify that // this is a Windows file, // but take no further // action and just ignore // the \r.
// Get the type by constructing a prototype array with // arbitrary (zero) length in each dimension. // int array default zeros
// That's it, we have a match!
// queue of undos. last is most recent, first is oldest
//{{{ selectPane() method
// give all text areas the same font
// this ensures that undo can clear // the dirty flag properly when all // edits up to a save are undone
//{{{ save() method
// Found an existing variable here (or above if recurse allowed)
// note that if firstLine == lastLine, loop does not // execute
// The lock is our declaring namespace's This reference // (the method's 'super').  Or in the case of a class it's the // class instance.
//{{{ setBuffer() method
// Because the clipRect's height is usually an even multiple // of the font height, we subtract 1 from it, otherwise one // too many lines will always be painted.
//{{{ getFoldLineStyle() method
// computes the true (non relative) max stack size of this block
// Set untyped variable // untyped param
//{{{ paintValidLine() method
// Write simple script
//{{{ setLineHighlightColor() method
//{{{ VFS constructor
// This should not happen with checkOnly true
//{{{ Remove constructor
// Unwrap target exception.  If the interface declares that  // it throws the ex it will be delivered.  If not it will be  // wrapped in an UndeclaredThrowable
//{{{ unloadPluginJAR() method
//{{{ If nothing entered, show search and replace dialog box
//{{{ preContentRemoved() method
// cwd not implemented in this version
//super(); //}}}
/*@bgen(jjtree) CastExpression */
"/*			Evaluate our prefix if it needs evaluating first.			If this is the first evaluation our prefix mayb be a Node 			(directly from the PrimaryPrefix) - eval() it to an object.  			If it's an LHS, resolve to a value.			Note: The ambiguous name construct is now necessary where the node 			may be an ambiguous name.  If this becomes common we might want to 			make a static method nodeToObject() or something.  The point is 			that we can't just eval() - we need to direct the evaluation to 			the context sensitive type of result; namely object, class, etc.		*/"
"/*         * A 6-byte block header, the value chosen arbitrarily         * as 0x314159265359 :-).  A 32 bit value does not really         * give a strong enough guarantee that the value will not         * appear by chance in the compressed datastream.  Worst-case         * probability of this event, for a 900k block, is about         * 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits.         * For a compressed file of size 100Gb -- about 100000 blocks --         * only a 48-bit marker will do.  NB: normal compression/         * decompression do *not* rely on these statistical properties.         * They are only important when trying to recover blocks from         * damaged files.         */"
// Set up a snapshot of the current // input source.
//in.close();
//{{{ addInstall() method
//{{{ write() method
//{{{ startPlugin() method
//{{{ uninit() method
//{{{ menuDeselected() method
//{{{ ShowFileAction class
// // Buffer for undecoded raw byte input. //
// cache the fact that this is a static method invocation on this class
//{{{ performOperationsInAWTThread() method
//{{{ RemoveAllTreeNodesAction class
// Invoke the method This.invokeMethod( name, Class [] sig, boolean )
// we use a custom JRadioButton subclass that returns // false for isFocusTraversable() so that the user can // tab from the search field to the replace field with // one keystroke
/* end of prev expanded range */
//{{{ paintLine() method
"/*         * Assign actual codes for the tables.         */"
// this constructor is the value of the hash table
// To avoid any problems if components are added or removed // while the message is being sent
// Pass 3: layout components
// in case saved geometry is too small
"/*			--------------------------------------------------------			After this point we're definitely evaluating relative to			a base object.			--------------------------------------------------------		*/"
// Macros
/* This will fire the PROPERTIES_CHANGED event */
// not a class (or variable per above)
"/*				Keep adding parts until we have a class 			*/"
//{{{ updateSize() method
//{{{ OptionTreeModel class
// previous round produced null
//{{{ Soft tabs
//{{{ getFontProperty() method
// Not found -- we'll have to add it.
// this model may not be changed by the TableCellEditor
//setFont(new Font("Dialog",Font.BOLD,10));
"/*			Do some basic validity checks.		*/"
//{{{ Line separator
// returns false if no such pane exists; calling with null // param selects first option pane found
//{{{ Indent size
//&& thisNameSpace.getParent().classInstance != null
// previous round produced void
//{{{ Fold mode
// Do we have to grow the bucket?
//{{{ FontSelector constructor
//{{{ Wrap mode
// find the enclosing class instance space of the class name
// Class qualified 'this' reference from inner class. // e.g. 'MyOuterClass.this'
// Stop if there are no more tuples.
//{{{ setAntiAliasEnabled() method
//{{{ isAntiAliasEnabled() method
// Stop when we hit a null index.
// If they're the same length, // check for a match. // If the loop finishes, 'index' will // contain the current bucket // position.
/* M+ discarded by key event workaround! */
//{{{ updateText() method
//{{{ getZipFile() method
//{{{ createTextFieldAndListPanel() method
// Get the bucket.
//{{{ updatePreview() method
//{{{ addTranslation() method
//{{{ getFontList() method
//{{{ getSelectedFont() method
/* fonts = getToolkit().getFontList(); */
//{{{ remove() method
//{{{ translateKeyEvent() method
// get the previous context (see notes for this class)
// inner class?
//{{{ parseKey() method
//{{{ getSymbolicModifierName() method
// static field?
// length access on array? 
// super is now the closure's super or class instance
"//Log.log(Log.DEBUG, MiscUtilities.class, //	""- is not in system classpath.""); //}}}"
// if we get here we have failed
/* not a field */
// early return
//{{{ getBorderInsets() method
//{{{ show() method
// removing last component, so remove border
//{{{ ResizeMouseHandler class
//{{{ register() method
//{{{ getCurrent() method
//{{{ Create button
//{{{ Key class
//{{{ showMostRecent() method
//{{{ setDimension() method
"/* Defer to whoever loaded us (such as JShell,			 * Echidna, etc) */"
//{{{ unregister() method
//{{{ Button box setup
//{{{ getDimension() method
"/*			Doing instanceof?  Next node is a type.		*/"
//{{{ paintBorder() method
//{{{ sortDockables() method
//{{{ getDockables() method
//{{{ MenuMouseHandler class
// remember the most recent dockable
//{{{ paintVertBorder() method
//case 3:
//{{{ DockablePanel class
/* Try straightforward class name first */
//{{{ paintHorizBorder() method
//{{{ isBorderOpaque() method
// "var" means untyped, return null class
//{{{ DockBorder constructor
//{{{ getWindowContainer() method
//{{{ getResourceAsStream() method
//{{{ updateColors() method
// Null interpreter and callstack references. // class only resolution should not require them.
// Simple (non-compound) variable assignment e.g. x=5;
// couldn't resolve it
//{{{ addLayoutComponent() method //}}}
//{{{ getIconWidth() method
/*autoallocthis*/
//{{{ paintIcon() method
// Field e.g. foo.bar=5;
//height = (int)glyphs.getLogicalBounds().getHeight();
//{{{ DockablePanel constructor
// nothing 'cept close box
//{{{ No rotation
//}}} //{{{ Left...
//{{{ getResource() method
// found a non-backslash char.
"/*          We'll print our banner using eval(String) in order to          exercise the parser and get the basic expression classes loaded...          This ameliorates the delay after typing the first statement.        */"
"/*				Primitive (number or void) is not normally an instanceof				anything.  But for internal use we'll test true for the				bsh.Primitive class.  				i.e. (5 instanceof bsh.Primitive) will be true			*/"
//{{{ Top...
//{{{ getVirtualWidth() method
// -------------------------------------------------------------------------- // Conversion to type descriptors // --------------------------------------------------------------------------
//{{{ getOffsetOfVirtualColumn() method
//{{{ getResourceAsPath() method
//{{{ getOpenParenIndent() method
// collapsed
// dissallow assignment to magic fields
//}}} //{{{ Right...
// e.g. this.x=5;  or someThisType.x=5;
// Finished eval and its a class.
// can't happen?
//{{{ getBooleanProperty() method
"/*		object is a java.lang wrapper for boolean, char, or number type	*/"
// ALTERNATION OPERATOR //  \| or | (if RE_NO_BK_VBAR) or newline (if RE_NEWLINE_ALT) //  not available if RE_LIMITED_OPS is set
//{{{ removeBufferFromList() method
// -------------------------------------------------------------------------- // Fields for the control flow graph analysis algorithm (used to compute the // maximum stack size). A control flow graph contains one node per "basic // block", and one edge per "jump" from one basic block to another. Each node // (i.e., each basic block) is represented by the Label object that // corresponds to the first instruction of this basic block. Each node also // stores the list of its successors in the graph, as a linked list of Edge // objects. // --------------------------------------------------------------------------
//{{{ EnhancedMenuItem constructor
// Start copying to the left.
// Begin Cached result structures // These are optimizations 
/*, ReflectError, InvocationTargetException*/
//{{{ insert() method
// EnhancedDialog implementation
//{{{ setBorderPainted() method
// this one only finds public (and in interfaces, etc.)
// overflow character from last data chunk.
"/* A definite node is constructed from a specified number of     children.  That number of nodes are popped from the stack and     made the children of the definite node.  Then the definite node     is pushed on to the stack. */"
// Try explicitly imported class, e.g. import foo.Bar;
// don't do this in static{} since we need jEdit.initMisc() // run first so we have the jeditresource: protocol
//{{{ recordMacro() method
"/* if value is null:		 * - if default is null, unset user prop		 * - else set user prop to """"		 * else		 * - if default equals value, ignore		 * - if default doesn't equal value, set user		 */"
//{{{ LogViewer constructor
// the first element of pp is the abbrev itself
//{{{ setEnabled() method
// SUBEXPRESSIONS //  (...) | \(...\) depending on RE_NO_BK_PARENS
//{{{ loadIfNecessary() method
// -------------------------------------------------------------------------- // Implementation of the CodeVisitor interface // --------------------------------------------------------------------------
//{{{ LogList class
//{{{ checkForExistingAbbrev() method
//{{{ paint() method
//{{{ ResultIcon class
// try static method
//{{{ parseKeyStroke() method
//{{{ isOpaque() method
// Normalise all other whitespace to // a single space.
//{{{ EditAbbrevDialog constructor
//}}} //{{{ Handle ordinary abbrevs
//{{{ Maybe show add abbrev dialog
// Do we have the necessary jdk1.2 packages and optional package?
//{{{ getGlobalAbbrevs() method
// I guess this is when we pass it as an argument? // Setting locally
// not a comment // create RE subexpression as token.
//{{{ setProperties() method
//{{{ getSize() method
//{{{ setGlobalAbbrevs() method
//{{{ removeToolBar() method
// F10 should be passed on, but C+e F10 // shouldn't
//{{{ saveHistory() method
// // Hash table of attributes found in current start tag. //
/*ignore*/
// Generate a hash code.
// UNMATCHED RIGHT PAREN // ) or \) throw exception if // !syntax.get(RESyntax.RE_UNMATCHED_RIGHT_PAREN_ORD)
// Place the toolbar at the bottom of the group
// need to carry over file name and first line globs because they are // not given to us by the XMode handler, but instead are filled in by // the catalog loader.
//{{{ addItem() method
//{{{ loadHistory() method
//{{{ setCurrentBindings() method
// Stores prefix name in bindings hashtable
//{{{ ToolBarManager constructor
// select the appropriate tree node.
//{{{ getElementAt() method
//{{{ HelpSearchPanel constructor
// OK, do it by the book.
// set proxy authentication
// Expand buffer if necessary.
// check the next character
// MATCH-ANY-CHARACTER OPERATOR (except possibly newline and null) //  .
//{{{ JARClassLoader constructor
// no need to do this for macros!
// Skip whitespace at the start.
//{{{ accept() method
// system id
//{{{ Instance members
// Return the value.
//{{{ ResultCompare class
// we later use this to compute a relative ranking
// end EnhancedDialog implementation
//{{{ HelpViewer constructor
//{{{ getShortURL() method
//{{{ gotoURL() method
// public id
//{{{ ResultRenderer class
//{{{ queueTOCReload() method
//{{{ getBaseURL() method
// Literals never have line ends
//{{{ loadTOC() method
//{{{ HelpFile class
// Read the first character.
//{{{ evalSelection() method
//{{{ showEvaluateDialog() method
//{{{ showEvaluateLinesDialog() method
//{{{ LinkHandler class
// reset default cursor so that the hand cursor doesn't // stick around
/*checkonly*/
//{{{ indexJAR() method
//{{{ HelpIndex constructor
// the TOC pane looks up user's guide URLs relative to the // doc directory...
//{{{ applicationShouldHandleReopen() method
// Try static and then object, if allowed // Note that the Java compiler should not allow both.
// ZERO-OR-MORE REPEAT OPERATOR //  *
// see what JARClassLoader this class is in
//{{{ indexEditorHelp() method
// search all of its interfaces breadth first
// Find the delimiter.
//{{{ hyperlinkUpdate() method
// Read the literal.
//{{{ indexDirectory() method
//{{{ PropertyChangeHandler class
//{{{ createNode() method
//{{{ ignoreWord() method
/*  || lname.endsWith(".txt") */
// so that HelpViewer constructor doesn't try to expand
// WORD BEGIN OPERATOR  //  \< if ????
// used to mark non-existent classes in class hash
// evaluate a method declaration
// -------------------------------------------------------------------------- // Utility methods: dump bytecode array // --------------------------------------------------------------------------
// the word
// should try to print usage here if nothing found
//{{{ addWord() method
//{{{ indexURL() method
//{{{ selectNode() method
//{{{ Word class
// Look for a BeanShell command
// files it occurs in
// If defined, invoke it
//{{{ HelpTOCPanel constructor
// else fall through...
//{{{ HelpNode constructor
//{{{ attribute() method
//{{{ TOCHandler class
"/*        NULL means ""no value"".        This ia a placeholder for primitive null value.    */"
////////////////////////////////////////////////////////////////////// // High-level reading and scanning methods. //////////////////////////////////////////////////////////////////////
//{{{ CustomClassManager class
//{{{ cut() method
//{{{ TOCHandler constructor
//{{{ TOCCellRenderer class
//ToolTipManager ttm = ToolTipManager.sharedInstance();
//{{{ cellRectIsVisible() method
//{{{ Path name methods
//{{{ TOCTree constructor
//{{{ SendVFSUpdatesSafely class
//{{{ TOCTree class
//{{{ constructPath() method
//{{{ getFileVFS() method
//{{{ VFS methods
//{{{ PluginCompare class
//{{{ getUrlVFS() method
//{{{ registerVFS() method
//{{{ Static variables
// if we are already in the AWT thread, take a shortcut
//{{{ runInAWTThread() method
//{{{ error() method
//{{{ runInWorkThread() method
//{{{ getVFSByName() method
//{{{ getRegisterStatusPrompt() method
//{{{ getVFSForPath() method
// in new api, protocol always equals name
//{{{ Class initializer
//{{{ getVFSs() method
//{{{ getFilesystems() method
//{{{ getVFSForProtocol() method
//{{{ waitForRequests() method
// don't send two updates // for the same path
// NON-SPECIAL CHARACTER (or escape to make literal) //  c | \* for example
//{{{ getRegister() method
//{{{ errorOccurred() method
//{{{ getRequestCount() method
//{{{ getIOThreadPool() method
//{{{ sendVFSUpdate() method
//{{{ I/O request methods
// use system default short format
//{{{ getLeadingWhiteSpaceWidth() method
//{{{ addGlobalAbbrev() method
//{{{ _createOutputStream() method
//{{{ loadColors() method
//{{{ setPermissions() method
//{{{ lookupWord() method
//{{{ getFileName() method
//{{{ HelpNode class
//{{{ getParentElement() method
// Register the notation.
//{{{ getParentOfPath() method
//{{{ UrlVFS constructor
// // When the class is loaded, populate the hash table of // attribute types. //
//{{{ _rename() method
"/*		If this type of This implements it directly return this,		else try complain that we don't have the proxy mechanism.	*/"
/*bcm*/
// Overrides REToken.chain
// clear the static caches in BshClassManager
//{{{ getStringProperty() method
//{{{ setStringProperty() method
//{{{ Check if file is valid
//{{{ getFileSeparator() method
//{{{ FileVFS method
//{{{ _delete() method
// end compound name routines
//{{{ LocalDirectoryEntry class
// this is needed because on OS X renaming to a non-existent // directory causes problems
//{{{ _backup() method
//{{{ _mkdir() method
//}}} //{{{ KEY_RELEASED...
// If null callstack
// arithmetic
/*eof*/
// this has been changed since 1.03 to be non-overlapping matches
// have to handle this case specially on windows. // insert \ between, eg A: and myfile.txt.
// -------------------------------------------------------------------------- // Utility methods: constant pool management // --------------------------------------------------------------------------
//{{{ ToolBar-related constants
//{{{ setBooleanProperty() method
//{{{ getModeAbbrevs() method
//{{{ setModeAbbrevs() method
//{{{ addToFavorites() method
//{{{ TableMouseHandler class
//{{{ Permission preservation code
//{{{ _saveComplete() method
//{{{ setModifierMapping() method
//{{{ getIntegerProperty() method
//{{{ getPermissions() method
// assignment to loose type, void type, or exactly same type
//{{{ getTrailingWhiteSpace() method
//{{{ saveBackup() method
//{{{ Layers
//{{{ FavoritesVFS constructor
//{{{ saveFavorites() method
//{{{ FavoritesEntry class
//{{{ getFavorites() method
//{{{ loadFavorites() method
//{{{ listRoots() method
// Make sure people don't do stupid things like putting files in /Volumes
//{{{ addModeAbbrev() method
// only load global abbrevs if user abbrevs file could not be loaded
"/* if backup file was created less than			 * 'backupTimeDistance' ago, we do not			 * create the backup */"
//{{{ actionBar() method
//{{{ countNewlines() method
//{{{ getFile() method
//{{{ autodetect() method
"/*		Note: it may see like with the new 1.3 scoping this test could be		removed, but it cannot.  When recurse is false we still need to set the		variable in our parent, not here.	*/"
//{{{ getExtendedAttributes() method
//{{{ reloadDirectory() method
//{{{ MarkersMenuItem constructor
// Fetch properties
//{{{ showBrowseDialog() method
//{{{ RootsEntry class
//{{{ getCapabilities() method
// to prevent windows looking for a disk in the floppy drive
// null evalname and we're finished // base object for current eval
// Begin BeanShell Modification - constructor
"/*	Originally called ResultType in the grammar*/"
// reasonable defaults (?)
/*checkOnly*/
//{{{ Extended attributes
//{{{ Capabilities
//{{{ indexStream() method
// this ensures that getFileParent("protocol:"), for // example, is "protocol:" and not "".
// Casting to reference type
// don't want getFileName("roots:") to return ""
// Cannot cast from arbitrary object to primitive
//{{{ getEditPanes() method
// must be null in checkOnly
//{{{ getExtendedAttribute() method
// A method name that starts with _ requires a session object
// Currently unused, but we'll probably need it later.
//{{{ createVFSSession() method
// ignore last character of path to properly handle // paths like /foo/bar/
//{{{ getTwoStageSaveName() method
//{{{ updateEveryTime() method
//{{{ AppearanceOptionPane constructor
// Inform the handler about the // attribute.
// If return type void, return void as the value.
// EOF, not zero read apparently
"/* * Expression syntax follows. */"
// Precondition: pattern[index-1] == ':' // we will return pos of closing ']'.
// box it
//{{{ setIntegerProperty() method
// will be cached from now on...
//{{{ getRegexpProperty() method
//{{{ getRuleSetAtOffset() method
// Collect blocks of up to maxItems of consecutive letters
//{{{ _endVFSSession() method
// set the var here in the block namespace
//e.printStackTrace();
// super.variables.containsKey( name ) not any faster, I checked
// set the var in the enclosing (parent) namespace
// Found "<?"
//{{{ getClassName() method
/*strict?*/
//current.addSeparator();
//{{{ File types
/*@bgen(jjtree) MethodInvocation */
// Check for {} tomfoolery
//{{{ parsePermissions() method
// we have to deal with a huge range of possible border cases here.
// Should never come here
// for filtering out backups
//{{{ MarkersMenuItem class
//{{{ ActionListeners
//{{{ DirectoryEntry constructor
// ClassPathException is a type of UtilEvalError
//{{{ getColor() method
// skip marker files
// Read all the backslashes
// skip backup files
// if less than 20 items, put them directly in the menu
// Generate code to push the BSHTHIS or BSHSTATIC field 
/*@bgen(jjtree) Arguments */
// We could let a String fall through to final input, but since // it's the most likely input type, we check it first.
// Sort each letter
// no background mode, and opening a new view
//{{{ keyPressed() method
//{{{ addToLetterMap() method
//{{{ Expansion class
//{{{ old API
// We build a set of lists, each list contains plugin menu // items that begin with a given letter.
//{{{ loadAbbrevs() method
//{{{ eval() method
/*@bgen(jjtree) Block */
//{{{ _eval() method
/* int */
//{{{ saveAbbrevs() method
// Push 'this'
// write global abbrevs
//{{{ getFirstInvalidFoldLevel() method
// write mode abbrevs
// Parse mixed content.
//{{{ CompoundEdit class
// Read the first token.
//{{{ getBuffer() method
//{{{ isScreenLineCountValid() method
// // Constants for element content type. //
//{{{ DirectoryProvider constructor
//{{{ add() method
//{{{ Model class
//{{{ menuSelected() method
// Both numeric wrapper types?  // Try numeric style promotion wrapper cast
//{{{ getSplitConfig() method
// assign doesn't need the pre-value
// Finish the declaration.
//{{{ MouseListener...
//{{{ getPluginJAR() method
/*@bgen(jjtree) IfStatement */
"/*     * freq table collected to save a pass over the data     * during decompression.     */"
//{{{ loadCaretInfo() method
//{{{ ViewUpdate constructor
// if no server running and user runs jedit -quit, // just exit
//{{{ ActionListener...
//{{{ createMacrosMenu() method
//{{{ EditBusStub class
//{{{ cacheBlock() method
//{{{ DynamicMenuChanged constructor
// protected members
//{{{ setSelectedRow() method
// Read the remaining tokens.
//{{{ _init() method
// Read the external IDs
//{{{ isExiting() method
//{{{ Message types
//{{{ canonPath() method
//{{{ PluginUpdate constructor
//{{{ BufferUpdate constructor
//{{{ DockableWindowUpdate constructor
//{{{ getRowCount() method
// Check for NDATA declaration.
// evaluate each child
// no surrogates needed
//{{{ mouseClicked() method
//{{{ BrowserColorsModel constructor
// Read the entity value.
"/* Returns the root node of the AST.  It only makes sense to call     this after a successful parse. */"
//{{{ BrowserColorsModel class
//{{{ moveUp() method
//{{{ ColorRenderer constructor
//{{{ ColorRenderer class
// Check for a parameter entity.
"/* Determines whether the current node was actually closed and     pushed.  This should only be called in the final user action of a     node scope.  */"
// too big for surrogate
//{{{ runCachedBlock() method
//{{{ isScriptRunning() method
//{{{ getNameSpace() method
//{{{ Deprecated functions
/* Background color */
// Read the attribute type.
//{{{ setScreenLineCount() method
/* Font */
//{{{ TextAreaOptionPane constructor
// classExists caches info for us
//{{{ saveMode() method
/* Selection color */
/* Wrap guide */
/* Line highlight */
//{{{ selectMode() method
//{{{ EditingOptionPane constructor
/* EOL markers */
/* Returns the node currently on the top of the stack. */
"/* Returns the number of children on the stack in the current node     scope. */"
//{{{ resetClassManager() method
//{{{ setupDefaultVariables() method
//{{{ resetDefaultVariables() method
//{{{ unwrapException() method
//{{{ handleException() method
//{{{ createInterpreter() method
/* Show toolbar */
//{{{ moveGapEnd() method
//{{{ DummyFoldHandler constructor
// don't do anything if the user didn't change // any settings
//{{{ NoPluginsPane class
//{{{ Ceate icons list
// need to call Mode.init() if the file name or first line // globs change
//{{{ ExplicitFoldHandler constructor
// initialize the Plugins branch of the options tree
// Query plugins for option panes
//{{{ moveGapStart() method
//{{{ ToolBarOptionPane constructor
//{{{ getDefaultGroup() method
//{{{ createOptionTreeModel() method
//{{{ Create buttons
// get rid of mixed paths on Windows
// garbage collected
// also get rid of trailing spaces on Windows
// Found "<"
// Found "<" followed by something else
// Parse the rest of the content model.
// do the same on OS X
// // Constants for the entity type. //
// end HandlerBase implementation
// Check for the occurrence indicator.
/* P1003.2/D11.2, section 4.20.7.1, lines 5078ff.  */
// try scripted class
//{{{ ToolBarEditDialog class
// number of positional parameters in abbreviation expansion
// Register the separator.
//{{{ IconListEntry class
//{{{ Expansion constructor
//{{{ ButtonCompare class
// Icon selection
//{{{ Button class
//{{{ Handle backslash
// Read the content model.
//{{{ ToolBarEditDialog constructor
// $n is 1-indexed, but vector // contents is zero indexed
// $key will be $key, for // example
// Check for end or for a separator.
//{{{ updateList() method
// Found "</"
// Found "<!"
// Found "<!["
// Found "<!-"
// clean up old listeners
// single line mode (/s)
//{{{ createStyleTableModel() method
//{{{ createStyleTableScroller() method
// Values for constants are bit indexes
//{{{ StyleTableModel class
// classloader wants no leading slash
//{{{ StyleEditor constructor
//skip all white, PIs, and comments //if this doesn't throw an exception...
// Handle delimiters
//{{{ getKeywordMapAtOffset() method
// Found "&"
//{{{ getContextSensitiveProperty() method
//{{{ getStyle() method
/* Secondary Metal L&F font */
//{{{ addStyleChoice() method
// Expand general entities in // default values of attributes. // (Do this after the doctypeDecl // event!). // expandAttributeDefaultValues();
// I guess not...
// Restore the previous state.
// Read the attribute name.
// This is the (global) counter for the // array of specified attributes.
/* Number alignment */
// See if it was specified.
// for sorting
// Read the attributes, if any. // After this loop, we should be just // in front of the closing delimiter.
/* Border width */
/* Fold marker color */
/* Highlight interval and color */
//{{{ Used to store property values
/* Overwrite */
// not supported by Java...
//{{{ resolveSymlinks() method
// // Constants for attribute type. //
// Read the external subset, if any
/* Memory status */
/* Foreground color */
/* Status bar visible */
/* Caret status */
/* Fold mode */
// Loop until we end up back at '>'
//{{{ FirewallOptionPane constructor
// Read the element type name.
/* Memory background color */
// proxy password
// proxy host
// no proxy for
// No external subset.
// volatile, transient
//{{{ getColumnClass() method
//{{{ DockPositionCellRenderer class
// end of subset
// Read the document type name.
// 8-bit encodings
// // Constants for supported encodings. //
// Read the ExternalIDs.
/*offset*/
//{{{ Edit mode
// 16-bit encodings
/*len*/
//{{{ sort() method
//{{{ isAbsolutePath() method
// 32-bit encodings
// nice and simple
//{{{ Constructor
/* Autosave interval */
// Try reading a standalone declaration
// // Constants for attribute default value. //
//{{{ dump() method
/* Backup on every save */
// Read an optional version.
//{{{ GlobalOptions constructor
// Read the version.
//{{{ insertAtColumn() method
// don't break jEdit core and plugins! //throw new InterpreterError("null variable value");
// Insert code to update the plugin managers list here later
/* Backup count */
// may have been axed previously
/* Backup directory */
// Try reading an encoding declaration.
/* Download source */
//{{{ FloatingWindowContainer constructor
// special primitive types
//{{{ BrowserOptionPane constructor
//{{{ Abbrev class
"/*		For serialization.		Don't serialize non-serializable objects.	*/"
//{{{ Remove class
/*squeltch*/
"/*         * Setting up the unzftab entries here is not strictly         * necessary, but it does save having to do it later         * in a separate pass, and so saves a block's worth of         * cache misses.         */"
//{{{ getMode() method
//{{{ getAutosaveFile() method
// Cache unqualified names to prevent import check again
// for now, since all browser actions are // written in beanshell we set the 'browser' // variable directly.
//{{{ AbbrevCompare class
//{{{ AbbrevsModel constructor
//{{{ toHashtable() method
//{{{ edit() method
//{{{ HeaderMouseHandler class
// no args method
//{{{ User interface
//{{{ Groups
//{{{ insertIndented() method
// obtain the leading indent for later use
// Normalise whitespace if necessary.
/*forcclass*/
"/*		Note: technically I think we could get by passing in only the		current namespace or perhaps BshClassManager here instead of 		CallStack and Interpreter.  However let's just play it safe in case		of future changes - anywhere you eval a node you need these.	*/"
// try parent
//{{{ newFile() method
"/*         * Undo the MTF values for the selectors.         */"
//{{{ addBufferChangeListener() method
//{{{ addExplicitFold() method
/* Show tip of the day */
// bitwise
// returns Object covering both Long and Boolean return types
/* Show tool bar */
// keep track of the original types
// Add the new typed var
// returns Object covering both Integer and Boolean return types
// Don't generate private /*or loosely return typed */ methods
//{{{ goToNextFold() method
// type is correct here
/* History count */
/* Show hidden files */
/* View dock layout */
/* Show icons */
/* Beep on search auto wrap */
/* Show full path */
/* Menu spillover count */
//{{{ ActionListHandler constructor
/* Show search bar */
/* Show buffer switcher */
//{{{ narrowToFold() method
/* Primary Metal L&F font */
//{{{ getEntry() method
/* Show splash screen */
//{{{ PrintOptionPane constructor
//{{{ BufferOptions constructor
/*declaredOnly*/
// auto-gen default constructor // use default super constructor
// number of times we've matched so far
// Create a new file when the last is closed
//{{{ Edit modes, syntax highlighting
// Common layers
// map voids to nulls for the outside world
// can't shift floating-point values
// arbitrary
// ++ and -- must be cast back the original type
// Promote character to Number type for these purposes
// flush log
// save list of open files
// Layers for top group
// non boolean primitive, get appropriate flavor of zero
// store the value in the array
/* Sort buffers */
// Try object imports
// found an object and it's not an undefined variable
// Determine if the constructor calls this() or super()
// Check for stingy match for each possibility.
// set contents of mymatch equal to newMatch
//{{{ closeAllBuffers() method
//{{{ need to convert entries of 'props' to PropValue instances
/* Confirm save all */
//{{{ pathEquals() method
//{{{ toggleRectangularSelectionEnabled() method
// evaluate the static portion of the block in the static space
// unwrap primitives
//{{{ saveCaretInfo() method
// Insert the content type, if any.
// Try static imports
// Check for existing method
// this() constructors come after super constructors in the table
// we do a write lock so that the // autosave, which grabs a read lock, // is not executed between the // deletion of the autosave file // and clearing of the dirty flag
// close remaining buffers (the close dialog only deals with // dirty ones)
//{{{ backspaceWord() method
// try declaredField
/*fromType*/
// I think this can happen
// Supply any defaulted attributes.
// Create the instance 'This' namespace, set it on the object // instance and invoke the instance initializer
// Find new doablesLast
"/*         * 20 is just a paranoia constant         */"
//{{{ saveAllBuffers() method
// Cast input appropriately or throw exception
// don't deal with object types here... unless above
// can only cast boolean to boolean
// Trying to cast null to primitive type?
//{{{ addOptionPane() method
/* Session management */
//{{{ GeneralOptionPane constructor
//{{{ ShowRecentMenuItem class
// unwrap primitive to the wrapper type
// Begin BeanShell Modification - public, extend EvalError
// Evaluate the initializers
// first promote char to Number type to avoid duplicating code
// Do numeric cast
// UCS-4 must begin with "<!XML" // 0x3c 0x00 0x00 0x00: UCS-4, little-endian (4321)
//return countParts(value) > 1;
// At this point we've either got too many or just the right amount. // See if this numRepeats works with the rest of the regexp.
/* Footer */
"/*         * Write `magic' bytes h indicating file-format == huffmanised,         * followed by a digit indicating blockSize100k.         */"
// auto reload changed buffers?
/* Header */
/* Sort buffers by names */
// UCS-4 must begin with "<!XML" // 0x00 0x3c 0x00 0x00: UCS-4, unusual (3421)
// Test all possible matches for this number of repeats
// ... sweet. saveBackup() will create backupDir if it // doesn't exist.
//{{{ ParentMouseHandler class
/* Save caret positions */
// End BeanShell Modification - sourceFile
// Begin BeanShell Modification - sourceFile
// End BeanShell Modification - public, extend EvalError
// End BeanShell Modification - constructor
// End BeanShell Modification - super constructor args
/* Recent file list size */
/* Force 1.3 print dialog */
/* Check mod status on focus */
/* Default file encoding */
/* Auto detect encoding */
// in any case, this is only needed for the // directory chooser (why?), so we add a // check. otherwise poor Rick will go insane.
// handle primitive widening conversions - JLS 5.1.2
/*overrideNamespace*/
"/*                 * Now scan this big bucket so as to synthesise the                 * sorted order for small buckets [t, ss] for all t != ss.                 */"
/* Two-stage save */
//{{{ HelpButton class
// compare existing entries' hashcode with this
// turns out under some circumstances this // method can switch the current buffer in // BROWSER mode.
/* Color */
//{{{ focusOnDefaultComponent() method
//{{{ mouseMoved() method
//{{{ createMenuItems() method
// Layers for bottom group
//{{{ centerCaret() method
// End BeanShell Modification - made conditional on debug
// Begin BeanShell Modification - added debug param
//{{{ showSelectLineRangeDialog() method
"/*         * sort the block and establish posn of original string         */"
//{{{ removeStructureMatcher() method
//{{{ showListConfirm() method
// Begin BeanShell Modification - added sourceFile info
//{{{ ManagePanel constructor
// End BeanShell Modification - added debug param
// Begin BeanShell Modification - override error methods and toString
// Compare with number of dimensions actually created with the // number specified (syntax uses the undefined ones here)
// Some kind of 8-bit encoding without "<?XML" // (otherwise) UTF-8 without encoding/XML declaration
"/*			dimensionsNode can return either a fully intialized array or VOID.			when VOID the prescribed array dimensions (defined and undefined)			are contained in the node.		*/"
// so that we don't try to reset() right away
"/*                 * Find the coding table which is best for this group,                 * and record its identity in the selector table.                 */"
// in this case, we can't directly call // view.close(); we have to call closeView() // for all open views
// Generate the delegate methods
//{{{ transitiveClosure() method
// Test it
// execute nodes, skipping labels, until a break or return
// Check for entity recursion.
/* --- Instance data --- */
// Both primitives, do primitive cast
/*filter*/
// check if input is at a valid position
// Stop server
//{{{ EnhancedButton constructor
//{{{ Mirror class
// copied from generated getMessage()
// Generate the constructors
// Force the class public for now...
// for inner classes
// Generate the bsh instance 'This' reference holder field
// Generate the fields
// Generate the static bsh static reference holder field
//{{{ loadExtraJARsIfNecessary() method
//{{{ PluginTableModel class
//{{{ Caret
//{{{ RemoveButton class
//{{{ TextRenderer class
//{{{ addToSelection() method
//{{{ MirrorList constructor
//{{{ MirrorCompare class
// unwrap, etc.
//{{{ PluginList constructor
//{{{ getSelectionCount() method
// Generate method body
//{{{ getToolBar() method
//{{{ finished() method
"/*	 * The split config is recorded in a simple RPN ""language"".	 */"
//{{{ addPluginSet() method
//{{{ addPlugin() method
// if download OK, remove existing version
"/*                 * copy 3                 */"
//{{{ updatePosition() method
// if no requests are running, requestDone() // will not be called, so we must queue the // AWT runner ourselves.
//{{{ createBrowserMenuItems() method
//{{{ PluginManager constructor
//{{{ Deprecated methods
// ensure consistent history; // eg we don't want both // foo/ and foo
//{{{ isDownloadingList() method
//{{{ createOptionPanes() method
//{{{ getJAR() method
/* Strip trailing EOL */
// Get the instance field
//{{{ showWaitCursor() method
// Also cache the class so that no import resolution must occur // this avoids having to load our enclosing class which isn't // finished being generated yet... oy.
////////////////////////////////////////////////////////////////////// // Low-level I/O. //////////////////////////////////////////////////////////////////////
// need to set the input stream - reinit the parser?
// Primitive to arbitrary object type.  // Allow Primitive.castToType() to handle it as well as cases of  // Primitive.NULL and Primitive.VOID
// a la Perl, $0 is whole thing, $1 - $9 are subexpressions
// if started with java -jar jedit.jar
//{{{ showPluginManager() method
//{{{ getInstance() method
//String installed; //String installedVersion;
//{{{ Plugin class
//{{{ Dependency class
//{{{ PluginSet class
// after the entire list is loaded, fill out plugin field // in dependencies
// Force the install tab to refresh for possible // change of mirror
/* Implements abstract method REToken.match() */
//{{{ getPluginList() method
//{{{ Branch class
// only used if what is "plugin"
// Read as many bytes as possible // into the read buffer.
//{{{ updatePluginList() method
// init the static shared sharedObject if it's not there yet
//{{{ setSelectAll() method
//{{{ SelectallButton class
//{{{ getBufferLength() method
/* even if installDirectory is different */
//{{{ getSearchBar() method
/*map*/
// index tracks the position in the char array
/* Setup panes */
//{{{ Variables
"//branch.satisfyDependencies(roster,installDirectory, //	downloadSource);"
// look for the specially named super delegate method
//{{{ restoreSplitConfig() method
//{{{ activate() method
//{{{ download() method
//{{{ SizeLabel class
// Generate code to push arguments as an object array
/*strict*/
// Dispatch to an encoding-specific // reader method to populate the // readBuffer.
// bsh.evalOnly
/* Setup the table */
//{{{ deactivate() method
/* Create description */
/* Create buttons */
//{{{ ListUpdater class
//{{{ PluginInfoBox class
// still needed even though glass pane // has a wait cursor
//{{{ Do more stuff
//{{{ nextTabStop() method
//{{{ writeMap() method
//{{{ Roster constructor
//{{{ hideWaitCursor() method
/* Tab size */
//{{{ getStatus() method
//{{{ getActionBar() method
// Handle imported inner class case
//{{{ quickIncrementalSearch() method
// compact the Vector
// Add final buffered token and an EndSub marker
//{{{ quickHyperSearch() method
//{{{ InstallPanel constructor
// Create this constructor method
//{{{ formatSize() method
// Generate code to return the value
// Generate code to unwrap bsh Primitive types
// Generate code to invoke the ClassGeneratorUtil initInstance() method
// push 'this' 
//{{{ WindowHandler class
//{{{ concatPath() method
// close JAR file and all JARs that depend on this
// Make all child paths relative.
//{{{ getLineText() method
//{{{ setFirstPhysicalLine() method
// ALPHANUMERIC OPERATOR //  \w
//{{{ getInputHandler() method
//{{{ Input handling
//{{{ getKeyEventInterceptor() method
//{{{ setKeyEventInterceptor() method
//{{{ setInputHandler() method
// we have to be careful
//{{{ calculate tab size
//{{{ RosterThread class
// progress value as of start of current task
//{{{ TextRenderer
// package-private members
//{{{ done() method
//{{{ Deferred class
//{{{ setValue() method
//{{{ endDocument() method
// Change any white text to black
// invoke the initInstance() method
// Push the class/constructor name as a constant
// Push arguments as an object array
//buffer.readLock();
//{{{ getFileCount() method
//{{{ Scrolling
// calculate size for current page
//{{{ ParentDirectoryRenderer class
//{{{ print() method
//{{{ printPage() method
//buffer.readUnlock();
//{{{ getMacroRecorder() method
//{{{ setMacroRecorder() method
"/*	Type, name and expression syntax follows.*/"
//{{{ determine line number width
//{{{ pageSetup() method
//no need to always keep the same job name for every printout.
// remove cache file
// Add method body
// push super class name // use superClassName var?
//{{{ toggleLineSeparator() method
// push class static This object
//{{{ Instance variables // this is a bad hack
//{{{ paintHeader() method
// not supported for arbitriary filesets
// generate switch body
/* Decorate frames with look and feel (JDK 1.4 only) */
//{{{ BufferPrintable constructor
/*max*/
// start switch
// push ConstructorArgs 
// map loose return to Object
// invoke the iterator method on the ConstructorArgs // push the ConstructorArgs
// Unload the arguments from the ConstructorArgs object
// done with switch
// Maybe combine this with generateMethod()
// default branch always invokes no args super // push 'this' 
// invoke the constructor for this branch
// if it's an object type we must do a check cast
//{{{ getMaximum() method
//{{{ paintFooter() method
// catch those hooligans passing null urls
// move JAR first
//{{{ getPrintJob() method
//{{{ PrintTabExpander class
//{{{ PrintTabExpander constructor
//{{{ EntryCompare class
//{{{ getPageFormat() method
//{{{ Install class
//long
//{{{ Install constructor
//{{{ addRemove() method
// cached for speed
//{{{ getFileExtension() method
// Push vars
//{{{ Occur constructor
//{{{ Operation interface
//{{{ addOperation() method
//{{{ getFileNameNoExtension() method
//{{{ getDownloadDir() method
//{{{ savePrintSpec() method
//{{{ getFileParent() method
//convert from PrintRequestAttributeSet to the pageFormat
//{{{ getFileProtocol() method
//{{{ getProtocolOfURL() method
//{{{ isURL() method
/* Line numbering */
//{{{ Create the timer used by incremental search
//{{{ goTo() method
/*@bgen(jjtree) FormalParameters */
// final in 4.2
//{{{ HyperSearchResult constructor
// not found at all.
//{{{ addOccur() method
// Gather all of the methods of class and parents
/* an error occurred */
//{{{ toggleWordWrap() method
//{{{ getNextFile() method
//{{{ Occur class
//{{{ getFirstFile() method
//{{{ getDirectory() method
//{{{ setHyperSearch() method
//{{{ invalidateCachedList() method
// WHITESPACE OPERATOR //  \s if RE_CHAR_CLASS_ESCAPES is set
// RETURN ESCAPE //  \r
//{{{ isEmpty() method
// NON-WORD BREAK OPERATOR // \B if ????
//{{{ performOperationsInWorkThread() method
// now activate the plugins
//{{{ bufferSaved() method
// close button only there if 'temp' is true
//{{{ getOperationCount() method
//{{{ timerIncrementalSearch() method
//{{{ find() method
//{{{ incrementalSearch() method
//{{{ getOperation() method
// beep if beep property set
// not found. start from // beginning
//}}} //{{{ Incremental search
// on backspace, restart from beginning
// inform user search restarted
// on enter, start search from end // of current match to find next one
//{{{ Buffers, edit panes, split panes
//{{{ splitHorizontally() method
// use default super constructor
//}}} //{{{ HyperSearch
// don't beep if not found. // subsequent beeps are very // annoying when backspacing an // invalid search string.
// reverse regexp search // not supported yet, so // 'simulate' with restart
// strings might be equal!
// BufferUpdate.CLOSED
//{{{ setRecursive() method
// to notify listeners that any existing // selection has been deactivated
//{{{ visitBuffers() method
//{{{ split() method
//{{{ unsplitCurrent() method
// find first split pane parenting current edit pane
//{{{ HyperSearchResults constructor
//{{{ getFileFilter() method
//{{{ getTreeModel() method
//{{{ getTree() method
// C:\AUTOEXEC.BAT
//{{{ _getFiles() method
//{{{ isRecursive() method
// /etc/passwd
// End Child node structure evaluated by insureNodesParsed
// Succeeded.  Cache the resolved method.
//{{{ getReverseSearch() method
// Is the method public or are we in accessibility mode?
// Yes, it is.
//{{{ searchFailed() method
"/* package-private since they are accessed by inner classes and we	 * want this to be fast */"
// Found at least one matching method but couldn't use
// ignore and move on
// Is this a class?
/*@bgen(jjtree) Type */
// evaluate the args
// D:\WINDOWS, or doesn't contain : at all
// Get the static This reference from the proto-instance
//{{{ goToSelectedNode() method
/*modifiers*/
//{{{ Getters and setters
// find the matching super() constructor for the args
// Are we choosing ourselves recursively through a this() reference?
// find the matching this() constructor for the args
//{{{ Match class
//{{{ ResultVisitor interface
//{{{ setIgnoreCase() method
//{{{ getRegexp() method
//{{{ BufferLoadedVisitor class
//{{{ addToken() method
//{{{ readStringArray() method
"/* 			Find an appropriate constructor.			use declared here to see package and private as well			(there are no inherited constructors to worry about) 		*/"
// get rid of any edit pane that is a child // of the current edit pane's parent splitter
//{{{ readMap() method
//{{{ nextTextArea() method
//{{{ createSearchSettingsPanel() method
// Find the constructor (now in the instance namespace)
// Wait for buffer to finish loading
//{{{ writeBooleanArray() method
//}}} //{{{ IMPORT
"/*         * Now the block's CRC, so it is in a known place.         */"
//{{{ getAutoWrap() method
//{{{ readURI() method
//{{{ getDocument() method
// invoke the constructor method from the instanceThis 
//{{{ readBooleanArray() method
//{{{ hyperSearch() method
//{{{ Actions
// Give the instance space its object import
/*override*/
//{{{ setSearchMatcher() method
//{{{ getSmartCaseReplace() method
// Create the instance namespace
// Pull out the method signatures with matching names
// method matches name 
"/*        This method should parallel findMostSpecificMethod()    */"
//{{{ prevTextArea() method
//{{{ read() method
/*overrideNameSpace*/
// Evaluate the constructor
// if args, we must have constructor
//{{{ getTokens() method
//{{{ setSearchFileSet() method
// start search from beginning
//{{{ getSearchFileSet() method
//{{{ replace() method
// make sure start of match is visible
//{{{ replaceAll() method
// Wait for the buffer to load
//{{{ JAR class
//{{{ getVersion() method
//{{{ getSplitPane() method
//{{{ goToBuffer() method
/* ignore zero-height splits, etc */
//{{{ replaceInSelection() method
// search settings
//{{{ openFile() method
//{{{ record() method
// right?
//{{{ removeExtension() method
// unwrap Primitive.Null to null
// there is always a paramsNode
// unsafe caching of type here
// Begin Child node structure evaluated by insureNodesParsed
//{{{ getTextArea() method
// only record this if doing a find next
//{{{ getEditPane() method
//{{{ getViewConfig() method
//{{{ regexpBeanShellReplace() method
//{{{ handleError() method
//{{{ preloadSearchDialog() method
//{{{ replaceOne() method
/*@bgen(jjtree) FormalParameter */
// If backups is 1, create ~ file
//{{{ showSearchDialog() method
// index of the first throws clause child node
// might be already selected, see above.
//{{{ getSearchDialog() method
//{{{ match() method
/*callerInfo*/
/* fall through */
//{{{ closeOrKeepDialog() method
/*shouldn't happen*/
// why so cute?
/*@bgen(jjtree)*/
// end stuff that was tacked on for boolean short-circuiting.
// Unsafe caching of type here. // null (none), Void.TYPE, or a Class
//{{{ createToken() method
// source is directory or filter field
// check the next two characters
// validate that the throws names are class names
/* replaceBtn, */
/* Focused border color */
//{{{ createMultiFilePanel() method
// do nothing - ch already contains correct character
// get next character
// prevents us from handling SearchSettingsChanged // as a result of below
//{{{ AllBufferSet constructor
//{{{ ReplaceActionHandler class
// args is either constructor arguments or array dimensions
// type is either a class name or a primitive type
//{{{ createButtonsPanel() method
// Try regular class
// so that in the future we don't see streams of // exceptions
/* force class*/
//{{{ ButtonActionHandler class
//{{{ MyJRadioButton class
//{{{ PluginCacheEntry class
//{{{ HyperSearchRequest constructor
//{{{ breakPlugin() method
/*@bgen(jjtree) ClassDeclaration */
/*@bgen(jjtree) MethodDeclaration */
/*@bgen(jjtree) PackageDeclaration */
/*@bgen(jjtree) ImportDeclaration */
// but we want properties to hang around
/*@bgen(jjtree) VariableDeclarator */
//{{{ searchInSelection() method
//{{{ getBuild() method
/* Persistent markers */
/* Sort recent file list */
// (major).(minor).(<99 = preX, 99 = final).(bug fix)
/* Create the plugin table */
/* Create button panel */
// to minimise synchronization and stuff like that, we only // show a status message at most twice a second
//{{{ main() method
//{{{ Check for Java 1.3 or later
// heuristic #2
//{{{ doHyperSearch() method
// No need to wrap this debug
// never mind
/*@bgen(jjtree) ReturnType */
// Check for stingy matching on RETokenRepeated
/*@bgen(jjtree) PrimitiveType */
/*@bgen(jjtree) AmbiguousName */
/*@bgen(jjtree) Assignment */
// This production is to determine lookahead only.
/*@bgen(jjtree) PrimaryExpression */
/*@bgen(jjtree) PrimarySuffix */
/*@bgen(jjtree) Literal */
//{{{ nextMatch() method
// BACKREFERENCE OPERATOR //  \1 \2 ... \9 // not available if RE_NO_BK_REFS is set
/*force class*/
// Is an inner class style object allocation
// pattern test
// position variable for pattern start
// unless we are matching from the start of the buffer, // ^ should not match on the beginning of the substring
// Is it an inner class?
//{{{ RESearchMatcher constructor
// Boyer-Moore helper methods
// work through to class 'this'
//{{{ Miscellaneous methods
// MISMATCH: return -1 as defined by API
//{{{ Token types
//{{{ lookup() method
//{{{ setSelectionColor() method
// skip the greater of the two distances provided by the // heuristics
//{{{ getNext() method
// character mismatch, determine how many characters to skip
// heuristic #1
// MacOS users expect the app to keep running after all windows // are closed
// go back to the while loop
//{{{ getPrev() method
// used for the delayed evaluation...
//{{{ setWaitSocket() method
//{{{ getIndex() method
//{{{ generateSkipArray() method
// Boyer-Moore member fields
// MATCH: return the position of its first character
//}}} //{{{ PROPS
//{{{ See if the rule's start or end sequence matches here
//{{{ ref() method
// unless we are matching to the end of the buffer, // $ should not match on the end of the substring
//{{{ getIgnoreCase() method
//{{{ getLineContext() method
//{{{ setLineContext() method
//{{{ addRule() method
//{{{ handleToken() method
//{{{ Token constructor
// used to store offsetToXY() results
// leave these on the stack for Arguments() to handle
/*@bgen(jjtree) AllocationExpression */
//{{{ getKeywords() method
//{{{ getParserRuleSet() method
//{{{ TokenMarker constructor
//{{{ regionMatches() method
//{{{ getRuleSet() method
//{{{ startPluginLater() method
//{{{ Keyword class
//{{{ getSegmentMapKey() method
//{{{ getStringMapKey() method
//{{{ getMainRuleSet() method
// buffers retain a reference to the fold handler in // question... and the easiest way to handle fold // handler loading is this...
// == null before loaded
//{{{ Set up some instance variables // this is to avoid having to pass around lots and lots of // parameters.
//{{{ actionsPresentButNotCoreClass() method
/*superClass*/
//{{{ loadCache() method
/*@bgen(jjtree) ArrayDimensions */
"/* * Statement syntax follows. */"
//{{{ generateCache() method
/*@bgen(jjtree) #FormalComment( retainComments) */
/*@bgen(jjtree) SwitchStatement */
/*@bgen(jjtree) SwitchLabel */
/*interfaces*/
/*isInterface*/
//{{{ check if current character is a word separator
// move pos to last character of match sequence
//{{{ check every rule
//{{{ Mark all remaining characters
//{{{ getRuleSets() method
//{{{ check for end of delegate
// send to specific event handler
//{{{ handleRule() method
// the end cannot be a regular expression
//{{{ SEQ
//{{{ Some rules can only match in certain locations
//XXX
//{{{ Unwind any NO_LINE_BREAK parent delegates
//{{{ Check for an escape sequence
/*@bgen(jjtree) WhileStatement */
"/*	Do statement is just a While statement with a special hook to execute	at least once.*/"
/*@bgen(jjtree) ForStatement */
/*@bgen(jjtree) EnhancedForStatement */
/*@bgen(jjtree) TypedVariableDeclaration */
/*@bgen(jjtree) StatementExpressionList */
/*@bgen(jjtree) ThrowStatement */
/*@bgen(jjtree) TryStatement */
// All core AWT listeners
// All listeners in javax.swing.event as of Swing 1.1
// handleEvent gets all events
//{{{ getListModel() method
// Token was accepted
/* all printable ASCII characters */
// First node is the expression on which to sync
// a DELEGATE attribute on a SEQ changes the // ruleset from the end of the SEQ onwards
/*returnType*/
// BSHType will cache the type for us
//{{{ setEditPane() method
//{{{ loadToolBars() method
//{{{ handleBufferUpdate() method
// note that all regexps start with \A so they only // match the start of the string
// Hashtable implements Map
// BSHFormalParameters will cache the type for us
// Arrays incomplete... need to use the array setter
//{{{ noRememberLast() method
//{{{ getClasses() method
//{{{ LineContext constructor
//{{{ Do digits
//{{{ PluginJAR constructor
//{{{ Do keywords
//{{{ handleTokenWithSpaces() method
// used for SPAN_REGEXP rules; otherwise null
/*min*/
// Hypothetical question: can you have a RE that matches 1 times, // 3 times, 5 times, but not 2 times or 4 times?  Does having // the subexpression back-reference operator allow that?
//{{{ isClosed() method
//{{{ clone() method
//{{{ Handle any remaining crud
// only match against regexp if its not all // digits; if all digits, no point matching
//{{{ intern() method
//{{{ charArraysEqual() method
//{{{ XModeHandler constructor
// Do the actual synchronization
//}}} //{{{ MARK_PREVIOUS
// Possible positions for the next repeat to match at
// Declare variables used in loop
// try next repeat at all possible positions
// if none of the possibilities worked out, break out of do/while
// reassign where the next repeat can match
// increment how many repeats we've successfully found
// We're greedy, but ease off until a true match is found 
// else did not match rest of the tokens, try again on smaller sample
// does this get all?
// If we fall out, no matches.
//{{{ substitute() method
// make sure we put the namespace back when we leave.
// filter nodes
// zeros
// statement or embedded block evaluated a return statement
//{{{ BrowserActionContext class
"/* on some Windows versions, connections to localhost			 * fail if the network is not running. To avoid			 * confusing newbies with weird error messages, log			 * errors that occur while starting the server			 * as NOTICE, not ERROR */"
// Some arbitrary kind of node
"/*			If the result is a Node eval() it to an object or LHS			(as determined by toLHS)		*/"
// Type node is passed down the chain for array initializers // which need it under some circumstances
//{{{ isPlainView() method
// return LHS or value object as determined by toLHS
// import the package we're in by default...
// skip autosave files
//{{{ openFiles() method
//}}} //{{{ SPAN_REGEXP
//{{{ setEscapeRule() method
//{{{ getEndOffset() method
//{{{ Major actions
// chain results to doneIndex
// Find new doneIndexLast
// matches after a newline
// store ConstructorArgs in consArgsVar
//}}} //{{{ Keywords
//}}} //{{{ SPAN
//{{{ Selection
//}}} //{{{ EOL_SPAN_REGEXP
//{{{ addKeyword() method
// invoke the ClassGeneratorUtil getConstructorsArgs() method
//{{{ paintChunkList() method
// position in REToken.newline
// Don't match at all if REG_NOTBOL is set.
// value for end
// closer to end
// Allocate more space in the buffer.
//{{{ Buffer creation methods
//{{{ Parse command line
// open initial view?
// move read position [index] clicks from 'charAt(0)'
// script to run
// If we have buffered replace data, use it.
// This is prone to infinite loops if replace string turns out empty.
//{{{ We need these initializations very early on
//{{{ getModeName() method
//{{{ Try connecting to another running jEdit instance
//{{{ deactivatePlugin() method
// push args
// block until its closed
//{{{ createEOLSpanRule() method
// assume for now that next can only be one character
// Overrides REToken.chain() to optimize for strings
//{{{ getPluginCache() method
//{{{ setPluginCache() method
//{{{ createRegexpSpanRule() method
//}}} //{{{ SEQ
//{{{ createSequenceRule() method
//{{{ Chunk constructor
// set up after init()
//{{{ createSpanRule() method
// see if this is a 4.1-style plugin
// Note that there is some debate over whether '_' should be included
// field access
"/*		Field access, .length on array, or a method invocation		Must handle toLHS case for each.	*/"
//{{{ Static methods
// .length on array
// convert the byte read into a char
// Package scope constructor is used by RE.getMatchEnumeration()
// Property style access to Hashtable or Map
//else
// no match
// doesn't happen
// need to deep clone?
// cut off alternates
//{{{ getDockablesURI() method
//{{{ getServicesURI() method
//{{{ createRegexpEOLSpanRule() method
// Offset in source text where match was tried.  This is zero-based; // the actual position in the source text is given by (offset + anchor).
// Package scope; used by RE. // used while matching to mark current match position in input // start positions (relative to offset) for each (sub)exp. // end positions for the same // other possibility (to avoid having to use arrays)
// position in newline
// The RE constructor uses this to look up the constant for a string
// Array indices correspond to constants defined above.
//{{{ getNextVisibleLine() method
// This is the number of subexpressions in this regular expression, // with a minimum value of zero.  Returned by getNumSubs()
// The localized strings are kept in a separate file
// Retrieves a message from the ResourceBundle
// internal constructor used for alternation
// Subexpression index of this token.
// For use by subclasses
// The meat of construction
// This is the case of {x,}
/* update fold visibility map. */
//{{{ ParserRuleSet constructor
//{{{ getDigitRegexp() method
//{{{ setHighlightDigits() method
//{{{ getDefault() method
//{{{ setNoWordSep() method
//{{{ setDigitRegexp() method
//{{{ getEscapeRule() method
//{{{ initChunk() method
// This is used for {x,y} calculations
//{{{ Static part
//{{{ SyntaxStyle constructor
//{{{ textAreaDisposed() method
// don't have chunks longer than 100 characters to avoid slowing things down
//{{{ getFirstVisibleLine() method
//{{{ releaseDisplayManager() method
//{{{ getBackgroundColor() method
//{{{ getFont() method
// Buffer a token so we can create a TokenRepeated, etc.
// read the next character unit (including backslash escapes)
// make everything up to here be a branch. create vector if nec.
// LIST OPERATOR: //  [...] | [^...]
/* before first visible line */
//  ---- BeanShell specific stuff hereafter ----  //
//{{{ getLastVisibleLine() method
"/*		Override this method if you want to customize how the node dumps		out its children.	*/"
/* last in expanded range */
//public SimpleNode getParent() { return (SimpleNode)parent; }
/*key*/
//{{{ expandAllFolds() method
// no folds in buffer
"/*		type = VARIABLE;		this.varName = varName;		this.nameSpace = nameSpace;*/"
// resolve superclass if any
/* first in expanded range */
// 4.2 plugin
/* prev in expanded range */
// this line is the start of a fold
//{{{ Find fold start and end...
// Get the class body BSHBlock
//{{{ getScrollLineCount() method
// Get interfaces
//{{{ collapseFold() method
//{{{ Expand the fold...
/* isLineVisible(i) && */
//{{{ expandFold() method
// we need a different value of initialFoldLevel here!
// Check for initial caret, negation
// Check for leading right bracket literal
// Create a new RETokenOneOf
// if we narrowed to a single collapsed fold
// Set the variable in namespace according to localVar flag
//{{{ activateIfNecessary() method
//{{{ updateWrapSettings() method
//{{{ narrow() method
//{{{ expandFolds() method
//{{{ fvmget() method
//{{{ changed() method
// for thread safety
// Enable/Disable tooltips
//{{{ reset() method
//{{{ fvmput() method
// // Listener objects //
//{{{ showLineRange() method
//{{{ FirstLine class
// ScrollLineCount.changed() does the same // thing
// package-private members // package-private, not private, for speedy access by inner classes
"/*         * Now a single bit indicating randomisation.         */"
//{{{ physUp() method // scroll up by physical line amount
// <Esc> closes a floating window
// force the fold levels to be // updated.
/* collapse 2 */
// we're removing from before // the first visible to after // the last visible
//{{{ scrollUp() method // scroll up by screen line amount
//{{{ getText() method
//{{{ scrollDown() method // scroll down by screen line amount
// not a comment // subexpression
//{{{ ensurePhysicalLineIsVisible() method
// update visible lines
// START OF LINE OPERATOR //  ^
// END OF LINE OPERATOR //  $
// will be handled later. // see comments at the end of // transactionComplete().
// must be before the below call // so that the chunk cache is not // updated with an invisible first // line (see above)
// must update screen line counts before we call // _notifyScreenLineChanges() since that calls // updateScrollBars() which needs valid info
//{{{ doDelayedUpdate() method
// install man page
// when painting the last line of // a buffer, Buffer.isFoldStart() // doesn't call getFoldLevel(), // hence the foldLevelChanged() // event might not be sent for the // previous line.
//{{{ toggleExpanded() method
// pass along target error
//{{{ setBorder() method
//{{{ caretAutoScroll() method
//{{{ Initialize settings directory
// Write a warning message:
//{{{ Get things rolling
//{{{ paintInvalidLine() method
//{{{ getMatch() method
//{{{ MouseActions constructor
// fill the background
//{{{ addExtension() method
//{{{ Gutter constructor
//{{{ getFoldColor() method
// skip CR
"/*	 * JComponent.setBorder(Border) is overridden here to cache the left	 * inset of the border (if any) to avoid having to fetch it during every	 * repaint.	 */"
"/*	 * Component.getPreferredSize() is overridden here to support the	 * collapsing behavior.	 */"
//{{{ setLineNumberAlignment() method
//{{{ getHighlightedForeground() method
//{{{ noRepeat() method
"/*         * Finally, block's contents proper.         */"
//{{{ setCurrentLineForeground() method
/*index*/
//{{{ getCurrentLineForeground() method
//{{{ setHighlightedForeground() method
//{{{ mouseEntered() method
// If no other constructors, generate a default constructor
//{{{ setStructureHighlightColor() method
//{{{ isCurrentLineHighlightEnabled() method
//{{{ getHighlightInterval() method
//{{{ setCurrentLineHighlightEnabled() method
//{{{ setStructureHighlightEnabled() method
//{{{ setExpanded() method
// Read string of digits
//{{{ mouseExited() method
// Special case for EQ on two wrapper objects
//{{{ isBlockCaretEnabled() method
//{{{ setStyles() method
//{{{ Paint fold triangles
// draw |^
/*value*/
//{{{ setCaretColor() method
//{{{ isStructureHighlightEnabled() method
//{{{ getMultipleSelectionColor() method
//{{{ setFoldLineStyle() method
// assumed this is called after a font render context is set up. // changing font render context settings without a setStyles() // call will not reset cached monospaced font info.
"/*			Are both the lhs and rhs either wrappers or primitive values?			do binary op		*/"
//{{{ isLineHighlightEnabled() method
//{{{ getLineHighlightColor() method
//{{{ isFractionalFontMetricsEnabled() method
// START OF STRING OPERATOR //  \A if RE_STRING_ANCHORS is set
//{{{ isWrapGuidePainted() method
//{{{ Load the global catalog
//{{{ unloadPluginJARWithDialog() method
// dubious? //setFirstLine(0);
//{{{ getDependentPlugins() method
//{{{ getFontRenderContext() method
// create dummy catalog
//{{{ setFont() method
//{{{ getExtensions() method
//{{{ updateRenderingHints() method
//{{{ getPlugin() method
"/* Try to guess the eventual size to avoid unnecessary		 * copying */"
// should try to use this as little as possible.
//{{{ Paint line highlight and collapsed fold highlight
//{{{ PaintLineBackground class
// minimise access$ methods
//{{{ setCaretBlinkEnabled() method
//{{{ getDisplayManager() method
//{{{ getClassLoader() method
//{{{ checkDependencies() method
//{{{ PaintSelection class
//{{{ Add some event listeners
//{{{ PaintText class
//{{{ Initialize the GUI
//{{{ PaintCaret class
//{{{ getBrowserActionSet() method
// NON-DIGIT OPERATOR //  \D
// NEWLINE ESCAPE //  \n
//{{{ getActions() method
//{{{ getPainter() method
//{{{ setQuickCopyEnabled() method
// some plugins add stuff in a "right-hand" gutter
//{{{ getActionSet() method
//{{{ getGutter() method
//{{{ getElectricScroll() method
//{{{ isQuickCopyEnabled() method
//{{{ getDragAndDropCallback() method
// make all buttons the same size
// prev and next buttons are on the right
//{{{ Get ready
//{{{ getScreenLineStartOffset() method
//{{{ setDragInProgress() method
//{{{ getPath() method
//{{{ getFirstLine() method
//{{{ setHorizontalOffset() method
// cancel button goes on far left
// unsafe caching of types
//{{{ scrollDownLine() method
//{{{ getBuiltInActionSet() method
//{{{ scrollUpLine() method
// END OF STRING OPERATOR //  \Z
// not a special character
// end while
//{{{ removeScrollListener() method
// Trivial case
// Overrides REToken.setUncle
// to deal with empty subexpressions
//{{{ getLineLength() method
//{{{ Scroll vertically
//{{{ Convenience methods
//{{{ invalidateScreenLineRange() method
//{{{ Initialize server
//{{{ getScreenLineOfOffset() method
// Buffer sort
//{{{ Initialize Java 1.4-specific code
// Give the static space its class static import // important to do this after all classes are defined
//{{{ offsetToXY() method
//{{{ invalidateLine() method
// to hide line highlight if selections are being added later on
//{{{ getLineStartOffset() method
// handle pathological case of zero-length match
// Note the start of this subexpression
//{{{ addLeftOfScrollBar() method
/*declaringNameSpace*/
//{{{ selectToMatchingBracket() method
// Stop all plugins
// Test for a match, and push the character // back if the match fails.
//Object r = checkOnly ? VALID_CAST :
// Interpreter has no input stream, use eval() only // Interpreter has no input stream, use eval() only // Interpreter has a user, print prompts, etc.
// Delegate to the static method
// Try absolute
//{{{ extendSelection() method
//{{{ _loadClass() method
// Scan forward, matching that bracket
//{{{ resizeSelection() method
// always add markers on selected lines
// Append character to buffer if needed
/* Helper function for constructor */
//{{{ setSelectedText() method
//{{{ getSelectionAtOffset() method
// didn't match up
//{{{ setCaretPosition() method
// Precondition: input[index-1] == '{', minMax != null
//{{{ isMultipleSelectionEnabled() method
//{{{ goToNextParagraph() method
//{{{ moveCaretPosition() method
//{{{ getCaretPosition() method
//{{{ goToFirstVisibleLine() method
//{{{ goToNextBracket() method
// UCS-2 with a byte-order marker. // 0xff 0xfe: UCS-2, little-endian (21)
// Even if reallyExit is false, we still exit properly // if background mode is off
// Can't call it getClass()
//{{{ removeCaretListener() method
//{{{ goToStartOfWhiteSpace() method
//{{{ goToNextPage() method
// We know min and max now, and they are valid.
//{{{ goToEndOfLine() method
//{{{ goToPrevParagraph() method
//{{{ goToPrevWord() method
//{{{ Markers
//{{{ showGoToLineDialog() method
// return the index following the '}'
//classStaticNameSpace.importClass( fqClassName.replace('$','.') );
//{{{ deleteToStartOfLine() method
// do we lose index info?
// value error shouldn't happen
// match was successful
"/*		If we want to support multiple commands in the command path we need to		change this to not throw the exception.	*/"
//{{{ setMultipleSelectionEnabled() method
/*strictJava*/
// check if the user entered a bracket
//{{{ deleteLine() method
// Set the static bsh This callback 
//{{{ deleteToEndOfLine() method
//{{{ toggleMultipleSelectionEnabled() method
//{{{ deleteWord() method
//{{{ toUpperCase() method
//{{{ goToMarker() method
//{{{ getCachePath() method
//{{{ BrowserColorsOptionPane constructor
// The new length is <= the old one.
// try each one that matched
// toggle marker on caret line
// import the unq name into parent
//{{{ goToParentFold() method
////////////////////////////////////////////////////////////////////// // Utility routines. //////////////////////////////////////////////////////////////////////
// Generate the type for our class
//{{{ toLowerCase() method
//{{{ selectFold() method
//bcm.doneDefiningClass( fqClassName );
//{{{ showWordCountDialog() method
// if debug, write out the class file to debugClasses directory
//{{{ setRightClickPopupEnabled() method
//{{{ insertTabAndIndent() method
//{{{ Right click popup
//{{{ setSelectionStart() method
//{{{ View constructor
//{{{ removeLeftOfScrollBar() method
"/*				Try to squeltch the native code stack trace if the exception				was caused by a reflective call back into the bsh interpreter				(e.g. eval() or source()			*/"
//{{{ removeEntry() method
/*bubble up if allowed*/
// Start with a little cheat.  Most of // the time, the white space will fall // within the current read buffer; if // not, then fall through.
// Evaluate any inner class class definitions in the block  // effectively recursively call this method for contained classes first
// this does the "trick" to eliminate blank space at the end
//{{{ getFocusCycleRoot() method
"/*		Generate a branch of the constructor switch.  This method is called by		generateConstructorSwitch.		The code generated by this method assumes that the argument array is 		on the stack.	*/"
// OK, the cheat didn't work; start over // and do it by the book.
//{{{ getColorProperty() method
// left == default case
// XXX //e.printStackTrace();
//{{{ isOverwriteEnabled() method
// handled by RE
// true for the constant defined syntaxes
// If backups > 1, move old ~n~ files, create ~1~ file
// impl.
// Define syntaxes
/* delete a backup created using above method */
"/* Differs from RE_SYNTAX_POSIX_EXTENDED in that RE_CONTEXT_INVALID_OPS	 replaces RE_CONTEXT_INDEP_OPS and RE_NO_BK_REFS is added. */"
/* There is no official Perl spec, but here's a "best guess" */
// except for '{', apparently
// while more labels or blocks and haven't hit return control
//{{{ getSelectionStart() method
//{{{ activatePlugin() method
//{{{ swapMarkerAndCaret() method
/* private */
// if label is default or equals switchVal
// skip nodes until next label
//{{{ Property methods
// generate the default branch of switch
// eval it
// get the first label
// first label
// Evaluate the defined dimensions of the array
//{{{ addTopComponent() method
//}}} //{{{ Handle $
//{{{ getBufferSwitcher() method
// \d,\D,\w,\W,\s,\S
// Get the string of enumerated values // if necessary.
/*leave null*/
// Make a hash of the interface hashcodes in order to cache them
// fill in definedDimensions [] lengths
// classExists caches the tests for us
"/*					Note: do *not* change this to 					BshClassManager plainClassForName() or equivalent.					This class must not touch any other bsh classes.				*/"
// retControl.returnPoint is the Node of the return statement
////////////////////////////////////////////////////////////////////// // Error reporting. //////////////////////////////////////////////////////////////////////
// These are necessary to let us test synchronization from scripts
/*@bgen(jjtree) ArrayInitializer */
// Optimization: check if anchor + minimumLength > length
// a default hashCode()
// can't cast void to anything
// Create a new REMatch to hold results
// // Flags for reading literals. //
// The canonical file name is also absolute. // No need for getAbsolutePath() here...
//{{{ Activate plugins that must be activated at startup
//{{{ Run script specified with -run= parameter
// Open files, create the view and hide the splash screen.
"/*                If idealMatch fits targetMatch and this is the first match 				or targetMatch is more specific than the best match, make it 				the new best match.            */"
// TAB ESCAPE //  \t
// not sure if this is correct for OpenVMS.
//{{{ fileToClass() method
// XXX
"/*	End methods for interacting with Parser */"
// If not found and there are arguments to match - // Look for an overloaded assignable match // (First find the method, then find accessible version of it)
//{{{ removeTopComponent() method
//{{{ isRectangularSelectionEnabled() method
//dockMenu.addItem(new NSMenuItem().separatorItem()); //dockMenu.addItem(miMac);
// // Buffer for parsed character data. //
// // Buffer for parsed names. //
"/*					We get stuck in infinite loops here when unicode escapes					fail.  Must re-init the char stream reader 					(ASCII_UCodeESC_CharStream.java)				*/"
// find the java method
// buffers retain a reference to the fold handler in // question... and the easiest way to handle fold // handler unloading is this...
// while in list // Out of list, index is one past ']'
// default for plugins that don't specify this property (ie, // 4.1-style plugins) is to load them on startup
// number of child nodes 
// wrap the exception in a TargetException to propogate it up
// each JAR file listed in the plugin's jars property // needs to know that we need them
// // Maintain a count of errors. //
// this will be the current parse character (pattern[index])
// fixes the hang that can occur if we 'save as' to a // new filename which requires re-sorting
// notify clients with -wait
// Buffers
// Recent Buffers
// Recent Directories
//{{{ BufferMenu class
//{{{ ShowRecentDirMenuItem class
/*WIDE*/
// Arguments
/*paramNames*/
// Get back to caller namespace
// Need to scrape a value from the last line?
// this must be in reverse order so that modes from the user // catalog get checked first!
// XThis.this refers to the enclosing class instance
// finaly block
// unwrap the target error
// Found match, execute catch block
// Begin constructors
/*interp*/
//Interpreter.debug("No class manager namespace:" +this);
// we reuse the 'pp' vector to save time
// does the variable already exist?
// unwrap 
// Apply most specific signature matching
/*object*/
// Check the cache
// These do not change during evaluation
// On Windows and MacOS, path names are case insensitive
// number of times eval hit 'this.caller'
// End Cached result structures
"/* 			Some kind of field access?		*/"
// Allow getSuper() to through BlockNameSpace to the method's super
// Find target object or class identifier
// It's a class
// return null; ???
//{{{ isSupportedEncoding() method
//{{{ getSelectionEndLine() method
//{{{ getComponent() method
// // Begin methods which simply delegate to our parent (enclosing scope)  //
/* Pushes a node on to the stack. */
// Unwrap primitives
//{{{ select() method
/*|| returnType == null*/
// should check to disallow continue here?
//{{{ isMacOS() method
// we don't want duplicate entries // in the kill ring
/* can't happen? */
//{{{ BrowserCommandsMenu constructor
//{{{ BrowserHandler class
//String filename = filenameField.getText();
//{{{ VFSBrowser constructor
// unknown value??!!!
//{{{ delete() method
//{{{ BufferIORequest constructor
// only true if the file size is known
// Otherwise, we found a \n // that follows some other // character, hence we have // a Unix file
// This is i+1 to take the // trailing \n into account
//{{{ endCompoundEdit() method
// Chop trailing newline and/or ^Z (if any)
//{{{ readMarkers() method
// used in insert()
// buffer has been saved while we // were waiting.
//{{{ setLimit() method
/* nothing done between begin/end calls */
//{{{ getMergeEdit() method
// limitations...
//{{{ getFoldHandler() method
//{{{ moveGap() method
//{{{ CompletionList class
// Recursively adds our key listener to sub-components
// do nothing //}}}
// figure out what constitutes a word character and what // doesn't
//{{{ setText() method
//{{{ fireActionPerformed() method
//{{{ setSelectedColor() method
// remove empty category branches
// this might be a bit slow if __char__ occurs a lot
/* hasFocus */
//{{{ loadDockableWindows() method
//{{{ getCachedDockableActionFlags() method
//{{{ OpenAction class
/* nothing to do */
//{{{ GrabKeyDialog constructor
// eg, trying to bind C+e if C+e is a prefix
// Save settings to disk
// get rid of this dialog if necessary
//{{{ PaneNameRenderer class
//{{{ Encoding
//{{{ Tab size
/* on MacOS, A+ can be user input */
/* Log.log(Log.ERROR,this,"Using deprecated Toolkit.getFontList()"); */
//{{{ RotatedTextIcon constructor
//{{{ showDockable() method
//{{{ HistoryModel constructor
//{{{ BeanShellAction constructor
"/* don't show loading msg because we won't				   receive a propertyChanged */"
//{{{ Result class
// user asks to remove non-existent
//{{{ EnhancedCheckBoxMenuItem constructor
/* Fractional font metrics */
/* Caret color, caret blink, block caret */
/* Electric borders */
// Old API
//{{{ IconCellRenderer class
//{{{ StyleOptionPane constructor
//{{{ StyleEditor class
/* Text color */
/* Text font */
/* Marker highlight */
/* Current line highlight */
/* Edit mode */
/* Wrap */
/* Rect select */
/* Memory foreground color */
/* Middle mouse button click pastes % register */
/* Gutter mouse actions */
// checkbox
// proxy username
//{{{ createWindowTableScroller() method
//{{{ createWindowModel() method
//{{{ WindowCompare class
// initialize the jEdit branch of the options tree
/* Download mirror */
//{{{ DownloadMirrorsThread class
/* Update mirror list */
//{{{ AbbrevsOptionPane constructor
//{{{ SingleSelectionModel class
/* Ignore case when sorting */
/* Default directory */
/* Double-click close */
/* Look and feel */
/* Use jEdit colors in all text components */
/* Decorate dialogs with look and feel (JDK 1.4 only) */
//{{{ setFileFilter() method
/* Line separator */
//{{{ updateMultiStatus() method
// do nothing if clicked "foo (showing n occurrences in m files)"
//{{{ RemoveTreeNodeAction class
//{{{ ResultCellRenderer constructor
//{{{ ResultCellRenderer class
//{{{ setRegexp() method
//{{{ setAutoWrap() method
//{{{ setBeanShellReplace() method
//{{{ getSearchMatcher() method
/* Don't do this when playing a macro, cos it's annoying */
//{{{ updateMaxHorizontalScrollWidth() method
//{{{ _replace() method
// in case one of the above fails, we still want to // clear these flags.
//{{{ SearchDialog constructor
// buttons
//{{{ getElement() method
//{{{ BoyerMooreSearchMatcher constructor
//{{{ generateSuffixArray() method
//{{{ stringToToken() method
// ALL
//}}} //{{{ SPAN, EOL_SPAN
// Reset the timeout
//}}} //{{{ RULES
//{{{ PROPERTY
// only paint visible chunks
//{{{ Paint token background color if necessary
//{{{ offsetToX() method
//{{{ getPositions() method
//{{{ Position match hints
// FALL THROUGH TO DEFAULT CASE!!!
"/*		object is a non-null and non-void Primitive type	*/"
//{{{ getSetName() method
//{{{ getHighlightDigits() method
//{{{ getNoWordSep() method
//{{{ setCharWidth() method
//{{{ canMerge() method
//{{{ createChunk() method
//{{{ merge() method
//{{{ _notifyScreenLineChanges() method
//{{{ getCharWidth() method
//{{{ isStructureHighlightVisible() method
/* beyond last visible line */
/* equal to last visible line */
/* next in expanded range */
// scan backwards looking for the start
// Collapse the fold...
//{{{ fvmreset() method
// important: not lineMgr.getScreenLineCount()
//{{{ Debug code
//{{{ resize selections if necessary
"/* both have same visibility; just remove			 * anything in between. */"
/* shift */
/* update */
//{{{ updateBorder() method
//{{{ selectMatch() method
//{{{ getActionForEvent() method
// if buffer is loading, don't paint anything
//{{{ Highlight class
//{{{ setHighlightInterval() method
"/*	 * JComponent.setFont(Font) is overridden here to cache the baseline for	 * the font. This avoids having to get the font metrics during every	 * repaint.	 */"
//{{{ isMarkerHighlightEnabled() method
//{{{ Handle actions
//{{{ Paint line numbers
//{{{ Determine action
/* && e.getX() >= getWidth() - borderWidth * 2 */
//{{{ getStyles() method
//{{{ getCaretColor() method
// draw |_
//{{{ getWrapGuideColor() method
//{{{ setMultipleSelectionColor() method
//{{{ setLineHighlightEnabled() method
//{{{ setFractionalFontMetricsEnabled() method
//{{{ setEOLMarkersPainted() method
//{{{ getFontMetrics() method
//{{{ paintSelection() method
//{{{ PaintWrapGuide class
//{{{ setElectricScroll() method
// Skip lines beyond EOF
//{{{ setDragEnabled() method
//{{{ scrollUpPage() method
//{{{ setDragAndDropCallback() method
//{{{ Debugging code
//{{{ getVisibleLines() method
//{{{ setFirstLine() method
//{{{ addScrollListener() method
//{{{ scrollToCaret() method
//{{{ scrollTo() method
//{{{ xyToOffset() method
//{{{ invalidateLineRange() method
//{{{ isEditable() method
//{{{ selectNone() method
// Scan backwards, trying to find a bracket
//{{{ selectWord() method
//{{{ selectBlock() method
//{{{ invertSelection() method
//{{{ removeFromSelection() method
// no no no!!!! //selectNone(); //}}}
//{{{ blinkCaret() method
//{{{ getMagicCaretPosition() method
//{{{ setMagicCaretPosition() method
//{{{ addCaretListener() method
//{{{ goToNextLine() method
//{{{ goToPrevLine() method
//{{{ goToPrevPage() method
//{{{ goToBufferEnd() method
//{{{ deleteParagraph() method
// remove this when 4.1 plugin API is deprecated
//{{{ backspace() method
//{{{ setOverwriteEnabled() method
// otherwise a bunch of consecutive C+d's would be merged // into one edit
//{{{ setRectangularSelectionEnabled() method
//{{{ formatParagraph() method
//{{{ stopServer() method
//{{{ lineComment() method
//{{{ rangeComment() method
//{{{ indentSelectedLines() method
//{{{ AWT stuff
//{{{ getSelectedLines() method
//{{{ getSelectionStartLine() method
//{{{ setSelectionEnd() method
//{{{ getMarkPosition() method
//{{{ foldStructureChanged() method
//{{{ getMarkLine() method
//{{{ doWordWrap() method
// Fix bug #922951 Off-by-one error in Word Count
//{{{ fireCaretEvent() method
//{{{ showStructureStatusMessage() method
//{{{ Selection constructor
//{{{ doDoubleDrag() method
//{{{ getEnd() method
//{{{ Range constructor
//{{{ Rect class
// progress bar value change
//{{{ CharIndexedSegment constructor
//{{{ createPrintStream() method
//{{{ charAt() method
//{{{ _logException() method
//{{{ isValid() method
// do any queued AWT runnables
//{{{ fireStatusChanged() method
//{{{ removeProgressListener() method
//{{{ writeLock() method
//{{{ requestDone() method
//{{{ getPlugin(String, boolean) method
// Only show class decs in CLASSES
//{{{ removePluginJAR() method
//{{{ Action methods
//{{{ getActionSetForAction() method
//Selection[] selection = (Selection[])buffer.getProperty(Buffer.SELECTION);
// lazy instantiation
//{{{ removeActionSet() method
//{{{ addActionSet() method
//{{{ getModes() method
//{{{ Rect constructor
//{{{ AbstractOptionPane constructor
//{{{ getAction() method
//{{{ getActionSets() method
// binaryOperation can return Primitive or wrapper type 
//{{{ Load user catalog
//{{{ Load macros and run startup scripts, after plugins and settings are loaded
//{{{ Edit mode methods
//{{{ reloadModes() method
//{{{ getPort method
// 4.1 plugin
//{{{ addPluginJAR() method
//{{{ _getLineManager() method
//{{{ _finishCaretUpdate() method
//{{{ addPluginJARsFromDirectory() method
//{{{ finishCaretUpdate() method
//{{{ openTemporary() method
//{{{ commitTemporary() method
//{{{ advanceSplashProgress() method
//{{{ recalculateVisibleLines() method
//{{{ getParentDialog() method
//{{{ isRightButton() method
//{{{ fireScrollEvent() method
//{{{ getComponentParent() method
//{{{ Buffer constructor
//{{{ isAncestorOf() method
//{{{ isPopupTrigger() method
//{{{ isMiddleButton() method
//{{{ updateStructureHighlightWithDelay() method
// see finishCaretUpdate() & _finishCaretUpdate()
/* called by DisplayManager.BufferChangeHandler.transactionComplete() */
/* otherwise DisplayManager.BufferChangeHandler calls */
// JDiff, error list add stuff here
//{{{ doWordCount() method
// do nothing, user clicked 'Stop'
//{{{ insertTab() method
//{{{ createMultilineLabel() method
//{{{ requestFocus() method
//{{{ menuCanceled() method
//{{{ updateStructureHighlight() method
//{{{ getRectParams() method
// last character before wrap // length with tabs expanded
//{{{ TextAreaBorder class
//{{{ updateChunksUpTo() method
//{{{ getActionContext() method
//{{{ RingListModel class
//{{{ addWorkRequest() method
// get rid of embedded tabs not removed by trim()
// caretLine would have been incremented // since insertNewLineAt <= caretPos
//{{{ ScrollLayout class
// Parse '='
//{{{ recalculateLastPhysicalLine() method
//{{{ focusGained() method
//{{{ tallCaretDelete() method
// Note that the attribute has been // specified.
// > 16 bits, surrogate needed
// Internal entity.
//{{{ MutableCaretEvent class
// XXX: getMarkPosition() deprecated!
//{{{ hideSplashScreen() method
//{{{ getNotLoadedPluginJARs() method
//{{{ CaretBlinker class
//{{{ setExtendedState() method
//{{{ centerOnScreen() method
//{{{ adjustmentValueChanged() method
//{{{ getDot() method
//{{{ focusLost() method
// just scroll to the dragged location
// so that Home <mouse click> Home is not the same // as pressing Home twice in a row
//{{{ loadStyles() method
//{{{ getBelowPosition() method
//{{{ getCachedServices() method
// Ignore empty lines
//{{{ paste() method
// Find the highest Untitled-n file
//{{{ doDoubleClick() method
// so that shift-click-drag works
//{{{ doSingleDrag() method
//{{{ doTripleDrag() method
// If we get to here, there must be // an InputStream available.
//{{{ getLineSubregionCount() method
// so that quick copy works
//{{{ xToSubregionOffset() method
//{{{ ChunkCache constructor
"/*			Treat lhs and rhs as arbitrary objects and do the operation.			(including NULL and VOID represented by their Primitive types)		*/"
//{{{ subregionOffsetToX() method
//{{{ windowOpened() method
//{{{ invalidateChunksFrom() method
//return -1;
//{{{ ComponentHandler class
//{{{ getPluginJARs() method
//{{{ Loading, saving window geometry
// we do this here instead of adding buffers to the bus.
//{{{ componentMoved() method
//{{{ invalidateChunksFromPhys() method
"//EditBus.send(new BufferUpdate(Buffer.this, //	view,BufferUpdate.MARKERS_CHANGED));"
// Make sure the window is displayed in visible region
//{{{ getMaxHorizontalScrollWidth() method
//{{{ loadGeometry() method
//{{{ invalidateAll() method
// Find the screen line containing this offset
//{{{ adjustForScreenBounds() method
// line is invisible?
//{{{ scrollDown() method
//{{{ keyTyped() method
//{{{ parseStyle() method
//{{{ createWhiteSpace() method
//{{{ getSubregionStartOffset() method
//{{{ LogListModel class
//{{{ getLineInfosForPhysicalLine() method
//{{{ getSubregionEndOffset() method
//{{{ getAbovePosition() method
// if -1, the empty space at the end of the text area // when the buffer has less lines than are visible
// for the first line displayed, take its physical line to be // the text area's first physical line
// control-click in virtual space inserts // whitespace and moves caret
// otherwise, determine the next visible line
// find a valid line closest to the last screen line
"/* if the user changes the syntax token at the				 * end of a line, need to do a full repaint. */"
//{{{ scrollUp() method
// unless this is the first time, increment // the line number
"/* We only cache entire physical lines at once;				 * don't want to split a physical line into				 * screen lines and only have some valid. */"
// empty space
// if the line has no text, out.size() == 0
// get another line of chunks
// chunk the line.
//{{{ globToRE() method
//{{{ escapesToChars() method
//{{{ charsToEscapes() method
//{{{ insertFile() method
// this returns false if initial sanity // checks (if the file is a directory, etc) // fail
//{{{ checkFileStatus() method
// null object ref is not instance of any type
// otherwise, the number of subregions
//{{{ LineInfo class
//{{{ lineToChunkList() method
//{{{ getStartLine() method
//{{{ getStart() method
//{{{ Range class
//{{{ Insert the lines into the buffer
//{{{ parseColor() method
//{{{ loadPopupMenu() method
//{{{ Canned dialog boxes
//{{{ Move the caret down a line
//{{{ Colors and styles
//{{{ getStartColumn() method
//{{{ showVFSFileDialog() method
//{{{ getEndColumn() method
//{{{ autosave() method
//{{{ saveAs() method
//{{{ prettifyMenuLabel() method
"/* Runtime runtime = Runtime.getRuntime();		int freeMemory = (int)(runtime.freeMemory() / 1024);		int totalMemory = (int)(runtime.totalMemory() / 1024);		int usedMemory = (totalMemory - freeMemory);		Log.log(Log.DEBUG,this,""Java heap: "" + usedMemory + ""Kb / ""			+ totalMemory + ""Kb, "" + (usedMemory * 100 / totalMemory)			+ ""%""); */"
//{{{ inputProperty() method
// wait for more requests
//{{{ loadToolBar() method
//{{{ paintScreenLineRange() method
// notify a running waitForRequests() method
// files[] should have length 1, since the dialog type is // SAVE_DIALOG
// Once save is complete, do a few other things
//{{{ Some predefined icons
//{{{ message() method
//{{{ confirm() method
//{{{ input() method
// Log some stuff
//{{{ getLogListModel() method
//{{{ setLogWriter() method
//{{{ closeStream() method
//{{{ flushStream() method
//{{{ Icon methods
//{{{ _log() method
/* not really needed since threads don't start until after */
//{{{ handleEditPaneUpdate() method
// so that jEdit doesn't exit with no views open automatically //setDaemon(true);
//{{{ loadIcon() method
//{{{ loadMenuBar() method
//{{{ Menus, tool bars
// status message changed, operation started, operation ends, ...
//{{{ getEditorIcon() method
// check if there is a cached version first
//{{{ log() method
// get the icon
//{{{ try to merge with an existing menu first
// Same thread.
//{{{ getThread() method
//{{{ move() method
//{{{ Add to AWT queue...
//{{{ getThreadCount() method
// no background mode, and reusing existing view
//{{{ allowWrite() method
// Roll back state.
//{{{ fireProgressChanged() method
//{{{ readLock() method
//{{{ queueAWTRunner() method
//{{{ writeUnlock() method
//}}} //{{{ Add to work thread queue...
// AWT thread magic
// Request queue
//{{{ RunRequestsInAWTThread class
"//			Log.log(Log.DEBUG,this,""AWT runner queued"");"
//{{{ getNextAWTRequest() method
//{{{ SegmentBuffer constructor
//{{{ setFontProperty() method
// changes IFNULL and IFNONNULL to opcodes 218 and 219 (inclusive)
"/* Some characters that we like to use in action names		 * ('.', '-') are not allowed in BeanShell identifiers. */"
//{{{ setDoubleProperty() method
// Write in progress.
//{{{ isWriteLocked() method
//{{{ claimWriteLock() method
// file does not begin with UTF-8-Y // signature. reset stream, read as // UTF-8.
// changes IFEQ ... JSR to opcodes 202 to 217 (inclusive)
//{{{ IntegerArray constructor
//{{{ getArray() method
// BIPUSH or NEWARRAY
// ------------------------------------------------------------------------- // Special instructions // -------------------------------------------------------------------------
// ------------------------------------------------------------------------- // Debug information // -------------------------------------------------------------------------
//{{{ get() method
// -------------------------------------------------------------------------- // Constructors // --------------------------------------------------------------------------
// updates maxLocals
//{{{ getLeadingWhiteSpace() method
//case ARRAY: //case OBJECT:
//case 'L':
// -------------------------------------------------------------------------- // Accessors // --------------------------------------------------------------------------
// updates current and max stack sizes
// -------------------------------------------------------------------------- // Corresponding size and opcodes // --------------------------------------------------------------------------
//{{{ updateGutterBorders() method
// \t handled above
/* eg, foo<C+b>, will insert foobar, */
//{{{ compareVersions() method
// updates max locals
//{{{ compareStrings() method
// xLOAD or xSTORE
// no stack change, but end of current block (no successor)
/*ISTORE_0*/
// if opcode == ATHROW or xRETURN, ends current block (no successor)
/*ILOAD_0*/
//{{{ runMacro() method
// Remove '.bsh'
//{{{ BeanShellHandler class
//{{{ BeanShellHandler constructor
//{{{ createMacro() method
// updates current and max stack sizes only if opcode == NEWARRAY // (stack size variation = 0 for BIPUSH or SIPUSH)
//{{{ setColorProperty() method
// pushes the first block onto the stack of blocks to be visited
//{{{ addMacro() method
//{{{ readUnlock() method
//{{{ Handler constructor
//{{{ _preprocessKeyEvent() method
//{{{ isFocusTraversable() method
//{{{ handleClient() method
//{{{ flushInput() method
//{{{ getLabel() method
//{{{ Handler class
// setting the message to 'null' causes the status bar to // check if a recording is in progress
//{{{ getPlugins() method
//{{{ getSource() method
//{{{ Getters/setter methods for various buffer meta-data
//{{{ getLastModified() method
//{{{ getVFS() method
//{{{ addProgressListener() method
"//				Log.log(Log.DEBUG,this,""AWT immediate: "" + run);"
//{{{ WorkThreadPool constructor
//{{{ getRules() method
//{{{ getRuleCount() method
//{{{ addSeparator() method
//{{{ setTerminateChar() method
//{{{ Recorder class
//{{{ Recorder constructor
//{{{ setFirstInvalidLineContext() method
//{{{ CaretHandler class
//{{{ getSelectionEnd() method
//{{{ isLeaf() method
"/*				Found the full name in imported classes.			*/"
//{{{ getAbbrev() method
// UCS-2 without a BOM must begin with "<?XML" // 0x00 0x3c 0x00 0x3f: UCS-2, big-endian, no byte-order mark
//{{{ isBuiltIn() method
//{{{ _closeBuffer() method
"/* I already wrote a comment expaining this in			 * Macro.invoke(). */"
//{{{ stopRecording() method
//{{{ loadMacros() method
//{{{ clearRegister() method
//{{{ recordTemporaryMacro() method
//{{{ getRegisters() method
//{{{ getEndLine() method
//{{{ saveRegisters() method
//{{{ loadRegisters() method
//{{{ Register interface
//{{{ ClipboardRegister class
//{{{ doSingleClick() method
//{{{ Text methods
//{{{ macroNameToLabel() method
//{{{ getHandler() method
//{{{ AdjustHandler class
//{{{ getMark() method
//{{{ KillRingHandler class
//{{{ stringsEqual() method
//{{{ setSize() method
//{{{ objectsEqual() method
//{{{ startDragAndDrop() method // calls dndCallback via reflection
// This is the new, canonical path
//{{{ insideSelection() method
// remove trailing \n
//{{{ updateScrollBars() method
//{{{ StringRegister class
//{{{ RegistersHandler class
//{{{ isCaretVisible() method
//{{{ Text editing
//{{{ getAttributes() method
// If we read a \r and // lastWasCR is also true, // it is probably a Mac file // (\r\r in stream)
//{{{ Macro constructor
//{{{ getRightClickPopup() method
//{{{ getSymlinkPath() method
//{{{ setRightClickPopup() method
//{{{ joinLines() method
//{{{ registerHandler() method
// Was the previous read character a \r? // If we read a \n and this is true, we assume // we have a DOS/Windows file
//{{{ getMacroHierarchy() method
//{{{ isRightClickPopupEnabled() method
//{{{ getMacroActionSet() method
//{{{ Macro class
//{{{ getMacro() method
//{{{ getHandlers() method
//{{{ allowRead() method
//{{{ Request class
//{{{ isVMS() method
//{{{ isMacOSLF() method
// Determine whether we are dealing // with a one-, two-, three-, or four- // byte sequence.
//{{{ User input
/* we guess an initial size for the array */
// A \r was read, hence a MacOS file
//{{{ narrowToSelection() method
//{{{ setEntry() method
//{{{ isLoaded() method
//{{{ isPerformingIO() method
//{{{ isNewFile() method
//{{{ setNewFile() method
//{{{ classToFile() method
//{{{ isUntitled() method
//{{{ Folding
// only executed if above loop falls // through, ie there is no handler for // this file
//{{{ goToMatchingBracket() method
//{{{ unref() method
//{{{ PosTopHalf constructor
//{{{ PosBottomHalf class
//{{{ goToBufferStart() method
// create a temporary (synthetic) prefix // KeyBinding, that won't be saved
//cons.insets = new Insets(1,0,1,0);
//{{{ goToEndOfWhiteSpace() method
// save dockable window geometry, and close 'em
//{{{ revalidate() method
//{{{ goToLastVisibleLine() method
//{{{ showRunScriptDialog() method
//{{{ PerspectiveHandler class
//{{{ goToNextMarker() method
//{{{ getElementIndex() method
// if caret is inside leading whitespace, indent.
// backgrounded
// copy text after gap
//{{{ PosTopHalf class
//{{{ setPerspectiveDirty() method
//{{{ loadPerspective() method
//{{{ isPerspectiveDirty() method
//{{{ setPosition() method
//{{{ Some constants
//{{{ smartHome() method
//{{{ hasScreenMenuBar
//{{{ updateBufferStatus() method
// see above
// remove it so editor can continue // functioning
//{{{ ThreadProgress class
//{{{ updateCaption() method
//{{{ getWordToComplete() method
//{{{ getHistory() method
/* not a class */
//{{{ getSubregionOfOffset() method
// Reset count
// Number of lines read. Every 100 lines, we update the // progress bar
// end JcmdProcess.java
//{{{ addStructureMatcher() method
// Look for line endings.
/* Get full command line */
//{{{ Split the text into lines
// do nothing, who cares
//{{{ setFirstInvalidFoldLevel() method
//{{{ needFullRepaint() method
//{{{ overlaps() method
//{{{ isJava14() method
//{{{ isJava15() method
// fix the bug where the horiz. // scroll bar was not updated // after creating a new file.
// Note that we rely on the fact that when a physical line is // invalidated, all screen lines/subregions of that line are // invalidated as well. See below comment for code that tries // to uphold this assumption.
"/* If this line has become longer or shorter				 * (in which case the new physical line number				 * is different from the cached one) we need to:				 * - continue updating past the last line				 * - advise the text area to repaint				 * On the other hand, if the line wraps beyond				 * lastScreenLine, we need to keep updating the				 * chunk list to ensure proper alignment of				 * invalidation flags (see start of method) */"
//{{{ getLineInfo() method
//{{{ loadClass() method
// zero it here so that BufferTabs doesn't have any problems
// middle mouse button drag inserts selection // at caret position
// only wrap if we're at the end of a line, or the rest of the // line text is whitespace
//{{{ doTripleClick() method
//{{{ MutableCaretEvent constructor
//{{{ shiftTallCaretLeft() method
"/* with drag and drop on, a mouse down in a selection does not		immediately deselect */"
// When the user is typing, etc, we don't want the caret // to blink
//{{{ _addToSelection() method
"/* only ever return true if space was pressed		 * with logicalLength == maxLineLen */"
// for debugging, make jEdit think its using a different // version of Java than it really is.
//{{{ isSelectionRectangular() method
//{{{ getSelectionStartEndOnLine() method
"/* on JDK 1.4, this is set to a method by Java14. The method must take	* these parameters:	* - a JEditTextArea	* - an InputEvent	* - a boolean (copy text or move, depending on modifier user held down)	*/"
//{{{ getLastEdit() method
//{{{ reloadAllBuffers() method
// save caret info. Buffer.load() will load it.
//{{{ _getBuffer() method
//{{{ handlePopupTrigger() method
//{{{ lineInStructureScope() method
// add a line marker at the end for proper offset manager // operation
//{{{ selectLine() method
//        currBlockNo++;
//{{{ goToPrevFold() method
//{{{ PosBottomHalf constructor
//{{{ Edit class
//{{{ insertEnterAndIndent() method
//{{{ selectParagraph() method
//{{{ tabsToSpaces() method
//{{{ setLastModified() method
//{{{ Offset conversion
//{{{ charsToEntities() method
//{{{ formatFileSize() method
//{{{ getLongestPrefix() method
// Offset of previous line, relative to // the start of the I/O buffer (NOT // relative to the start of the document)
//{{{ Painting
//{{{ Scroll horizontally
"/*         * Now the coding tables         */"
//{{{ getLineCount() method
"/*     * Knuth's increments seem to work better     * than Incerpi-Sedgewick here.  Possibly     * because the number of elems to sort is     * usually small, typically <= 20.     */"
//{{{ isDragInProgress() method
//{{{ getFirstPhysicalLine() method
//{{{ getHorizontalOffset() method
//{{{ OptionGroup constructor
// fix for the bug where key events in JTextComponents // inside views are also handled by the input handler
"/*         * Create the Huffman decoding tables         */"
"/*         * Receive the mapping table         */"
"/*         * A bad CRC is considered a fatal error.         */"
//{{{ setWrapGuidePainted() method
//{{{ JEditTextArea constructor
//{{{ isCaretBlinkEnabled() method
//{{{ Initialize some misc. stuff
//{{{ ViewConfig class
//{{{ TextAreaPainter constructor
// do not reset the stream and just treat it // like a normal UTF-8 file.
// walk up hierarchy, looking for an EditPane
//{{{ getStringWidth() method
// this constructor keys the hash table
// dockables
//{{{ unloadServices() method
//{{{ getBuffers() method
//{{{ getBufferCount() method
//{{{ getFirstBuffer() method
//{{{ loadServices() method
"/*         * not a char and not EOF         */"
//throw new CCoruptionError();
//{{{ updatePopupMenu() method
//{{{ registerService() method
//{{{ getEOLMarkersPainted() method
// Compare the input, character- // by character.
//{{{ Descriptor class
// Otherwise set a flag, // so that \n knows that last // was a \r
// Read the character
//{{{ getEOLMarkerColor() method
//{{{ setWrapGuideColor() method
//{{{ initKeyBindings() method
// unknown service - <clazz,name> not in table
//{{{ unregisterService() method
//{{{ getService() method
//{{{ getServiceNames() method
//{{{ getServiceTypes() method
// Now, on with the hunt...
// avoid re-running script if it gives // us null
// Quick check catches public fields include those in interfaces
//{{{ getSelectionColor() method
// Per Patrick Beard:
//{{{ getLastBuffer() method
//{{{ checkBufferStatus() method
// Not found, fall through to next class
//{{{ isDirty() method
//{{{ isReadOnly() method
// remember that this class doesn't exist for // future reference
//{{{ EditServer constructor
/*delcaredOnly*/
//{{{ getViewCount() method
/* I assume that there can be only one drag operation at the time */
// Skip certain actions this way
// Throw an EOFException if there // is nothing else to pop.
// draw |
//{{{ toTitleCase() method
//{{{ setMarkerHighlightColor() method
//{{{ setFoldColor() method
//{{{ getDoubleProperty() method
//{{{ getMarkerHighlightColor() method
//{{{ getLineNumberAlignment() method
//{{{ IOProgressMonitor constructor
//{{{ noRecord() method
// Push it onto the stack.
//{{{ getMarker() method
//{{{ BracketMatcher class
// Don't bother if there is no input.
//{{{ getMarkers() method
// See if we have any overflow.
//shadow size
//{{{ delayedUpdate() method
// Special situation -- we're taking // input from a character stream.
//{{{ isX11() method
//{{{ ScrollHandler class
//{{{ getMembers() method
//{{{ getMember() method
//{{{ getMemberCount() method
//{{{ setSort() method
//{{{ insertionSort() method
// Filter out all carriage returns // if we've seen any.
// Reset the position.
//{{{ Anchor class
//{{{ DisplayManager constructor
//{{{ fvmdump() method
/* Install location */
/* Backup filename prefix */
/* Backup suffix */
//{{{ hideLineRange() method
//{{{ fvmput2() method
//{{{ MirrorModel class
//{{{ Find fold start and fold end...
//{{{ RootElement constructor
// 3-byte sequence: zzzzyyyyyyxxxxxx = 1110zzzz 10yyyyyy 10xxxxxx
//{{{ setDirty() method
// Bump lastLine so // that the next line // doesn't erronously // pick up the \r
// Insert a line
//{{{ setReadOnly() method
/* start of next expanded range */
// How many characters have we read?
// Otherwise, the 8th bit may not be set in UTF-8
// fixes dirty flag not being reset on // save/insert/undo/redo/undo
// Check for the correct bits at the // start.
// Set up the variables for the current // element context.
// Take a character from the buffer // or from the actual input stream.
// Set up the DTD hash tables
// Return the significant bits.
// No errors; first line
// Set up the buffers for data and names
//{{{ isLineVisible() method
//{{{ Compare interface
//{{{ StringCompare class
//{{{ AbbrevsModel class
//{{{ getForegroundColor() method
//{{{ StringICaseCompare class
//{{{ removeFromBus() method
//{{{ getComponents() method
//{{{ send() method
// can't create new instances
//{{{ EditAction constructor
/* Mix files and directories */
//{{{ getMouseOverText() method
//{{{ View methods
//{{{ getChunkList() method
//{{{ isTemporary() method
//{{{ Thread safety
//{{{ Line offset methods
//{{{ setDefault() method
//{{{ getTerminateChar() method
// no need to lock since this just returns a value and that's it
//{{{ resolveImports() method
//{{{ setKeywords() method
//{{{ createEscapeRule() method
//{{{ getFirstView() method
//{{{ createMarkPreviousRule() method
//{{{ createMarkFollowingRule() method
//{{{ createRegexpSequenceRule() method
//}}} //{{{ SEQ_REGEXP
// // Element type currently in force. //
// // Hashtables for DTD information on elements, entities, and notations. //
//{{{ MenuItemCompare class
//{{{ xToOffset() method
//{{{ Plugin management methods
//{{{ ServiceListHandler constructor
// // Stack of entity names, to help detect recursion. //
// // Symbol table, for internalising names. //
// // Are we in a context where PEs are allowed? //
//{{{ checkDelegateEnd() method
// Some kind of 8-bit encoding with "<?XML" // 0x3c 0x3f 0x78 0x6d: UTF-8 or other 8-bit markup (read ENCODING)
//{{{ invalidateCachedScreenLineCounts() method
// mixed digit/alpha keyword, // and no regexp... don't // highlight as DIGIT
// Set type/creator codes for files
//}}} //{{{ EOL_SPAN
//{{{ osok() method
//{{{ showInFinder() method
//{{{ DefaultInputHandler constructor
// According to Slava this is better
//{{{ Text getters and setters
//{{{ openSelection() method
//{{{ ScriptRunner class
//{{{ markKeyword() method
//}}} //{{{ Handle start of rule
//{{{ EBMessage constructor
//{{{ initReplace() method
//{{{ getSkipIndex() method
// if loadAutosave is false, we loaded an // autosave file, so we set 'dirty' to true
//{{{ Main parser loop
// note that we don't use setDirty(), // because a) that would send an unnecessary // message, b) it would also set the // AUTOSAVE_DIRTY flag, which will make // the autosave thread write out a // redundant autosave file
// initialize the skip array to all zeros
// leave the table cleanly-initialized for an empty pattern
/* otherwise it will be delivered later */
//{{{ MultiFileActionHandler class
// fields
// multifile settings
//{{{ regexpReplace() method
//SwingUtilities.invokeLater(new ScriptRunner(path)); //}}}
//{{{ getSettings() method
//{{{ Undo
//{{{ isTransactionInProgress() method
//{{{ Handlers
// so that Replace and Find continues from // the right location
// Map types to assignable forms, need to keep this fast...
// send some EditBus messages
// make sure end of match is visible
//{{{ beginCompoundEdit() method
//{{{ isToggle() method
//{{{ setReverseSearch() method
//{{{ handleOpenFile() method
//{{{ SearchBar constructor
//{{{ BufferClosedVisitor class
//{{{ removeBufferChangeListener() method
//{{{ handleFileCodes() method
//{{{ handleAbout() method
// This will happen when a new file is created
// Add type/creator to local buffer property list on open
//{{{ buildToVersion() method
// First 2 chars are the major version number
// Set type/creator on save
// Second 2 are the minor number
//{{{ showPopupMenu method
// Then the pre-release status
//{{{ insideCompoundEdit() method
//{{{ Buffer events
//{{{ searchStarted() method
// Finally the bug fix release
//{{{ getBufferChangeListeners() method
//{{{ DirectoryListSet constructor
// Can't use buffer.getName() here because // it is not changed until the save is // complete
//{{{ ViewOptionPane constructor
//{{{ applicationDockMenu() method
//{{{ handlePreferences() method
/* split VFSFileDialog horizontally */
//{{{ handleQuit() method
/* Show menu bar */
//{{{ 1. Check whether tools.jar is in the system classpath:
// Try to make the full imported name
//{{{ applicationOpenFiles() method
//{{{ NewViewAction class
//{{{ Services
//{{{ applicationShouldTerminate() method
//{{{ insertSelection() method
//{{{ MacroAction class
/* Delete downloaded files */
//{{{ RecentMenu class
//{{{ Dock Menu
//{{{ RecentDirMenu class
//{{{ MacrosMenu class
// eg user just closed a view and didn't focus another
//{{{ isMainThread() method
//{{{ isBackgroundMode() method
//{{{ showMemoryStatusDialog() method
//{{{ getJEditHome() method
//{{{ AutosaveBackupOptionPane constructor
//{{{ getSettingsDirectory() method
//{{{ getJARCacheDirectory() method
//{{{ backupSettingsFile() method
//{{{ new API
// forget the cached Position instance
//{{{ ShowBufferMenuItem class
//{{{ ShowDirAction class
/* unfocused border color */
// set proxy port
//{{{ exit() method
// un-iconify using JDK 1.3 API
/* Text drag and drop */
/* Clock */
//{{{ savePerspective() method
// Begin BeanShell Modification - serializable
// Close dialog, view.close() call need a view...
//{{{ getListCellRendererComponent() method
// Send EditorExitRequested
//{{{ ErrorListCellRenderer constructor
// Close all buffers
// If we are running in background mode and // reallyExit was not specified, then return here.
//{{{ MouseOptionPane constructor
/* Encoding */
// do *not* invoke special override for block... (see above)
// Do the for init
// End BeanShell Modification - serializable
// Save view properties here
// default impl
// Stop autosave timer
/* Multi select */
// put it back
//{{{ stringToSelection() method
/*method.block*/
// Send EditorExiting
// Save settings
// Close activity log stream
// Byebye...
// End method components
// Java Method
// Begin Method components
// Scripted method body
/*isNative*/
// is this a syncrhonized method?
//{{{ 2. Check whether it is in the jEdit user settings jars folder:
// jEdit will load it automatically
//{{{ 3. Check whether it is in jEdit's system jars folder:
//{{{ getEditServer() method
// only do this if we are the current edit pane
// Only do this after all I/O requests are complete
// avoid a race condition // see bug #834338
//{{{ prevBuffer() method
//{{{ nextBuffer() method
//{{{ recentBuffer() method
//{{{ StyleChoice class
//{{{ focusOnTextArea() method
//{{{ addMode() method
// Cardinality (number of args) mismatch
// Make the local namespace for the method invocation
//{{{ ErrorListDialog constructor
//{{{ ErrorEntry class
//{{{ loadMode() method
//{{{ pluginError() method
//{{{ setActiveView() method
// buffer link list
// Set typed variable
// makes openTemporary() thread-safe
// view link list
//{{{ usage() method
//{{{ version() method
//{{{ initMisc() method
// Push the new namespace on the call stack
// save the callstack including the called method, just for error mess
//{{{ DirectoryEntry class
//{{{ Wrapper class
// Push the existing status
// Add our protocols to java.net.URL's list
/* Anti-aliasing */
//{{{ setInterval() method
// No super method, try to invoke regular method // could be a superfluous "super." which is legal.
//{{{ getOffset() method
// Set the User-Agent string used by the java.net HTTP handler
////////////////////////////////////////////////////////////////////// // Local Variables. //////////////////////////////////////////////////////////////////////
//{{{ getIdealIndentForLine() method
/* Multiple selection color */
//{{{ 4. Check whether it is in <java.home>/lib:
//{{{ Load it, if not yet done:
//{{{ DirectoryLoadedAWTRequest class
//{{{ Flags
// check if web start
// use user.dir as last resort
//{{{ Forward search
// Add an EditBus component that will reload edit modes and // macros if they are changed from within the editor
//{{{ initSiteProperties() method
//{{{ initSystemProperties() method
/*recurse*/
//{{{ getCurrentIndentForLine() method
//{{{ initResources() method
//{{{ initPlugins() method
//{{{ initUserProperties() method
//{{{ ColorEntry class
// null value means no value
//{{{ isDOSDerived() method
//{{{ indentLine() method
// The token.image text of the name... never changes.
//{{{ EditPane constructor
// check for easy mistake
//{{{ getScreenBounds() method
// Set up the right-click popup menu
// Don't add duplicates
// use old property name for backwards compatibility
//{{{ loadBufferSwitcher() method
//{{{ isOS2() method
//{{{ indentLines() method
//{{{ isWindowsNT() method
//{{{ initPLAF() method
// Make adjustments for some OS's
// give all Swing components our colors
//defaults.put(prefix + ".inactiveForeground",foreground);
//{{{ isUnix() method
//{{{ runStartupScripts() method
//{{{ isWindows() method
//{{{ isWindows9x() method
//{{{ Get indent attributes of previous line
//{{{ Handle brackets
//{{{ Insert constructor
// Register for notification of classloader change
// null not supported?
//{{{ FirewallAuthenticator class
// might come in handy useful some time
//{{{ finishStartup() method
// Start I/O threads
// Start edit server
//{{{ getEncodings() method
//{{{ Get indent attributes for current line
//{{{ checkFileForLoad() method
//{{{ getRootElements() method
//{{{ putBooleanProperty() method
// read results...
//{{{ Handle regexps
// Additional bracket indent // For lining up closing // and opening brackets
//{{{ isFoldStart() method
//{{{ getLineParenWeight() method
//{{{ invalidateCachedFoldLevels() method
//{{{ Deep indenting
// If the previous line matches indentNextLine or indentNextLines, // add a level of indent
//{{{ setFoldHandler() method
//{{{ getParagraphElement() method
//{{{ isFoldEnd() method
//{{{ putProperty() method
//{{{ Position methods
//{{{ getMarkerStatusPrompt() method
// don't sort markers while buffer is being loaded
//{{{ Folding methods
//{{{ getCurrentIdentForLine() method
//{{{ getFoldAtLine() method
//{{{ Marker methods
//  first node will either be PrimitiveType or AmbiguousName
// backwards compatibility...
// bad postURL
/*type*/
// if we don't do this, the autosave file won't be // deleted after a save as
//{{{ Report any plugin errors
// this must be called before any EditBus messages are sent
//{{{ showPluginErrorDialog() method
//{{{ getMarkerAtLine() method
//{{{ addOrRemoveMarker() method
// return cached type if available
//{{{ getMarkerInRange() method
// to avoid slowdown with large files; only scan 10000 lines either way
//{{{ getFlag() method
//{{{ resetCachedProperties() method
// We only save markers to VFS's that support deletion. // Otherwise, we will accumilate stale marks files.
//{{{ removeAllMarkers() method
//{{{ setPath() method
// in one case not a single AWT class will // have been touched (splash screen off + // -nogui -nobackground switches on command // line)
//{{{ setFlag() method
//{{{ finishSaving() method
// Display
// Bsh scripted object
// Get catch block
//{{{ recoverAutosave() method
//{{{ findMatchingBracket() method
//{{{ Flag values
// Users should not normally see this.
//{{{ finishLoading() method
"/*    * Constructors of various flavors follow.    */"
// Create marker positions
//{{{ fireTransactionComplete() method
// this method might get called at startup
// put cbNameSpace on the top of the stack
// If we have an exception, find a catch
//{{{ checkFileForSave() method
// set a typed variable (directly in the block)
// handled target
// Note: no way to mutate the Throwable message, must maintain our own
// exception fell through, throw it upward...
// 1 because we've already 'seen' the first bracket
// Need to reset properties that were cached defaults, // since the defaults might have changed.
// check this.value
// first line for last 10 lines, make sure not to overlap // with the first 10
// See notes in getThis()
"/* if we save a file with the same name as one				 * that's already open, we presume that we can				 * close the existing file, since the user				 * would have confirmed the overwrite in the				 * 'save as' dialog box anyway */"
// Note: in this case parent must have a class manager.
// show this message when all I/O requests are // complete
//{{{ parseBufferLocalProperties() method
"/* if we saved over an already open file using				 * 'save a copy as', then reload the existing				 * buffer */"
// new message type introduced in 4.0pre4
//{{{ Update this buffer for the new path
//{{{ getPriorNonEmptyLine() method
//{{{ getListener() method
// End instance data
// don't do this on initial token marker
//{{{ Event firing methods
// didn't find a line that contains non-whitespace chars // so return index of prior whitespace line
// if user adds mode buffer-local property
//{{{ addBufferToList() method
//{{{ fireContentRemoved() method
// Prepare to execute the block. // We must create a new BlockNameSpace to hold the catch // parameter and swap it on the stack after initializing it.
/*strictjava*/
//{{{ fireFoldLevelChanged() method
//{{{ fireContentInserted() method
//{{{ fireFoldHandlerChanged() method
//{{{ firePreContentRemoved() method
// Begin instance data // Note: if we add something here we should reset it in the clear() method.
//{{{ findWordStart() method
//{{{ getTokenAtOffset() method
// Locate the variable definition if it exists.
// this must be after the stream is created or // we deadlock with SSHTools.
// primitives should have been wrapped
// No previous variable definition found here (or above if recurse)
// Nothing found
//}}} //{{{ Backward search
// corresponding character // false - backwards, true - forwards
//{{{ Go on to next line
//{{{ Go on to previous line
//{{{ the character under the cursor changes how we behave.
//{{{ Whitespace...
//{{{ gotoMarker() method
//{{{ Animator class
// Handle line number
// Handle marker
// If we are disconnected from root we need to handle the def imports
//{{{ AbbrevEditor constructor
// word char; keep going
// word char or symbol; stop
// whitespace; include in word if eating
"/*		Get variables declared in this namespace.	*/"
//checkVariableModifiers( name, modifiers );
// Change import precedence if we are a class body/instance // Get imported first.
//{{{ setAbbrev() method
/* DOS ^Z */
// turn the rankings into relative rankings, from 1 to 4
// align everything to paragraph's leading indent
//{{{ getIconForFile() method
// if we see whitespace, set flag.
/* all good */
//{{{ createEncodingMenu() method
//{{{ getStringCase() method
//{{{ format() method
//{{{ FavoritesMenuButton class
// Is it typed?
// this will disable most operations if // files of multiple types are selected
//{{{ FileCellRenderer constructor
//{{{ createMenuItem() method
//{{{ getEntryWidth() method
//{{{ addEdit() method
//{{{ ExpansionToggleBorder class
//{{{ ExpansionToggleBorder constructor
//{{{ VFSDirectoryEntryTable constructor
//{{{ isExpansionToggle() method
//{{{ selectFile() method
//{{{ getExpandedDirectories() method
//{{{ ActionSet constructor
//{{{ setLabel() method
//{{{ scrollRectToVisible() method
// avoid scrolling to the right
//{{{ addAction() method
// Add remaining stuff from buffer
// what to do?
//{{{ compareChars()
//{{{ expand() method
// m contains either BshMethod or Vector of BshMethod
// Vector
//{{{ ClearTypeSelect class
//{{{ resizeColumnsAppropriately() method
//{{{ BrowserIORequest constructor
//checkMethodModifiers( method );
//{{{ getMemberIndex() method
//{{{ Request types
//{{{ addExtendedAttributes() method
// Change import precedence if we are a class body/instance // Get import first.
//{{{ listDirectory() method
// allow user to change name // case
//{{{ getItem() method
//{{{ mkdir() method
//{{{ collapse() method
//{{{ VFSDirectoryEntryTableModel constructor
//{{{ setRoot() method
//{{{ ExtendedAttribute class
// we no longer have any // dirs using this extended // attribute
// this vfs has an extended attribute which is not // in the list ???
//{{{ showFilePopup() method
//{{{ clearExpansionState() method
//{{{ compareTo() method
//{{{ BrowserView constructor
// how deeply we are nested
//{{{ focusOnFileView() method
//{{{ directoryLoaded() method
//{{{ saveExpansionState() method
//{{{ updateFileView() method
//{{{ addToBus() method
//{{{ loadDirectory() method
//{{{ getBrowser() method
//{{{ getTable() method
//{{{ getParentDirectoryList() method
// we use SwingUtilities.invokeLater() // so that the action is executed before // the popup is hidden.
//{{{ WorkThreadListener class
// Only backup once per session
//{{{ Sort buffer list
//{{{ VFSFileNameField constructor
//{{{ doComplete() method
/* nothing */
//{{{ filesSelected() method
// fix for bug #765507 // we don't type complete in save dialog // boxes. Press TAB to do an explicit // complete
//{{{ VFSFileChooserDialog constructor
//{{{ doFileExistsWarning() method
//{{{ goToParent() method
//{{{ BackspaceAction class
/* browser.getBrowserView().getTable().addKeyListener(new KeyHandler()); */
// user pressed enter when the vfs table or // file name field has focus, with nothing // selected.
//{{{ filesActivated() method
// non-existent file
//{{{ setFilenameFilter() method
//{{{ removeViewFromList() method
//{{{ getIndentSize() method
//{{{ getTabSize() method
//{{{ maybeReload() method
//{{{ Input/output methods
//{{{ browseDirectory() method
//{{{ addViewToList() method
//{{{ GetFileTypeRequest class
// there was an error
//{{{ browseDirectoryInNewWindow() method
//{{{ Browser types
//{{{ getFilenameFilter() method
//{{{ setShowHiddenFiles() method
//{{{ locateFile() method
// used by FTP plugin to clear directory cache
//{{{ getShowHiddenFiles() method
//{{{ addBrowserListener() method
//{{{ Insert class
//{{{ rootDirectory() method
// path is the currently viewed directory in the browser
//{{{ getDirectoryField() method
//{{{ removeBrowserListener() method
//{{{ searchInDirectory() method
//{{{ removeAction() method
//{{{ getBrowserView() method
//{{{ endRequest() method
//{{{ removeAllActions() method
//{{{ updateFilenameFilter() method
//{{{ pathsEqual() method
// Try imported class
//{{{ PluginsMenuButton constructor
// if a file is selected in OPEN_DIALOG or // SAVE_DIALOG mode, just let the listener(s) // handle it
// Unqualified (simple, non-compound) name
//cacheCount++; // debug
//{{{ getActionCount() method
// Look for the loaded command 
// close if this buffer is currently // visible in the view.
// Unqualified name check imported
// Now try buffer.<property>
//{{{ initProxy() method
// For backwards compatibility
// First try the buffer-local properties
// Now try mode.<mode>.<property>
// Try returning it as an integer first
//{{{ createMenuBar() method
// dump stack trace for debugging purposes
//{{{ startRequest() method
//{{{ CommandsMenuButton class
//{{{ createToolBar() method
// if found as imported also cache it
//{{{ PluginsMenuButton class
//{{{ updateFilterEnabled() method
//{{{ CommandsMenuButton constructor
/* we're in a modal dialog */
// this may be negative
// TODO: to be implemented
// TODO:  the subplot areas needs to be moved out of the plot into the plot //        state
//TODO: shift block down to bottom
// TODO: it might be a good idea to keep a reference to the color // specified in setPaint() or setColor(), rather than creating a // new object every time getPaint() is called.
// TODO: for now we are ignoring the height constraint
// first determine the size of the chart rendering area... // TODO workout insets for SWT
// TODO: implement properly
// TODO: this must be wrong...
// TODO: we didn't check the width yet
// hack to ensure the newly created awt fonts will be rendered with the // same height as the swt one
//TODO: shift block right by half
// FIXME: need a locale as well as a timezone
//TODO: shift block over to right
// do we need to update the crosshair values?
// TODO find a better localization key
// TODO:  this attribute should be transferred to the renderer state.
// FIXME: implement this, low priority
// FIXME: the XYItemRenderer interface doesn't specify the // getAnnotations() method but it should
// defer argument checking...
// calculate the adjusted data area taking into account the 3D effect... // this assumes that there is a 3D renderer, all this 3D effect is a // bit of an ugly hack...
// TODO:  add constructors for combinations of number and date formatters.
// TODO: move to plot state
// here we tweak the notify flag on the plot so that only // one notification happens even though we update multiple // axes...
// defer argument checking
//FIXME we should really assert a value here
// TO DO:  these annotations only work with XYPlot, see if it is possible to // make ContourPlot a subclass of XYPlot (DG);
//FIXME we should really assert a value
// not strictly necessary, since the // renderer set for the // parent plot is not used
// TODO : complete this
// TODO: fix output when this flag is set to true
// TODO:  move the above to the plot state
// FIXME:  this code means that it is not possible to use more than // one domain axis for the combined plots...
// end of workaround
// TODO: could change this to itemFillPaint().  For backwards // compatibility, it might require a useFillPaint flag.
// a redraw should NOT trigger another change event
// unused in parent
// TODO: In JFreeChart 1.2.0, put this method in the // CategoryItemRenderer interface
// TODO: rotate the image when drawn with horizontal orientation?
// TODO: implement this properly
// FIXME: this should generate a series change event
// CREATE ENTITIES // FIXME:  these methods should be defined
// FIXME: the renderer interface doesn't have the drawDomainLine() // method, so we have to rely on the renderer being a subclass of // AbstractXYItemRenderer (which is lame)
// FIXME: this attribute is not used - deprecate?
// TODO: by coding the event with some information about what changed // in the dataset, we could make the recalculation of the interval // more efficient in some cases (for instance, if the change is // just an update to a y-value, then the x-interval doesn't need // updating)...
// the method we want isn't in the CategoryItemRenderer // interface...
// FIXME: what if value is null on next line?
// TODO:  this needs to move into the renderer state
//TODO: implement this method properly
// hack to ensure the newly created swt fonts will be rendered with the // same height as the awt one
// unused but must return something, so while we are at it...
// FIXME: perhaps we should clone the data list
// if we are rendering the values as percentages, we need to calculate // the total for the current item.  Unfortunately here we end up // repeating the calculation more times than is strictly necessary - // hopefully I'll come back to this and find a way to add the // total(s) to the renderer state.  The other problem is we implicitly // assume the dataset has no negative values...perhaps that can be // fixed too.
// Note: It would be nice to pre-calculate this per series
// we assume that all other Paint instances implement equals() and // hashCode()...of course that might not be true, but what can we // do about it?
// FIXME: use other fields too
// all attributes are immutable, so we can just return the super.clone() // FIXME: in fact, the generator itself is immutable, so cloning is // not necessary
// here's a quirk - the API has been defined in terms of a plain // TimePeriod, which cannot make use of the timezone and locale // specified in the constructor...so we only do the time zone // pegging if the period is an instanceof RegularTimePeriod
// now handle specific plot types (and yes, I know this is some // really ugly code that has to be manually updated any time a new // plot type is added - I should have written something much cooler, // but I didn't and neither did anyone else).
// TODO: URLEncode?
// TODO Revert to SVN revision 2469 in JFreeChart 1.0.16 //      (MultipleGradientPaint's / JDK issues) // TODO THEN: change visibility of ALL darker(...) Methods EXCEPT //      darker(Paint) to private!
//TODO replace getSize by getBounds ?
// TODO: check threshold
// FIXME: add setBaseItemURLGenerator(CategoryURLGenerator, boolean) ?
// FIXME: add setSeriesItemURLGenerator(int, CategoryURLGenerator, boolean)?
// now we handle some special cases - yes, UGLY code alert!
// FIXME:  it probably makes sense to allocate an array of 256 Colors // and lazily populate this array...
// TODO: need to fetch this from localised resources
// FIXME: No getValueFormat() method?
// here we could probably be a little faster by searching for both // indices simultaneously, but I'll look at that later if it seems // like it matters...
// TODO: complete this
// FIXME: this attribute is never used - deprecate?
// FIXME: Clone the attributed string if it is not null
// report this?
// this may be obsolete (not used anywhere)
// TODO: is this a good idea?
/// a kludge to make everything work when no rows returned
//TODO: shift block down by half
// FIXME better ask the renderer instead of DatasetUtilities
// TODO: implement the entity for the annotation
// needs to be improved !!!
// not used by plot
// FIXME:  need a locale as well as a timezone
// TODO: For JFreeChart 1.2.0, this method should go in the //       ShapeUtilities class
// we'll have to use the method in the interface, but // this doesn't have the paint and stroke settings...
// FIXME: Check that there isn't already a series with the same key
// I know it's bad to create object. better idea?
// FIXME: clone generator
// TODO: use a generator here
// TODO: I think we need to make sure the keys are actually cloned, // whereas the paint instances are always immutable so they're OK
// FIXME: draw outliers
// TODO: I think we need to make sure the keys are actually cloned, // whereas the stroke instances are always immutable so they're OK
// not implemented
"/**     * Returns a string representing the week (e.g. ""Week 9, 2002"").     *     * TODO: look at internationalisation.     *     * @return A string representing the week.     */"
// FIXME: show a dialog with the error
// TODO: draw the interval marker with a 3D effect
// TODO: add serialization support for images
// could make this configurable
// TODO see if we need to apply some line color and style to the // axis traces
// FIXME:  implement this...
"/** * An annotation that allows an image to be placed at some location on * an {@link XYPlot}. * * TODO:  implement serialization properly (image is not serializable). */"
// if not, check if there is a paint defined for the specified key
// RANGE / RANGE
// height is OK, but width must be constrained
// do we need to fill the buffer?
// check that the clone doesn't share the same underlying arrays.
// now replacing the dataset should update the axis range...
// minorTickCount
// create a dataset...
// check that the renderer has a corresponding dataset (it doesn't // matter if the dataset is null)
// build first tab
/*Comparable k =*/
//row 2: background paint for the chart
// mercuryPaint
// period
// should get IllegalArgumentException for negative index
// create a legend, if requested...
// Segment fromSegment = getSegment(from); // fromSegment.inc(); // Segment toSegment = getSegment(to); // toSegment.dec();
// Dispose of any fonts we have created
// CASE 1 : Comparing to another TimeSeriesDataPair object // -------------------------------------------------------
//empty cell // row 2
// The following angle calc will ensure there isn't a top // vertical axis - this may be useful if you don't want any // given criteria to 'appear' move important than the // others.. //  + (getDirection().getFactor() //        * (cat + 0.5) * 360 / catCount);
// Create the color-change dialog
// draw the item labels if there are any...
// build second tab
// you can add a null list - it would have been better if this // required EMPTY_LIST
// row 4
// check if previously colinear
// set the plot properties...
// draw the standard deviation lines *before* the shapes (if they're // visible) - it looks better if the shape fill colour is different to // the line colour
//label.setFont(font);
// we create an event with a special flag set...the purpose of // this is to communicate to the plot (the default receiver of // the event) that series visibility has changed so the axis // ranges might need updating...
// don't need to do anything
// no need to instantiate this    
// row 1
// roseHighlightPaint
// return the appropriate axis editor
/* TimeSeriesDataItem item = */
// Create the new font and set it into the title // label
/* shape visible = */
// check a regular value
// test collection 3, which doesn't define all tasks in all series
/* XYSeries s = */
// row 3
// when the dataset contains one or more series, but those series  // contain no items, we expect the value range to be null
// Use a colored text field to show the color
//not first tick to be displayed //no tick label
// Create the font-change dialog
// in the following code, barL0 is (in Java2D coordinates) the LEFT // end of the bar for a horizontal bar chart, and the TOP end of the // bar for a vertical bar chart.  Whether this is the BASE of the bar // or not depends also on (a) whether the data value is 'negative' // relative to the base value and (b) whether or not the range axis is // inverted.  This only matters if/when we apply the minimumBarLength // attribute, because we should extend the non-base end of the bar
// Get the item count for the series, so that we can know which is the // end of the series.
//deal with range axis
/* shape filled = */
// set the range axis to display integers only...
// convert the font size (in pt for awt) to height in pixels for swt
// pass the click on to the plot... // rely on the plot to post a plot change event and redraw the chart...
// use item paint for outlines by // default, not outline paint
// handle the special case where the dataset has y-intervals that // we want to measure
/*CategoryPlot plot =*/
//deal with domain axis
// we're doing this for testing only, and make sure that we // only add data in ascending order by x-value
// verify max value
// change a series outline stroke
// verify min value
// check an inherited attribute
//gridBandPaint
// starts at the back, wraps around front, and // finishes at back again
//deal with plot appearance
// test a customised instance
// row 4: orientation
// rangeAxisLocation...
// row 2
// here we change the AffineTransform so we can draw the annotation // to a larger area and scale it down into the display area // afterwards, the original transform is restored
// row 3: background paint
// time zone
// row 1: stroke
// clip top and bottom bounds to data area
// check dataset with one time period
// BAR X
// we can't do anything
// sectionOutlinePaint
// we use ValueMarker for the tests, because we need a concrete // subclass...
// borderVisible
// to be consistent with other Graphics2D implementations
// validate base timeline exclusions added as timeline's esceptions
// domainAxisLocation - no longer a separate field but test anyway...
// row keys...
//private TickUnits standardTickUnits;
// backgroundImage
// try unknown column key
// minorTickLength
// when the dataset contains one or more series, but those series // contain no items, we still expect the range to be null
// labelFont
// TBLRC // 01010 - bottom and right only
// build the third tab
// do we need to resize the buffer?
// column keys...
// even though the axis is not visible, we need ticks for the // gridlines...
// ok and cancel buttons
// does nothing - override if necessary
// don't zoom unless the mouse pointer is in the plot's data area
// if there is a tool tip, we expect it to generate the title and // alt values, so we only add an empty alt if there is no tooltip
// borderStroke
// ensure we have a maximum value to use on the axes
// we dispose resources we own but user must dispose gc
// remove plot2, but plot1 is removed instead
// set the line style to solid by default
// we are starting a new series path
// apply dash style if any
// it is too slow to look at every data item, so let's just look at // the first, middle and last items...
//showing "1e#"-style ticks or negative exponent // generating tick value between 0 & 1; show fewer
//axisLabelPaint;
// properties // save // print // zoom // tooltips
// retrieve the swt font description in an os indept way
// collect entity and tool tip information...
// create a new awt font with the appropiate data
// and independent...
// for now we simply want to extract the chars from the iterator // and call an unstyled text renderer
// first get the range without the interval, then expand it for the // interval width
// see comment above //this.colorsPool.put(Integer.valueOf(awtColor.getRGB()), swtColor);
// renderingHints
// Next, setup the plot area
//this.myColor = new Color(getDisplay(), color.getRGB());
// seems to be the same...
// SWT and AWT share the same style constants.
// set the axis properties
// FIXME: add setBaseStroke(Stroke, boolean) ?
// create the dataset...
// null will be returned
// subtitles
// erase the previous zoom rectangle (if any).  We only need to do // this is we are using XOR mode, which we do when we're not using // the buffer (if there is a buffer, then at the end of this method we // just trigger a repaint)
// borderPaint
// draw the markers that are associated with a specific dataset...
// title
// start with a unit that is at least 1/10th of the axis length
// backgroundPaint
// adjust the plot area for interior spacing and labels...
// plot
// create the chart...
// add an item entity, if this information is being collected
// try a Double.POSITIVE_INFINITY
// Reference: http://www.antigrain.com/research/bezier_interpolation/
// pdfDocument class will be null so the function will return false
// as a special case, if the bar colour has alpha == 0, we draw // nothing.
//private double angle;
// avoid to draw overlapping tick labels
// check independence
// a null key should throw an IllegalArgumentException
// adding something to the returned list should NOT change the chart
//axis.setRangeType(RangeType.POSITIVE); //axis.setLowerBound(-5.0); //assertEquals(0.0, axis.getLowerBound(), EPSILON);
// perform the zoom on each range axis
// include legend
// draw the domain grid lines, if any...
// chart title
// check for bounds interval that includes 1
// outlinePaint
// deregister the collection as a change listener to each series in the // collection
//private Paint arrowPaint;
// value 1
// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
// align this rectangle to the frameAnchor
// data // include legend // tooltips // urls
// standard test
// setup for collecting optional entity info...
//private NumberTickUnit tickUnit;
// do nothing if item is not visible
//drawingSupplier;
// get the previous point and the next point so we can calculate a // "hot spot" for the area (used by the chart entity)...
// use reflection to get the SVG string
//legendItemPaint;
// we suppress shadow generation, because SVG is a vector format and // the shadow effect is applied via bitmap effects...
// clear any exceptions in this timeline
// create array xIndex to hold // new column indices
// domainAxis...
// && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
//wallPaint;
// selected rectangle shouldn't extend outside the data area...
// if the axes use a linear scale, you can uncomment the code below and // switch to the alternative transX/transY calculation inside the loop // that follows - it is a little bit faster then. // // int xx = (int) dataArea.getMinX(); // int ww = (int) dataArea.getWidth(); // int yy = (int) dataArea.getMaxY(); // int hh = (int) dataArea.getHeight(); // double domainMin = this.domainAxis.getLowerBound(); // double domainLength = this.domainAxis.getUpperBound() - domainMin; // double rangeMin = this.rangeAxis.getLowerBound(); // double rangeLength = this.rangeAxis.getUpperBound() - rangeMin;
// close
// reserve some space for the domain axis...
// seriesKey
// check that the listener lists are independent
//shadowPaint;
// reset the min and max
//private Stroke arrowStroke;
// return the override, if there is one...
//shadowVisible;
// bar is not visible
// actual value set below
//tickLabelPaint;
//parameter value is > 0 // The Math.log() function is based on e not 10.
//thermometerPaint;
// appendData() writes new data at the index position given by newestAt/ // When adding new data dynamically, use advanceTime(), followed by this:
// now try to reject equality...
//barPainter;
// if the axis is not visible, don't draw it...
//xyBarPainter;
// shadowXOffset
//errorIndicatorPaint;
// draw the plot (axes and data visualisation)
//if small log values and lower bound value too small // then set to a small value (don't allow <= 0):
// find optimum height
//private double tipRadius;
// add a second dataset, plotted against a second x axis
// Note that for consistency with the AWT implementation, it is // necessary to switch temporarily the foreground and background // colours
// work out if scaling is required...
//private double arrowLength;
// don't draw this tick label
//private double baseRadius;
// redraw the zoom rectangle (if present) - if useBuffer is false, // we use XOR so we can XOR the rectangle away again without redrawing // the chart
//private boolean autoRangeIncludesZero;
// set the outline paint to fully transparent, then the legend shape // will just have the same colour as the lines drawn by the renderer
// first field contains the row key
// weight
// TBLRC // 01001 - bottom and center only
// now map the dataset to the second xAxis
//g2.clip(clipArea);
// five dates to check...
/////////////////////////////////////////////////////////////////////////// // From IntervalXYDataset ///////////////////////////////////////////////////////////////////////////
//private double labelOffset;
//handle panning if we have a start point else unregister
/* BufferedImage image = */
// @mgs: using the method's return value was missing
// TBLRC // 10100 - top and left only
//get upper bound value
// value
// Unregister the collection as a change listener to each series in // the collection.
// stroke
// create the renderer...
// replace an existing series
// category
// add an entity for the item, but only if it falls within the // data area...
// categoryAnchor
// START: check d0 and d1
// tickMarkPosition
// test a default instance
// check that setting the min date to something on or after the // current min date works...
// offset the start of the boxes if the total width used is smaller // than the category width
// tickUnit
// draw the category labels and axis label
// timeline
//negative values are allowed //parameter value is > 10 // The Math.log() function is based on e not 10.
// range
// suppresses compiler warning
// CASE 1 : Comparing to another ComparableObjectItem object // ---------------------------------------------------------
// the following fields are inherited from the AbstractXYItemRenderer
// if the bug is still present, this leads to an endless loop
// TBLRC // 11000 - top and bottom only
// END: check d3 and d4
// MIDDLE: check d1, d2 and d3
// if this series belongs to a dataset, the dataset might veto the // change if it results in two series within the dataset having the // same key
/*JFreeChart chart =*/
// '+', remember value is negative
// an empty dataset should return a null range
// changing the item that was added should not change the series
// baseStroke
//end point is either lower left corner --> vertical gradient //or end point is upper right corner --> horizontal gradient
// argument checking delegated...
// try an empty dataset - should return a null range
// shapeLocation
// the row may not have an entry for this key, in which case the // return value is null
// test independence
// here we need to update the UI for the popup menu, if the panel // has one...
//private double arrowWidth;
// both axes
// END: check d0
// reserve space for the range axes (if any)...
// START: check d0
// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
// fetch listeners from local storage
// case 1 - object is mutable but not PublicCloneable
// work out the space required by the domain axis...
// MIDDLE: check d0
// check retrieve value by key
// get desired width and height from somewhere then...
// no plot, no data
// Shifting with a delta of 0 does not change the range
// set axis bounds to be both greater than 1
/// Get the column names and cache them.
// check that changing a tick label font in a1 doesn't change a2
// check that changing a tick label paint in a1 doesn't change a2
// null dataset throws IllegalArgumentException
// check that changing a category label tooltip in a1 doesn't change a2
// if the popup menu has already been triggered, then ignore dragging...
// lowerMargin
// check for both bounds smaller than 1
// the line is visible - if it wasn't, we'd have // returned false from within the while loop above
// the CategoryDataset interface expects a list of series, but // we've stored them in an array...
// categoryMargin
// upperMargin
// Check if the item is the last item for the series. // and number of items > 0.  We can't draw an area for a single point.
// set start and end date
// TBLRC // 00101 - left and center items
// create the canvas and add the required listeners
// fillPaintList
////////////////////////////////////////////////////////////////////////// // test one-segment and adjacent segments //////////////////////////////////////////////////////////////////////////
// get the origin of the zoom selection in the Java2D space used for // drawing the chart (that is, before any scaling to fit the panel)
// if fixed auto range, then derive lower bound...
// set the new dataset, and register the chart as a change listener...
// advance line Stroke
// only draw if we have good values
// offset
// Check if the item is the last item for the series or if it // is a NULL value and number of items > 0.  We can't draw an area for // a single point.
// try a null key - should throw an exception
// compute common denominator
//private double fixedAutoRange;
// paint
// CASE 2 : Comparing to a general object // ---------------------------------------------
// tickLabelPaint
// register as a listener with sub-components...
// categoryLabelURLs
// draw domain crosshair if required...
// now draw annotations and render data items...
// tickLabelPaint2
// 4-ms test base timeline for ms2Timeline using 1 included and 1 // excluded segments // // timeline start time = 0 //   | //   v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |  |  |  |  |EE|EE|EE|EE|  |  |  |  |EE|EE|EE|EE|  |  |  |  |    <-- ms2BaseTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //  \__________  _________/            \____  _____/ //             \/                           \/ //        segment group              segment size = 4 ms //
//private Shape leftArrow;
// verify attributes set during object construction
// after s1 is removed from the collection, we should be able to set // the key to anything we want...
// cycle bound mapping
// many of the zoom methods need a screen location - all we have is // the zoomPoint, but it might be null.  Here we grab the x and y // coordinates, or use defaults...
// ----------------------- // --- Private Methods --- // -----------------------
// make sure bins[bins.length]'s upper boundary ends at maximum // to avoid the rounding issue. the bins[0] lower boundary is // guaranteed start from min
// generic map for each series
// reduce the default margins
// advance line Visible
// for MacOSX we can't use the CTRL key for mouse drags, see: // http://developer.apple.com/qa/qa2004/qa1362.html
/* PUT exclusions in test */
// try a dataset with some content...
// Set start time
//lower bound and margin OK; get log10 of lower bound
// Create a segmented time line (segment size : 15 minutes)
// redrawing the chart every time...
/** These constants control test cycles in the validateXXXX methods. */
// make the chart area a square
/*Quarter q =*/
// make the background of the buffer clear and transparent
// add minor ticks (for gridlines)
// a Double.NaN should be ignored
// calculate 9am on the first Monday after 2001-01-01
// default instances
// low
// calculate the max label width from the plot dimensions, because // a circular pie can leave a lot more room for labels...
// the anchor point is typically the point where the mouse last // clicked - the crosshairs will be driven off this point...
// if there is an explicit mapping to the default group, it is counted
// test 9am-4pm Monday through Friday timeline
// the segment is entirely at the // front of the chart
// RANGE / NONE
// test some included and excluded segments
//// STROKE ///////////////////////////////////////////////////////////////
// TBLRC // 01000 - bottom item only
// zap the buffer onto the panel...
// logically consecutive segments non-physically consecutive // (with non-contained time in between)
// POSITIVE ITEM LABEL POSITION
// verify segments are consecutive and correct
// get the data point...
// test inc() method
// we create a new but empty chartMouseListeners list
// visible flag...
//dmo: (end dmo additions)
// try next segment
// itemLabelsVisible
// exclude current exception and last one
////////////////////////////////////////////////////////////////////////// // test inc methods //////////////////////////////////////////////////////////////////////////
// check that the series visible flag is observed
// go to another segment to continue test
// no data in the parent plot
// make the link area a square if the pie chart is to be circular... // is circular?
// test inc(n) method
// fixed domain axis space...
// select a tick unit that is the next one bigger than the current // (log) range divided by 50
// font
// tick label insets...
// the link area defines the dog leg points for the linking lines to // the labels
// verify list of exceptions
// lowerBound
// tick labels visible flag...
// fill in the exceptions
// rangeAxisLocation - no longer a separate field but test anyway...
// should be an excluded segment
// add an entity for the item, but only if it falls within the data // area...
// should be an included segment
// include current exception and last one
// tick mark paint...
// we need to guard against this.zoomPoint being null
//long v = stl.toTimelineValue(946684800020L);
// strokeList
// tickLabelOffset
// if multiple axes are mapped, the first in the list should be // returned...
// only add an exception if it is currently an included segment
// consider time periods to be ordered after general objects
// add our exceptions and store locally in ArrayList of Longs
// private Plot parent <-- don't clone the parent plot, but take care // childs in combined plots instead
// some checks that the clone is independent of the original
// make array of exceptions
// if the dataset is not a StatisticalCategoryDataset then just revert // to the superclass (LineAndShapeRenderer) behaviour...
// start time...
// try replacing an existing value
// add the base timeline exclusions as timeline's esceptions
// adjust the plot area by the interior spacing value
// 1-Jan-2000
//  Remove series 2 and add new series
// subLabelPaint
// ****************************************************************** //  More than 150 demo applications are included with the JFreeChart //  Developer Guide...for more information, see: // //  >   http://www.object-refinery.com/jfreechart/guide.html // // ******************************************************************
// by default, the renderer with index 0 is used
// ensure the autorange is at least <minRange> in size...
////////////////////////////////////////////////////////////////////////// // test serialization //////////////////////////////////////////////////////////////////////////
// set up info collection...
// subLabelFont
// this replaces the entry with the current minimum value, but the new // minimum value is now in a different item
// verify all timeline segments included in the // baseTimeline.segment are now exceptions
// ********* stat function for linear slope ******** // y = a + bx // a = ybar - b * xbar //     sum(x * y) - (sum (x) * sum(y)) / n // b = ------------------------------------ //     sum (x^2) - (sum(x)^2 / n // *************************************************
// subcategories
////////////////////////////////////////////////////////////////////////// // utility methods //////////////////////////////////////////////////////////////////////////
// physically consecutive
// hasn't implemented DomainInfo, so iterate...
// if there is no separator, we assume the first four characters // are YYYY
// label font...
// adjust the drawing area for the plot insets (if any)...
// label...
// pre-fetch the colors for each key...this is because the subplots // may not display every key, but we need the coloring to be // consistent...
// label paint...
// holds the moving average sum
// attributed label...
// now add some more data
// label insets...
// if the box has been drawn backwards, restore the auto bounds
// high
"/*                 * Lots can go wrong while fiddling with Images, Color Models                 * & such!  If anything at all goes awry, just return the original                 * TexturePaint.  (TexturePaint's are immutable anyway, so no harm                 * done)                 */"
// axis line stroke...
// Add each point to Area (x, y)
// label angle...
// if the axis is not visible, no additional space is required...
// axis line visible...
// NONE / FIXED
// TBLRC // 10001 - top and center only
// axis line visible flag...
"/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ----------------- * ChartFactory.java * ----------------- * (C) Copyright 2001-2014, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Serge V. Grachov; *                   Joao Guilherme Del Valle; *                   Bill Kelemen; *                   Jon Iles; *                   Jelai Wang; *                   Richard Atkinson; *                   David Browning (for Australian Institute of Marine *                       Science); *                   Benoit Xhenseval; * * Changes * ------- * 19-Oct-2001 : Version 1, most methods transferred from JFreeChart.java (DG); * 22-Oct-2001 : Added methods to create stacked bar charts (DG); *               Renamed DataSource.java --> Dataset.java etc. (DG); * 31-Oct-2001 : Added 3D-effect vertical bar and stacked-bar charts, *               contributed by Serge V. Grachov (DG); * 07-Nov-2001 : Added a flag to control whether or not a legend is added to *               the chart (DG); * 17-Nov-2001 : For pie chart, changed dataset from CategoryDataset to *               PieDataset (DG); * 30-Nov-2001 : Removed try/catch handlers from chart creation, as the *               exception are now RuntimeExceptions, as suggested by Joao *               Guilherme Del Valle (DG); * 06-Dec-2001 : Added createCombinableXXXXXCharts methods (BK); * 12-Dec-2001 : Added createCandlestickChart() method (DG); * 13-Dec-2001 : Updated methods for charts with new renderers (DG); * 08-Jan-2002 : Added import for *               com.jrefinery.chart.combination.CombinedChart (DG); * 31-Jan-2002 : Changed the createCombinableVerticalXYBarChart() method to use *               renderer (DG); * 06-Feb-2002 : Added new method createWindPlot() (DG); * 23-Apr-2002 : Updates to the chart and plot constructor API (DG); * 21-May-2002 : Added new method createAreaChart() (JI); * 06-Jun-2002 : Added new method createGanttChart() (DG); * 11-Jun-2002 : Renamed createHorizontalStackedBarChart() *               --> createStackedHorizontalBarChart() for consistency (DG); * 06-Aug-2002 : Updated Javadoc comments (DG); * 21-Aug-2002 : Added createPieChart(CategoryDataset) method (DG); * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG); * 09-Oct-2002 : Added methods including tooltips and URL flags (DG); * 06-Nov-2002 : Moved renderers into a separate package (DG); * 18-Nov-2002 : Changed CategoryDataset to TableDataset (DG); * 21-Mar-2003 : Incorporated HorizontalCategoryAxis3D, see bug id 685501 (DG); * 13-May-2003 : Merged some horizontal and vertical methods (DG); * 24-May-2003 : Added support for timeline in createHighLowChart (BK); * 07-Jul-2003 : Added createHistogram() method contributed by Jelai Wang (DG); * 27-Jul-2003 : Added createStackedAreaXYChart() method (RA); * 05-Aug-2003 : added new method createBoxAndWhiskerChart (DB); * 08-Sep-2003 : Changed ValueAxis API (DG); * 07-Oct-2003 : Added stepped area XY chart contributed by Matthias Rose (DG); * 06-Nov-2003 : Added createWaterfallChart() method (DG); * 20-Nov-2003 : Set rendering order for 3D bar charts to fix overlapping *               problems (DG); * 25-Nov-2003 : Added createWaferMapChart() method (DG); * 23-Dec-2003 : Renamed createPie3DChart() --> createPieChart3D for *               consistency (DG); * 20-Jan-2004 : Added createPolarChart() method (DG); * 28-Jan-2004 : Fixed bug (882890) with axis range in *               createStackedXYAreaChart() method (DG); * 25-Feb-2004 : Renamed XYToolTipGenerator --> XYItemLabelGenerator (DG); * 11-Mar-2004 : Updated for pie chart changes (DG); * 27-Apr-2004 : Added new createPieChart() method contributed by Benoit *               Xhenseval (see RFE 942195) (DG); * 11-May-2004 : Split StandardCategoryItemLabelGenerator *               --> StandardCategoryToolTipGenerator and *               StandardCategoryLabelGenerator (DG); * 06-Jan-2005 : Removed deprecated methods (DG); * 27-Jan-2005 : Added new constructor to LineAndShapeRenderer (DG); * 28-Feb-2005 : Added docs to createBubbleChart() method (DG); * 17-Mar-2005 : Added createRingPlot() method (DG); * 21-Apr-2005 : Replaced Insets with RectangleInsets (DG); * 29-Nov-2005 : Removed signal chart (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 26-Jan-2006 : Corrected API docs for createScatterPlot() (DG); * 23-Aug-2006 : Modified createStackedXYAreaChart() to use *               StackedXYAreaRenderer2, because StackedXYAreaRenderer doesn't *               handle negative values (DG); * 27-Sep-2006 : Update createPieChart() method for deprecated code (DG); * 29-Nov-2006 : Update createXYBarChart() to use a time based tool tip *               generator is a DateAxis is requested (DG); * 17-Jan-2007 : Added createBoxAndWhiskerChart() method from patch 1603937 *               submitted by Darren Jung (DG); * 10-Jul-2007 : Added new methods to create pie charts with locale for *               section label and tool tip formatting (DG); * 14-Aug-2008 : Added ChartTheme facility (DG); * 23-Oct-2008 : Check for legacy theme in setChartTheme() and reset default *               bar painters (DG); * 20-Dec-2008 : In createStackedAreaChart(), set category margin to 0.0 (DG); * 02-Jul-2013 : Use ParamChecks class (DG); *  */"
// label location...
// tick label paint...
// go through each zoom menu item and decide whether or not to // enable it...
// tick mark inside length...
// if the source point doesn't fall within a subplot, we do the // zoom on all subplots...
// fixed dimension...
// tick mark outside length...
// NONE / RANGE
//get absolute value of log10 value
//private Shape downArrow;
//upper bound and margin OK; get log10 of upper bound
//private Shape rightArrow;
// add a second renderer with the same index as dataset2, now it will // be used
//private Shape upArrow;
// NONE / NONE
// in the rendering process, there is special handling for item // zero, so we can't support processing of visible data items only
// verticalTickLabels
// update (x1, y1), (x2, y2) and f1 and f2 using intersections // then recheck
// axisLineStroke
// yearFormatter
// check arguments...
// locale
// if series are in columns, then the categories are the row keys
// showYear[]
// when the dataset contains no series, we expect the range to be null
// chars
// now repeat for a vertical axis
// FIXED / RANGE
// draw the annotations (if any)...
//end point is lower right corner --> diagonal gradient
// The next 3 functions implement the RangeInfo interface. // Using saved limits (updated by each updateTime() call) significantly // improves performance.  WARNING: this code makes the simplifying // assumption that data is never negative.  Expand as needed for the // general case.
// FIXED / NONE
// RANGE / FIXED
////////////////////////////////////////////////////////////////////////// // main include and excluded segments //////////////////////////////////////////////////////////////////////////
// TBLRC // 00100 - left item only
// this is the last period, but it is only partially visible // so check that the label will fit before displaying it...
// TBLRC // 00010 - right item only
// check that there is some data to display...
// FIXED / FIXED
// CASE 1 : Comparing to another TimeSeriesDataItem object // -------------------------------------------------------
// TBLRC // 10111
//only 1 power of 10 value, it's > 0 and its resulting // tick value will be larger than lower bound of data //decrement to generate more ticks
// draw the block without collecting entities
// try case where right item is shorter than center item
// initialize ChartPanel-specific tool tip delays with // values the from ToolTipManager.sharedInstance()
// should be 2 items
// if the incoming state is null, no information will be passed // back to the caller - but we create a temporary state to record // the plot area, since that is used later by the axes
// TBLRC // 00011 - right and center items
// check if this addition will exceed the maximum item count...
// try case where left item is shorter than center item
// here we check that the average marker will in fact be // visible before drawing it...
// TBLRC // 10110 - top, left and right
// check a series with one item
// if we've been panning, we need to reset now that the mouse is  // released...
// TBLRC // 00110 - left and right items
// add an entity for the item...
// otherwise look up the generator table
// TBLRC // 00111 - left, right and center items
// try an array containing a single Number and a null
// CASE 1 : Comparing to another Minute object // -------------------------------------------
// TBLRC // 11100
// TBLRC // 11001
// add a value that isn't in the xRange
// TBLRC // 11111 - all
// a Collection containing a NaN will return Double.NaN for the result
// TBLRC // 11110
// special case - if the underlying rectangle uses ints we // need to create one that uses doubles
// create dataset 1...
// set up popup menu...
// no need to create entity if we can't save it anyways...
// erase the zoom rectangle
// secondary DatasetDomainAxisMap...
// test a series with 1 item
// if the initial averaging period is to be excluded, then // calculate the lowest x-value to have an average calculated...
// TBLRC // 11010 - top, bottom and right
// TBLRC // 01100
// initialize the members of "seriesNames" array so they won't be null:
// remove a value
// wrong outcome
// TBLRC // 01011 - bottom, right and center
// change rendering order to ensure that bar overlapping is the // right way around
// check that removing by index also works
// no additional methods required
// now we should be allowed to change s1's key to anything but "S2"
// standard case - plain XYDataset
// either autoWidth is off or autoIntervalWidth was not set.
//dmo: added this panel for colorbar control. (start dmo additions)
// TBLRC // 10011 - top, right and center
// TBLRC // 01110 - bottom. left and right
// TBLRC // 01101 - bottom, left and center
// TBLRC // 10000 - top item only
// check that the new bin doesn't overlap with any existing bin
// TBLRC // 10010 - right and top only
// TBLRC // 11011
// defer null argument check
// some setup...
// do nothing if item is not visible or null
// Y format
// handle three cases by dataset type
// tooltip format
"/* // ""Extras"" found useful when analyzing/verifying class behavior:    public Number getUntranslatedXValue(int series, int item)    {      return super.getXValue(series, item);    }    public float getUntranslatedY(int series, int item)    {      return super.getY(series, item);    }  */"
// date format
//  If data can be < 0, the next 2 methods should be modified
// create subplot 1...
//  Create new dataset with keys above threshold percentThreshold
// try a null value
// now extrapolate based on label height and unit height...
// another test...
// end period is not in original series // this is first item AFTER end period // so this is last item BEFORE end
// the reverse transformed value will be in the start of the // next non-excluded and non-exception segment
// x number format
// format string...
// Add last point @ y=0 for fillPath and close path
// x date format
// y number format
// orientation...
/////////////////////////////////////////////////////////////////////////// // From SeriesDataset ///////////////////////////////////////////////////////////////////////////
// create subplot 2...
//yAdj = -descent - leading + (float) bounds.getHeight();
// add the subplots...
// the actual panning occurs later in the mouseDragged()  // method
// separatorPaint
//apply upper margin by increasing upper bound:
// now get the data and plot it (the visual representation will depend // on the m_Renderer that has been set)...
// for item labels, we have a special case because there is the // possibility to draw (a) the regular item label near to just the // upper y-value, or (b) the regular item label near the upper y-value // PLUS an additional item label near the lower y-value.
// axisOffset...
// Absolute value, since the relative x // positions are reversed for horizontal orientation
// TBLRC // 00000 - no items
// request with a negative index
// try negative row index
// domainAxes...
// work out the number of periods to skip for labelling
//////////////////////////////////////////////////////////////////////////// // private attributes ////////////////////////////////////////////////////////////////////////////
//turn off anti-aliasing when filling rectangles
// draw shared domain axis...
// TBLRC // 11101
// check handling when the dataset is a regular XYDataset, not an // XYZDataset...
// get the previous data point...
// rendering order...
// calculate the data area...
// domainAxisLocations...
// CASE 2 - object is mutable AND PublicCloneable
// try a default instance
// renderers...
// forces recalculation of the axis range
// closeTickPaint
// rangeAxes...
// fake a dataset change event to update axes...
// rangeAxisLocations...
// get a list of keys...
//first tick of group; create label text
// annotations
// handle panning if we have a start point
// draw the arrow...
// is there an alignment adjustment to be made?
// rangeGridlinePaint
// Generate the grid
// delegate argument checking to XYDataItem...
// rangeGridlineStroke
"/* From outlier array sort out which are outliers and put these into         * an arraylist. If there are any farouts, set the flag on the         * OutlierListCollection         */"
/* Rectangle2D hotspot = */
// rowRenderingOrder...
// a key that hasn't been mapped should return the default group
// background range markers...
// this should never happen with the existing code, but throw // an exception in case future changes make it possible...
// rangeCrosshairValue
// default is to notify listeners when the // chart changes
//parameter value is < -10 //calculate log using positive value:
// starts at the front, finishes at the back (going // around the left side)
// labelGenerator
"/*         * we assum super is always initialized to all-zero matrix, so the         * total sum should be 0 upon initialization. However, we set it to         * Double.MIN_VALUE to get the same effect and yet avoid division by 0         * upon initialization.         */"
// starts at back, finishes at front (CLOCKWISE)
// background domain markers
// override default
// foreground range markers...
// special case where the lowest x-value is >= xLow
// foreground domain markers
// make sure there are no exceptions
//return toTimelineValue(dateDomainValue.getTime());
//calculate power using positive value; then negate
// create a new space object if one wasn't supplied...
// check for independence
// define the default locations for up to 8 axes...
//// SERIES OUTLINE PAINT ////////////////////////////
// fixed range axis space...
// send a dataset change event to self...
// shadowGenerator
// axis line paint...
// try a dataset with a single value
//parameter value is <= 0 //use as-is
// we didn't get an exception so all is good
// the x value is not within the axis range
// correct outcome
// should be equal...
// dial outline paint
// add a second dataset
// get the current data item...
// check second argument less than first argument
// labelPaint
// check index == getItemCount() throws exception
// we should be able to give a dataset an arbitrary index
// if the plot area is too small, just return...
// Set XOR mode to draw the zoom rectangle
// we should be able to give a renderer an arbitrary index
// outline paint
// domainGridlinePaint
// are we using the chart buffer?
// draw average - SPECIAL AIMS REQUIREMENT
// toolTipGenerator
// adjust the drawing area for plot insets (if any)...
// drawBorder
// can we pan this plot?
// tick label paint
// force a redraw // new entity code...
// update the linking line target for later // add an entity for the pie section
// XYDataset only provides methods for reading a dataset...
// tick label font
// remove the point i-periodCount out of the rolling sum.
// value paint
// check if there are any values earlier than specified by the history // count...
// value font
// set up some objects...
// needle paint
// set a theme using the new shadow generator feature available in // 1.0.14 - for backwards compatibility it is not enabled by default
//stroke
// Draw the new zoom rectangle...
// tick label format
// setTickValues was missing from ColorPalette v. 0.96 //colorPalette.setTickValues(this.axis.getTicks());
//alpha
// draw border
// since the items are ordered, we could be more clever here and avoid // iterating over all the data
//paint
// as a class variable, initializes == 0
// tick paint
// meter angle
// add the subtrahend's points to the polygon in reverse
//key
// stop listening for changes to the existing chart
/// we have rotation
//get positive exponent //create multiplier value //multiply, round up, and divide for bound value:
// change the generator and make sure it only affects p1
//outlineStroke
// secondary RangeAxes...
// draw the axis label (note that 'state' is passed in *and* // returned)...
// roseCenterPaint
// create the plot...
// rosePaint
// first determine the size of the chart rendering area...
// Reset to the default 'overwrite' mode
// interiorGap
// interiorGap...
// extent
// labelGap
// sectionPaint
// additional dataArea modifications //check whether modification is
// circular
// another empty series
// ignoreNullValues
// direction
// now get the data and plot it (the visual representation will depend // on the renderer that has been set)...
// sectionPaintMap
/////////////////////////////////////////////////////////////////////////// // New Methods ///////////////////////////////////////////////////////////////////////////
// when the dataset contains no series, we expect the value range to  // be null
// labelOutlineStroke
// separatorsVisible
// super.drawSecondaryPass(g2, plot, dataset, pass, series, item, // domainAxis, dataArea, rangeAxis, crosshairState, entities);
// labelOutlinePaint
// shadowPaint
// newestAt takes value previously held // by oldestAT
// shadowYOffset
// outlineVisible
//get log10 version of lower bound and round to integer:
// try a customised instance
// links visible
// verify various indices inside a segment are the same segment
// maximumLabelWidth
// explodePercentages
"/* (non-Javadoc)         * @see org.jfree.chart.axis.LogarithmicAxis#switchedLog10(double)         */"
// labelShadowPaint
// we suppress shadow generation, because PDF is a vector format and // the shadow effect is applied via bitmap effects...
// handle transparency and compositing.
// startAngle
// a list to store the series index and bar region, so we can draw // all the labels at the end...
// get the relevant source coordinate given the plot orientation
// store the current time zone
// axisLinePaint
// previous data point...
// check that the URL generator has been cloned
// The following alternative is only supported in JDK 1.4 - we support // JDK 1.3.1 onwards // setItemLabelsVisible(Boolean.valueOf(visible));
// urlGenerator
// linkMargin
// Process outliers. Each outlier is either added to the // appropriate outlier list or a new outlier list is made
// labelLinkStroke
// only needed if calculating percentages
// legendItemShape
// offset the start of the box if the box width is smaller than the // category width
// long result = calendar.getTimeInMillis(); // won't work with JDK 1.3
// the clone references the same dataset as the original
// plot is likely registered as a listener with the existing axis...
// check that zero items are ignored if requested
// get two consecutive segments for various tests
// outlineStroke
// submit the current data point as a crosshair candidate
// check that null items are ignored if requested
// we can't use the following valueOf() method, because it // won't compile with JDK1.4 // this.colorsPool.get(Integer.valueOf(awtColor.getRGB()));
// this should have been defined as a boolean primitive, because // allowing null values is a nuisance...but it is part of the final // API now, so we'll have to support it.
// change the shape and make sure it only affects p1
// we don't know anything about the ordering of the x-values, // but we can still skip any initial values that fall outside the // range...
// check that negative items are always ignored
// draw the item label if there is one...
// noDataMessagePaint
// FIXME: add setBaseToolTipGenerator(CategoryToolTipGenerator, boolean) ?
// noDataMessageFont
// noDataMessage
// de-register the composite as a listener for the chart.
// try a null collection
// foregroundAlpha
// draw the top axes
// drawingSupplier
// NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
// backgroundAlpha
// secondary renderers
// row 1: antialiasing
// dataExtractOrder
// maxValue
// title // x-axis label // y-axis label // data // create legend? // generate tooltips? // generate URLs?
// valueFont
// if a subtrahend is not specified, assume it is zero
// key not found
// if we get to here, we know that duplicate X values are not permitted
// polygon definitions
// since the flow layout is relatively straightforward, // no information needs to be recorded here
// draw the label
// copy a range before the start of the series data...
// add another value
// change a series paint
// add a second dataset, plotted against a second axis
// no event is generated if the dataset is already empty
// axisLabelGap
// Performs the actual drawing here ...
// secondary DomainAxisLocations...
// if there is an existing dataset, remove the plot from the list of // change listeners...
// webFilled
// check that super class fields are being looked at...
// change the legendItemShape
// axisIndices can be: // 1.  null; // 2.  non-empty, containing only Integer objects that are unique.
// thermometerPaint
// valueLocation
// now add a third value to the series...
// as far as I know, the Locale for the calendar only affects week // number calculations, and since DateTickUnit doesn't do week // arithmetic, the default locale (whatever it is) should be fine // here...
//first tick of group // did not do zero tick last // iteration
// domainAxisLocation...
// delegate 'info' and 'source' argument checks...
// loop over intervals between nodes
// valueFormat
// valuePaint
// dataset index
// axisLocation
// thermometerStroke
// this doesn't work
// check if starting new column
// secondary RangeAxisLocations...
// secondary DomainAxes...
// rangeAxis...
// renderer
// change a series outline paint
// for mouseReleased event, (horizontalZoom || verticalZoom) // will be true, so we can just test for either being false; // otherwise both are true
// parent plot...
// itemLabelFontList
//outlinePaint
// try a collection with a single number plus a null
// restore original tooltip dealys
// z number format
// data
// do we need to redraw the buffer?
// locale should not matter here
// since this is only used by clearRect(), we don't update the GC yet
// when the x-values are sorted in descending order, the lower // bound is found by calculating relative to the xHigh value
// fixed legend items
// relay the event from the canvas to our registered listeners
// use item paint for fills by default
// BarRenderer
// textAnchor
// create storage for listeners...
// tickLabelFont
// last item in series, draw the lot... // set up the alpha-transparency...
//int midY = (int) (plotArea.getMinY() + (plotArea.getHeight() / 2));
//tick value not between 0 & 1 //show tick label if it's the first or last in // the set, or if it's 1-5; beyond that show // fewer as the values get larger:
// TBLRC // 10101 - top, left and center
// We organise the data with the following assumption: // 1) the data are sorted by x then y // 2) that the data will be represented by a rectangle formed by //    using x[i+1], x, y[j+1], and y. // 3) we march along the y-axis at the same value of x until a new //    value x is found at which point we will flag the index //    where x[i+1]<>x[i]
// 2. check whether the column is now empty.
// adjust for insets...
// can't allow duplicate values, so we need to check whether // there is an item with the given x-value already
// no renderer 1
//private NumberFormat numberFormatOverride;
// OUTLINE STROKE
// quadrant paint
// create the polygon // add the minuend's points to polygon
// return the generator for ALL series, if there is one...
// paint sequence
/////////////////////////////////////////////////////////////////////////// // From XYDataset ///////////////////////////////////////////////////////////////////////////
// draw the tick marks and labels...
// now test that the clone is independent of the original
// shape sequence
// outline stroke sequence
// for a series with no data, we expect {-1, -1}...
// outline paint sequence
// 'baseItemLabelPaint' : immutable, no need to clone reference
// now overwrite this item with another
// create dataset 2...
// setup our test timelines // // Legend for comments below: // <spaces> = Segments included in the final timeline // EE       = Excluded segments via timeline rules // xx       = Exception segments inherited from base timeline exclusions
// gradient paint transformer
// paint index
/* ComparableObjectItem item1 = */
// in this case, every color has a range of values
// with no buffer, we use XOR to draw the rectangle "over" the // chart...
// only relevant when this is a subplot
// create an array of items in reverse order
// upperBound
// compute common deltas
// tickRadius
// clear the flag
// nothing is drawn if the row index is not included in the list with // the indices of the visible rows...
// radius
// try a few checks to ensure that the clone is independent of the // original
// check the case where there is a secondary dataset that doesn't // have a renderer (i.e. falls back to renderer 0)
// verify that the plot is listening to the cloned renderer
// check key order
// shape index
// draw median
// now try to reject equality
// check negative index throws exception
// outline stroke index
// we don't know anything about the ordering of the x-values, // so we iterate until we find the first crossing of x (if any) // we know there are at least 2 items in the series at this point
// now remove a3, but since a3.equals(a1), this will in fact remove // a1...
// add a value to the second series
// actually removes a1
// check that the generator has been cloned
// check for unknown column
//// SECTION OUTLINE PAINT ////////////////////////////////////////////////
// if there are only null items, we get a NaNRange
// copy the middle three items...
// visible
// shape
// check that empty dataset is handled OK
// continue and separate the labels only if necessary
// set up the category names...
// dateFormatOverride
//negative values not allowed //parameter value is > 0 // The Math.log() function is based on e not 10.
// a column of all null values is still counted...
// outer radius
// first arrange without constraints, then see if the width fits // within the required range...if not, call arrangeFN() at max width
// now when the default group is mapped to, it shouldn't increase the // group count...
// foregroundPaint
// The split may occur in either x splitted segments, if any, but // not in both
// inner radius
//////////////////////////////////////////////////////////////////////////// // constructors and factory methods ////////////////////////////////////////////////////////////////////////////
// foreground paint
// tick mark stroke...
// confirm overwriting an existing value
// frameAnchor
// angle
// 'negativeItemLabelAnchor' : immutable, no need to clone reference
// clear a mapping
// test a custom instance
// templateValue
// outline stroke
// fill paint
// check retrieve value by index
// valueAnchor
// not a HighLowDataset, so just draw a line connecting this point // with the previous point...
// dial cap
// now make a change to the renderer and see if it triggers a plot // change event...
// not first or last tick on graph and value // is 1.0 //change value to 0.0 //indicate zero tick //create label for tick
//get the coordinates of the original GradientPaint
// frame
// negative paint
// view
// if negative then set flag and make positive
// layer
// populate deprecated fields
// check that a null dataset returns null bounds
// standard ResourceBundle behaviour
// apply the margins - these should apply to the exponent range
//    /** Insets text field. */ //    private InsetsTextField tickLabelInsetsTextField; // //    /** Label insets text field. */ //    private InsetsTextField labelInsetsTextField;
// check a series with four items
// outlineStrokeList
// majorTickLength
//cursor = midX - COLUMN_RADIUS - AXIS_GAP;
// sometimes the last few days of the year are considered to fall in // the *first* week of the following year.  Refer to the Javadocs for // GregorianCalendar.
// majorTickStroke
// 'baseOutlinePaint' : immutable, no need to clone reference
// try a null dataset - should return a null range
// majorTickIncrement
// Add the last point (x,0)
// majorTickPaint
// the noCodeBaseClassLoader is configured by a call to the // removeCodeBase() method, typically in the init() method of an // applet...
// label
// outline paint index
// seriesVisible
// baseSeriesVisible
// second pass adds shapes where the items are ..
// have to use a concrete subclass...
//parameter value is > 10 // The Math.log() function is based on e not 10.
// cycle through all the segments contained in the BaseTimeline // exception segment
// can't find any differences
// test default instance
// -------------------- // --- Constructors --- // --------------------
// seriesVisibleList
// adjust for padding...
// outlinePaintList
// get the axis label size and update the space object...
// check that setting the max date to something on or before the // current min date works...
// work out the anchor point
// baseFillPaint
// just the lines, no filling
// baseShape
// check a series with two items
//small log values in use; create numeric value for tick
// createEntitiesList;
// If the segment must be splitted, insert a new point // Strict test forces to have real segments (not 2 equal points) // and avoids division by 0
// complicate things a little...
// customise the title position and font
// shapeList
// baseOutlineStroke
// add the new chart
// seem to be the same...
// draw the plot background and axes...
// slope
// no renderer, no gridlines...
// itemLabelPaint
// while the tick labels overlap and there are more tick sizes available, // choose the next bigger label
// ...but this does!
// this is not one of our included segment, skip it
// baseItemLabelFont
// work out the value, label and position
// itemLabelFont
// draw the lower shadow...
// itemLabelPaintList
// calculate the bar width - this calculation differs from the // BarRenderer calculation because the bars are layered on top of one // another, so there is effectively only one bar per category for // the purpose of the bar width calculation
// sanity check for data area...
// createEntities;
/* y-axis label */
// baseItemLabelPaint
// if no initial zoom point was set, ignore dragging...
// SHAPE
// baseOutlinePaint
// insets
// now check autoPopulate==true
// baseLegendShape
// ITEM_LABELS_VISIBLE
// legendShape
// legendTextFont
// OUTLINE PAINT
// baseLegendTextFont
// ITEM_LABEL_FONT
// failed
// NEGATIVE ITEM LABEL ANCHOR
// check a series with no items
// now remove series 2 from collection 2
// first test for equality (contains or contained)
// add series to collection 1, should be not equal
// it is unlikely that 'state' will be null, but check anyway...
// check a series with repeating items
// check a series with three items
// check dataset with two time periods
//private Paint negativeBarPaint;
// we're doing this for testing only, and make sure that we // only add data in descending order by x-value
// try with gradient paint
// drawYError
// positiveBarPaint;
// Compute number of labels
// lastBarPaint;
// firstBarPaint;
// the renderer should not be equal to a BarRenderer
// quick check for independence
// TOP
// set flag true if negative values not allowed and the // lower bound is between 0 and 10:
// what is our alignment?
// urlGeneratorList
// RIGHT
// drawBarOutline
// autoWidthFactor
// itemMargin
// try something from the base class
// base value
// minimumBarLength
// maximumBarWidth
// barPainter
// shadowsVisible
// try null argument
// setUseYInterval
// try empty dataset
// setDrawBarOutline()
// setBase()
// legendBar
// setMargin()
// check a list containing a non-Number object
// autoWidthMethod
// drawOpenTicks
// roundXCoordinates
// legendLine
// drawXError
// drawCloseTicks
// openTickPaint
// tickLength
// candleWidth
// drawVolume
// first arrange without constraints, and see if this fits within // the required ranges...
// downPaint
// upPaint
// check boxPaint null also
// find out where to place the label...
// linePaint
// fillPaint
// make sure that modifying the returned array doesn't change the // function
// stripOutlineVisible
"/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2013, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ------------------- * ChartUtilities.java * ------------------- * (C) Copyright 2001-2013, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Wolfgang Irler; *                   Richard Atkinson; *                   Xavier Poinsard; * * Changes * ------- * 11-Dec-2001 : Version 1.  The JPEG method comes from Wolfgang Irler's *               JFreeChartServletDemo class (DG); * 23-Jan-2002 : Changed saveChartAsXXX() methods to pass IOExceptions back to *               caller (DG); * 26-Jun-2002 : Added image map methods (DG); * 05-Aug-2002 : Added writeBufferedImage methods *               Modified writeImageMap method to support flexible image *               maps (RA); * 26-Aug-2002 : Added saveChartAsJPEG and writeChartAsJPEG methods with info *               objects (RA); * 05-Sep-2002 : Added writeImageMap() method to support OverLIB *               - http://www.bosrup.com/web/overlib (RA); * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG); * 17-Oct-2002 : Exposed JPEG quality setting and PNG compression level as *               parameters (DG); * 25-Oct-2002 : Fixed writeChartAsJPEG() empty method bug (DG); * 13-Mar-2003 : Updated writeImageMap method as suggested by Xavier Poinsard *               (see Feature Request 688079) (DG); * 12-Aug-2003 : Added support for custom image maps using *               ToolTipTagFragmentGenerator and URLTagFragmentGenerator (RA); * 02-Sep-2003 : Separated PNG encoding from writing chart to an *               OutputStream (RA); * 04-Dec-2003 : Chart draw() method modified to include anchor point (DG); * 20-Feb-2004 : Edited Javadocs and added argument checking (DG); * 05-Apr-2004 : Fixed problem with buffered image type (DG); * 01-Aug-2004 : Modified to use EncoderUtil for all image encoding (RA); * 02-Aug-2004 : Delegated image map related functionality to ImageMapUtil (RA); * 13-Jan-2005 : Renamed ImageMapUtil --> ImageMapUtilities, removed method *               writeImageMap(PrintWriter, String, ChartRenderingInfo) which *               exists in ImageMapUtilities (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 06-Feb-2006 : API doc update (DG); * 19-Mar-2007 : Use try-finally to close output stream in saveChartAsXXX() *               methods (DG); * 10-Jan-2008 : Fix bug 1868251 - don't create image with transparency when *               saving to JPEG format (DG); * 02-Jul-2013 : Use ParamChecks class (DG); * */"
// autoWidthGap
// BOTTOM
/* TimeSeries result = */
// locale shouldn't matter here
// stripWidth
// axisOffset
// test findDomainBounds as well
// check the bounds of a simple dataset
// axis
// blockHeight
// blockWidth
// paintScale
// shapeOutlineVisible
// stripOutlinePaint
// stripOutlineStroke
// Anwender hat abgebrochen.
// line
// simple case
// shapeAnchor
// is the clone independent
// lineStroke
// try deleting null
// if we modify the original list, it's best if the URL generator is // not affected
// the clone contains a reference to the original object
// start with the current tick unit...
// try null calendar
// all tick labels have the same width (equal to the height of // the font)...
// check null argument 1
// check that clone is independent of the original
// check sorted rows
// the clone contains a reference to a CLONE of the original object
// try null key
// confirm that the clone is independent of the original
// replace an existing value
// request width index == itemCount
// try row index too high
// check handling of null key
// check null argument
// check null list
// Scaling with a factor of 1 does not change the range
// try unknown key
// try key index == itemCount
// try negative key index
/*Range r2 =*/
// Lower > upper: mid point is used
// Expand by 0% does not change the range
// map a key to a new group
// check an empty dataset
// autoSort
// remove an item
// add a value
// calculate midnight of first monday after 1/1/1900 relative to // current locale
// try null keys
// now overwrite group "G2"...
// a new map always has 1 group (the default group)
// text
// the default group is always at index 0
// if the default group is not mapped to, it should still count towards // the group count...
// indices are assigned in the order that groups are originally mapped
// check invalid indices
// a non-existent group should return -1
// a null argument should throw an exception
// a small check for independence
/* Number n = */
// try an array containing a single Number
/* Comparable k = */
// try column index too high
// try negative column index
// try null column key
// try null row key
// try unknown row key
// try null
// try a null source
// basic check for independence
// it's OK to use an index equal to the size of the list
// this is expected
// defer argument checks...
// test null source
// check that two empty datasets are equal
/* Number n =*/
// another item
// increment an unknown row
// increment a null value
// a row of all null values is still counted...
// LEFT
// increment an unknown column
// rotation anchor
/* Number start = */
// define subtasks
// note that we don't define taskB1
/* int count = */
/* Number end = */
// what if we don't want the interval?
// simple check for independence
// try a single item
// a dataset with a single value
// an item in series 2
// null is ignored
// pass on the event to the auxiliary handlers
// check another regular value
// adding a second series
// advance line Paint
// overwrite the value
// check a NaN
// check a null value
// does nothing unless overridden
// an empty dataset should return a null max
// and that simple aggregation works
// got it!
// Double.NaN DOESN'T mess things up
// empty dataset returns null
// null range throws IllegalArgumentException
// null list throws IllegalArgumentException
// try a Double.NEGATIVE_INFINITY
// try some nulls
/* TimeSeries s = */
//no initial zoom rectangle exists but the handler is set //as life handler unregister
// add a second series
// an empty dataset should return null for bounds
// try a Double.NaN
//gets the outline stroke width of the plot
// Add exception in included segments
// try a dataset with two values
// try null list
// Saturday and Sundays are non business hours
// try a list containing a single value
// test empty series
// try an array containing a single Number and a NaN
// try single value
// try a null argument
// try a collection with a single number
// try an empty collection
// try a collection with several numbers
// try zero length array
// try a collection with a single number plus a NaN
// check list containing null
// we call refresh ticks just to get the maximum width or height
// check empty list
/*item = */
// copy a range that begins before and ends in the middle of the // series...
// try deleting a time period that doesn't exist...
// copy a range that includes only the first item in the series...
// copy the last item...
// capLength
// copy just the first item...
// copy the first two items...
// copy the last two items...
// rotation angle
// try an array containing no items
//did zero tick last iteration //clear flag //create tick label string: //show tick label if "1e#"-style and it's one // of the first two, if it's the first or last // in the set, or if it's 1-5; beyond that // show fewer as the values get larger:
// changing the overwritten record shouldn't affect the series
// store the plot and its weight
// check negative first argument
// can't get anything yet...just an exception
//first tick of series, or not too small a value and // one of first 3 ticks, or last tick to be displayed // set exact number of fractional digits to be shown // (no effect if showing "1e#"-style ticks):
/*TimeSeriesDataItem item =*/
// test series with one item
// test series with two items
//private int autoTickIndex; //protected double reservedForTickLabels; //protected double reservedForAxisLabel;
// tests with values
// try null array
//negatives allowed or upper bound not between 0 & 1 //if flag then change to log version of highest value to // make range begin at a 10^n value; else use nearest int
// this line triggers the defect
// test a series with two items
// test 1...
//negatives not allowed and lower range bound is zero //use data range bound instead
// null items are ignored
// test 3...
//if less than 1.0 then make it 1.0 //subtract out margin and get exponential value:
// domain description - null
// range description
// a null item should throw an IllegalArgumentException
// test 2...
// add a fourth time period
// check empty dataset
// range description - null
// restore the default time zone
// work out the maximum height or width of the non-shared axes...
// first day of week is Sunday
// now add a second value to the series...
// add a third time period
// now test with a single value in the series...
// try null zone
// first day of week is monday
// now remove series 2 from collection 1 to make them equal again
// newly created collections should be equal
// now add the same series to collection 2 to make them equal again...
// shapeVisible
// Make sure there's nothing left
// the moving average series has 7 items, the first three // days (11, 12, 13 August are skipped)
// look at lower and upper bounds...
// for efficiency, we just use the first, last and middle items to // compute a hashCode...
// now add another series
// and check the first series too...
// CASE 1 : Comparing to another Second object // -------------------------------------------
// we clone the chart because presumably there can be some delay // between putting this instance on the system clipboard and // actually having the getTransferData() method called...
//if flag then change to log version of lowest value // to make range begin at a 10^n value:
// add an empty series
// add a series
//float midX = (float) (minX + (plotArea.getWidth() * getRotateX())); //float midY = (float) (minY + (plotArea.getHeight() * getRotateY()));
// call parent method // setup flag based on bounds values
// check for series key out of bounds
// after setting up all the subplots, the shared range axis may need // reconfiguring
// check that adding a series will overwrite the old series
// xHigh
// first check that a valid renaming works
// next, check that setting a duplicate key fails
// got the required exception
//negatives not allowed and upper bound between 0 & 1 //round up to nearest significant digit for bound: //get negative exponent:
// try an index out of bounds
// still 2
// check null key
// hasn't implemented RangeInfo, so we'll have to iterate...
// xLow
// yHigh
// yLow
//  Test that there are 6 X points and some specific values
// the series name should not  // change because "C" is already the key for the other series in the // collection
//  Remove series 1
// after adding a point to a series, check that there are now 7 // items in each series
//  Test that there are still 7 X points
// WITH AUTOPRUNING
//  Test that there are now 4 X points
// establish the coordinates of the top left corner of the drawing area
// 1 value pruned.
// WITHOUT AUTOPRUNING
// still 2.
// here we do a check to see if the user is installing the "Legacy" // theme, and reset the bar painters in that case...
// if the current stroke is not a BasicStroke then it is handled as // a special case
// FIXME: add setBaseItemLabelGenerator(CategoryItemLabelGenerator, //            boolean) ?
// text anchor
// milliseconds somewhere in 2006
// starts at back and wraps right around to the // back again
//  double range = this.domainAxis.getRange().getLength(); //  double scaledRange = range * percent; //  domainAxis.setAnchoredRange(scaledRange);
// the pie sections are arranged ANTICLOCKWISE
// if this cell held a maximum and/or minimum value, we'll need to // update the cached bounds...
// handle a special case - if the bar colour has alpha == 0, it is // invisible so we shouldn't draw any shadow
// For the case were the first tick is greater // than minZ
// retrieve an item
// key
// if we are drawing a perfect circle, we need to readjust the top left // coordinates of the drawing area for the arcs to arrive at this // effect.
// draw the sections at the top of the pie (and set up tooltips)...
/////////////////////////////////////////////////////////////////////////// // From HighLowDataset ///////////////////////////////////////////////////////////////////////////
// deregister the collection as a change listener to each series in // the collection.
// average radius // outlier radius
// These are deliberately not bounded to minimums/maxCandleWidth to //  retain old behaviour.
// errorPaint
// positive paint
// the first initialization must precede creation of the ValueSet array: // establishes length of each array
// starts at the back and finishes at the front // (wrapping the left side)
// if the 'notify' flag has been switched to false, we don't notify // the listeners
// errorStroke
// FIXME: add setSeriesToolTipGenerator(int, CategoryToolTipGenerator, //            boolean) ?
/* shape outlined = */
// the intersect is at the next point for both the minuend // and subtrahend
// draw outliers // outlier radius
// coordinate pairs // current minuend point // next minuend point // current subtrahend point // next subtrahend point
// map
// Check if the item is the last item for the series and number of // items > 0.  We can't draw an area for a single point.
// the bounds should be calculated using just the items within // the current range of the x-axis...if there is one
//if less than 1.0 then make it 1.0 //add in margin and get exponential value:
// labelLinkPaint
// paintList
// calculate plotAreas of all sub-plots, maximum vertical/horizontal // axis width/height
// OPTIONAL CUSTOMISATION COMPLETED.
//// ITEM LABEL PAINT  /////////////////////////////////////////////////////
// itemLabelGenerator
// create the new color and set it to the // SwtPaintCanvas
// seriesOutlineStroke
//private boolean autoTickUnitSelection;
// is there an override?
////////////////////////////////////////////////////////////////////////// // test exception segments //////////////////////////////////////////////////////////////////////////
// quadrant origin
// now check that all datasets, renderers and axes are being listened // too...
// background paint
// work out the mid angle (0 - 90 and 270 - 360) = right, // otherwise left
// these methods should throw an IndexOutOfBoundsException since the // column is too high...
// range markers
// regular equality for the datasets doesn't check the fields, just // the data values...so let's check some more things...
// after clearing, reverts to // default group
// nothing defined - do we autoPopulate?
// the dataset should prevent the addition of a series with the // same name as an existing series in the dataset
// null argument check delegated...
// the explode area defines the max circle/ellipse for the exploded // pie sections.  it is defined by shrinking the linkArea by the // linkMargin factor.
// secondary range markers
// delegate...
// rotationAnchor
// no axis, no gridlines...
// include legend // tooltips // urls
// rotationAngle
// can't zoom domain axis
// get the source coordinate - this plot has always a VERTICAL // orientation
// toolTipText
// the above should cover all the options...
// have to use a subclass of // AbstractRenderer
// test monday though friday timeline
// find first Monday after 2001-01-01
// no domain axis to zoom
// stroke index
////////////////////////////////////////////////////////////////////////// // test construction process //////////////////////////////////////////////////////////////////////////
// TBLRC // 00001 - center item only
// SERIES VISIBLE IN LEGEND (not yet respected by all renderers)
// expandToFitSpace
// category 1
// PAINT
// STROKE
// basePaint
// category 2
// value 2
// FIXME: calculate xx0
// LEFT POLYGON
// y date format
// margin
// current data point...
// clip left and right bounds to data area
// z date format
// domain description
// calculate bar width...
// the indicator bounds is calculated from the templateValue (which // determines the minimum size), the maxTemplateValue (which, if // specified, provides a maximum size) and the actual value
// chart title // data // include legend
// get a reference to the plot for further customisation...
////////////////////////////////////////////////////////////////////////// // test timeline translations //////////////////////////////////////////////////////////////////////////
// shapesVisible
// handle zoom box
// ok, exception is expected
// do nothing, override if necessary
//private boolean autoRangeStickyZero;
// majorTickIncrement // majorTickLength // majorTickPaint // majorTickStroke // minorTickCount // minorTickLength // minorTickPaint // minorTickStroke // tickLabelOffset // tickLabelFont // tickLabelsVisible // tickLabelFormatter // firstTickLabelsVisible
"/* (non-Javadoc)     * @see org.eclipse.swt.events.FocusListener#focusLost(     * org.eclipse.swt.events.FocusEvent)     */"
"/* (non-Javadoc)     * @see org.eclipse.swt.events.FocusListener#focusGained(     * org.eclipse.swt.events.FocusEvent)     */"
// ignoreZeroValues
// open
// new entity code
// disable bar outlines...
//TODO private boolean fillZoomRectangle = true;
// start new row
// width is OK, but height must be constrained
// start new column
/* x-axis label*/
// use gradients and white borders for the section colours
// DEPRECATED FIELDS AND METHODS...
// swap rows and columns to match plotArea shape
// draw the markers...
// super.setSeriesPaint(series, paint);
// add the insets
// for data in ascending order by x-value, we are (broadly) looking // for the index of the highest x-value that is less than xLow
// subtitle 1 is the legend
// BAR Y
// calculate the maximum allowed candle width from the axis...
// draw the outline...
// check that a legend item needs to be displayed...
// work out the label anchor point...
// higlight the background corners...
// fast-forward through leading tails
// get the x and y coordinates
// itemLabelFontList // baseItemLabelFont // itemLabelPaintList // baseItemLabelPaint // positiveItemLabelPositionList // basePositiveItemLabelPosition // negativeItemLabelPositionList // baseNegativeItemLabelPosition // itemLabelAnchorOffset // createEntityList // baseCreateEntities
// here we check that the average marker will in fact be visible // before drawing it...
// check that minItem limit is observed
//assert itemIndex >= 0 && itemIndex < getItemCount();
// skip if chart is null
//SwtGraphics2D sg2 = new SwtGraphics2D(e.gc);
// AXIS 2
// for value in bounds, do the lookup...
// shapeFilled
// domainAxis - no longer a separate field but test anyway...
//itemLabelPaint;
// separatorStroke
// sectionDepth
// we don't know anything about the ordering of the x-values, // but we can still skip any trailing values that fall outside the // range...
// rangeAxis - no longer a separate field but test anyway...
//extraLargeFont
// renderer - no longer a separate field but test anyway...
// leave the y values (y1, y0) untranslated as it is going to be be // stacked up later by previous series values, after this it will be // translated.
//largeFont
// set up the series names...
//regularFont;
// there should be no change event when clearing an empty series
//titlePaint;
// clean up
// anchorValue
// tick marks visible flag...
// TBLRC // 01111
// tick label font...
// anti-aliasing
// rangeCrosshairPaint
// draw outliers
// FIXME: add setBasePaint(int, Paint, boolean)?
// ITEM URL GENERATOR
/* BufferedImage img =*/
//SerialUtilities.writeImage(this.image, stream);
// process all renderers
// reserve space for the primary domain axis...
// draw the bottom circle
// range markers - no longer separate fields but test anyway...
// set a custom background for the chart
// process all range axes
/* line visible */
/* shape outlined */
/* line visible = */
//subtitlePaint;
// calculate the bar width
// -------------------------- // --- ChartPanel Methods --- // --------------------------
// ------------------------ // --- Member Variables --- // ------------------------
// ----------------- // --- Constants --- // -----------------
// process all domain axes
// Cycle when necessary
// wait till we are at the last item for the row then draw the // whole stack at once
// ---------------------- // --- Public Methods --- // ----------------------
// do nothing at all
// add the chart title, if one has been specified...
// by default the outline and background won't be visible
// process all annotations
"/* in the next zoomPoint.x and y replace by e.x and y for now.         * this helps to handle the mouse events and besides,         * those values are unused AFAIK. */"
// LineRenderer3D
// BarRenderer3D
// this fires a ChartChangeEvent
// added the following hint because of  // http://stackoverflow.com/questions/7785082/
// clear the section attributes so that the theme's DrawingSupplier // will be used
// if the flag is being set to true, there may be queued up changes...
// draw the title and subtitles...
// ensure no drawing occurs outside chart area...
// handle GradientPaint as a special case
// do not notify while zooming each axis
// private boolean borderVisible; // private transient Stroke borderStroke; // private transient Paint borderPaint;
// this generates the change event too
// use ImageIcon because it waits for the image to load...
// load only when required
// seem to be the same
// FIXME //this.image = SerialUtilities.readImage(stream);
// if we don't have at least 2 (x, y) coordinates, just return
// FIXME //SerialUtilities.writeImage(this.image, stream);
// return a new chart containing the overlaid plot...
//this.image = SerialUtilities.readImage(stream);
// add a second dataset and renderer...
// create plot ...
//  create transform & transform shape
// compute transform matrix elements via sample points. Assume no // rotation or shear.
// when zooming to sub-millisecond ranges, it can be the case that // adjEnd == adjStart...and we can't have an axis with zero length // so we apply this instead:
// baseCreateEntities;
//for each power of 10 value; create ten ticks
// handle axis trace
// AXIS 4
// or redrawing the chart every time...
// regular number axis
// what is the available space for one unit?
// all tick labels have the same width (equal to the height of the // font)...
// there are no more candidates
// It's up to the plot which clones up to restore the correct references
// if the axis has a fixed dimension, return it...
// displayStart > displayEnd, need to handle split
// no plot, no data.
//negative values not allowed
//get log10 version of upper bound and round to integer:
// is the category valid?
//setup number formatter obj
// add space for the outer tick labels, if any...
// this is the first period, but it is only partially visible // so check that the label will fit before displaying it...
// legendTextPaint
// work out the initial gap
// draw minor tick marks
// work out the trailing gap
// if autoRange is true, then the current range is irrelevant
// calculate the max size of the tick labels (if visible)...
// need to work out the space used by the tick labels... // so we can update the cursor...
//return value; negate if original value was negative:
//invert adjustLog10
//calculate ceil using negative value:
//negative values are allowed
//get lower bound value:
//parameter value is -10 > val < 10 //use as-is
// if < 10 then //increase so 0 translates to 0
//setup for "1e#"-style tick labels or regular // numeric tick labels, depending on flag:
//calculate floor using negative value:
//setup flag based on bounds values
//no real data present
//need to account for case where upper==0.0
//actual data is present //get lower bound value
//apply lower margin by decreasing lower bound:
//strict flag set, allow-negatives not set and values <= 0
//not small log values in use; allow for values <= 0 //if did zero tick last iter then
//no tick label to be shown
//create tick label (force use of fmt obj):
//create tick label:
//for each tick to be displayed
//if autorange still below minimum then adjust by 1% // (can be needed when minRange is very small):
//not "1e#"-type label // if positive exponent then // make integer
//not "log10"-type label
//tick value is 1.0 and 0.0 is within data range //set tick value to zero //indicate zero tick
//small log values in use
// did not do zero tick last iteration
//not small log values in use; allow for values <= 0 //if did zero tick last iter then //decrement to do 1.0 tick now //calculate power-of-ten value for tick:
//for each tick with a label to be displayed
//tick value not below lowest data value
// if past highest data value then exit // method
//negative exponent; create fractional value //set exact number of fractional digits to // be shown:
//if flag then //create "1e#"-type label
//get lower bound value
// ITEM_LABEL_PAINT
//create "1e#"-type label
// check the new minimum date relative to the current maximum date
//decrement to do 1.0 tick now
//first or last tick on graph or value is 1.0 //create label for tick:
//create "log10"-type label
// milliseconds
// not first tick of group //no label //make sure flag cleared
//create tick object and add to list:
//if past highest data value then exit method
// did zero tick last iteration //no label //clear flag
// date formatters
// usually the range will be a DateRange, but if it isn't do a // conversion...
//if flag then //create "log10"-type label
//using exponents or force-formatter flag is set // (convert 'E' to lower-case 'e'):
// check the new maximum date relative to the current minimum date
// get a locale-specific resource bundle...
// draw the chart background...
// then extrapolate...
// even though the axis is not visible, we need to refresh ticks in // case the grid is being drawn...
// days
// minutes
//Timeline hasn't method getStartTime()
// years
// months
// hours
// make final selection...
// could add a flag to make the following correction optional...
// 'tickMarkPosition' is immutable : no need to clone
// no action required.
// 'dateTickUnit' is immutable : no need to clone
// record the chart area, if info is requested...
// step down in size until the current size is too small or there are  // no more units
// now process the plot if there is one
// if there is no specific font, use the general one...
// if there is no specific paint, use the general one...
// nothing required
// find first excluded base segment starting fromDomainValue
// make a time zone with no DST for our Calendar calculations
//////////////////////////////////////////////////////////////////////////// // predetermined segments sizes ////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////// // static block ////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////// // other constants ////////////////////////////////////////////////////////////////////////////
// move forward exceptionSegmentCount segments skipping // excluded segments
// last series, so we are ready to draw the min and max
//////////////////////////////////////////////////////////////////////////// // operations ////////////////////////////////////////////////////////////////////////////
// verify that baseTimeline is compatible with us
// calculate the result as if no exceptions
// find all consecutive included segments
// adjust result for any exceptions in the result calculated
// skip exception or excluded segments we may fall on
// skip all whole exception segments in the range
// add the interval as an exception
// first check that autoPopulate==false works as expected
// long start = Math.max( //     fromSegment.getSegmentStart(), this.segmentStart // ); // long end = Math.min(toSegment.getSegmentEnd(), this.segmentEnd);
// cycle over all the base segments groups in the range
// cycle through all the segments contained in the base exclusion // area
// go to next base segment group
// If tick overlap when cycling, update last tick too
// calculate the adjusted data area taking into account the 3D effect...
// check if we need to collect chart entities from the container
// suppresses compiler warnings
// seriesOutlinePaint
// update, but dont draw tick marks (needed for stepped colors)
// inverted
// draw mean - SPECIAL AIMS REQUIREMENT...
// allow fixed thickness
// default make height of plotArea
// remember these values for next comparison
// transparent
// ensure that all the symbols are displayed
// catches null also
// this ensure that the grid bands will be displayed correctly.
// must be top or bottom
// From outlier array sort out which are outliers and put these into a // list If there are any farouts, set the flag on the // OutlierListCollection
// zap the buffer onto the canvas...
// avoid possible sun.dc.pr.PRException: endPath: bad path
// null is handled fine here...
// place in this row (truncated) anyway
// find optimum height, then map to range
//Block b = (Block) blocks.get(i);
// can safely ignore
// handle tool tips in a simple way
// find optimum width and map to range
// since the flow layout is relatively straightforward, no information // needs to be recorded here
// chart title // data // no legend // tooltips // no URL generation
// this default implementation will just fill the available // border space with a single color
// nothing to clear
// fixed width
// find optimum height and map to range
// if the area has zero height or width, we shouldn't draw anything
// check if initial polygon needs to be clipped
// place in this column (truncated) anyway
// autoRange
// customise the section label appearance
// pass to the super-class for handling
// add a subtitle giving the data source
// Insets values
// figure out what type of axis we have and instantiate the // appropriate panel
// create a panel for the settings...
// populate the deprecated fields
//      end fix by rfuller
// pass to super-class for handling
// update the deprecated field
//same as for ChartEntity!
// then the axis properties...
// check the deprecated fields
// update the deprecated fields
// try the parent plot
// FIXME
//      fix by rfuller
//dmo added //dmo added
// baseSeriesPaint
// record the plot area...
// title // x-axis label // y-axis label
// set the default stroke for all series
// does nothing unless overridden        
// force a redraw
// the URL text should already have been escaped by the URL generator
//if we have been panning reset the cursor //unregister in any case
// the actual panning occurs later in the mouseDragged() method
/// we have rotation huston, please spin me
// no fields to test
// we expect the line to be vertical or horizontal // vertical
//int maxX = (int) (plotArea.getMaxX());
// isArrowAtTop
// horizontal
/// we have rotation houston, please spin me
// configure the range axis...
// draw the shared axis
// set the width and height of non-shared axis of all sub-plots
// calculate sub-plot area
// default preserves previous // behaviour
// the range axis is deserialized before the subplots, so its value // range is likely to be incorrect...
// the pie area defines the circle/ellipse for regular pie sections. // it is defined by shrinking the explodeArea by the explodeMargin // factor.
// draw all the charts
// the explode area defines the max circle/ellipse for the exploded pie // sections. // it is defined by shrinking the linkArea by the linkMargin factor.
// get the data source - return if null;
// this is a paint we don't recognise
// the link area defines the dog-leg point for the linking lines to // the labels
// if too any elements
// do nothing by default.
// if depth is negative don't draw anything
// and finishes at back
// the segment starts at the front, and wraps all // the way around // the back and finishes at the front again
// start at front
// draw the height
// for CLOCKWISE charts, the extent will be negative...
// cycle through again drawing only the sides at the front...
// segments wraps right around the back...
// segment starts at back
// and finishes at the front
// whole segment stays at the back
// segments starts at front and finishes at back...
// segment only occupies the front
//dmo //zero when the parameter is not set
// never updated the subtrahend if it is implied to be zero
// draw horizontal crosshair if required...
// draw vertical crosshair if required...
// ratio represents axis units
// ratio represents pixels
// draw the plot background...
// get the data points
// segment starts at the front
// just the horizontal axis...
// just the vertical axis...
// end of column
// the following relies on the fact that the intervals are immutable
// seriesPaintList
// this is a new column
// plot the data (unless the dataset is null)...
//Object oldValue = this.urlGenerator;
//Object oldValue = this.toolTipGenerator;
// draw the background
// can't find any difference
// intentionally blank
// set the anchor value for the range axis...
// make the link area a square if the pie chart is to be circular...
// send a dataset change event to self to trigger plot change event
// check if line segments are colinear
// delegate
// AXIS 3
//  range = this.rangeAxis.getRange().getLength(); //  scaledRange = range * percent; //   rangeAxis.setAnchoredRange(scaledRange);
// add a tooltip for the section...
// draw all the subplots
// the segment starts at the back (still extending // CLOCKWISE)
// override is only for documentation purposes
// y is minor
// if not, check if there is a stroke defined for the specified key
// draw the wafer
//get major dimension
// otherwise look up the paint table
//ellipse diameter is the minor dimension
//set upperLeft point // x is minor
// calculate and draw the notch // horizontal orientation is considered notch right // vertical orientation is considered notch down
//// SECTION PAINT ////////////////////////////////////////////////////////
//// SECTION OUTLINE STROKE ///////////////////////////////////////////////
// seriesPaint
// cycle through once drawing only the sides at the back...
// classify the keys according to which side the label will appear...
// clear the point vectors
// no range axis // no renderer
// draw the right labels...
// draw the labels...
// can't find any difference...
//hh * getInteriorGap();
// line not visible
// for a RadialGradientPaint we adjust the center and radius to match // the current pie segment...
// create the bounds for the inner arc
// set the anchor value for the vertical axis...
// after setting up all the subplots, the shared domain axis may need // reconfiguring
// delegate 'state' and 'source' argument checks...
// showValueLines
// column keys provide potential keys for individual pies
// update the section colors to match the global colors...
// calculate inner arc in reverse direction, for later // GeneralPath construction
// the columns variable is always >= rows
// add an entity for the pie section
// row keys provide potential keys for individual pies
"/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. * Other names may be trademarks of their respective owners.] * * ----------------- * CategoryPlot.java * ----------------- * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Jeremy Bowman; *                   Arnaud Lelievre; *                   Richard West, Advanced Micro Devices, Inc.; *                   Ulrich Voigt - patch 2686040; *                   Peter Kolb - patches 2603321 and 2809117; * * Changes * ------- * 21-Jun-2001 : Removed redundant JFreeChart parameter from constructors (DG); * 21-Aug-2001 : Added standard header. Fixed DOS encoding problem (DG); * 18-Sep-2001 : Updated header (DG); * 15-Oct-2001 : Data source classes moved to com.jrefinery.data.* (DG); * 22-Oct-2001 : Renamed DataSource.java --> Dataset.java etc. (DG); * 23-Oct-2001 : Changed intro and trail gaps on bar plots to use percentage of *               available space rather than a fixed number of units (DG); * 12-Dec-2001 : Changed constructors to protected (DG); * 13-Dec-2001 : Added tooltips (DG); * 16-Jan-2002 : Increased maximum intro and trail gap percents, plus added *               some argument checking code.  Thanks to Taoufik Romdhane for *               suggesting this (DG); * 05-Feb-2002 : Added accessor methods for the tooltip generator, incorporated *               alpha-transparency for Plot and subclasses (DG); * 06-Mar-2002 : Updated import statements (DG); * 14-Mar-2002 : Renamed BarPlot.java --> CategoryPlot.java, and changed code *               to use the CategoryItemRenderer interface (DG); * 22-Mar-2002 : Dropped the getCategories() method (DG); * 23-Apr-2002 : Moved the dataset from the JFreeChart class to the Plot *               class (DG); * 29-Apr-2002 : New methods to support printing values at the end of bars, *               contributed by Jeremy Bowman (DG); * 11-May-2002 : New methods for label visibility and overlaid plot support, *               contributed by Jeremy Bowman (DG); * 06-Jun-2002 : Removed the tooltip generator, this is now stored with the *               renderer.  Moved constants into the CategoryPlotConstants *               interface.  Updated Javadoc comments (DG); * 10-Jun-2002 : Overridden datasetChanged() method to update the upper and *               lower bound on the range axis (if necessary), updated *               Javadocs (DG); * 25-Jun-2002 : Removed redundant imports (DG); * 20-Aug-2002 : Changed the constructor for Marker (DG); * 28-Aug-2002 : Added listener notification to setDomainAxis() and *               setRangeAxis() (DG); * 23-Sep-2002 : Added getLegendItems() method and fixed errors reported by *               Checkstyle (DG); * 28-Oct-2002 : Changes to the CategoryDataset interface (DG); * 05-Nov-2002 : Base dataset is now TableDataset not CategoryDataset (DG); * 07-Nov-2002 : Renamed labelXXX as valueLabelXXX (DG); * 18-Nov-2002 : Added grid settings for both domain and range axis (previously *               these were set in the axes) (DG); * 19-Nov-2002 : Added axis location parameters to constructor (DG); * 17-Jan-2003 : Moved to com.jrefinery.chart.plot package (DG); * 14-Feb-2003 : Fixed bug in auto-range calculation for secondary axis (DG); * 26-Mar-2003 : Implemented Serializable (DG); * 02-May-2003 : Moved render() method up from subclasses. Added secondary *               range markers. Added an attribute to control the dataset *               rendering order.  Added a drawAnnotations() method.  Changed *               the axis location from an int to an AxisLocation (DG); * 07-May-2003 : Merged HorizontalCategoryPlot and VerticalCategoryPlot into *               this class (DG); * 02-Jun-2003 : Removed check for range axis compatibility (DG); * 04-Jul-2003 : Added a domain gridline position attribute (DG); * 21-Jul-2003 : Moved DrawingSupplier to Plot superclass (DG); * 19-Aug-2003 : Added equals() method and implemented Cloneable (DG); * 01-Sep-2003 : Fixed bug 797466 (no change event when secondary dataset *               changes) (DG); * 02-Sep-2003 : Fixed bug 795209 (wrong dataset checked in render2 method) and *               790407 (initialise method) (DG); * 08-Sep-2003 : Added internationalization via use of properties *               resourceBundle (RFE 690236) (AL); * 08-Sep-2003 : Fixed bug (wrong secondary range axis being used).  Changed *               ValueAxis API (DG); * 10-Sep-2003 : Fixed bug in setRangeAxis() method (DG); * 15-Sep-2003 : Fixed two bugs in serialization, implemented *               PublicCloneable (DG); * 23-Oct-2003 : Added event notification for changes to renderer (DG); * 26-Nov-2003 : Fixed bug (849645) in clearRangeMarkers() method (DG); * 03-Dec-2003 : Modified draw method to accept anchor (DG); * 21-Jan-2004 : Update for renamed method in ValueAxis (DG); * 10-Mar-2004 : Fixed bug in axis range calculation when secondary renderer is *               stacked (DG); * 12-May-2004 : Added fixed legend items (DG); * 19-May-2004 : Added check for null legend item from renderer (DG); * 02-Jun-2004 : Updated the DatasetRenderingOrder class (DG); * 05-Nov-2004 : Renamed getDatasetsMappedToRangeAxis() *               --> datasetsMappedToRangeAxis(), and ensured that returned *               list doesn't contain null datasets (DG); * 12-Nov-2004 : Implemented new Zoomable interface (DG); * 07-Jan-2005 : Renamed getRangeExtent() --> findRangeBounds() in *               CategoryItemRenderer (DG); * 04-May-2005 : Fixed serialization of range markers (DG); * 05-May-2005 : Updated draw() method parameters (DG); * 20-May-2005 : Added setDomainAxes() and setRangeAxes() methods, as per *               RFE 1183100 (DG); * 01-Jun-2005 : Upon deserialization, register plot as a listener with its *               axes, dataset(s) and renderer(s) - see patch 1209475 (DG); * 02-Jun-2005 : Added support for domain markers (DG); * 06-Jun-2005 : Fixed equals() method for use with GradientPaint (DG); * 09-Jun-2005 : Added setRenderers(), as per RFE 1183100 (DG); * 16-Jun-2005 : Added getDomainAxisCount() and getRangeAxisCount() methods, to *               match XYPlot (see RFE 1220495) (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 11-Jan-2006 : Added configureRangeAxes() to rendererChanged(), since the *               renderer might influence the axis range (DG); * 27-Jan-2006 : Added various null argument checks (DG); * 18-Aug-2006 : Added getDatasetCount() method, plus a fix for bug drawing *               category labels, thanks to Adriaan Joubert (1277726) (DG); * 05-Sep-2006 : Added MarkerChangeEvent support (DG); * 30-Oct-2006 : Added getDomainAxisIndex(), datasetsMappedToDomainAxis() and *               getCategoriesForAxis() methods (DG); * 22-Nov-2006 : Fire PlotChangeEvent from setColumnRenderingOrder() and *               setRowRenderingOrder() (DG); * 29-Nov-2006 : Fix for bug 1605207 (IntervalMarker exceeds bounds of data *               area) (DG); * 26-Feb-2007 : Fix for bug 1669218 (setDomainAxisLocation() notify argument *               ignored) (DG); * 13-Mar-2007 : Added null argument checks for setRangeCrosshairPaint() and *               setRangeCrosshairStroke(), fixed clipping for *               annotations (DG); * 07-Jun-2007 : Override drawBackground() for new GradientPaint handling (DG); * 10-Jul-2007 : Added getRangeAxisIndex(ValueAxis) method (DG); * 24-Sep-2007 : Implemented new zoom methods (DG); * 25-Oct-2007 : Added some argument checks (DG); * 05-Nov-2007 : Applied patch 1823697, by Richard West, for removal of domain *               and range markers (DG); * 14-Nov-2007 : Added missing event notifications (DG); * 25-Mar-2008 : Added new methods with optional notification - see patch *               1913751 (DG); * 07-Apr-2008 : Fixed NPE in removeDomainMarker() and *               removeRangeMarker() (DG); * 23-Apr-2008 : Fixed equals() and clone() methods (DG); * 26-Jun-2008 : Fixed crosshair support (DG); * 10-Jul-2008 : Fixed outline visibility for 3D renderers (DG); * 12-Aug-2008 : Added rendererCount() method (DG); * 25-Nov-2008 : Added facility to map datasets to multiples axes (DG); * 15-Dec-2008 : Cleaned up grid drawing methods (DG); * 18-Dec-2008 : Use ResourceBundleWrapper - see patch 1607918 by *               Jess Thrysoee (DG); * 21-Jan-2009 : Added rangeMinorGridlinesVisible flag (DG); * 18-Mar-2009 : Modified anchored zoom behaviour (DG); * 19-Mar-2009 : Implemented Pannable interface - see patch 2686040 (DG); * 19-Mar-2009 : Added entity support - see patch 2603321 by Peter Kolb (DG); * 24-Jun-2009 : Implemented AnnotationChangeListener (see patch 2809117 by *               PK) (DG); * 06-Jul-2009 : Fix for cloning of renderers - see bug 2817504 (DG) * 10-Jul-2009 : Added optional drop shadow generator (DG); * 27-Sep-2011 : Fixed annotation import (DG); * 18-Oct-2011 : Fixed tooltip offset with shadow generator (DG); * 20-Nov-2011 : Initialise shadow generator as null (DG); * 02-Jul-2013 : Use ParamChecks (DG); * 12-Sep-2013 : Check for KEY_SUPPRESS_SHADOW_GENERATION rendering hint (DG); * 10-Mar-2014 : Updated Javadocs for issue #1123 (DG); * 09-Apr-2014 : Remove use of ObjectList (DG); *  */"
// allocate storage for dataset, axes and renderers
//// ITEM LABELS VISIBLE //////////////////////////////////////////////////
//// SERIES PAINT /////////////////////////
// add the unique categories from this dataset
// don't let anyone draw outside the data area
// the first axis in the list is used for data <--> Java2D
// reserve space for any domain axes...
// get the legend items for the datasets...
// if there is a renderer, it draws the background, otherwise use the // default background...
// specify the anchor X and Y coordinates in Java2D space, for the // cases where these are not updated during rendering (i.e. no lock // on data)
// reserve some space for the range axis...
// add domain axes to lists...
// now render data items...
// set up the alpha-transparency...
// draw an outline around the plot area...
// draw the foreground markers...
// grab the plot's annotations
// iterate through the datasets that map to the axis and get the union // of the ranges.
// draw the bottom axes
// draw the left axes
// add range axes to lists...
// draw the right axes
// now check that the chart is usable...
// do nothing, because the plot is not pannable along the domain axes
// provides a 'no action' default
// draw the range grid lines, if any...
// stroke sequence
// AxisLocation is immutable, so we can just copy the maps
// some subclasses override this method completely, so don't put // anything here that *must* be done
// delegate to other method
// not currently serialized
// headPercent
// square
// check null argument...
// we don't need the sign
// baseSectionPaint
// the datasets are not cloned, but listeners need to be added...
// fillType == TO_UPPER_BOUND
// normalize angle
// draw the radius grid lines, if any...
// now for each dataset, get the renderer and the appropriate axis // and render the dataset...
"/*      solve linear system with tridiagonal n by n matrix a        using Gaussian elimination *without* pivoting        where   a(i,i-1) = sub[i]  for 2<=i<=n        a(i,i)   = diag[i] for 1<=i<=n        a(i,i+1) = sup[i]  for 1<=i<=n-1        (the values sub[1], sup[n] are ignored)        right hand side vector b[1:n] is overwritten with solution        NOTE: 1...n is used in all arrays, 0 is unused */"
// horizontal ellipse
// horizontal rectangle
// up-pointing triangle
// right-pointing triangle
// this represents the situation // for drawing a horizontal bar.
// left-pointing triangle
// vertical rectangle
// otherwise look up the paint list
// draw the polygon series...
// verify independence of fixed legend item collection
//// SERIES OUTLINE STROKE /////////////////////
// draw the axis and category label
// plot the data...
// Now actually plot each of the series polygons..
// 1 = end of axis
// find the point at the appropriate distance end point // along the axis/angle identified above and add it to the // polygon
/* shapeFilled=*/
// Finds our starting angle from the centre for this axis
// down-pointing triangle
// circle
// diamond
//  Check that the graph being served was created by the current user //  or that it begins with "public"
// set the anchor value for the horizontal axis...
// Plot the polygon
// draw range crosshair if required...
// put an elipse at the point being plotted..
// pass mouse down event if some ChartMouseListener are listening
// reserve space for the domain axes...
// allocate storage for datasets, axes and renderers (all optional)
//          negatives = true;
// if series are in rows, then the categories are the column keys
// Lastly, fill the web polygon if this is required
//  value = Math.pow(10,value);
// clone share data sets => add the clone as listener to the dataset
// no zooming possible
//  izV = steps*numSteps*(int)((value/minZ)/(maxZlog-minZlog)) + 2;
// reserve space for the range axes...
// is it a domain axis?
//render series in forward order
// draw background annotations
/// Draw N, S, E, W
//render series in reverse order
// draw foreground annotations
// render data items...
// no default renderer available
// we can't draw quadrants without a valid x-axis
// can't render anything without axes
// we can't draw quadrants without a valid y-axis
// use the TextTitle class because it is a concrete subclass
// if the event was caused by a change to series visibility, then // the axis ranges might need updating...
// we don't clone the listeners
/// Squares
// if there is an existing dataset, remove the plot from the list // of change listeners...
// draw the item shapes
// the textAlignment and the horizontalAlignment are separate things, // but it makes sense for the default textAlignment to match the // title's horizontal alignment...
// or is it a range axis?
// perform the zoom on each domain axis
// register the plot as a listener with its axes, datasets, and // renderers...
// lineVisible
//int transX = (int) (xx + ww * (x - domainMin) / domainLength); //int transY = (int) (yy - hh * (y - rangeMin) / rangeLength);
// we don't use the calendar or numberFormat fields, but equals(Object) // is failing without them being non-null
// images considered equal only if they're the SAME object // TODO: is there a way to do a better test?
//  draw units indicator
// already calculated // already calculated
// plot is registered as a listener with the existing axis...
// draw the cap if there is one...
// draw text value on screen
// draw start of normal range
//// FILL PAINT //////////////////////////////////////////////////////////
// draw the axis...
// draw start of warning range
// draw start of critical range
// pieIndex...
// draw range indicators...
// draw thermometer outline
// draw the border
// draw the outline of the filled polygon
// calculate the bounds of the template value
/* lineVisible= */
// urlText
// now find the text anchor point
// adjust text bounds to match string position
// draw the pointers
// draw the background if there is one...
// first, expand the viewing area into a drawing frame
// now do the minor tick marks
// otherwise look up the stroke table
// now fetch the row data - need to bear in mind that the row // structure may not have an entry for the column key, but that we // have already checked that the key is valid for the 2D structure
// SERIES VISIBLE (not yet respected by all renderers)
// otherwise look up the position list
// OUTLINE PAINT //////////////////////////////////////////////////////////
// otherwise look up the shape list
// otherwise look up the position table
//// ITEM LABEL FONT //////////////////////////////////////////////////////
//  Iterate and find all keys below threshold percentThreshold
// ITEM LABEL VISIBILITY...
// POSITIVE ITEM LABEL POSITION...
// otherwise look up the boolean table
//// ITEM LABEL PAINT  ////////////////////////////////////////////////////
// 'paint' : immutable, no need to clone reference
// NEGATIVE ITEM LABEL POSITION...
// 'baseStroke' : immutable, no need to clone reference
// 'outlinePaint' : immutable, no need to clone reference
// 'stroke' : immutable, no need to clone reference
// 'basePaint' : immutable, no need to clone reference
// skip any items that don't need including...
// 'baseItemLabelAnchor' : immutable, no need to clone reference
//create a temporary vector // set x to some arbitary value (used below)
// 'baseOutlineStroke' : immutable, no need to clone reference
// 'baseItemLabelFont' : immutable, no need to clone reference
// shapeList // baseShape
// in this case, every color has a unique value
// 'postiveItemLabelAnchor' : immutable, no need to clone reference
// 'itemLabelPaint' : immutable, no need to clone reference
// 'itemLabelFont' : immutable, no need to clone reference
// 'itemLabelsVisible' : immutable, no need to clone reference
// 'baseNegativeItemLabelAnchor' : immutable, no need to clone reference
// assign a color for each unique value
//System.err.print(" creating new outlier list ");
// === DEPRECATED CODE ===
// 'outlineStroke' : immutable, no need to clone reference
// listeners are not restored automatically, but storage must be // provided...
// handle special case where value is less that item zero
//// TOOL TIP GENERATOR ///////////////////////////////////////////////////
// special case where the highest x-value is < xLow
//// URL GENERATOR ////////////////////////////////////////////////////////
// more values than paints so map // multiple values to the same color
// if there is no plot, there is no dataset to access...
// return the overall setting, if there is one...
// end class wafermaprenderer
// when the x-values are descending, the upper bound is found by // comparing against xLow
// handle negative value
// FIXME: calculate xxLeft and xxRight
// end foreach map entry // end else
// handle positive value
// RIGHT POLYGON
// SHAPES FILLED
// '+' because v is negative
// handle value outside bounds...
// handle rendering separately for the two plot orientations...
// look for any keys that we don't already know about...
// draw the blocks
// the commented out code would be better, but only if // RendererChangeEvent is immutable, which it isn't.  See if there is // a way to fix this...
// SHAPES VISIBLE
// contained titles
// preserves old behaviour
// LINES VISIBLE
// value 0
// nothing is drawn for null...
// put an outline around the data area...
// fetch the series, remove the change listener, then remove the series.
// do nothing if both the line and shape are not visible
// cases 5, 6, 7 and 8
// get the clipping values...
// set the default item label positions
// fill background...
// highlight the background corners...
// ITEM LABEL GENERATOR
// draw the bar...
// check the value we are plotting...
// the bar is not visible
// URL GENERATOR
// TOOL TIP GENERATOR
// defensive check
// no new methods
// now draw the outlines, if visible...
// FIXME: add setSeriesOutlineStroke(int, Stroke, boolean) ?
// cases 1, 2, 3 and 4
// handle special case of BoxAndWhiskerDataset
// let the superclass handle it...
// standard deviation lines
// cases 9, 10, 11 and 12
// draw background image, if there is one...
//ChartEditorManager.getChartEditor(canvas.getDisplay(), this.chart);
// FIXME: add setSeriesOutlinePaint(int, Paint, boolean)?
// FIXME: add setBaseItemLabelPaint(Paint, boolean) ?
// DRAW THE BARS...
// nothing is drawn for null values...
//plotBackgroundPaint;
// no fields to compute...
// 100 percent, so it will not apply unless changed
// FIXME: add setBaseOutlineStroke(Stroke, boolean) ?
// units
//// SHAPE /////////////////////////////////////////////////////////////////
// remove old items if necessary, but // don't notify anyone, because that // happens next anyway...
// tick labels visible
// tick size
//standard deviation lines
// switch x and y
// upright bar
// extend x0's flat bar
// or: x0s + 2*(x0-x0s)
// or: x1s + 2*(x1-x1s)
// the clone and the original share a reference to the SAME dataset
//plotOutlinePaint;
//// OUTLINE PAINT /////////////////////////////////////////////////////////
// x1's flat bar
// FIXME: add setSeriesShape(int, Shape, boolean) ?
// BAR WIDTH
//// PAINT /////////////////////////////////////////////////////////////////
"/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2013, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ------------------------- * CategoryItemRenderer.java * ------------------------- * * (C) Copyright 2001-2011, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Mark Watson (www.markwatson.com); * * Changes * ------- * 23-Oct-2001 : Version 1 (DG); * 16-Jan-2002 : Renamed HorizontalCategoryItemRenderer.java *               --> CategoryItemRenderer.java (DG); * 05-Feb-2002 : Changed return type of the drawCategoryItem method from void *               to Shape, as part of the tooltips implementation (DG) * *               NOTE (30-May-2002) : this has subsequently been changed back *               to void, tooltips are now collected along with entities in *               ChartRenderingInfo (DG); * * 14-Mar-2002 : Added the initialise method, and changed all bar plots to use *               this renderer (DG); * 23-May-2002 : Added ChartRenderingInfo to the initialise method (DG); * 29-May-2002 : Added the getAxisArea(Rectangle2D) method (DG); * 06-Jun-2002 : Updated Javadoc comments (DG); * 26-Jun-2002 : Added range axis to the initialise method (DG); * 24-Sep-2002 : Added getLegendItem() method (DG); * 23-Oct-2002 : Added methods to get/setToolTipGenerator (DG); * 05-Nov-2002 : Replaced references to CategoryDataset with TableDataset (DG); * 06-Nov-2002 : Added the domain axis to the drawCategoryItem method.  Renamed *               drawCategoryItem() --> drawItem() (DG); * 20-Nov-2002 : Changed signature of drawItem() method to reflect use of *               TableDataset (DG); * 26-Nov-2002 : Replaced the isStacked() method with the getRangeType() *               method (DG); * 08-Jan-2003 : Changed getSeriesCount() --> getRowCount() and *               getCategoryCount() --> getColumnCount() (DG); * 09-Jan-2003 : Changed name of grid-line methods (DG); * 21-Jan-2003 : Merged TableDataset with CategoryDataset (DG); * 10-Apr-2003 : Changed CategoryDataset to KeyedValues2DDataset in *               drawItem() method (DG); * 29-Apr-2003 : Eliminated Renderer interface (DG); * 02-Sep-2003 : Fix for bug 790407 (DG); * 16-Sep-2003 : Changed ChartRenderingInfo --> PlotRenderingInfo (DG); * 20-Oct-2003 : Added setOutlinePaint() method (DG); * 06-Feb-2004 : Added missing methods, and moved deprecated methods (DG); * 19-Feb-2004 : Added extra setXXXLabelsVisible() methods (DG); * 29-Apr-2004 : Changed Integer --> int in initialise() method (DG); * 18-May-2004 : Added methods for item label paint (DG); * 05-Nov-2004 : Added getPassCount() method and 'pass' parameter to drawItem() *               method (DG); * 07-Jan-2005 : Renamed getRangeExtent() --> findRangeBounds (DG); * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG); * 23-Feb-2005 : Now extends LegendItemSource (DG); * 20-Apr-2005 : Renamed CategoryLabelGenerator *               --> CategoryItemLabelGenerator (DG); * 20-May-2005 : Added drawDomainMarker() method (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 20-Feb-2007 : Updated API docs (DG); * 19-Apr-2007 : Deprecated seriesVisible and seriesVisibleInLegend flags (DG); * 20-Apr-2007 : Deprecated paint, fillPaint, outlinePaint, stroke, *               outlineStroke, shape, itemLabelsVisible, itemLabelFont, *               itemLabelPaint, positiveItemLabelPosition, *               negativeItemLabelPosition and createEntities override *               fields (DG); * 26-Jun-2008 : Added new method required for crosshair support - THIS CHANGES *               THE API as of version 1.0.11 (DG); * */"
// The next 3 functions override the base-class implementation of // the DomainInfo interface.  Using saved limits (updated by // each updateTime() call), improves performance. //
// BAR HEIGHT
// row 2: outline color
// FIXME: add setSeriesPaint(int, Paint, boolean)?
//// FILL PAINT /////////////////////////////////////////////////////////
// FIXME: add setSeriesStroke(int, Stroke, boolean) ?
//// STROKE ////////////////////////////////////////////////////////////////
// FIXME: add setBaseShape(Shape, boolean) ?
// FIXME: add setBaseOutlinePaint(Paint, boolean)?
// ITEM LABELS VISIBLE
//// OUTLINE STROKE ////////////////////////////////////////////////////////
// FIXME: add setSeriesItemLabelGenerator(int, CategoryItemLabelGenerator, //            boolean)
//// ITEM LABEL FONT  //////////////////////////////////////////////////////
// FIXME: add setBaseItemLabelFont(Font, boolean) ?
// FIXME: add setSeriesItemLabelPaint(int, Paint, boolean) ?
/*&& state.getBarWidth() > renderer.BAR_OUTLINE_WIDTH_THRESHOLD*/
// FIXME: add setSeriesItemLabelFont(int, Font, boolean) ?
// create an actual polygon
// create a line renderer only
// draw the upper shadow...
// connect to the previous point
// need to handle cluster centering as a special case
// first check the number we are plotting...
// 100 percent, so it will not apply unless // changed
// we'll set this to false if there is at // least one non-null data item...
// set the default item label positions, which will only be used if // the user requests visible item labels...
// calculate the box width
// treat the last column value as an absolute
// offset the start of the box if the box width is smaller than // the category width
// alternatively, sometimes the first few days of the year are // considered to fall in the *last* week of the previous year...
// draw the box...
"/*             * Legacy? Just return the original Paint.             * (this corresponds EXACTLY to how Paints used to be darkened)             */"
// Create a new Area for the series
// start from Y = rangeBase
// draw median...
// average radius
// draw yOutliers...
// draw the body...
// draw farout indicators
// disable visible items optimisation - it doesn't work for this // renderer...
// not just a horizontal bar but need to perform a 'step'.
// The first point is (x, this.baseYValue)
// check if series are disjoint (i.e. domain-spans do not overlap)
// TODO getSeriesShape(n).getBounds().height / 2;
// project onto minuend
// fill the polygon
// draw an outline around the Area.
// TODO getSeriesShape(n).getBounds().width / 2;
// do nothing...this is just a hook for subclasses
// start new area when needed (see above)
// draw optional guide lines
// calculate the arrow head and draw it...
// there are no fields to check
//labelLinkStyle;
// orientation is HORIZONTAL
// check if either series is a degenerate case (i.e. less than 2 points)
// try a listener type that isn't registered
//// ITEM LABEL FONT ///////////////////////////////////////////////////////
// state
// can't draw anything
// start of algorithm
// subtrahend needs to be fast forwarded
// DEPRECATED METHODS
// if the series is sorted, the negative index is a result from // Collections.binarySearch() and tells us where to insert the // new item...otherwise it will be just -1 and we should just // append the value to the list...
//// ANNOTATIONS //////////////////////////////////////////////////////////
// check for intersect
// deassert b_*FastForward (only matters for 1st time through loop)
// set new starting point for the polygon
// project onto subtrahend
// pass mouse move event if some ChartMouseListener are listening
// clear colinear points and flag
// compute numerators
// this won't happen :)
// compute the point of intersection
// check if the line segments intersect
// test if both grahphs have a vertical rise at the same x-value
// add intersection point to the polygon
//// PAINT ////////////////////////////////////////////////////////////////
// return straight away if the item is not visible
// add interection point to new polygon
// chart title // domain axis label // range axis label // data // orientation // include legend // tooltips? // URLs?
// set the maxY and minY values to intersect y-value
// labelType...
// add the last point of the minuned and subtrahend
// consider last point of minuend and subtrahend for determining // positivity
// check if the final polygon needs to be clipped
// the SWTGraphics2D class doesn't handle GradientPaint well, so // replace the gradient painter from the default theme with a // standard painter...
// advance the subtrahend if needed
//// VISIBLE //////////////////////////////////////////////////////////////
// advance the minuend if needed
// vertical orientation
// advance minuend and subtrahend to intesect
// a Range object cannot be equal to a different object type
// bad axisNumber
// compute slope components
//// DRAWING //////////////////////////////////////////////////////////////
// may be negative
//// OUTLINE PAINT ////////////////////////////////////////////////////////
// interval
// first pass draws the shading
//// OUTLINE STROKE ///////////////////////////////////////////////////////
//// SHAPE ////////////////////////////////////////////////////////////////
//// ITEM LABEL GENERATOR /////////////////////////////////////////////////
//// LEGEND ITEM LABEL GENERATOR //////////////////////////////////////////
//// LEGEND ITEMS /////////////////////////////////////////////////////////
// FIXME:
//  Get height adjustment based on stack and translate to Java2D values
// add an entity if this info is being collected
// if the renderer isn't assigned to a plot, then we don't have a // dataset...
//  On first pass render the areas, line and outlines
// Use a SwtPaintCanvas to show the color, note that we must set the // heightHint.
//  Get series Paint and Stroke
// start from previous height (ph1)
//labelLinkPaint;
//  Draw an outline around the Area.
// The first point is (x, 0)
// dial shape
// we need at least two points to draw something
// construct path
// if this is the last item, draw the path ...
// update path to reflect latest point
// now create a new title and replace the existing title, several // things should happen: // (1) Adding the new title should trigger an immediate //     ChartChangeEvent; // (2) Modifying the new title should trigger a ChartChangeEvent; // (3) Modifying the old title should NOT trigger a ChartChangeEvent
// On second pass render shapes and collect entity and tooltip // information
// Add points from last series to complete the base of the // polygon
// Collect points
// draw path
// construct spline // number of points // Newton form coefficients // x-coordinates of nodes
// we need at least 3 points to spline. Draw simple line // for two points
// we're running on JRE 1.3.1 so this is the best we have...
// note that a[0]=a[np-1]=0
// dial background paint
// get the label position..
// name
// just the range axis...
// then draw the line...
// fill under the curve...
// just the domain axis...
// now draw the real shape
/*      factorization and forward substitution */
// reset points vector
// should never get here
// map a key to the default group
// 'plot' : just retain reference, not a deep copy
// calculate the step point
//this handles the need to perform a 'step'.
//this handles the need to perform a 'step'. // calculate the step point
// submit this data item as a candidate for the crosshair point
// create a new area polygon for the series
// the first point is (x, 0)
// no change
// we make the clip region slightly larger than the // dataArea so that the clipped edges don't show lines // on the chart
// here we use BooleanUtilities to remain compatible with JDKs < 1.4
// update the max value
// need to make sure we are adding *after* any duplicates
// we needed to get this far even for invisible items, to ensure that // seriesPath updates happened, but now there is nothing more we need // to do for non-visible items...
// If the line is not wrapping, then parent is OK
// draw the body
// only draw a line if the gap between the current and // previous data point is within the threshold
// draw the lower shadow
// draw the upper shadow
// this method must be overridden if you want to display images
// first pass draws the background (lines, for instance)
//  Fill the polygon
//////////////////////////////////////////////////////////////////////////// // PROTECTED METHODS // These provide the opportunity to subclass the standard renderer and // create custom effects. ////////////////////////////////////////////////////////////////////////////
// Now split the segment as needed
// should not get here
// yOutliers can be null, but we'd prefer it to be an empty list in // that case...
// draw farout
// draw yOutliers
// minuend needs to be fast forwarded
// If null, don't draw line at all
//initalize xValues, yValues, and zValues arrays.
// Process outliers. Each outlier is either added to the appropriate // outlier list or a new outlier list is made
// If null, don't draw line => then delegate to parent
// calculate the highest volume in the dataset...
// draw the error bar for the y-interval
// draw the error bar for the x-interval
// transpose the dimensions, because the title is rotated
// include the interval if there is one
//domainGridlinePaint;
// no need to instantiate this class   
// handle item label drawing, now that we know all the bars have // been drawn...
// we didn't find the key
// update the crosshair point
// don't bother with parsing
// --- DEPRECATED CODE ----------------------------------------------------
// RectangleInsets is immutable => same reference in clone OK
//  Add chart to deletion list in session
//  Serve it up
//  Replace ".." with "" //  This is to prevent access to the rest of the file system
//  Set HTTP headers
// suppress compiler warning
// svgClass will be null so the function will return false
// determine the space required for the axis
// this includes the case where the underlying dataset is null
// get the lastest pixel
// first point is outside, so we update it against one of the // four sides then continue
// second point is outside, so we update it against one of the // four sides then continue
//reserve variables to store the coordinates of the resulting GradientPaint
// Red // Green // Blue
// ALWAYS null
// Red // Green // Blue. Now map computed colour to // nearest in Palette...
// RGB (+ optional Alpha which we leave // unchanged)
// <- this is the code that actually COPIES the pixels
"/*         * Buffered Images may have properties, but NEVER disclose them!         * Nevertheless, just in case someone implements getPropertyNames()         * one day...         */"
/* Ignore alpha-channel -> */
//get the coordinates of the shape that is to be filled
// substitute the filtered URL list
// all methods are static, no need to instantiate
// vertical pass
// substract the oldest pixel from the sum
//start point is upper left corner
/* (pix-buffer is large enough for all pixels of one row) */
//start point is lower left right corner --> diagonal gradient
// horizontal pass
// check that the column key is defined in the 2D structure
// consider these to be ordered after general objects
// this will include the case where the underlying dataset is null
// 1. check whether the row is now empty.
// but the row data requires a deep copy
//  Check the file exists
//int columnIndex = getColumnIndex(columnKey);
/* Placeholder */
// for the keys, a shallow copy should be fine because keys // should be immutable...
// no new methods required
// Map the nongrid data into the new regular grid
// does the series exist?
// Find min, max for the x and y axes
// fetch the value...
// update the data...
//step through all the values and add them to the hash
// store Number as Double
// scale by the inverse of distance^power
// if d is real small set the inverse to a large number // to avoid INF
// Determine the cell size
//remove distance of the sum
// the CategoryDataset interface expects a list of categories, but // we've stored them in an array...
//store data as Long
// remove all the series from the collection and notify listeners.
// set x to most recent value
//store index where new //column starts
// already know 'a' isn't null
// calculate constant values
// store y and z axes // as Doubles
//  Do not add key to dataset
// now try to instantiate this ;-)
// now do the work...
//  Add other category if applicable
//  Add key to dataset
// if the dataset implements DomainInfo, life is easier
/////////////////////////////////////////////////////////////////////////// // Private ///////////////////////////////////////////////////////////////////////////
// update the min value
// handle the standard case (plain CategoryDataset)
// create the temporary directory if it doesn't exist
/////////////////////////////////////////////////////////////////////////// // New methods from CombinationDataset ///////////////////////////////////////////////////////////////////////////
// handle special case of OHLCDataset
// handle special case of IntervalXYDataset
// if the dataset implements DomainInfo, life is easy
// work out the minimum value...
// minimum and maximum for each group...
// maps our series into our parent's
// add the series...
// more difficult case - evaluate later...
// Are we working with a time series.
// exact match on first item
// exact match
// delegate null check on dataset
// overridden to make public
// no crossing of x
// spanning match
// Might need to add, to free memory from any previous result sets
// no new methods added.
// prior to 1.0.14, we just fired a PropertyChange - so we need to // keep doing this
// not a value, can't use it (defaults to null)
// Remove any previous old data
// first line contains column keys
// first column contains the row key...
// remaining fields contain values
// suppress (value defaults to null)
// lower bounds are the same
// pretty sure this shouldn't ever happen
// first field is ignored, since // column 0 is for row keys
// fill the bins
/// First column is X data
/// Determine max and min values.
// Get all rows. // rows = new ArrayList();
// pass values to other constructor
// sum of x, x^2, x * y, y
// update the cached range values...
// update cached min and max values
// defer null argument checks
// intercept
// calculate the sum and count
// treat nulls the same as NaNs
// check for zero pivot element
// iterate over all data items and update mins and maxes
// update cached range values
// Tell the listeners a new table has arrived.
// make the change (if it's not a duplicate time period)...
// remove old items and notify if necessary
// we are at the last minute in the hour...
// won't get here...
// find the serial index of the period specified by 'latest'
// see comments about priority of // 10 in validateObject()
// getXxx() ftns can ignore the "series" argument: // Don't synchronize this!! Instead, synchronize the loop that calls it.
//rangeGridlinePaint;
// figure out if we need to iterate through all the y-values // to find the revised minY / maxY
// we are at the first hour in the day...
// if the hour is 0 - 23 then create an hour
// start is after last data item
// But if that series array already exists, just overwrite its contents //synchronized(this) //{
// we are at the last hour in the day...
// update the time series appropriately
// CASE 1 : Comparing to another Hour object // -----------------------------------------
// cached values used for interface DomainInfo:
// an arbitrary safe default value
// parse the string...
// work out the average for the earlier values...
// CASE 1 : Comparing to another Year object // -----------------------------------------
// default value;
// autoinit's to null.
// But if that series array already exists, just overwrite its contents
// create the year...
// remaining lines contain a row key and data values
// create an array holding the group indices for each series...
// if the initial averaging period is to be excluded, then // calculate the index of the // first data item to have an average calculated...
// Cached values used for interface RangeInfo: (note minValue pinned at 0) //   A single set of extrema covers the entire SeriesCollection
// Avoid IndexOutOfBoundsException:
/// Expand the following for all defined TimePeriods:
///  .. etc....
//{ // deep copy from values[], caller // can safely discard that array
// Methods for managing the FIFO's:
// handle special case of BoxAndWhiskerXYDataset
// a Long kept updated by advanceTime()
// else  [implicit here]
// no translation needed
// if the oldest data contained a maximum Y-value, invalidate the stored //   Y-max and Y-range data:
// Now advance "oldestAt", wrapping at end of the array
// index to select the "series"
// Update the domain limits: //(time is kept in msec)
// check whether the "valueHistory" array member exists; if not, // create them:
// find the Q and the integer following it (remove both from the // string)...
// the following code handles the line for the y-values...it's // all done by code in the super class
// Don't synchronize this!! // Instead, synchronize the loop that calls it.
// CASE 1 : Comparing to another Quarter object // --------------------------------------------
// NULL value -> insert point on base line // instead of 'step point'
// do nothing, so null is returned
// replace any / , or - with a space
// Update the array of TimePeriods:
// 1-ms test timeline using 5 included and 2 excluded segments. // // timeline start time = 0 //   | //   v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 .. // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+.. // |  |  |  |  |  |EE|EE|  |  |  |  |  |EE|EE|  |  |  |  |  |  |EE|EE|    <-- msTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+.. //  \_________  ________/            \_/ //            \/                      | //       segment group         segment size = 1 ms //
// CASE 1 : Comparing to another Day object // ----------------------------------------
// we need to work out if the previous year has 52 or 53 weeks...
// to be defensive, let's check that the source series does in fact // belong to this collection
// check if the new series name already exists for another series
// 1-ms test timeline (with a baseTimeline) using 2 included and 2 // excluded segments centered inside each base segment // // The ms2Timeline without a base would look like this: // //    timeline start time = 1 //      | //      v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|    <-- ms2Timeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //    \____  _____/            \_/ //         \/                   | //    segment group      segment size = 1 ms // // With the base timeline some originally included segments are now // removed (see "xx" below): // //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |EE|  |  |EE|EE|xx|xx|EE|EE|  |  |EE|EE|xx|xx|EE|EE|  |  |EE|    <-- ms2Timeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |  |  |  |  |EE|EE|EE|EE|  |  |  |  |EE|EE|EE|EE|  |  |  |  |    <-- ms2BaseTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //
// if it is not the series name, then we have no interest
// check arguments...delegated // fetch the series name...
// suppress
// CASE 1 : Comparing to another Week object // --------------------------------------------
// trim whitespace from either end of the string
//axisOffset;
// CASE 1 : Comparing to another Month object // --------------------------------------------
// all arrays equal length, // so ignore argument:
// --- DEPRECATED METHODS -------------------------------------------------
// now it is trickier to determine if the month or year is first
//  wipe the next (about to be used) set of data slots
// no attributes to read
//this.key = null;
//private Comparable key;
// we can't be sure of the order
// Remove all the series from the collection and notify listeners.
// check arguments...delegated
// need to configure the intervalDelegate to match the original
// add a new series
// false preserves the old behaviour // prior to introducing this flag
// everything is fine: autoWidth is on, and an autoIntervalWidth // was set.
// this.x is not allowed to be null...
// all series have the same number of items in // this dataset
// In version 0.9.12, in response to several developer requests, I changed // the 'data' attribute from 'private' to 'protected', so that others can // make subclasses that work directly with the underlying data structure.
// figure out if we need to iterate through all the y-values
// try a class that isn't a listener
// we basically ignore protocol. let someone report it...
// SSS FIXME: Is this correct?
// FIXME: I use a for block to implement END node because we need a proc which captures // its enclosing scope.   ForBlock now represents these node and should be renamed.
// SSS FIXME: 1. Is the ordering correct? (poll before next)
// We use a highly uncommon string to represent the paragraph delimiter (100% soln not worth it) 
// add a "self" recv here // TODO: is this right?
// TODO: // MRI behavior: Call "+" or "add", depending on the call. // But this leads to exceptions when Floats are added. See: // http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/17374 // return callCoerced(context, op, b, true); -- this is MRI behavior. // We'll use ours for now, thus providing an ability to add Floats.
// SSS FIXME: Is this correctly placed ... at the end of the loop iteration?
// TODO: Ruby reuses this logic for other "write" behavior by checking if it's an IO and calling write again
// SSS FIXME: Where does this go? // m.setLinePosition(arrayNode.getPosition());
// it would be nice (and logical!) if exponent form  // behaved like E/e, and decimal form behaved like f, // but no such luck. hence: 
// SSS FIXME: These should get normally compiled or initialized some other way ...  // SSS FIXME: Parent/super-type info is incorrect! // These are just placeholders for now .. this needs to be updated with *real* class objects later!
// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here. Confirm. JRUBY-415
// SSS FIXME: I could make IR_Loop a scope too ... semantically, it is a scope, but, functionally, not sure if this is required yet ...
// this covers the rare case of lower-case class names (and thus will // fail 99.999% of the time). fortunately, we'll only do this once per // package name. (and seriously, folks, look into best practices...)
// SSS FIXME: Should this be a string literal or a string? // Dummy class for the script
// TODO should this be deprecated ? (to be efficient, internals should deal with RubyHash directly)
// SSS FIXME: Does int suffice, or do we need long?
// modules are included with a shim class; we must find that shim to handle super() appropriately
// Reset value map if this instruction is the start/end of a basic block // // Right now, calls are considered hard boundaries for optimization and // information cannot be propagated across them! // // SSS FIXME: Rather than treat all calls with a broad brush, what we need // is to capture different attributes about a call : //   - uses closures //   - known call target //   - can modify scope, //   - etc. // // This information is probably already present in the AST Inspector
// TODO: Determine whether we should perhaps store non-singleton class // in the implementationClass
// SSS FIXME: Correct?  Where does closure arg come from?
/* FIXME: Consider fixing node_assign itself rather than single case*/
// SSS FIXME: Should I have a reference to the IR_loop that is being retried?
// temporary hack to handle non-Ruby values // will come up with better solution shortly
// Simplify the variables too -- to keep these variables in sync with what is actually used in the when clauses // This is not required for correctness reasons, but only for performance reasons.
// Must be called from main thread (it is currently, but this bothers me)
// CON FIXME: I don't know how to make case be an expression...does that // logic need to go here?
// FIXME: legal here? may want UnsupportedOperationException
// FIXME: This is an ugly hack to resolve JRUBY-1381; I'm not proud of it
// Something wrong we don't know the cwd... // TODO: Is this behavior really desirable? /mov
// TODO: no java stringity
// FIXME:  Total hack to get flash in Rails marshalling/unmarshalling in session ok...We need // to totally change marshalling to work with overridden core classes.
// TODO: this method is not present in MRI!
// FIXME: Ideally JavaObject instances should be marshallable, which means that // the JavaObject metaclass should have an appropriate allocator. JRUBY-414
// TODO: public only?
// FIXME: This should probably do some translation from Ruby priority levels to Java priority levels (until we have green threads)
// TODO: Consider a better way of synchronizing 
// using IOInputStream may not be the most performance way, but it's easy.
// FIXME: We should not be regenerating this over and over
// XXX: This check previously used callMethod("==") to check for equality between classes // when scanning the hierarchy. However the == check may be safe; we should only ever have // one instance bound to a given type/constant. If it's found to be unsafe, examine ways // to avoid the == call.
// TODO: why are we duplicating the constants here, and then in // File::Constants below? File::Constants is included in IO.
// A cloned method now belongs to a new class.  Set it. // TODO: Make DynamicMethod immutable
// TODO: These were missing, so we're not handling them elsewhere?
// TODO: cache?
// FIXME: wtf is this? Why would these use the class?
// TODO: Figure out how this can happen and possibly remove
// FIXME: I don't like this
// FIXME: these descriptions should probably be moved out, // to Constantine project which deals with all platform-dependent constants.
// FIXME this below is temporary, but its much safer for COW (it prevents not shared Strings with begin != 0) // this allows now e.g.: ByteList#set not to be begin aware
// TODO: what about n arg?
// FIXME: I think this chunk is equivalent to MRI id2name (and not our public method  // id2name).  Make into method if used more than once.  
// FIXME: This is probably not very efficient, since it loads all methods for each call
/* Hack in to replace usual readline with this */
// if we get here, we found a matching method, use it // TODO: choose narrowest method by continuing to search
// TODO: this is kinda gross
// FIXME: In order for Thread to play well with the standard 'new' behavior, // it must provide an allocator that can create empty object instances which // initialize then fills with appropriate data.
// these extra arrays are really unfortunate; split some of these paths out to eliminate?
// We clone dynamic scope because this will be a new instance of a block.  Any previously // captured instances of this block may still be around and we do not want to start // overwriting those values when we create a new one. // ENEBO: Once we make self, lastClass, and lastMethod immutable we can remove duplicate
// TODO: protected methods.  this is going to require a rework // of some of the mechanism.
// if not overloaded, we add a method that guesses at which signature to use // TODO: just adding first one right now...add in signature-guessing logic
// SSS FIXME: This should never get called for constant svalues
"/*         * TODO: This version is better than the hackish previous one. Windows         *       behavior needs to be defined though. I suppose this version         *       could be improved more too.         * TODO: /etc/passwd is also inadequate for MacOSX since it does not         *       use /etc/passwd for regular user accounts         */"
// FIXME: There's some code duplication here with RubyObject#inspect
// for visibility checking without requiring frame self // TODO: don't bother passing when fcall or vcall, and adjust callsite appropriately
// FIXME: figure out why we get null sometimes
// Hacky: Advance position to eat newline here....
// need to reexamine this
// FIXME: This is currently only here because of some problems with IOOutputStream writing to a "bare" runtime without a proper scope
// Workaround for JRUBY-4149
// using IOOutputStream may not be the most performance way, but it's easy.
// ignore...bean doesn't get registered // TODO: Why does that bother me?
/* ENEBO: Lots of optz in 1.9 parser here*/
// FIXME: move out of this class!
// IN FACT, we should probably raise an error, yes?
//TODO: ary_sort_check should be done here
// TODO: get rid of this (lax returns 0.0, strict will throw)
// bit risky if someone changes completor, but useful for method calls
// TODO: the rest of this...seeking to same position is unnecessary since we share a channel // but some of this may be needed?
// TODO: is this the right thing to do?
// FIXME: this probably belongs in a different package.
// FIXME: not very efficient
// This is GROSS, but Java API's aren't ISO 8601 compliant at all
// TODO: is this correct ?
/* Workaround for JRUBY-2326 (MRI does not enter this production for some reason)*/
// Create block for this iter node // FIXME: We shouldn't use the current scope if it's not actually from the same hierarchy of static scopes
/* SSS FIXME: Do we need to check if l is same as whatever popped? */
// SSS FIXME: Where is this set up?  How is this diff from ClassVarDeclNode??
// Fixme: Do we need the check or does Main.java not call this...they should consolidate 
// FIXME: This table will get moved into POSIX library so we can get all actual supported // signals.  This is a quick fix to support basic signals until that happens.
// FIXME: This worries me a bit, since it could allocate a lot with a large newLength
// TODO: This filtering is kind of gross...it would be nice to get some parser help here
// TODO: decompose getJavaPackageModule so we don't parse fullName
// FIXME: Get rid of laziness and handle restricted access elsewhere
// TODO: for now, we use a faithful // reimplementation of MRI's algorithm, // but should use UTF8Encoding facilities // from Joni, once it starts prefroming // UTF-8 content validation. 
// if we don't have opt args, start after args (they will be assigned later) // this is for crap like def foo(a = (b = true; 1)) which numbers b before a // FIXME: only starting after required args, since opt args may access others // and rest args conflicts with compileRoot using "0" to indicate [] signature.
// FIXME: Determine if a real allocator is needed here. Do people want to extend // JavaClass? Do we want them to do that? Can you Class.new(JavaClass)? Should // you be able to? // TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here, since we don't intend for people to monkey with // this type and it can't be marshalled. Confirm. JRUBY-415
// grrr, arghh, want to subclass sun.misc.FloatingDecimal, but can't, // so we must do all this (the next 70 lines of code), which has already // been done by FloatingDecimal.
// FIXME: do we really want 'declared' methods?  includes private/protected, and does _not_ // include superclass methods.  also, the getDeclared calls may throw SecurityException if // we're running under a restrictive security policy.
// small hack to save a cast later on
// This is perhaps innefficient timewise?  Optimal spacewise
// TODO: confirm expected args are IRubyObject (or similar)
// There's not a compelling reason to keep JavaClass instances in a weak map // (any proxies created are [were] kept in a non-weak map, so in most cases they will // stick around anyway), and some good reasons not to (JavaClass creation is // expensive, for one; many lookups are performed when passing parameters to/from // methods; etc.). // TODO: faster custom concurrent map
// TODO: check for Java reserved names and raise exception if encountered
// FIXME: JRUBY-3188 ends up with condition returning null...quick fix until I can dig into it
// Workaround for a bug in Sun's JDK 1.5.x, see // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6303753
// FIXME weakref.rb also does caller(2) here for the backtrace
// FIXME: Remove this from grammars.
// TODO: It's perhaps just a coincidence that all the channels for // which we should raise are instanceof SelectableChannel, since // stdio is not...so this bothers me slightly. -CON
// FIXME: Not sure what the semantics of transfer are //cFiber.defineFastMethod("transfer", cb.getFastOptMethod("transfer"));
// FIXME: This is pretty gross; we should have a cleaner initialization // that doesn't depend on package-visible fields and ideally is atomic, // probably using an immutable structure we replace all at once. // lazy, null when no groups defined
// This is a dummy scope; we should find a way to make that more explicit
/* FIXME: Resolve what the hell is going on*/
"/** rb_obj_id     *     * Return the internal id of an object.     *     * FIXME: Should this be renamed to match its ruby name?     */"
// again, shouldn't happen. TODO: might want to throw exception instead.
// FIXME: Maybe not best place, but move it to a good home
// TODO: NOT_ALLOCATABLE_ALLOCATOR may be ok here, but it's unclear how Structs // work with marshalling. Confirm behavior and ensure we're doing this correctly. JRUBY-415
//TODO: Should next and return also catch here?
// We always prepend an org.jruby.proxy package to the beginning // because java and javax packages are protected and signed // jars prevent us generating new classes with those package // names. See JRUBY-2439.
// TODO: we should be able to optimize this quite a bit post-1.0.  JavaClass already // has all the methods organized by method name; the next version (supporting protected // methods/fields) will have them organized even further. So collectMethods here can // just lookup the overridden methods in the JavaClass map, should be much faster.
// index for the item // this could probably be more efficient, bailing out on assigning args past the end?
// TODO: make more efficient by not creating IRubyArray[]
"/** rb_mod_remove_cvar     *     * FIXME: any good reason to have two identical methods? (same as remove_class_variable)     */"
// from DUP_SETUP // rb_copy_generic_ivar from DUP_SETUP here ...unlikely..
// If it's a single-arg when but contains an array, we know it's a real literal array // FIXME: This is a gross way to figure it out; parser help similar to yield argument passing (expandArguments) would be better
// TODO: Only setAccessible to account for pattern found by // accessing constants included from a non-public interface. // (aka java.util.zip.ZipConstants being implemented by many // classes)
// not intended to be called directly by users (private) // OLD TODO from Ruby code: // This should be implemented in JavaClass.java, where we can // check for reserved Ruby names, conflicting methods, etc.
// FIXME: Don't allow multiple threads to do this at once
// TODO: Bleeding runtime into parser.  Arity may be should be in parser (to keep bleeding oneway)
"/** rb_ary_push_m     * FIXME: Whis is this named ""push_m""?     */"
// TODO: This probably isn't the best hack, but it works until we can have different // root frame setup for 1.9 easily.
// TODO: At least ParserSupport.attrset passes argsNode as null.  ImplicitNil is wrong magic for  // setupArgs since it will IRubyObject[] { nil }.  So we need to figure out a nice fast // null pattern for setupArgs. // assert argsNode != null : "receiverNode is not null";
// HACK: in order to have stdout/err act like ttys and flush always, // we set anything assigned to stdout/stderr to sync
// TODO: People extending GzipWriter/reader will break.  Find better way here.
// FIXME: set up a call configuration for this
"/**     * Process streams get Channel.newChannel()ed into FileChannel but are not actually     * seekable. So instead of just the isSeekable check doing instanceof FileChannel,     * we must also add this boolean to check, which we set to false when it's known     * that the incoming channel is from a process.     *      * FIXME: This is gross, and it's NIO's fault for not providing a nice way to     * tell if a channel is ""really"" seekable.     */"
// FIXME: Somehow I'd feel better if this could get the appropriate var index from the ArgumentNode
// FIXME: Can get optimized for IEqlNode
// TODO: rounding mode should not be hard-coded. See #mode.
// FIXME moved this here to get what's obviously a utility method out of IRubyObject. // perhaps security methods should find their own centralized home at some point.
// FIXME: If NativeException is expected to be used from Ruby code, it should provide // a real allocator to be used. Otherwise Class.new will fail, as will marshalling. JRUBY-415
// Object#to_a is obsolete.  We match Ruby's hack until to_a goes away.  Then we can  // remove this hack too.
// TODO: callback for value would be more efficient, but unlikely to be a big cost (constants are rarely assigned)
// FIXME: this should go somewhere more generic -- maybe IdUtil
// SSS FIXME: Move this code to some utils area .. or probably there is already a method for this in some jruby utils class // Holy cow!  Just to append two darned arrays!
// TODO: set our metaclass to target's class (i.e. scary!)
// add 'new' with full signature, so it's guaranteed to be directly accessible // TODO: no need for this to be a full, formal JVM signature
// context is null, wipe out the SoftReference (this could be done with a reference queue)
// TODO: remove
// FIXME: Big fat hack here, because scope names are expected to be interned strings by the parser
// TODO: This is actually now returning the scope of whoever called Method#to_proc // which is obviously wrong; but there's no scope to provide for many methods. // It fixes JRUBY-2237, but needs a better solution.
"/** * * @author headius * FIXME convert to enum ? */"
// The following three methods must be defined fast, since they expect to modify the current frame // (i.e. they expect no frame will be allocated for them). JRUBY-1185.
// TODO: NOT_ALLOCATABLE_ALLOCATOR is probably ok here, since we don't intend for people to monkey with // this type and it can't be marshalled. Confirm. JRUBY-415
// SSS FIXME: Can this return anything other than nil?
// XXX: const lookup can trigger const_missing; is that enough to warrant it always being executed?
// TODO: Should frozen error have its own distinct class?  If not should more share?
// TODO: Only used by interface implementation; eliminate it
// FIXME: null check is removable once we figure out how to assign to unset named block args
// For JRUBY-2759, when MET choose CET timezone to work around Joda
// FIXME: This is gross. Don't do this.
// FIXME: I think we need these pushed somewhere?
// SSS FIXME: Deprecated!  Going forward, all instructions should come from the CFG
// TODO: should probably apply the null object pattern for a // non-allowed class, rather than null
// Yow...this is still ugly
// add method with full signature, so it's guaranteed to be directly accessible // TODO: no need for this to be a full, formal JVM signature
"/** * FIXME: This version is faster than the previous, but both suffer from a * crucial flaw: It is impossible to create an ObjectSpace with an iterator * that doesn't either: a. hold on to objects that might otherwise be collected * or b. have no way to guarantee that a call to hasNext() will be correct or * that a subsequent call to next() will produce an object. For our purposes, * for now, this may be acceptable. */"
// FIXME: Clearing read buffer here...is this appropriate?
// TODO: specifying soft refs, may want to compare memory consumption, // behavior with weak refs (specify WEAK in place of SOFT below)
/* FIXME: lose syntactical elements here (and others like this)*/
// ENEBO: Totally weird naming (in MRI is not allocated and is a local var name)
// FIXME: This doesn't actually support anything but String
// up to ten, stuff into tmp locals, load in reverse order, and assign // FIXME: There's probably a slightly smarter way, but is it important?
// XXX: do something?
// TODO: Only setAccessible to account for pattern found by // accessing constants included from a non-public interface. // (aka java.util.zip.ZipConstants being implemented by many // classes) // TODO: not sure we need this at all, since we only expose // public fields. //field.setAccessible(true);
// FIXME we want to eliminate these type casts when possible
// HACK: force clinit to be created
// FIXME: If true array is common enough we should pre-allocate and stick somewhere
// optional args, so we have IRubyObject[] // TODO: confirm
// TODO: This is almost RubyModule#instance_methods on the metaClass.  Perhaps refactor.
// FIXME: Added this because marshal_spec seemed to reconstitute objects without calling dataWrapStruct // this resulted in object being null after unmarshalling...
// TODO: factor this chunk as in MRI/YARV GETASTER
// exit monitor before making call // FIXME: this not being in a finally is a little worrisome
// self = args[0] // SSS FIXME: Verify that this is correct
// This is for JRUBY-2988, since after a suspend the terminal seems // to need to be reinitialized. Since we can't easily detect suspension, // initialize after every readline. Probably not fast, but this is for // interactive terminals anyway...so who cares?
// TODO: do above but not below for additional newline nodes
// SSS FIXME: Receiver -- this is the class meta object basically? // Operand receiver = build(defsNode.getReceiverNode(), s);
// FIXME This whole thing could probably be implemented as a module and // mixed into appropriate classes, especially if it uses either // IOInput/OutputStream or is smart about the kind of IO-like object // it's being used against.
// FIXME: bit of a kludge here (non-interface classes assigned to both // class and module fields). simplifies proxy extender code, will go away // when JI is overhauled (and proxy extenders are deprecated).
// FIXME: what should these really be? Numeric?       assert x instanceof RubyComplex && y instanceof RubyComplex;
// we're depending on the side effect of the load, which loads the class but does not turn it into a script // I don't like it, but until we restructure the code a bit more, we'll need to quietly let it by here.
// FIXME: we should also support orgs that use capitalized package // names (including, embarrassingly, the one I work for), but this // should be enabled by a system property, as the expected default // behavior for an upper-case value should be (and is) to treat it // as a class name, and raise an exception if it's not found 
// TODO: This version differs from ioctl by checking whether fcntl exists // and raising notimplemented if it doesn't; perhaps no difference for us?
// FIXME: This is temporary since the variable compilers assume we want // args already on stack for assignment. We just pop and continue with // 1.9 args logic.
// TODO: eliminate?
// TODO: handle writing into original buffer better
// This is a fairly specific hack for empty string, but it does the job
// XXX This constructor is a hack to implement the __END__ syntax. //     Converting a reader back into an InputStream doesn't generally work.
// method has more than 500 lines; we'll need to split it // and therefore need to use a heap-based scope
// The implementations of these are all bonus (see TODO above)  I was going // to throw an error from these, but it appears to be the wrong place to // do it.
// entry exists, proxy doesn't match. replace. // this could happen if old proxy was gc'ed // TODO: raise exception if stored proxy is non-null? (not gc'ed)
// TODO: better algorithm to set precision needed
"/** * SSS FIXME: Used anywhere?  I don't see calls to this anywhere    public Operand buildDAsgnAssignment(Node node, IR_Scope s) {        DAsgnNode dasgnNode = (DAsgnNode) node;        s.getVariableCompiler().assignLocalVariable(dasgnNode.getIndex(), dasgnNode.getDepth());    }**/"
// TODO: Make this more intelligible value
// TODO: Split this into two sub-classes so that name and constNode can be specified seperately.
// Not sure how well this works, but it works much better than // just currentTimeMillis by itself.
// FIXME: This is copied code from RubyArray.  Both RE, Struct, and Array should share one impl // This is also hacky since I construct ruby objects to access ruby arrays through aref instead // of something lower.
// FIXME: No, I don't like it.
// arguments compilers always create IRubyObject[], but we want to use RubyArray.concat here; // FIXME: as a result, this is NOT efficient, since it creates and then later unwraps an array
// SSS FIXME: What is the difference between ClassVarAsgnNode & ClassVarDeclNode
// FIXME: set up a CallConfiguration for this
// TODO: reads/writes from frame // TODO: information on scoping // TODO: visibility?
// FIXME: This is almost entirely duplicated from Main.java
// we might need to perform a DST correction
// FIXME: How much more obtuse can this be? // Heredoc already parsed this and saved string...Do not parse..just return
// this needs to be split, since conditional calling #inherited doesn't fit standard ruby semantics
// XXX: Again, screwy evaling under previous frame's scope
// SSS FIXME: Maybe this is not really a concern after all ... // Nesting level of this scope in the lexical nesting of scopes in the current file -- this is not to be confused // with semantic nesting of scopes across files. // // Consider this code in a file f // class M1::M2::M3::C  //   ... // end // // So, C is at lexical nesting level of 1 (the file script is at 0) in the file 'f' // Semantically it is at level 3 (M1, M2, M3 are at 0,1,2). // // This is primarily used to ensure that variable names don't clash! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //    private int _lexicalNestingLevel;
// actual type does not exactly match method return type, re-get converter // FIXME: when the only autoconversions are primitives, this won't be needed
// FIXME we should probably still be dyncalling 'write' here
/* FIXME: finalizer should be dupped here */
// don't bother to check if final method, it won't // be there (not generated, can't be!)
// TODO: Generalize this type-checking code into IRubyObject helper.
// FIXME: needs to be rethought
// ruby constants for strings (should this be moved somewhere else?)
// Let's only generate methods for those the user may actually  // intend to override.  That includes any defined in the current // class, and any ancestors that are also JavaProxyClasses (but none // from any other ancestor classes). Methods defined in mixins will // be considered intentionally overridden, except those from Kernel, // Java, and JavaProxyMethods, as well as Enumerable.  // TODO: may want to exclude other common mixins?
// FIXME: I don't like the null checks here
// invoke callMethodMissing method directly // TODO: this could be further optimized, since some DSLs hit method_missing pretty hard...
// TODO this is really ineffient, and potentially a problem everytime anyone require's something. // we should try to make LoadPath a special array object.
// FIXME: Why was this using a FullFunctionCallbackMethod before that did callSuper?
// if body is a rescue node, inspect its pieces separately to avoid it disabling all optz // TODO: this is gross.
"/*     * Fixme:  This does not have exact same semantics as RubyArray.join, but they     * probably could be consolidated (perhaps as join(args[], sep, doChomp)).     */"
// lame generics issues: making Segment class static and manually // inserting cache reference to work around various problems generically // referencing methods/vars across classes.
// FIXME:  This determine module is in a strange location and should somehow be in block
// TODO? I think this ends up propagating from normal Java exceptions // sys_fail(openFile.getPath())
// this seems unlikely to happen unless it's a totally bogus fileno // ...so do we even need to bother trying to create one?
// TODO: turn off the negative? will return -0.0 in lax mode
// TODO: list.subList(from, to).clear() is supposed to clear the sublist from the list. // How can we support this operation?
// see note below re: 2-field kludge
// We're not setting the provider or anything, but it seems that BouncyCastle does some internal things in its // provider's constructor which require it to be executed in a secure context. // Ideally this hack should be removed. See JRUBY-3919 and this BC bug: //   http://www.bouncycastle.org/jira/browse/BJA-227
// this is a rather ugly hack, but similar to MRI. See hash.c:ruby_setenv and similar in MRI // we search all keys for a case-insensitive match, and use that
// TODO: WRONG - get interfaces from class
// TODO: Make callCoerced work in block context...then fix downto, step, and upto.
// FIXME: the code below is a copy of RubyIO.puts, // and we should avoid copy-paste.
// install invokedynamic bootstrapper // TODO need to abstract this setup behind another compiler interface
// FIXME: inefficient; constructing a bignum just for dumping?
// TODO: Ruby does not seem to care about invalid numeric mode values // I am not sure if ruby overflows here also...
// FIXME: Obvious issue that not all platforms can display all attributes.  Ugly hacks. // Using generic posix library makes pushing inspect behavior into specific system impls // rather painful.
// rb_copy_generic_ivar from DUP_SETUP here ...unlikely..
// FIXME: this really ought to be in clinit, but it doesn't matter much
// using IOChannel may not be the most performant way, but it's easy.
// TODO this should entry into error handling somewhere
// TODO: make this do specific-arity calling
// SSS FIXME: What happens to the add class in this case??
// SSS FIXME: Are we guaranteed that we splats dont head to multiple-assignment nodes!  i.e. |*(a,b)|?
// TODO: catch exception if constant is already set by other // thread
// TODO: Implement tty? and isatty.  We have no real capability to // determine this from java, but if we could set tty status, then // we could invoke jruby differently to allow stdin to return true // on this.  This would allow things like cgi.rb to work properly.
// FIXME: We should be getting this from the runtime rather than assume none? //return runtime.getEncodingService().getEncoding(runtime.getDefaultExternalEncoding());
// end hack
// TODO: This isn't an exact port of MRI's pipe behavior, so revisit
// TODO: protected methods.  this is going to require a rework of some of the mechanism.
// FIXME: what should this really be?       assert x instanceof RubyComplex;
// FIXME: This isn't right for within ensured/rescued code
// SSS FIXME: Token can be final for a method -- implying that the token is only for this particular implementation of the method // But, if the mehod is modified, we create a new method object which in turn gets a new token.  What makes sense??  Intuitively, // it seems the first one ... but let us see ... // Current code version token for this method -- can change during execution as methods get redefined!
// TODO: It would be nice to throw a better error for this
// set up a field for the CacheEntry // TODO: make this an array so it's not as much class metadata; similar to AbstractScript stuff
// TODO: newTypeError does not offer enough for ruby error string...
// SSS FIXME: I added this in.  Is this correct?
// upper-case package name // TODO: top-level upper-case package was supported in the previous (Ruby-based) // implementation, so leaving as is.  see note at #getProxyOrPackageUnderPackage // re: future approach below the top-level.
// TODO: wire into new exception handling mechanism
// TODO: This is also defined in the MetaClass too...Consolidate somewhere.
// FIXME: ConstDecl could be two seperate classes (or done differently since constNode and name // never exist at the same time.
// TODO: number formatting here, MRI uses "%-.10g", 1.4 API is a must?
// TODO: need to get this back into the method signature...now is too late...
// super calls from proxies must use reflected method // FIXME: possible to make handles do the superclass call?
// TODO: better error handling
// SSS FIXME: Should this be Operand or CompoundString? // Can it happen that symbols are built out of other than compound strings?   // Or can it happen during optimizations that this becomes a generic operand?
// FIXME: We should really not be creating the dynamic scope for the root // of the AST before parsing.  This makes us end up needing to readjust // this dynamic scope coming out of parse (and for local static scopes it // will always happen because of $~ and $_). // FIXME: Because we end up adjusting this after-the-fact, we can't use // any of the specific-size scopes.
// TODO: not sure that we should skip calling join() altogether. // Thread.join() has some implications for Java Memory Model, etc.
// hack to get right style for input
// If variables were added then we may need to grow the dynamic scope to match the static // one. // FIXME: Make this so we only need to check this for blockScope != null.  We cannot // currently since we create the DynamicScope for a LocalStaticScope before parse begins. // Refactoring should make this fixable.
// SSS FIXME: This method (at least in the context of multiple assignment) is a little weird. // It calls regular to_ary on the object.  But, if it encounters a method_missing, the value // is inserted into an 1-element array! // try "a,b,c = 1" first; then define Fixnum.to_ary method and try it again. // Ex: http://gist.github.com/163551
// FIXME: potentially could just use ByteList here?
// ignore; job was cancelled // FIXME: Is this ok?
// regular division with some default precision // TODO: proper algorithm to set the precision
// TODO: exec should replace the current process. // This could be possible with JNA. 
// Sometimes the value can be retrieved at "compile time".  If we succeed, nothing like it!   // We might not .. for the following reasons: // 1. The constant is missing, // 2. The reference is a forward-reference, // 3. The constant's value is only known at run-time on first-access (but, this is runtime, isn't it??) // 4. Our compiler isn't able to right away infer that this is a constant. // // SSS FIXME: // 1. The operand can be a literal array, range, or hash -- hence Operand //    because Array, Range, and Hash derive from Operand and not Constant ... //    Is there a way to fix this impedance mismatch? // 2. It should be possible to handle the forward-reference case by creating a new //    ForwardReference operand and then inform the scope of the forward reference //    which the scope can fix up when the reference gets defined.  At code-gen time, //    if the reference is unresolved, when a value is retrieved for the forward-ref //    and we get a null, we can throw a ConstMissing exception!  Not sure! //
// FIXME: NOT_ALLOCATABLE_ALLOCATOR is probably not right here, since we might // eventually want JavaArray to be marshallable. JRUBY-414
// TODO: This is probably BAD...
// FIXME: do we really want 'declared' methods?  includes private/protected, and does _not_ // include superclass methods
// FIXME: shouldn't need @__java_ovrd_methods, just query locally defined methods.
// TODO: call config with scope but no frame
// TODO: Ruby truncates string to specific size here, but our bytelist should handle this already?
// TODO: CLONE_SETUP here
// TODO: must override in RubyModule to pick up constants
// TODO: non-strict option
// TODO: adjust length so it won't fall in the middle  // of a multi-byte character. MRI's sprintf.c uses tables // in a modified version of regex.c, which assume some // particular  encoding for a given installation/application. // (See regex.c#re_mbcinit in ruby-1.8.5-p12)  // // This is only an issue if the user specifies a precision // that causes the string to be truncated. The same issue // would arise taking a substring of a ByteList-backed RubyString.
// FIXME: \r logic needed
// TODO: note lack of command.com support for Win 9x...
// TODO: no need to calculate every time.
// FIXME: create AttrReaderMethod, AttrWriterMethod, for faster attr access
// TODO: 3 times calculate the same value below
// TODO: opt for 2 and 3 ?
// FIXME: optimize for cases where we have no false branch
// FIXME: don't use RubyIO for this
// FIXME: after jump is not in here.  Will if ever be? //Label afterJmp = new Label();
// TODO: missing additional logic for dealing with conflicting protected fields.
// TODO: rescan code range ?
//TODO deal with UNC names
// TODO: pass this in?
// FIXME: missing arity check
// TODO: warn "tried to create Proc object without a block"
// TODO: make threadsafe
// TODO: port exact behavior from MRI, and move most locking logic into ChannelDescriptor // TODO: for all LOCK_NB cases, return false if they would block
// TODO: do something here?
// TODO: pipe handler to be reopened with path and "w" mode
// TODO: check the return value here
// FIXME: When we get JNA3 we need to properly write this to errno.
// TODO: other reserved names?
// TODO: better detection when path is absolute or not. // If the path isn't absolute, then prepend the current working // directory to the path.
// TODO: deal with varargs
// TODO: Store BEGIN and END information into this node
// TODO: ruby locks the string here
// TODO: put these nil guards into tree (bigger than I want to do right now)
// FIXME: Should we make this work with platform's locale, // or continue hardcoding US?
// FIXME: Make bodyNode non-null in parser
// FIXME: Pass block down?
// TODO: add trace call?
// TODO: call ruby method
// TODO: build arg list based on number of args, optionals, etc
// TODO: check for ascii string
// SSS FIXME: Traverse up the scope hierarchy to find the constant as long as the parent is a static scope
/* xxx shouldn't check if valid option variable */
// SSS FIXME: Should I be returning the operand constructed here?
/* FIXME: arg_concat missing for opt_call_args*/
// TODO: Add IR instructions for checking method arity! // s.getVariableCompiler().checkMethodArity(required, opt, rest);
// TODO: Add safety check for taintedness
// FIXME: Ruby 1.9 post args code needs to come here
// TODO: Make sure all appropriate open flags are added to this check.
// SSS: FIXME: Somewhere here, we need to record information the type of this operand as String
// XXX: Check if it's appropriate type?
// FIXME: Translate this call below! // s.unwrapPassedBlock();
//subList.clear(); // Sublist is supposed to share same backing store as list...TODO in RubyArray. //assertTrue(list.size() == 1);
// SSS FIXME: We need to build debug information tracking into the IR in some fashion // So, these methods below would have to have equivalents in IR_Scope implementations.
// FIX replace type() == ... with isInstanceOf(...)
// SSS FIXME: Incomplete!
// SSS FIXME: Pick one of bytelist or string, or add internal conversion methods to convert to the default representation
// TODO: check if too many open files, GC and try again
// SSS FIXME: Cannot optimize this without assuming that Range.to_ary method has not redefined. // So for now, return null!
// TODO: This and recacheRespondsTo needed to be synchronized for JRUBY-3466, // but this degraded performance nearly 2x. It's still faster than MRI, but // a reanalysis of this code may show a faster way to ensure we're caching // safely.
// SSS FIXME: To be done
/* FIXME: arg_concat logic missing for opt_call_args*/
//TODO: implement, won't do this now
// FIXME: Need to detect magic_comment in 1.9 here for encoding
/* FIXME: We may be intern'ing more than once.*/
// TODO: validate port as numeric
// TODO same zero-length checks as file above
// TODO: this code should really check if a Ruby equals method is implemented or not.
// TODO: Ruby unlocks the string here
// if not already defined, we add a 'new' that guesses at which signature to use // TODO: just adding first one right now...add in signature-guessing logic
// FIXME: Make thread pool threads daemons if necessary
// filter out any Java primitive names // TODO: should check against all Java reserved names here, not just primitives
// TODO: we can probably release our references to the constantFields // array and static/instance callback hashes at this point. 
// Do not clone cached methods // FIXME: MRI copies all methods here
// TODO: check safe, taint on incoming string
/* TODO: MRI is just a when node.  We need this extra logic for IDE consumers (null in casenode statement should be implicit nil)*/
// TODO: Formalize conversion mechanisms between Java and Ruby
//FIXME: When we get JNA3 we need to properly write this to errno.
// TODO: turn off readable? am I reading this right? // This only seems to be used while duping below, since modes gets // reset to actual modes afterward //fptr->mode &= (m & FMODE_READABLE) ? ~FMODE_READABLE : ~FMODE_WRITABLE;
// TODO: Someday, enable.
// Bunch of methods still not implemented
// TODO: make it cross runtime safe by COW or eager copy
// TODO: don't calculate the same value 3 times
// TODO: notify threads waiting on descriptors/IO? probably not...
// FIXME: This needs to happen for lambdas //            args.checkArgCount(runtime, parameters.length);
// FIXME: add text mode to mode flags
// TODO: Something about pipe buffer length here
// TODO: MRI also can hadle Bignum here
// TODO: handle errors in buffered write by retrying until finished or file is closed
// TODO: this isn't handling multibyte yet
// TODO: SafeStringValue here
// TODO: This should be something else like a tCHAR
// TODO: Ruby re-checks that the buffer string hasn't been modified
// ...and shift the result back to the left (multiply by 10**(abs(scale)))
// exceptionNext target is for a next that doesn't push a new value, like this one
// static methods only
// prepare to call class definition method
// inside a loop, break out of it // go to end of loop, leaving break value on stack
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();
// ignore // switch
//switch
// if element count is less than 6, use helper methods
// TODO: Ruby logic is somewhat more complicated here, see comments after
// return last value from execution
// rb_enc_mbclen
// reverse the entire area of the array selected if it's reversed.
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.
// this is the order in which MRI does these two tests
// // Copy out any buffered bytes //
// restore the original exception
// generate variable writers initialization code
// this is the order in which MRI does these tests
//if the length is not a multiple of 8 //we need to pad the last byte
//System.err.println(" calculateLength()/str=" + str);
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.
// basically just forcing a TypeError here to match MRI
// Bind 'normal' parameter values to the local scope for this method.
// Args
// CON: popen is a case where I think we should just always shell out.
// end of variable scope
//  '_' in number just ignored
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
// check arity in the variable-arity version
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.
// grab nil for local variables
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.
// no extra args for rest
// thread context, receiver and original args
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.
// we append an index to ensure two identical method names will not conflict
// element set
// we have a body, do a full-on method
// close without removing from finalizers
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.
// otherwise decrement and possibly close as normal
// last index (+1) accessed by next() // last index (+1) accessed by get()
// isFoo() => foo, isFoo(*) => foo(*)
// logEvery n methods based on configuration
// Get the value from the map via the key
// finally, grab the script
// only whitespace allowed after value for strict
// done processing args
// rest of the argument array!
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)
//new Exception().printStackTrace();
// "head" must have no non-trivial assigns (array groupings, basically)
// truncate can't lengthen files, so we save position, seek/write, and go back
// class could not be found nor generated; give up on JIT and bail out
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
// sizes must match
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 
// if we get here, no optz cases work; fall back on unoptz.
// super uses current block if none given
// next jump
// Test that requiring a normal Java class raises an error (JRUBY-3214
// check args first, since body inspection can depend on args
// Without a flush Ant will miss some of our output
// intDigits isn't used here, but if it were, it would be 1
// create the closure class and instantiate it
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...
// no-arg constructor using static references to Ruby and RubyClass
// create the default thread group
// there should only be one more thread in thread group than before we started
// skip '-' in bytes, will add where appropriate
// perform the dispatch
// 'd' and 'i' are the same
// keep cr ?
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.
// dup it since we need to return appropriately if it's false
// Ruby uses Qnil here, we use "dummy" because we need a class
// if root of method is rescue, compile as light rescue
// gotta have at least a zero...
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);
// 'u' with space or plus flags is same as 'd'
// load null block
// only supports simple parallel assignment of up to 4 values to the same number of assignees
// switch // for // no exponent, so drop through for calculation
// This method has JITed already or has been abandoned. Bail out.
// we have read ahead, and need to back up
// If a line is followed by a blank line put // it back.
// Reuse trailing consecutive sequence at same slot
// send it along as arity-specific, we don't need the array
// classes are directly in the hierarchy, so no special logic is necessary for implementer
// create method for toplevel of script
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.
// [recv]
// Has the method that is calling super received a block argument
// ARGF, $< object
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).
// condition is always true, just compile it and not body
// Ruby ignores empty syswrites
/* $/: input record separator */
// Ruby's designation for some platforms, minus version numbers in some cases
// try optz version
// line 1615
// if the environment variables can't be obtained, define an empty ENV
// line 1982
// after defn of $stderr as the call may produce warnings
// For Sockets, only write as much as will fit.
// it's safe since adler.update doesn't modify the array
//RedoNode redoNode = (RedoNode)node;
// too big for us
// // INSTANCE VARIABLE METHODS //
// assign to appropriate variable
// Skip all whitespace in pack format string
// head must not be null and there must be no "args" (like *arg)
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it
// fall back on env entry for USER
// compile into array
// index for the item
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places
// call getpwent to fail early if unsupported
// we force argParamCount to 1 since we always know we'll have [] args
// perform assignment for the next node
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 
/* intDigits = 1; */
// line 329
// compile first node only
// also create the JavaProxy* classes
// drop through for non-strict digits
// inside a loop, jump to conditional
// if root of method is rescue, compile as a light rescue
// do nothing, this iteration restarts
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.
// always false or nil
// if we're not the "argument scope" for zsuper, try our parent
// load args[0] which will be the IRubyObject representing block args
"/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */"
// line 1565
// compile condition as non-expr and just compile "then" body
// MUST NOT be used across threads
// try to read grent to fail fast
// line 818
// MRI behavior
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler
//[RubyClass] //[]
/* compstmt position includes both parens around it*/
// not actually called anywhere (all known uses call the fast version)
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method
//reopen
// long, big-endian
//System.err.println(" stringToLong/converted c=" + c);
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.
// ARGF methods
// do nothing, allow loop to redo
//System.err.println(" stringToLong/reading c=" + data[s]);
// even shift.. // ..floors to 62 or 63 bit BigInteger
// need the array, use unoptz version
// happens with native exceptions, should not filter those out
// line 423
// ignore leading zeroes // switch
// inspect body and args
// Next v                                        // g = 1 - 2*x*v
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]
// bouncy castle doesn't support algorithm
// can't do it
"/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */"
// line 1609
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.
// colon3, assign in Object
// synthetic methods always have zero arg parameters
// last node, either !instanceof WhenNode or null, is the else
// we are presumably running a precompiled class; load directly
// if __send__ with a literal symbol, compile it as a direct fcall
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
// define ARGV and $* for this runtime
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted
// first try our custom-generated Unsafe
// aggregate when nodes into a list, unfortunately, this is no
// line 1362
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write
// "assignment" means the value is already on the stack
// Paths which end in "/" or "\\" must be stripped off.
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.
// if the read buffer is ahead, back up
// deal with length/width
// switch // for // no more data, OK for strict to go calc
// next entry to return // current slot // current entry
// add setPosition impl, which stores filename as constant to speed updates
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 
// Next x                                        // e = d - x^2
// iterate over remainder of buffer until we find a match
// first digit is always printed
// three args, no block; load NULL_BLOCK
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.
// Now, for all variables used by 'i' mark them live before 'i'
// these are only needed if we have a non-noop call config
// Because Regexp#=== sets backref, we have to make this backref-aware
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.
// ok, we have fast paths
// // Copy what is in the buffer, if there is some buffered data //
// if more than 4 vars, get values array too
// set to default thread group
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible
// in this mode, '.' is always printed
// line 1669
// 4 -> e+nn / e-nn
// let RescuedBlock continue
// The method also needs a scope, do both
// A 'next' is like a local return from the block, ending this call or yield.
// build first node (and ignore its result) and then second node
// We're doing normal framed compilation or the method needs a frame
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch
// line 1136
// long, slow way causes disabling
// silence
// precision for G/g includes integer digits
// Make a nil node if no body.  Notice this is not part of AST.
// 5 -> e+nnn / e-nnn
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */
// ignore this; select() will set the correct mode when it is finished
// Execute rescue block
// line 1158
// If no exception is thrown execute else block
// load all arguments straight through
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)
// clear exception when handled or retried
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface
// What static scoping relationship exists when it comes into being.
// The following constants capture pre-known static call sites -- used to implement ruby internals
// For 'foo'
// method handle, arg receive, return value, and  call instructions
// just rethrow
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived
/* Tempering */
// read
// normalize the value
// s/b true, since intLength > 0
/*arg2*/
// ok, now it gets expensive...
// // construct the proxy method //
// switch // will use this if we have to go back the slow way
// putting a bit back, so we're not at EOF anymore
//yyLen 496
// ?S  | boolean | True if file1 exists and is a socket
// save entering the try if there's nothing to ensure
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //
// EQ == 0 (i.e. false)   //[C]
// then try Sun's Unsafe
// '.' is printed
// value equality
// not saving DFS instance, as it will only be used once (at most) per call
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
// // Copy any buffered data (including ungetc byte) //
//yyDgoto 136
// // Need to clamp source (buffer) size to avoid overrun //
// digits array shifted, update all
// line 1081
// all precision numebers printed
// any BigInteger is bigger than Fixnum and we don't have FIXABLE
// now used as an interpreter event
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
// Store each line into this list if not null.
/* $>: default output handle */
// only arrays that are "lightweight" are being used as args arrays
"/*  ================     *  Instance Methods     *  ================      */"
// explode array, it's an internal "args" array
// range_each_func(range, step_i, b, e, args);
// decimal form, like (but not *just* like!) 'f'
// check if it's an immediate, and don't outline
// now some data...
//                    // check arity //                    checkArity(mv, scope);
// No actual test, so do 'when' if when expression is not nil
// found a match above, check if remaining separator characters match, appending as we go
// ignore compiler pragmas
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //
// Iterate over the RubyHash keySet, simultaneously iterating over the values()
//assert !(value instanceof RubyArray)  : "Not an array";
// else leave it null
// line 1649
// JRUBY-646 // presumably this require should fail
// line 1687
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)
// line 1725
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators
// line 1784
// last conditional case, use defaultCase
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline
// Each root node has a top-level scope that we need to push
// We are creating a new IO object that shares the same // IOHandler (and fileno).
// significant digits and exponent
// line 563
/* EvStrNode :"#{some expression}"*/
// The method doesn't need a scope, but has static scope needs; use a dummy scope
// mark as captured if from containing scope
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.
// no such luck...
// new factory methods ------------------------------------------------------------------------
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.
// // Wake up any channels that became unblocked //
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.
// Is the parser current within a singleton (value is number of nested singletons)
// // Force the client socket to be blocking //
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])
// If reciever is self then we do the call the same way as vcall
//[C,C] //[C, boolean]
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)
// Block and block pass passed in at same time....uh oh
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 
// Create constants for flock
// If there's a second argument, it's the path to which the first  // argument is relative.
// extract item from array
// Create Ruby proxies for any input arguments that are not primitives.
// Zero-Argument declaration
// nothing else to here - the module version will be // included in the class.
//yyLen 542
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block
// Store to temp so it does null out on us mid-stream
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change
// Other args begin at index 1
//yyDgoto 152
// This does the assignment!
//yyRindex 945
// flush first
// switch // if
// line 540
// The name of the variable
// seek to force underlying buffer to flush
// dynamically increase
/* brace to match it.  Bracket expressions must be */
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //
// line 388
// Length check is a hack.  We should not be reeiving "" as a filename ever. 
// line 436
/* \O, \OO, \OOO or backref */
// line 1093
// Java / and % are not the same as ruby
// Java requires "w" for creating a file that does not exist
// create a new variable using the prefix
// line 509
// Check if the method has been explicitly excluded
// line 785
// switch //while
// line 592
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //
// line 633
// Pre-create all the core classes potentially referenced during startup
// JRUBY-530 until case
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing
// line 666
// Get the value from the map via the values iterator
// line 817
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject
// line 820
// Now clear out any previously selected channels
// line 902
// seek to force read buffer to invalidate
// line 947
// lazily create class init only if necessary
// block
// line 977
"/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */"
//System.err.println(" main/len=" + len);
// expect value to be an array of nodes
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil
// use same ClassIndex as metaclass, since we're technically still of that type
// line 1060
// proxy is under construction, building thread can // safely read non-volatile value
// line 1204
// minus one more for IRubyObject[]
// line 1090
// bench straight-up long fib(30)
// line 1149
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //
// EQ != 0 (i.e. true)
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.
// main while loop (offset < length)
/* $:: load path */
// Enebo:  c can never be antrhign but '.' // Why did I put this here?
// assign given optional arguments to their variables
// First, build an assignment for a splat, if any, with the rest of the args!
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening
// attempt to load the found library
// Make sure the appropriate scope has proper size. See JRUBY-2046.
// wait until thread has completed
// @JRubyMethod(name = "complex?")
// // Synchronize and re-check to avoid creating more than one Selector per provider //
// Populate up to shorter of calling arguments or local parameters in the block
// @JRubyMethod(name = "inexact?")
// We use file test since it is faster than a stat; also euid == uid in Java always
// set thread context JRuby classloader here, for the main thread
// '.' and all precision digits printed
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.
// assign the default values, adding to the end of allArgs
// Check the entry.setValue values come back out ok
// in-frame EvalState should already have receiver set as self, continue to use it
// for prec 15 root x0 must surely be OK // return small prec roots without iterations
// dangling '%' char
// line 1079
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //
// setFoo(Foo) => foo=(Foo)
// relatively cheap test for 32-bit values
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop
// 'class << state.self' and 'class << obj' uses defn as opposed to defs
// promise to implement N
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do
// depending on size of original args, call appropriate utility method
// no dec digits after '.', error for strict
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id
// debugging code, keeping for now
// check for frame field reads or writes
// bench fully-boxed fib
// MRI extends in order from last to first
// EQ == 0 (i.e. false)
// load Object under value
// TypeMatcher
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
// // Complete the request by filling the read buffer first //
// go through negated powers of 32 until we find one small enough 
/* ----------- Public Interface ------------ */
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...
// if it's an array, only add methods for aref, aset, and length
// attribute set.
// // Avoid double-copying for reads that are larger than the buffer size //
// identity equality
// Additional context surrounding tokens that both the lexer and // grammar use.
// line 1124
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.
// Get the control flow graph for this scope -- only valid for methods & closures
/* least significant r bits */
// check current directory; if file exists, retrieve URL and return resource
// drop through for sign
// rb_enc_precise_mbclen
// line 1179
// add all names for this annotation
/* most significant w-r bits */
// no dec digits, end of parseable data, go to calc
// set argv from main's args
// switch // for
// trim extension to try other options
// no more values to stick in rest arg
// line 836
//        arity.checkArity(runtime, argsLength);
// ---------- These methods below are used during compile-time optimizations ------- 
// Done with closure compilation
// line 643
// line 1138
// notify thread to proceed
// line 896
// line 1155
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases
// no arg grouping, just use bulk assignment methods
// Should we run this pass on the current scope before running it on nested scopes?
// First try to use drive letter from supplied dir value, // then try current work dir.
// line 486
// Whether this scope is used as the "argument scope" for e.g. zsuper
/* constant vector a */
// will have a trailing '.' // g fills trailing zeroes if #
//yyDefRed 945
// line 899
// state[i] &= 0xffffffffL;
// invoke method
// optArgs and restArgs require more work, so isolate them and ArrayList creation here
// check if we're a stdio IO, and ensure we're not badly mutilated
// rounding neccessary
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.
// state[j] &= 0xffffffffL;
// start setup method
// get "self"
// looks like someone's trying to raise a Java exception. Let them.
// used only by the compiler/interpreter (will set the literal flag)
// This appears to be some windows-only mode.  On a java platform this is a no-op
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument
// No timeout in critical section
"/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */"
/* MSB is 1; assuring non-zero initial array */
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).
// never visited, should be fine
// retry handling in the rescue blocks
// add in reverse order
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...
// We can callsite cache const_missing if we want
"/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */"
// Ruby Grammar productions return plenty of nulls.
// Change visibility so others can see it
// can be overridden to be informed when objects are removed
// append what we read into our buffer and allow the loop to continue
//System.err.println("byteListToInum(" + str + ")");
/*package-protected*/
// something in here is used to build up ruby stack trace...
// equivalent to MRI case '\0':
// not reached
// MRI behavior:  for 'Q', do not add trailing nils
// MRI behavior: "If digits is 0, the result is the same as the / operator."
//System.err.println(" figureOutBase/base=" + base);
"/*        result = eval(""arr = Array::['c', 200]; p arr"");        assertEquals(""[\""c\"", 200]"", result);        result = eval(""arr = Array.['d', 200]; p arr"");        assertEquals(""[\""d\"", 200]"", result);        */"
// only public methods
// Initialize all flow graph nodes 
// See if module is in chain...Cannot match against itself so start at superClass.
// rb_reg_initialize_str
// adapter, tc, recv, args{0,1}, block{0,1}]
//RubyModule module = context.getRubyClass();
// presumably this require should fail
//System.err.println(" getSign/" + sign);
// If we could not find the constant from cref..then try getting from inheritence hierarchy
// For 'b.foo'
// Accumulate call arguments
//         data.currentFile.callMethod(context, "lineno=", line);
/* \xHH */
// any exceptions raised must continue to be raised, skipping $! restoration
// line 1456
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships
// rethrow exception // rethrow it
// generate constants initialization code
// trailing garbage
// Zlib behavior: negative win_bits means no header and no checksum.
// produce a nicer error since Rubyists aren't used to seeing this
// if we have a specific-arity helper to construct an array for us, use that
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]
// load block from [] version of method
// Our values holder (name of variables are kept in staticScope)
// no number
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well
// states
// how far ahead we are when reading
//System.err.println("calculateLength()/str=" + str);
// The cache is full. Abandon JIT for this method and bail out.
// line 1462
// we need to collect all methods, though we'll only // install the ones that are named in this class
// Portion of line right after beginning marker
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.
// We define an actual list to get around bug in java integration (1387115)
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])
//System.err.println(" stringToLong=" + val);
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND
// Constants for seek
// Colon3
// first char must be digit or decimal point
// if entry starts with a slash, skip it since classloader resources never start with a /
// re-register, since fileno points at something new now
// normal return for method body. return jump for within a begin/rescue/ensure
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.
// // Now read unbuffered directly from the file //
// captures // begin and end are used when not groups defined // source string
"/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */"
"/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */"
// it was not found at all!
"/*  ================     *  Singleton Methods     *  ================      */"
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).
// Class method
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)
// For b.foo
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.
// not closing from finalize
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact
// instance config for the script run
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced
// Wire up Function#call(*args) to use the super-fast native invokers
// line 1014
// Don't initialize with class // Don't put in object space and don't taint
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations
// we reached the end
// declared type returns the qualified name without $ for inner classes!!!
// goto next bucket
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil
// we reached the end of a list
// rest arg must be splatted
// TODO: varargs?
"/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */"
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.
// remove leading whitespace (includes _ for lax) // get sign, if any
// single precision, native // single precision, native
// if refcount is at or below zero, we're no longer valid
// Modelled after c ruby implementation (java /,% not same as ruby)
// Correct position for read / write buffering (we could invalidate, but expensive)
// "else" body
// line 1207
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //
// this constructor is used by fdopen, so we don't increment descriptor ref count
// inner class, use $ to delimit
// Copy constructor
// backwards-compatibility, but threadsafe now
// build first node only and return true
// Unicode is can be only 21 bits long, int is enough
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        
// skip anything not related to jruby
// block argument assignment, if there's a block arg
//yyLhs 496
// Check the length every iteration, since // the block can modify this string.
/* $+: string matches last paren. */
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.
// args should be at end
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...
/* should alter global state */
// eval value and save it
// start a new populator
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out
// do nothing, allow loop to retry
// args should be before block
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.
// option_to_str
// Construct the top-level execution frame and scope for the main thread
// +++ // Helper Methods
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.
// Check the 2 values obtained via different means
// not true, eval value and assign
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done
// rb_enc_reg_error_desc
// Explicit zero in MRI returns immediately
// rb_reg_initialize
// we do have another slash; omit both / and . (JRUBY-1606)
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.
// first, iterate over all required args
// are we recursing?
// Assign the values.
// all these types are immediately considered "defined"
// Called before any write to make sure the // header is always written before the first bytes
// newInstance here
// no match, append remainder of buffer and continue with next block
// inner switch
/*utf8 lead byte*/
// rb_reg_desc
// raise will also wake the thread from selection
/* \M-X, \M-\C-X, \M-\cX */
// set up a local Ruby variable
// negative values
// encountered a node we don't recognize, set everything to true to disable optz
// If no release method is defined, then memory leaks will result.
// No seconds, just yield
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
// line 449
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore
/* \\uHHHH */
/* We may need to subtract addition offset off of first */
// line 495
// finally, set JavaSupport.isEnabled to true
// can't create custom classloaders
/* Surrogates */
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.
// line 1070
// set up a local IRuby variable
// execute command with sh -c // this does shell expansion of wildcards
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass
// Build the new module
// line 1190
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)
// Process any set of annotations // No supported options
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 
// ok, got a non-zero, have to own up to our horded zeroes
// line 317
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;
// add to the jitted methods set
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //
//        assertSame(script1, script2);
// // this test really means, that this is a ruby-defined subclass of a java class //
// ignore leading zeroes
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.
// line 1236
// for fast lookup: encoding entry => org.jruby.RubyEncoding
// MBCLEN_NEEDMORE_P
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject
// other java proxy classes added under their superclass' java proxy
// line 1217
"/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */"
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.
// Atomic integers for symbol and method IDs
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!
// Can't support the rest with Java
// limit the length of negatives if possible (also faster)
// else catch oversize below
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //
// String construction routines by NOT byte[] buffer and NOT making the target String shared 
// MRI also does a pointer comparison here
// An atomic long for generating DynamicMethod serial numbers
// line 794
/* \C-X, \C-\M-X */
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.
// assuming the user wants a collection of interfaces that can be // included together. make it so.
// this covers primitives and (unlikely) lower-case class names
// raw file URL, just open directly
// end of parseable data, go to calc
// args
// not an expression, only compile the elements
// Build a new class and add it to the current scope (could be a script / module / class)
// Define a second version that doesn't take a block, so we have unique code paths for both cases.
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.
// fill in all vars with nil so compiler is happy about future accesses
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //
// multimethod, new logic
// select appropriate call site // dup receiver // load self
// we only add live threads
// promise to implement three
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes
// Double.MAX_EXPONENT since Java 1.6            
"/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/"
// AF_INET
// Haven't found a class, continue on as though it were a package
// insert all nodes in sequence, hash them in the final instruction // KEY
"/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */"
/* \cX, \c\M-X */
// marsaling dumps usec, not msec
// promise to implement three to N with block
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //
// BASE64
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.
"/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */"
// This while loop is for restarting the block call in case a 'redo' fires.
/* \OOO */
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()
// line 537
// bindings scopes must always be ManyVars scopes since evals can grow them
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.
// // Register any new blocking I/O requests //
//IRubyObject protocol = args[4];
// Set a value in the RubyHash
// temp locals must start after last real local
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.
// sign
"/*     * If we are setting post arguments we can assume there are no pre or others     */"
// carriage return
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method
// handle everything after -- as arguments to the jruby process
// arg cannot be negative
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.
// line 1261
// must be at least one digit for strict
// discarding a token does not change stack
// one word type name that starts lower-case...it may be a primitive type
// Save sourceLine for error reporting to display line where error occurred
// first non_underscore char must be digit
// if we're already aborting, we can receive no further mail
// mask off "once" flag
// ?b  | boolean | True if file1 is a block device
// synchronize on the RubyThread for threadgroup updates
// ENEBO: Can these be fast?
// line 952
// JRubyService
// Make mantissa same sign so we only have one code path.
// internal usage (Complex/Rational)
// line 1772
// Long-hand (e.g. %Q{}).
// String construction routines by NOT byte[] buffer and making the target String shared 
// r/w buffer // are we reading or writing?
// RubyDigest
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done
// first char must be digit
// Decrease value to hit upper range.  
// entry is the first element of this bucket
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());
// compile first node as non-expr and then second node
// for each simple method name, implement the complex methods, calling the simple version
// caching constructors, as they're accessed for each new instance
// ?z  | boolean | True if file1 exists and has a zero length
// MRI behavior:
// Define the annotation for the method
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions
// Is there a supplied proc argument or do we assume a block was supplied
// otherwise one key has been selected (ours) so we get the channel and hand it off
// lax (str.to_f) allows underscores between e/E and sign
// file not given
// provider is not available
// we set all Java methods to optional, since many/most have overloads
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing
// first, iterate over all pre args
// don't override Numeric#div !
// Block
// the instant at which we will ask dtz what the difference between DST and // standard time is
// finally handling for abnormal exit
// line 735
// Java Doubles are 64 bit long:            
/* $': string after last match */
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'
// fall back to system JCA providers
// If there was a good library before, we go back to that
// A gotcha for Long.MIN_VALUE: value = -value
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.
// line 1935
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks
// look for mangling markers for bound, framed methods in class name
// Build closure body and return the result of the closure
// MRI behavior: we don't print errno for actual Errno errors
// Numeric.equal            
// copy and splat arguments out of the scope to use for zsuper call
// leave it null and fall back on our normal invocation logic
// set of utility methods for Java-based proxy objects
//reset the $loadTestvar
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...
// we were woken up without being selected...poll for thread events and go back to sleep
// deal with case when "other" is not a string
// the 1 is for the stripped sign char
// Need to initialize
// uber-ThreadKill catcher, since it should always just mean "be dead"
// Single-quote fast path
// This is now needed, since module Java // isn't in by default
// How many occurrences of 'type' we want
// Make sure all arguments are modules before calling the callbacks
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).
// write-volatile
// just push nil for pragmas
/*receiver*/
// indices for temp values
//char hexValue = scanHex(2);
// the default allocator
// bench fixnum-boxed fib
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code
// create constructorInstaller; if there are no constructors, it will disable construction
// line 1282
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
// non-signature signature with just IRubyObject
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.
// First, build assignments for specific named arguments
// // INSTANCE VARIABLE RUBY METHODS //
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }
"/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with ""//foo//bar"" it will return ""//foo/bar"". JRuby uses          * java.io.File, and hence returns ""/foo/bar"". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */"
// will have a trailing '.'
// If we have more than one argument, then make sure the array is not ObjectSpaced.
// octal constant
"/* ============================     * End of hash internals     * ============================     */"
// x0 ~ sqrt()
// standard constructor that accepts Ruby, RubyClass
// strip off "_dot_rb" for .rb files
// 0x3fff_ffff // -0x4000_0000
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";
// we have optimized switch cases, build a lookupswitch
// Double.MAX_EXPONENT since Java 1.6
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done
// it doesn't handle special cases
// truncate buffer string to zero, if provided
// save blocking state
"/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's ""to_s"" method. */"
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).
// force static scope to claim restarg at 0, so it only implements the [] version of __file__
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.
// save the ungot
// promise to implement zero to N
// inside a loop, jump to body
// ignore; we won't use invokedynamic
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.
// fill up the rest with zeroes
// we know variables cannot be null since localstaticscope will create a 0 length one.
// line 964
// invoke static __file__
// line 1269
// Equivalent of T_DATA
// at end
// unsigned int, native // unsigned long, native
/* bang: true, no match, no substitution */
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:
// We do this b/c make_tmpname might be overridden
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.
// advance to first entry
// remove us from old superclass's child classes
// self // method name
// Java's select doesn't do anything about this, so we leave it be.
// store argument count information into scope
// -1 no match; 0 it is dot file not extension
// ignore; job was cancelled // FIXME: is this ok?
// not using a new scope, use saved one for a flat closure
// UndefinedMethod should be immutable
// Don't bother
// (1|intlen)
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649
// fall back on empty env when security disallows environment var access (like in an applet)
// out of byte range // there will be no match for sure
/*self*/
/* last expression should not be void */
// variable args no block, load null block
// set constants now that they're initialized
//load should work several times in a row
"/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */"
// construct a new cache with thread's classloader and no limit
// get current context
// do not load the class if not used
"/*            public class Hello {                public static String getMessage() {                    return ""....."";                }            }            */"
// Proc class
// otherwise, we try an unbuffered read to get whatever's available
// we check length == 0 for 'load', which does not use load path
// could be pulled down to RubyClass in future // rb_class_boot
// We always open this rw since we can only open it r or rw.
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"
// otherwise fall back on system temp location
// This point is only reached if there was an exception handler installed.
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.
// line 1213
// add us to new superclass's child classes
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.
// Handle Flow exceptions, just propagating them
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.
// block given
"/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */"
// Register the new descriptor
// this really needs to be inlined here
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e
// libc flushes writes on any read from the actual file, so we flush here
// Only in ruby 1.9 methods
// 1.9 rb_check_to_integer
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).
// methods and closures
// line 1925
// the requested precision
// boot the Module and Class classes
// Used for tiny smidgen of grammar in lexer (see setParserSupport())
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits
// Support IO modes that this object was opened with
//No ClassCastException!
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen
/* -------------- Packaged/protected fields and methods below ---------------- */
// declare the field
// Note: #fix has only no-arg form, but truncate allows optional parameter.
// create the class
// normal exit, perform finally and return
// check arity
// only supports simple parallel assignment of up to 10 values to the same number of assignees
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.
// No hex value after the 'x'.
// Install direct java methods with mangled name so 'send' can call them directly.
// (1|intlen).prec
// called only by initializing thread; no synchronization required
// Get a new label using a generic prefix
// invoke pre method stuff
// always need at least a 0
// Methods of the Object class (rb_obj_*):
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are
// Profile
// Equivalent of Data_Wrap_Struct
// file given, use it and force it into binding
// from encoding, special-casing ASCII* to ASCII
// Class.allocate object is not allocatable before it is initialized
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
// return sqrt(squarD) with precision of rootMC
/* RubyString aka rb_string_value */
// Initial x - use double root - multiply by halfBack to unshift - set new scale
// retrieve call site from sites array
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.
/*arg*/
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).
// boot the Object class 
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.
// coerce arguments
// Get a new label using the provided label prefix
// initial size // state stack // value stack // current input // #tokens to shift
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.
// no binding given, use 0 for both
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.
/* expected */
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 
/* ignore backslashed spaces in %w */
// must have been loaded from our known classloader hierarchy
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject
// Tainting here if we ever want it. (secure 4)
// A thread pool to use for executing this runtime's Ruby threads
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.
// rb_match_busy
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes
// Construct local variables based on parameter names passed in
// if any exceptions were raised, we fail
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.
/* $!: error string */
// extra args for rest
// line 1105
// Label for the start of the method // Label for the end of the method
// use array as-is, it's a literal array
// Let m be the exact digits precision in an earlier! loop
// bench straight-up integer fib(30)
// bench Integer fib
// reset the state
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.
// obtain d
// line 159 "-" // %token constants
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...
// FIXME: JRUBY-3604
// store call information so method_missing impl can use it
// use parent's marshal
// actual required is greater than 3, raise error (we don't support actual required > 3)
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.
// build scope names string
// arg grouping, use slower arg walking logic
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.
// Always use "GMT" since that's required by Java API.
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */
// Remaining arguments are for the script itself
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));
// line 280
// If an IO exception occurs (something odd, but possible) // A directory may return null.
// all done with lookup attempts, release monitor
// Notify the calling thread that we're about to go to sleep the first time
/* 6:tags 16:addr 1:eos */
// line 1115
// use numbered access method
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //
// obtain c
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.
// finally
// start off with a neutral parent
//static private final String TRANSLIT = "//translit";
// double precision, native
// Value of last token which had a value associated with it.
// obtain a
// rename is successful
// not enough bytes
// specialized for value
// must let original string know we're modifying, so shared buffers aren't damaged
// treat start and end as start...end for end >= 0, start..end for end < 0
//            return warnMultiReturnNil(ruby);
// line 1279
// specific arity
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.
// TODO: 1.9 rb_enc_symname_p
// if adding a module under a constant name, set that module's basename to the constant name
// // COMMON VARIABLE METHODS //
// Not that is loaded loop around to resolve it next pass
// line 335
// Is there a supplied proc argument or do we assume a block was // supplied
// if more than 4 locals, get the locals array too
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));
// not so backwards-compatible here, but no one should have been // calling this anyway.
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel
// update superclass reference
// load always uses IRubyObject[], so simple closure offset calculation here
// only this case affects backrefs 
// Methods of the Nil Class (nil_*):
"/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */"
"/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */"
// c: bind_eval
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements
"/*  ================     *  Utility Methods     *  ================      */"
// try to load the specified name; only if that fails, try to define the class
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode
// check for thread events, in case we've been woken up to die
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.
"/*  ================     *  Module Methods     *  ================      */"
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //
// promise to implement two to N with block
// but there's a superclass passed in, use it
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid
// do nothing, fall back on default compiler below
//call throwException via JRuby
// assume nInit = 16 <= prec
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //
// we set scope-aware to true to force heap-based locals
// normal file descriptor..try to work with it
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));
// invalid ranges result in an empty string
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.
// This is needed to unpack stuff
// refresh call adapter, since it matters if this is iter-based or not
// Add property name aliases
// Rehash the table if the threshold is exceeded
// Ordering of array traversal not important, just intuitive
// we already confirmed above that length > 0
"/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */"
// 128K seems to be the minimum at which the stat+seek is faster than reallocation
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])
// Define System.getProperties() in ENV_JAVA
// This point is only reached if there was an exception handler // installed.
// @JRubyMethod(name = "exact?")
// terminate and advance buffer when we find our char
// If there's no second argument, simply use the working directory  // of the runtime.
// wow, the only time we can use the java protocol ;)
// // INTERNAL VARIABLE METHODS //
// Makes sure the key is not already in the hashtable.
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.
// There is something valid in the sun_path component
// try lookup again under lock
//System.err.println("figureOutBase()/base=" + base);
"/* Symbol class methods.     *      */"
"/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: ""message"", construction method: ""!"",     * to_str implementation: ""name_err_mesg_to_str""     *     * TODO: this class should not be lookupable     */"
// No block from a nil proc
// Setting the loader needs to reset the class cache
// make sure the main stream is set to null
// Until we get a little more solid on 1.9 support we will only run interpreted mode
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.
//yySindex 889
//yyGindex 136
// backspace
// load target for invocations
// void methods should work
// verify it if it's there
// difficult case, send to Double/FloatingDecimal
// Init
// from CommandlineParser
// Adjust for buffered data
// v += g*v     ~ 1/2/sqrt()
// switch // while
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.
//        int n = 10;
// x += e*v     ~ sqrt()
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately
// Increase precision - next iteration supplies n exact digits
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;
// Initial v - the reciprocal // v0 = 1/(2*x)
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).
// Collect iteration precisions beforehand
// skip this one, probably no 'ls' (windows)
// just in case, add a bit of extra precision
// General number and precision checking
// run ten separate calls into Ruby, with delay and explicit GC
// If the killee thread is the same as the killer thread, just die
// wait until thread has initialized
// The name of this source (e.g. a filename: foo.rb)
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.
// line 766
// SYNC_FLUSH
// unread back
// line 476
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 
// line 513
// Add a forward reference from tgt -> currBB
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.
// line 414
// rethrow to outer flow catcher
// TODO: make it 16 now ? // MUST be power of 2!
// this _is_ legal (when removing an undef)
// line 1244
// ChannelDescriptors opened by sysopen are cached to avoid collection
//yyRindex 889
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.
// We don't want a package name beginning with dots, so we remove them
// make sure the pipe stream is set to null
// getFoo      => foo // getFoo(int) => foo(int)
// callbacks to fill in method body
//$@ returns nil if $!.backtrace is not an array
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements
// If this is not a closure, the break is equivalent to jumping to the loop end label
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'
// bench Long fib
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway
// leave as a normal array
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;
// create a lightweight thunk
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.
"/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */"
// there might be more test classes in a single file, so we iterate over them
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.
// no digits, error
// this is the only case it might be null here (in MetaClass construction)
// -1 == don't set permissions
/* $@: error position */
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly
// generate a real method signature for the method, with to/from coercions
// wait for the go signal
// If already inspecting, there is no need to register/unregister again.
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.
// line 1392
// add alias to meta
// snapshot of contents of directory // current position in directory
// if channel is already closed, we're no longer valid
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.
// zero args, no block; do nothing
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support
// store previous exception for restoration if we rescue something
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)
// // A specific version was requested - use as is for search //
// then deliver mail to the target
// set self to the class
// confirm minimum args provided
/* ---------- Public fields, methods --------- */
// predefine a few other methods we invoke directly elsewhere
// line 152 "-" // %token constants
// force heap-scope behavior, since it uses parent's scope
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop
// Creates the new entry.
// and we were given a specific exception
// finally with no exception
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem
// Accessor methods.
// declare locals for Java debugging purposes
// silent ?
// no check for '*'
//            assert internedName == internedName.intern() : internedName + " is not interned";
// no digits, go calc (will return +/- 0.0 for lax)
// loop until a context is available, to clean up softrefs that might have been collected
// pop extra failed value from first cycle and we're done
// Version information:
// could not get canonical path, just use given path
// line 420
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!
// if it's less than 200 do median of 3
// store the local vars in a local variable for preparing the class (using previous scope)
// ////////////////// CONSTANT API METHODS //////////////// //
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //
// no read requested, hook up read to parents output
// Prepare LoadService and load path
/* and subtract as neeeded.*/
// digits arr shifted, update all
//yyGindex 152
// SSS FIXME: Can this ever be null?
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.
// num2int is also implemented
// What we passed to the constructor for method 'path'
// check visibility // dup method
// ----- Ruby Instance Methods -------------------------------------------------
// // CONSTANT TABLE METHODS - pass to delegate //
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping
// a gotcha
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?
// base
// Used for the 'redo' command
// By default, NO_FLUSH
// line 286
// push false
// false // zero
// Make sure any read()s after close fail.
// No passed in block, lets check next outer frame for one ('Proc.new')
// line 551
// This looks wrong, but it's the way MRI does it.
// for future compatibility as constructors move toward not accepting metaclass?
// NOTE: The indicies here match exactly the signal values; do not reorder
// rb_exc_new3
// visit a label to start scoping for local vars in this method
// MRI behavior: in finished mode, we work as pass-through
// ZStream actually *isn't* allocatable
// MRI behavior, enforced by tests
// dump usec, not msec
// Handle Ruby exceptions (RaiseException)
//io.finish();
// BigInteger required a sign byte in incoming array
// modified to match how hash is calculated in 1.8.2
// retry handling in the rescue block
// We only want IO objects with valid streams (better to error now). 
// float number of seconds
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated
// We can just use dt, since it is immutable
// For JDK 1.4 we can use "cal.getTimeInMillis()"
// set up with min values and then add to allow rolling over
// Pad with a 0
// MRI accepts additional wday argument which appears to be ignored.
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST
// no bignorm here needed
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.
/* Time class methods */
/* If the value will fit in a Fixnum, return one of those. */
// attempt to decriticalize all if we're the critical thread
// depends on IO, FileTest
/* len + margin */
// volatile to ensure that initial nil-fill is visible to other threads
// elements and trailing nils
"/*      * plain internal array assignment     */"
// Dir::tmpdir
"/* rb_ary_new2     * just allocates the internal array     */"
"/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */"
// PID
"/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */"
// Create global constants and variables
// Satisfy java.util.List interface (for Java integration)
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.
// See [ruby-core:17483]
// possibly should not in object space
// 1.9 seems to just do inspect for to_s now
// rb_ary_new4
//[?, ?] //[?, boolean]
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.
// pre-set for the sake of terminating recursive calls
// extras flag
// ...nothing
//  See http://www.gzip.org/zlib/rfc-gzip.html
// Zlib::NO_FLUSH
// utility method
// Object is ready, create top self
// not to be confused with RubyObject's flags
//yyLhs 542
// 1.8 "include?"
// The method is intentionally not public, since it typically should // not be used outside of the core.
// flags // 4 bytes of modified time
// it won't hurt fixnums
// MRI does it!
// won't hurt fixnums
// second argument is allowed, but ignored (MRI)
// recheck condition
// Initialize Kernel and include into Object
// terminate; tryCompile will have printed out an error and we're done
// initialize the root of the class hierarchy completely
// Construct key services
// Initialize the "dummy" class used as a marker
// Get the main threadcontext (gets constructed for us)
// Initialize all the core classes
// event name // filename // line numbers should be 1-based
// default: don't retain
// we try to get the classloader that loaded JRuby, falling back on System
// Bootstrap the top of the hierarchy
// for regular expressions with the /o flag
// determine spacing
// this method is for finalizers registered via ObjectSpace
// For JSR 223 support: see http://scripting.java.net/
// use this for JRuby-internal finalizers
// mutex that controls modifications of user-defined finalizers
// record separator var, to speed up io ops that use it
// former java.lang.System concepts now internalized for MVM
// Default objects
// initial spaces // spaces before "at"
// can't read non-standard properties
// Java support
// Compilation
// Parser stats
// mutex that controls modifications of internal finalizers
// A global object lock for class hierarchy mutations
// line 1264
// compensate for missing slash after drive letter on windows
//Kernel is the only Module that doesn't need an implementor
// iso-2022-jp
// quoted-printable
// Note: this field and the following static initializer // must be located be in this order!
// Shift_JIS
// UTF-8
// EUC-JP
// string doesn't have it's own ByteList (values)
// string doesn't share any resources
// rb_enc_str_asciionly_p
// use 1.8 impl
// must not reallocate
// rb_enc_str_coderange
// if len == 0 then shared empty
/* rb_str_subseq */
/* rb_str_cmp_m */
// // rb_str_buf_append
// encoding doesn't have to be copied.
/* copy pre-match substr */
// TODO: keep cr // TODO: rb_str_splice_0
// string given
/* substring longer than string */
// Illegal combination
// hash given
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"
// Create Constants class
/* rb_str_substr */
/* rb_str_splice */
// nothing
// decode from "from" and encode to "to"
// line 1308
// to encoding, same special-casing
/* retrieve last replacer */
// long size * bits in byte
// QTRUE
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.
// File to be loaded by autoload has already been or is being loaded.
// interned, OK for "fast" methods
// No catch active for this throw
// no binding given, use (eval)
//Catch active, throw for catch to handle
// rb_cstr_to_dbl case
// We break if we know this sleep was explicitly woken up/interrupted
// Zero sleeps forever
// exec process, create IO with process
// bomb out, it's not a binding or a proc
// adjusts paths started with '/' or '\\', on windows.
// ?g  | boolean | True if file1 has the \CF{setgid} bit
// string to eval
// binding given, use binding's file
// MRI behavior: now check arg count
// modified
// MRI behavior: use first byte of string value if len > 0
// ignore if it's not a global var
// ?C  | Time    | Last change time for file1
// ?A  | Time    | Last access time for file1
// ?c  | boolean | True if file1 is a character device
// ?e  | boolean | True if file1 exists
// ?f  | boolean | True if file1 exists and is a regular file
// ?k  | boolean | True if file1 exists and has the sticky bit set
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid
// ?M  | Time    | Last modification time for file1
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller
// without full tracing, many events will not fire
// ?p  | boolean | True if file1 exists and is a fifo
// If the target thread is sleeping or stopped, wake it
/* wrapped to \0...\0.  search next valid char. */
// we limit to int because ByteBuffer can only allocate int sizes
// NE == nonzero (i.e. true)
// no need to assign encoding, same bytelist shared
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid
// ?=  | boolean | True if the modification times of file1 and file2 are equal
// Deprecated String construction routines
// ?>  | boolean | True if the modification time of file1 is after that of file2
// ?<  | boolean | True if the modification time of file1 is prior to that of file2
// Error info is per-thread
// new interrupt, to hopefully wake it out of any blocking IO
// init errorInfo to nil
// If this thread is sleeping or stopped, wake it
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately
// for Thread::start, which does not call the subclass's initialize
// line 1326
/* File class methods */
// Count number of extra slashes in the beginning of the string.
// Strip off the O_ prefix, so they become File::RDONLY, and so on
// not valid for "dead" state
// can't select, just have to do a blocking call
// null channel always succeeds for all locking operations
// Make sure any existing lock is released before we try and close the file
// File::Constants module is included in IO.
"/*     * We use FILE versus IO to match T_FILE in MRI.     */"
// try both
// Should we do anything?
// line 1345
// We're not actually a real file, so we can't flock
// ...round to that digit
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));
// Return false here
// strip c: away from relative-pathed name
// MRI-compatible basename handling for windows drive letter paths
// trim trailing slashes
// Handle ~user paths 
// Dot is not at beginning and not at end of filename. 
// Find out which string to check.
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.
// Java and MRI definitions of divmod are different.        
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")
// Handle ~user paths.
// No directory delimeter.  Rest of string is username
// generation count for O(1) clears
// C:\ is returned unchanged
// RubyContinuation
// special constructor that accepts stream, not channel
// '~/...' as path to expand
// we don't have another slash after this, so replace /. with /
// '~user/...' as path to expand
// If there are N slashes, then we want N-1.
// no canonical path yet or length is zero, and we have a / followed by a dot...
// do nothing, we should not delete the drive letter
/* rb: check_modifiable */
/* rb: readable */
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 
// Can we produce IOError which bypasses a close?
// Fast path since JNA stat is about 10x slower than this
// 3. MRI ignores the trailing junk
// try to rename one more time
// n.b. we need to recompute the hash in case the key object was modified
// delete implementation
// get implementation
// put implementation
"/*  ================     *  Instance Methods     *  ================     */"
// other hash does not contain key
// update the hash value
// Single '~' as whole path to expand
// NIO-based
// first try as directory
// next as regular file
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!
// dup2 new fd into self to preserve fileno and references to it
// TODO: READ_CHECK from MRI
// Not exposed by filetest, but so similiar in nature that it is stored here
// confirm we're not reopening self's channel
// default options
// re-register the descriptor
// redundant, done above as well
// use original modes
// IO class methods.
// A potentially previously close IO is being 'reopened'.
// this is for a range check, near as I can tell
// rb_class_boot
// MRI behavior: swallow StandardErorrs
// isRetained=true
// if not sync, we switch to write buffered mode
"/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */"
// Claims conversion is done via 'to_s' in docs.
//            return len - n;
//Everything written
// Of course this isn't particularly useful.
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);
// cleanup, raising errors if any
//        ByteList buffer = null;
// Length to read
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.
// I believe Ruby bails out with a "bug" if closing fails
// select until read is ready
// no receiver for singleton class
// String/Buffer to read it into
// cryptic for the uninitiated...
/* rb: writable */
//            buffer = str.getByteList();
// READ_CHECK from MRI io.c
// We're cloning ourselves, so we know the result should be a RubyObject
/* class methods for IO */
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes
// not using remove(Object) here to avoid the equals() call
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only
// FIXME: process options
// write
// NIO based pipe
// Enebo: annotation processing forced me to do pangea method here...
// line 1254
/* may need to handle ENC_CODERANGE_BROKEN */
// zeroed by jvm
// The class of this object
// TODO: rb_usascii_str_new2
// JRUBY-4113: callers should not call setTaint on immediate objects
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.
// include its parent (and in turn that module's parents)
// Note: includes part of fix for JRUBY-1339
// define access methods.
// Static constants
// For binding purposes on the newly created struct types
// for interface impls
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()
// OBJ_INFECT        
// superClass may be null.
"/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */"
// we need full traces, use default (slow) populator
// Atomic ?
// Skip any commandline args if /usr/bin/env is in play
// Containing class...The parent of Object is null. Object should always be last in chain.
// MRI checks all types first:
// Make sure the module we include does not already exist
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 
// line 1298
// ////////////////// CONSTANT RUBY METHODS //////////////// //
// Execute iterateMethod again.
// a normal block passed to define_method changes to do arity checking; make it a lambda
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway
// module/singleton methods are all defined public
// just using required is broken...but no more broken than before zsuper refactoring
// update all hierarchies into which this module has been included
// This method is intended only for defining new modules in Ruby code
// need to skip IncludedModuleWrappers
// reopen a java module
// FIXME warning
// reopen a java class
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope
//FIXME warning
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.
// ignore error
// if the insertion point is a class, update subclass lists
// build a list of all modules to consider for inclusion
// scan class hierarchy for module
// MRI error message says Class, even though Module is ok 
/* Module class methods */
// next in hierarchy is an included version of the module we're attempting, // so we skip including it
// if we haven't encountered a real superclass, use the found module as the new inclusion point
// line 1635
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.
// Java and MRI definitions of remainder are the same.
// ////////////////// CLASS VARIABLE API METHODS //////////////// //
// can't set TC classloader
// returns the stored value without processing undefs (autoloads)
// line 723
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it
// line 691
// removes and returns the stored value without processing undefs (autoloads)
// Fix for JRUBY-1339 - search hierarchy for constant
"/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */"
// w_symbol
// line 625
/* Consider Thread aspects of this */
// line 601
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.
// line 1133
// line 929
// line 1373
// line 845
// line 800
// line 839
// line 1603
// line 1097
// line 970
// line 1406
// line 1085
// line 972
// line 1038
// line 1582
// line 1210
// we got a valid errno value
// one optional and no required args
// line 1293
// print out as a nice Ruby backtrace
// line 1229
// line 1523
// line 1448
// try to get errno value out of the class
// line 1398
// line 1513
// line 1492
// line 854
// ACTIONS_END
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //
// no script to run, return success below
// Java and MRI definitions of modulo are different.
// line 1789
// line 1755
// TODO: why this: .setResult();
// JRubyClient
// Skip /usr/bin/env if it's first
/* force for args */
// line 1652
// Skip any assignments if /usr/bin/env is in play
// line 814
// line 451
// ignore, no debugger present
// line 413
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
// line 339
// line 703
// line 515
// line 472
// line 669
// line 582
// line 636
// line 2014
// line 1108
// line 992
// Increase value to hit lower range.
// line 958
"/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */"
// line 905
// line 925
// line 1072
// Uncomment the "puts" lines if you want to see more detail
// line 572
// line 649
// line 1047
// line 1950
// line 1395
// line 1286
// line 1192
// line 1241
// line 1333
// line 991
// line 1812
// line 1779
// line 1476
// line 1420
// line 1728
// line 1588
// line 1618
// line 1320
// line 1363
// line 1595
// line 1681
// line 1317
// line 1535
// line 1992
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //
// line 1643
// line 1794
// line 1314
// line 1837
// line 1753
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)
// line 1562
// line 619
// line 1267
// line 1439
// line 1895
// line 1301
// line 776
// line 1168
// line 823
// line 872
// // Cannot discern the total read length - allocate at least enough for the buffered data //
// line 555
// line 500
// line 361
// line 1620
// allow it to bubble up
// tc // under method // self // under method // name // args
// integer division
// line 1473
// line 1201
// line 1307
// line 1287
// line 1067
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar
// end suffix iteration
// Check for a builtin first.
// line 1169
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.
// line 1122
// double precision, native // double precision, native
// line 1145
// calculate based on a, b, c and d
// 64-bit number, native (as bignum)
// Next indicates to decode using native encoding format
// line 812
// an empirically derived rule: precision applies to // significand length, irrespective of exponent
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script
//this test may be too lax but it is the same as in MRI
// line 1026
// line 1011
// line 911
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form
// line 886
// line 864
// line 827
// MRI behavior: validate only the unnumbered arguments
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);
// line 732
// already have some bytes buffered, just return those
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);
// reset buffer
// Is there something built into JRuby to do this?
// change the thread context to include the class
// do median of 7 if the array is over 200 elements.
// line 1626
// line 1369
// line 313
// line 1496
// odd
// line 1359
//consume the file name
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.
// ..where 100 -> 10 shifts the scale
// root x is ready!
// The loop of "Square Root by Coupled Newton Iteration"
// 5 -> 2, -5 -> -3 need half a scale more..
// MRI behavior: -0 and +0 are two different things
// default ClassCache using jitMax as a soft upper bound
// We require the home directory to be absolute
// RubyBigdecimal
// 2. MRI allows underscores anywhere
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true
// line 1348
// line 1292
// try loading from classloader resources
// try the normal property first
// try cwd first
// line 1716
// Specify something that can't separate
// symbol string *must* be interned
// *must* be power of 2!
// line 1276
// Clone all remaining nodes
//  Single node on list
// JRubyServer
// Has read/write been closed or is it still open for business
//str is frozen
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));
// undo check
// static initializing method
// line 1708
// fields to hold Ruby and RubyClass references
// update all subclasses
// do nothing, leave empty
// rest in ivar count followed by name/value pairs
// write out ivar count followed by name/value pairs
// Piece of mri rb_to_id
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors
// single method, use normal logic
// no UNIXSockets on Windows
// line 1325
// MBCLEN_INVALID_P
// no annotated methods found, skip
/* \p{Hiragana} */
// line 1196
// rb_enc_reg_raise
// rb_reg_raise
// rb_reg_expr_str
// JRUBY-3625: delay setting backref until the MatchData is completely initialized
// write out a static initializer for frame names, so it only fires once
// read-volatile
//                        RubyModule singletonClass = module.getSingletonClass();
// fallback on non-pregenerated logic
// array created for rescue args doesn't need to be in ObjectSpace.
// colon3
// line 1399
// Wrong Parameter ?
// we can't rename a file while it's open in windows
// This should never happen past parse, but just bulletproof this just in case
// never visited, should be ok
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";
// line 745
// We do not want to capture cached methods
// We could probably also detect if LHS value came out of cache and avoid some of this
// one optional, one required args
// no takers; bubble up
// in order to make pragma's noops we set location to a special value
// admittedly inefficient
// JRUBY-530, while case
// index of variable for this arg
// don't attempt to coerce to array, just wrap and return
// only a marker interface
// The method doesn't need a scope or static scope; frame only
// Proc.new needs the caller's block to instantiate a proc
// check for Proc.new, an especially magic method
// pragmas
// otherwise, it's a literal array
// long, slow way causes disabling for defined
// unwrap newline nodes to get their actual type
// splatted when, can't do it yet
// one arg but it's an array, treat it as a proper array
// otherwise, use normal args compiler
// these are all simple cases that don't require the heavier defined logic
//[RubyClass]
//          context.swapValues(); //context.consumeCurrentValue();
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]
// no args, do not pass args processor
// invoke run with threadcontext and topself
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]
// Math depends on all numeric types
// normal
// optimizations if we know ahead of time it will always be true or false
// eval new value, call operator on old value, and assign
// normal items at the front or back of the masgn
// normal items at the "head" of the masgn
// compile first node as non-expr and compile second node
// put under object array already present
// if arity 1, just compile the one element to save us the array cost
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long
// single-statement body, just compile it
// successfully got back a jitted method
// if we haven't already decided on a do-nothing call
// Time the compilation
// receiver first, so we know which call site to use
// method is done, declare all variables
// value is already on stack, save it for later
/*arg0*/
// if rest args, excluding post args
// get call site and thread context
// invoke
// pop extra attr value
// No point in updating number if last number was same value.
// check if it's true, ending if not
// call site
// [adapter, tc]
// receiver, args, result, value
// with args, with block
// no args, with block
// no args, no block
// with args, no block
// build descriptor string
// generate call sites initialization code
// generate regexps initialization code
// generate block bodies initialization code
// generate method cache initialization code
// check the condition
// brute force construction inline
// call isTrue on the result
// clear body or next result after each successful loop
// and remaining jump exceptions should restore $!
// push true
// static scope
// just confirm args length == required
// superClazz = null;
// next, iterate over all optional args, until no more arguments
// script object
// unwrap scopes to appropriate depth
// store the local vars in a local variable
// chain to the next segment of this giant method
// class bodies prepare their own dynamic scope, so let it do that
// Fix FileNameCompletor to work mid-line
// normal closure
// we only need full-on redo exception handling if there's logic that might produce it
// jump back to the top of the main body of this closure
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.
// if we are storing a name as well, index is one too high for values
// Map keep track of the next available variable index for a particular prefix
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);
// inline script
// line 303
// line 1116
// line 367
// line 443
// line 1130
// Struct methods
// line 492
// line 464
// line 1087
// line 519
// // INSTANCE VARIABLE API METHODS //
// line 1251
// line 613
// line 720
// line 738
// line 754
// line 757
// line 852
// line 772
// line 782
// line 797
// line 1111
// line 941
// line 1280
// line 871
// now emit bodies
// This method is called to build arguments for a block!
// line 948
// line 960
// line 967
// line 996
// line 986
// line 1058
// line 1100
// can't use -v and stdin
// line 1135
// line 1137
// line 1154
// line 1263
// line 1309
// line 1315
// line 1328
// line 1358
// line 1374
// line 1415
// line 1440
// line 1443
// line 1465
// line 1488
// line 1485
// line 1533
// line 1556
// line 1574
// line 1577
// line 955
// line 1638
// line 1069
// line 1661
// line 1705
// lists to aggregate variables and bodies for whens
// line 1775
// line 1023
// line 1054
// line 1818
/*mirko: check*/
/* zero length array */
//[reg]
// line 1041
// the CASE instruction
// line 324
// line 327
// line 331
// line 336
// line 348
// line 354
// line 429
// get the incoming case value
// build first node only and return false
// line 459
// line 481
// line 506
/* $;: field separator */
// line 672
// line 549
// line 558
// line 561
// line 610
// line 589
// line 595
// line 623
// line 969
// line 630
// line 661
// Do we have a dynamic container?
// line 699
// add array construction methods
// Record the loop we are beginning to process
// line 779
// line 842
// line 932
// line 944
// line 980
// line 1004
// line 860
// If true, returns the rest of the array starting at the index
// line 829
// line 866
// line 884
// line 922
// line 1417
// line 1632
// line 627
// line 887
// line 1043
// line 875
// line 909
// line 1078
// line 857
// line 1126
// line 832
// line 1311
// line 1383
// line 1424
// line 826
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module
// line 811
// Instance method
// line 1877
// Build IR for body
// line 1995
// multiple conditions for when
// done // done // done // done
// build "else" if it exists
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!
// line 848
// Value of the last expression in the block 
// Now for the rest
// Both for fixed arity and variable arity methods
/* ----------- Private Interface ------------ */
// Assign the closure to the block variable in the parent scope and return it
// line 753
// While processing loops, this returns the loop that we are processing.
// line 801
// Build args
// Create a new closure context
// Get the container for this new module
// By default, the container for this class is 's'
// line 727
// line 706
// Build the module body
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration
// set attr
// call operator
// get attr
// we won't enter the loop -- just build the condition node
// build first node as non-expr and build second node
// use IRubyObject[]
// if v1 is defined and true, we are done! 
// Build the CFG for this scope -- supported only by methods & closures
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop
// What handles warnings
// Top-level script!
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit
// line 682
// Dummy top-level method for the class
// ------ Define the operations below ----
// def instructions
// create a new temporary variable
// eval instructions
// value copy and type conversion operations
// line 639
// closure instructions
// alu operations
// Loads
// exception instructions
// optimization guards
// a case/when branch
// Stores
// jump and branch operations
// others
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!
// scripts
// scripts and modules
// line 296
// Run the pass on the passed in scope!
// By default, return instructions cannot be deleted
// ------- Default implementation methods below -------
// Run the passed in compiler pass on this scope!
// Indicate that we are done processing the loop
// ------- Abstract methods without a default implementation -------
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!
// Optimize some core class method calls for constant values
// If the cfg of the method is around, print the CFG!
/* -------------- Public fields and methods below ---------------- */
// If we got a simplified value, mark the call dead and insert a copy in its place!
// Readline
// Dataflow problem with which this node is associated // CFG node for which this node contains info.
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!
/* --------- Protected fields/methods below --------- */
/* ----------- Public abstract methods ---------- */
// line 574
// IN is the same!
"/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */"
// IN changed!
/* ----------- Public methods with a default implementation ---------- */
/* Individual analyses should override this */
// line 586
// line 598
// line 696
// We want unique ids for dataflow variables
// v is defined => It is no longer live before 'i'
/* -------------- Private fields and methods below ---------------- */
/* -------------- Protected fields and methods below ---------------- */
// Unique ID assigned to this variable
// line 791
// switch to an allocator based on a default constructor
// start out with a default RubyObject allocator
// Traverse the instructions in this basic block in reverse order!
// OUT = UNION(IN(succs))
// class or module
/* ******************** PUBLIC INTERFACE ******************* */
/* ---------- Protected / package fields, methods --------- */
/* --------- "Abstract"/"please-override" methods --------- */
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!
// Do not mark this instruction's operands live if the instruction itself is dead!
// line 503
// line 526
/* ---------- Private fields, methods --------- */
// Used during optimization passes to propagate type and other information
// line 566
// line 546
// line 512
//yyDefRed 889
/*arg1*/
// line 333
// line 494
/* List of all variables used by all operands of this instruction */
// line 478
/* Array of all operands for this instruction */
// line 454
// line 466
// By default, no simplifications!
// line 445
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code
// line 397
// line 345
// line 1571
// If divisor is zero, don't simplify!
// load handle
/* Nothing to do by default */
// You can only value-replace atomic values
// Map of label & basic blocks with that label
// neither
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value
// Get the target class of this operand, if we know it!
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values
// For simplification, get the target value, even if compound
// RubySocket
// line 417
//yySindex 945
// line 351
// Map of label & basic blocks which are waiting for a bb with that label
// Object[] args
// line 377
// Init before building basic blocks below!
// foo()
// currBB cannot be null!
// Add forward ref. edges
//        case 4: //        case 5:
// Jump instruction bbs dont add an edge to the succeeding bb by default
// load arguments
// root-level logic
// load receiver
/* NOEX_PRIVATE for toplevel */
// root-level classes
// line 1822
// receiver
// invoke specific arity version
// args array
// no candidates? Fail.
// Object arg0
// no silly ticks!
// useful for code completion inside the IRB
// line 1808
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //
// Explicit reference to these vars as symbols...
// line 1814
// constants webrick crashes without
"/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */"
// line 1694
// restore position
// this is ensured by the callers
// Binding provided for scope, use it
// line 1745
// no binding, just eval in "current" frame (caller's frame)
// line 1757
// line 1733
// i'th argument
// Used by the compiler to simplify arg processing
// line 1658
// otherwise, rethrow
// line 1644
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)
// No editing before startPos
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace
// MRI does similar thing on MacOS X with 'EditLine wrapper'.
// not overridden, let's go
// if it's the exception we're expecting
// line 1600
// Complete using a Proc object
// clear basename so it's anonymous when raising
// line 1587
// Toplevel defines
// Timeout module methods
// These are not really used by timeout, but exposed for compatibility
// line 1568
// Ensure room for terminating zero byte
// ARRAY and STRUCT are only used internally
// line 1290
// line 1510
/* When a length is given, read_string acts like get_bytes */
// Last token read via yylex().
// Older JDK on linux map 'c' to 'libc.so' which doesn't work
"/*     * This variant of newStruct is called from StructLayoutBuilder     */"
// The value of 1 is for Socket::AI_PASSIVE.
// Replace memory object with one that throws an exception on any access
// Windows is LLP64
// Add Pointer::NULL as a constant
// $blah
// More constants needed by specs
// line 1553
// line 1516
// Get the convention from the options hash
//                case FLOAT:
// Assemble a [ :name, offset ] array
// Create the ordered list of field names from the map
// line 1550
// No auto cleanup needed
// keep a reference to avoid the memory being freed
// line 1299
// line 1477
// line 1480
// line 1434
// RubyUNIXServer
//AF_INET
// RubyIPSocket
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 
// line 1239
// line 321
// // Set up for potentially fast-int operations //
// // Hook up the MemoryPointer class if its not already there //
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.
// line 1247
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases
// RubyUDPSocket
// host is nil or the empty string, bind to INADDR_ANY
// host and port given
// make sure descriptor is registered
// RubyBasicSocket
// By default we always reverse lookup unless do_not_reverse_lookup set.
// recv returns nil on EOF
// continue with normal initialization
// we don't have to define any that we don't support; see socket.c
// mandatory constants we haven't implemented
// line 1107
// line 1187
// line 1089
// line 1193
// line 1151
// line 1175
// line 1119
// all threads in ruby thread group plus main thread
// do nothing, just exit
//            e.printStackTrace();
// first, check if the sender has unreceived mail
// line 1076
// line 660
// numeric host, use it for port
// line 1051
// line 893
// line 940
// no connection immediately accepted, let them try again
// line 1034
// line 1032
// line 1008
// line 1045
// line 978
// line 984
// line 903
// line 936
// line 915
// line 926
// restore context classloader, in case we're using a thread pool
// line 879
// line 868
// line 858
// line 806
// line 824
// line 815
// Someone called exit!, so we need to kill the main thread
// Call the thread's code
// line 763
// line 670
// set thread context JRuby classloader here, for Ruby-owned thread
// line 729
// future is done or cancelled, skip it
// line 646
// line 607
// line 378
// line 596
// line 578
// line 543
// line 556
// line 507
// line 470
// line 501
// line 411
// line 452
// line 344
// thread is not alive, skip it
// shift to yyN
// line 338
// line 314
// get runtime, create jump error, and throw it
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".
// just confirm minimum args provided
// probably a primitive
// be dead
// two args, no block; load NULL_BLOCK
// clear the redo
// return jump handling
// redo jump handling
// return result if we're still good
// actual required is less than 3, so we use specific arity
// throw redo error if we're still good
// No required specified, check actual number of required args
//call post method stuff (exception raised)
// simple path, no multimethod
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check
// normal all-rest method
// self // name
// Raise an error if arity does not match requirements
// variable args with block
// two args with block
// close it out
// one arg, no block; load NULL_BLOCK
// zero args, no block; load NULL_BLOCK
// one arg with block
// load block if it accepts block
// three args with block
// all other arg cases without block
// all other arg cases with block
// three args, no block; do nothing
// two args, no block; do nothing
// one arg, no block; do nothing
// static invocation
// void return type, so we need to load a nil for returning below
// load receiver as original type for virtual invocation
// normal finally and exit
// virtual invocation
// promise to implement one to N
// promise to implement three with block
// method itself // ThreadContext // invoked name
// singleton classes don't get their own visibility domain
// This method is called to build assignments for a multiple-assignment instruction
// line 1162
// never reached
// For visibility we need real meta class and not anonymous one from class << self
// no args
//[C, C] //[C, C, String] //[C, null|C]
// promise to implement N with block
// promise to implement zero to N with block
// promise to implement two to three with block
// promise to implement zero to three with block
// variable is never read, variable is never live
// promise to implement one to N with block
// Build the class body!
// promise to implement one to three with block
// interfaces are handled as modules
// construct the class, implementing all supertypes
// load arguments into IRubyObject[] for dispatch
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.
// confirm maximum not greater than optional
// wrap self and store the wrapper
// promise to implement two to three
// List of modules, classes, and methods defined in this scope!
// promise to implement two to N
// create constructor
// Returns the containing parent scope!
// promise to implement one to three
// fields needed for dispatch and such
// all other arities use "n" dispatch path
// load up object and add a few useful methods
// load self, class, and name
// end constructor
// all methods dispatch to the simple version by default, which is method_missing normally
// set Ruby
// set RubyClass
// try specific name first, falling back on simple name
// the proxy (wrapper) type hierarchy
// promise to implement three to N
// handle redos by restarting the block
// promise to implement zero to three
// Map of constants defined in this scope (not valid for methods!)
// scripts, classes, and modules
// proxy is complete, return it
// store the wrapper
// store it
// now, create a method_added that can replace the DynamicMethod fields as they're redefined
// convert to IRubyObject
// create static init, for a monitor object
// if we expect a return value, unwrap it
// end setup method
// Control flow graph for this scope
// end class
// prepare temp locals
// field is null, lock class and try to populate
// finally block to release monitor
// line 1502
// end of try block
// try/finally block to ensure unlock
// method still not available, call method_missing
// setup the class
// exception handling for monitor release
// re-get, re-check method; if not null now, go to dispatch
// up two slots, for long's two halves
// set the full name
// construct the new interface impl and set it into the object
// setup constants for public inner classes
// line 326
// SignalFacade
// line 362
// include all interfaces
// add all public constructors (note: getConstructors only returns public ones)
// add all instance and static methods
// Ruby name 
// too much array creation!
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.
// only include static methods if specified
// only public static fields that are valid constants
// add a few type-specific special methods
// add all static variables
// initialize cache of parameter types to method
// long first because it's what Fixnum claims to be
// If we hold a Java object, we need a java_class accessor
// double first because it's what float claims to be
// end of scoping for closure's vars
// dummy bodies for default impls
// walk all superclasses aggregating interfaces
// Look through all mappings to find a match entry for this field
// Hit a non-java proxy class (included Modules can be a cause of this...skip)
// We could not find all of them print out first one (we could print them all?)
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object
// initialize this if it hasn't been
// initialize these if they haven't been
// construct the mirror class and parent classes
// setup new, etc unless this is a ConcreteJavaProxy subclass
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes
// exact arg list __file__
// list of interfaces we implement
// We capture the original "new" and make it private
// construct new array proxy (ArrayJavaProxy)
// boxed arg list __file__
// Get map of all fields we want to define.  
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object
// implement all forces implementation of all interfaces we intend // for this class to implement
// Now we add an "implement" and "implement_all" methods to the class
// not allowed for existing Java interface modules
// weakly reserved names
// array creation should use this variant
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here
// parent.setConstant(name, proxyClass); // where the name should come from ?
// keep this variant for kind_of? testing
// already set up append_features, just add the interface if we haven't already
// array-of-interface-type creation/identity
// ?l  | boolean | True if file1 exists and is a symbolic link
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.
// add reference to interface module
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?
// construct static scope list of names
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method
// proxy module for interfaces
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields
// if there's no constructor, we must prevent construction
// something?
// modified only by addMethod; no synchronization required
// Now add all aliases for the static methods (fields) as appropriate
// line 1329
// do nothing, it's a non-impl method
// line 1377
// is_something?, contains_thing?
// Additionally add ?-postfixed aliases to any boolean methods and properties.
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0
// 1.9 support for encodings
// many cases are ok to convert to float; if not one of these, error
// getFooBar() => fooBar?, foo_bar?(*)
// break jump
// now iterate over all installers and make sure they also have appropriate aliases
// line 372
// Ignore bad constant named inner classes pending JRUBY-697
// skip catch block
// main body
// double-check the cache now that we're synchronized
// can't be converted any more, return it
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here
// old (quasi-deprecated) interface class
// datagram, set accordingly // again, AF_INET
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130
// restrictive security policy; no matter, we only want public // classes anyway
// see note above re: return type
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case
//IRubyObject family = args[2];
// one-dimensional array
// if it's an array of arrays, recurse with the component type
// n-dimensional array
// use specific-arity for as much as possible
// If not a property, but is boolean add ?-postfixed aliases.
// Must be back on first line on rewind.
// invoke __file__ with threadcontext, self, args (null), and block (null)
// for Object, default to natural wrapper type
//[RubyModule] //[RubyModule, String]
// hmmmm
// rubyObject is already of the required jruby class (or subclass)
// thread context
// we've found a Java type to which we've coerced the Ruby value, wrap it
// it's not one of the types we convert, so just pass it out as-is without wrapping
// create dir if necessary
// Create the class with the appropriate class name and source file
// line number
// line 323
// for specific-index cases, clean up non-expression values
// include interface modules into the proxy class
// java.lang.Object is added at root of java proxy classes
// This also handles unsigned int -> negative signed int conversion
// include any interfaces we extend
// Now attach Java-related extras to core classes
// The template for interface modules
// no variable initialization, because we're reusing parent's scope (flat)
// generate variable readers initialization code
// shouldn't happen, but if a superclass is specified, it's not ours
// add all name-to-class mappings
// add some base Java classes everyone will need
// we'll only map conventional class names to modules 
// do a void return
// size + 1;
// JRUBY-2938 the proxy class might already exist
// add java_method for unbound use
// generate bytelists initialization code
// upper case name, so most likely a class
// generate symbols initialization code
// this is where we'll get connected when classes are opened using // package module syntax.
// if that succeeds, the others should as well
// for SEEK_CUR, need to adjust for buffered data
// retrieve scope from scopes array
// default for starting tempVariableIndex is ok
/* $\: output record separator */
// make getter for proxy class
// store the new local vars in a local variable
// loop until we see the nth separator char
// if we hit EOF or reached limit then we're done
// re-register
// fill local vars with nil, to avoid checking every access.
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]
// catch logic for flow-control: next, break
/* not primitive or lc class */
// root-level methods
// if more than 4 locals, get and populate the locals array too
// Create list of interfaces to proxy (and make sure they really are interfaces)
// line 1313
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them
// add name to call site list
// generate fixnums initialization code
// normal new class implementing interfaces
"/*         * Initialize some components.         */"
// for zero args case we can stop searching
// line 1430
// Java reflection does not allow retrieving constructors like methods
// module is on top of stack
// verify the class
// store the local vars in a local variable if there are any
// no matching ctor found
// // utility methods //
// start class
"/*         * Initialize a simple Frame.          */"
// this test really means, that this is a ruby-defined subclass of a java class
// no matching method found
// prepare a faster handle if handles are enabled and the method and class are public
// search through all declared methods to find a closest match
// must be a public method
// must be a public class
"/*         * Now we create a new BSFManager.         */"
"/*         * First we need to register the JRuby engine.         */"
// Expand variables, Indentation of final marker
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.
/* package scope */
// trigger class initialization for the class
// Populate values for the parameter names
"/*              * Execute a Ruby script (add the menubar to the frame).             */"
"/*                     * Execute Ruby statements.                     */"
"/*                     * Evaluates a Ruby expression and display the result.                     */"
// need names ordered for key generation later
// // Ruby-level methods //
// we only collect methods and interfaces for  // user-defined proxy classes.
// finish class initializer
// get any included interfaces
// statically initialized below
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.
// load static empty array
// We generate all constructors and let some fail during invocation later
/* $~: match-data */
// // construct the super-proxy method //
// Replace a string of newlines with a single one
// Where we get new positions from.
// box arguments
// this is a simple rethrow handler
// The current block is already associated with proc.  No need to create a new one
// If not already a proc then we should try and make it one.
// use the same logic as in EvaluationState
// opt and rest, must be at least required
// no opt, no rest, exact match
// create static private method field
// only rest, must be at least required
// opt but no rest, must be at least required and no more than required + opt
// Find power-of-two sizes best matching arguments
/* NUL */
// must be power of 2 // must be power of 2
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }
// entry exists, proxy has been gc'ed. replace entry.
// // Wait for I/O on any channel //
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());
// make getter for handler
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue
// should not happen!
// Put back lastLine for any elements past start of heredoc marker
// indirect read-/write- volatile
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.
// must be called under lock
// ctor used by remove/rehash
// temp method to verify tableSize value // must be called under lock
// How many strings are nested in the current string term
/* hex constant */
// For 'list' and only populated if list is not null.
// Start of string ([, (, {, <, ', ", \n) 
// How many bytes into the source are we?
/* it's a comment */
// Number of newlines read from the reader
// ?-  | boolean | True if file1 and file2 are identical
// End of string (], ), }, >, ', ", \0)
// Last full line read.
// Create constants for open flags
// Get rest of line. lineBuffer filled as side-effect...
/* $*: argv */
/* octal constant */
/* just ignore */
// Regexp engine 'java'
// Was a goto in original ruby lexer
/* white spaces */
// Found end marker for this heredoc
// SET_P
// LEXPOP
// PUSH(1)
// Marker delimiting heredoc boundary
// Stream-based
// rb_yield_values(2,...) equivalent
// remain where we are
// Satisfy java.util.Set interface (for Java integration)
// Give a name to a value.  Enebo: This should be used more.
/* end of script. */
// Stream of data that yylex() examines.
// Count of nested parentheses (1.9 only)
// Are we lexing Ruby 1.8 or 1.9+ syntax
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').
// 1.9 only
// DEBUGGING HELP 
// Short-hand (e.g. %{,%.,%!,... versus %Q{).
// return in a class body raises error
/* no mb || ismbchar(term)*/
/* $&: last match */
/* $_: last read line string */
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop
// line 1629
// EOF (ENEBO: After default?
// line 604
// Just a plain bang
// In case last next was the newline.
// Our readback/pushback buffer.
// documentation nodes
/* $": already loaded files */
/* $,: output field separator */
/* $.: last read line number */
/* $=: ignorecase */
/* $<: reading filename */
/* $`: string before last match */
/* See if it is a reserved word.  */
// block (expr)
// arg and receiver already present on the stack
// backslash
// Where we get our newest char's
// block (primary)
// enum lex_state
// We don't append '+' since Java number parser gets confused
// hash
// FIXME: peek('u') utf8 stuff for 1.9
//  hexadecimal
//Octal
// decimal
// binary
// form feed
// FIXME: Old Mac format strings?
// horizontal tab
// Where we started this marker match
// space
// vertical tab
// hex constant
// alarm(bell)
// We use offset here to keep track of extra newlines for windows
// escape
// line 587
// do nothing, return dummy version below
// keep value of twoAgo around so we can restore after we unread
// POP
// Character read before previous read
// index of last character in pushback buffer
// newline
// BigDecimalLibrary
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now
// line 407
// that's what JDK5 produces on Windows Vista
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).
// DigestLibrary
// this set is only for darwin
// Single node in list
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error
// line 575
// else [default] reduce (yyN)
// line 358
// reduce (yyN)
// leave stack alone
// line 1464
// line 341
// line 274
// line 271
// line 332
// line 311
// line 569
// line 479
// line 382
// line 434
// line 467
// line 426
// line 446
// line 457
// line 484
// line 504
// line 510
// line 498
// line 525
// line 559
// line 638
// line 1623
// line 634
// line 1598
// line 616
// line 907
// line 769
// line 655
// line 667
// line 760
// line 751
// line 701
// line 726
// line 717
// line 775
// line 821
// line 809
// line 788
// line 803
// line 833
// line 830
// line 883
// line 861
// line 876
// line 923
// line 920
// line 956
// line 1140
// line 1001
// line 1048
// line 1029
// line 1073
// line 1082
// line 1113
// line 1103
// line 1164
// line 1178
// line 1335
// line 1189
// line 1243
// line 1234
// line 1214
// line 1296
// line 1283
// line 1302
// line 1453
// line 1387
// line 1431
// line 1470
// not an expression, don't want result; pop it
// line 1655
// Should positions added extra IDE-friendly information and leave in all newline nodes
/*$5 == null ? NilImplicitNode.NIL : $5;*/
// line 1641
// line 1672
// line 1677
// line 1742
// line 1769
// popen caller wants to be able to write, provide subprocess out directly
// try to mine out a Ruby frame using our list of interpreter entry-point markers
// line 1749
/*$8 == null ? NilImplicitNode.NIL : $8;*/
// JRUBY-3568, inherit threadgroup or use default
/*XXX 0;*/
// We parse evals more often in source so assume an eval parse.
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process
// line 1827 "DefaultRubyParser.y"
// line 529
/* .setPosFrom($2);*/
/* StrNode: :"some text"*/
// finally, post args
/* DStrNode: :"some text #{some expression}"*/
// line 7713 "-"
//sequential
/* XXX*/
// Is this inline source (aka -e "...source...")
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));
// line 368
// local scopes are argument scopes by default
// ?u  | boolean | True if file1 has the setuid bit set
// What linenumber will the source think it starts from?
// odd...but it is odd in ruby too.
/* Include pipes on multiple arg type*/
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic
"/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, ""::""); return;*/"
// Parser states:
// __END__ marker offset (-1 means none present)
// Will parser parse Duby grammar Extensions
// Should we display extra debug information while parsing?
// Assumption: tail is never a list node
// Is the parser currently within a method definition
// INSTANCE VARIABLE
// CONSTANT
// Reduces overhead in interp by not set position every single line we encounter. 
/* MRI: block_append */
// Node
"/*case CONSTNODE:                handleUselessWarn(node, ""a constant""); return;*/"
//Do not add an empty string node
// LOCALVAR
/* MRI: range_op */
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"
"/*case SELFNODE:                handleUselessWarn(node, ""self""); return;*/"
// tail must be EvStrNode at this point 
// ?d  | boolean | True if file1 exists and is a directory
// now logic for each optional value
// then optional args
//[boolean]
// line 1231
// line 678
// otherwise no items left available, use the code for default
// line 497
// line 283
// arities
// Spurious wakeup-loop
// line 488
// line 392
// line 342
// line 432
// line 469
// line 448
// line 657
// line 521
// line 552
// if there's args left and we want them, assign to rest arg
// line 534
// line 648
// line 579
// line 571
// eval value for assignment
// line 708
// line 688
// line 863
// line 808
// assign remaining elements as an array for rest args (or empty array)
// line 737
// line 851
// evaluate and save receiver and args
// line 890
// line 1035
// line 869
// prepare labels for opt logic
// line 928
// line 1013
// line 916
// line 912
// line 965
// line 951
// line 983
// line 1182
// do nothing; arity check is done before call
// line 1075
// line 1057
// line 1114
// line 1173
// line 1084
// line 1144
// line 1118
// line 1702
// line 1427
// line 1847
// line 1305
// line 1295
// line 1273
// line 1258
// line 1289
// line 1337
// line 1323
// expression-based tests + bodies
// normal case, create a new label
// line 1401
// line 1354
// line 1342
// checkcast the value; if match, fast path; otherwise proceed to slow logic
// line 1352
// line 1366
// TODO assuming case is a fixnum
/*args*/
// line 1663
// line 1442
// line 1458
// we have an input case, prepare branching logic
// line 1557
// line 1532
// line 1542
// line 1591
// line 1622
// line 1651
// line 1639
// line 1636
// rb_str_hash_cmp
// line 1719
// line 1886
// line 1831
// line 1785
// line 1722
// line 2010
// line 1761
// line 1738
// line 1756
// line 1825
// line 1800
// line 1815
// line 1791
// line 1507
// line 1854
// Build IR for args
// otherwise, there's a receiver, so we pass that in directly for the sclass logic
// line 2006
// build each "when"
// line 1607
// line 1657
// line 1734
// line 1911
// line 1902
// line 1968
// line 1960
// line 1948
// line 1938
/* string fragment (we optimistically take one off in*/
// original exception is on stack
/* ParserSupport.literal_concat).  Check token length*/
// Here starts the logic for the class definition
// finally with exception
// CLASS BODY
// Returns slot of variable
// line 2019 "Ruby19Parser.y"
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line
/* ENEBO: arg surrounded by in_defined set/unset*/
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/
/* was $$ = null;*/
// RaiseException is on stack, get RubyException out
// line 8143 "-"
// index of variable that represents a "rest" arg
// Next CRef down the lexical structure
// number of variables in this scope representing optional arguments
// Live reference to module
// No bit math to store level since we know level is zero for this case
// Our name holder (offsets are assigned as variables are added
// number of variables in this scope representing required arguments
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */
// Require in all libraries specified on command line
//private UnsynchronizedStack frameStack;
// source extensions
// We override that the logic which uses this
/* Try and unload the autoload specified from internedName */
// long name option
//        assert internedName == internedName.intern() : internedName + " is not interned";
//private UnsynchronizedStack parentStack;
// initialize builtin libraries
// if we have multiple asgn with just *args, need a special type for that
// new instance to invoke run against
// line 2000
// Is this thread currently with in a function trace?
// Is this thread currently doing an defined? defined should set things like $!
// line 1972
// line 1942
// line 1963
// framed invokers will have Ruby frames associated with them
// if it's not a rescue or ensure, there's a frame associated, so decrement
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.
// File where current executing unit is being evaluated
// Line where current executing unit is being evaluated
//////////////////// CATCH MANAGEMENT ////////////////////////
// look for mangling markers for compiled Ruby in method name
// if root of method is rescue, build as a light rescue
//////////////////// FRAME MANAGEMENT ////////////////////////
// assert level == 0;
// line 1918
// look for __file__ method name for compiled roots
// look for mangling markers for bound, unframed methods in class name
// line 1905
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.
// required and optional only
// line 1898
// line 1872
// line 1869
// popen callers wants to be able to read, provide subprocess in directly
// Frame matches one of our markers for "interpreted" calls
// line 1776
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.
// line 1828
// just push the same empty scope, since we won't use one
// Frame is extraneous runtime information, skip it unless debug
// No argument blocks
// new scope for this invocation of the block, based on parent scope
//            assert false : "can this happen?";
// binary typed calls
// Highest reserved id
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).
// Not sure if this is actually possible, but better safe than sorry
// line 391
// with block literal (iter)
// id must always be even
// no block
// with block pass
// try count specific args to determine required
// Static scoping information for this scope
// fast and safe respond_to? call site logic
// ensure zero is devoted to no method name
// No binding scope so we should create one
// Captured dynamic scopes
// Lastline
// Helper function to give a good view of current dynamic scope with captured scopes
// silently ignore
// initialize the static settings to determine which factory to use
// updating position for same line; skip
// used by compiler
// line 1788
// Backref for $~, $1, etc
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.
// Some helper functions:
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.
// line 1797
// line 1809
// prefill ?
// nil pad since we provided less values than block parms
// line 1758
// conversion
"/*     * This is the proper behavior for all non-expanded assigners.     */"
// line 1767
"/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */"
// if undefined, branch to method_missing
// caller
// call is ok, punch it!
// retrieve method // module // name
// invoke callMethodMissing
// method object already present, push various args // tc // self // klazz // name
// if it's method_missing, just invoke it
// ENEBO: Perhaps slow but simple for now
// load arity for check
// calltype // block
// if no exception raised, jump to end to leave result on stack for return
// load arity for error
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
// from DUP_SETUP
// InvocationCallback
// only fill if there actually will remain trailing storage
// arity ok, continue
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
// load the encoding
// line 1746
// throw
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
// line 1731
// line 1678
// line 1711
// line 1647
// line 1660
// line 1610
// line 1625
// Return a meta object corresponding to the class
// Make Java class files in the jar reachable from Ruby
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs
// ThreadContext
// BreakJump, ThreadContext
// add all startup load paths to the list first
// line 1445
// Empty paths do not need to be added
// signed short, big-endian
// add $RUBYLIB paths
// Add 1.8 libs
// wrap in try/catch for security exceptions in an applet
// if it's a compiled JRuby script, instantiate and run it
// if a source extension is specified, try all source extensions
// line 1573
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.
// if an extension is specified, try more targetted searches
// no library or extension found, try to load directly as a class
// Library has already been loaded in some form, bail out
// If there is a jar-file with the required name, we add this to the class path.
// quietly try to load the class
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed
// line 1538
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.
// try all extensions
// unknown extension, fall back to search with extensions
// extension extensions
// try only literal search
// if a jar or file URL, return load service resource directly without further searching
// unknown extension, fall back to exact search
// should invoke seek on realIo
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".
// hmm...
// allow MainExitException to propagate out for exec and friends
// otherwise load the library we've found
// if given path is absolute, just try it as-is (with extensions) and no load path
// if it's a ./ baseName, use CWD logic
// if name starts with a / we're done (classloader resources won't load with an initial /)
// check if it's true, ending if so
// if entry is an empty string, skip it
// it's an absolute path, use it as-is
// write `I' instance var signet if class is NOT a direct subclass of Object
// handle security-sensitive case
// prepend ./ if . is not already there, since we're loading based on CWD
// line 1489
// line 1436
// otherwise, try to load from classpath (Note: Jar resources always uses '/')
// line 1519
// Make sure this is not a directory or unavailable in some way
// signed short, native
//            write('S');
// end loop
// flush afer whole dump is complete
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here
/* Directories and unavailable resources are not able to open a stream. */
// line 1433
// object is a custom class that extended one of the native types other than Object
/* Only accept an open brace if there is a close */
// call the proc, but not for symbols
// w_unique
// All "C" marshalled objects descend from core classes, which are all RubyObject
// any ivars, since we don't have __attached__ ivar now
// Major // Minor
// line 1381
// sic
// XXX: 0xffff0000 on BE?
// unsigned short, native
// line 1493
// int, native // long, native
// RubySignal
// CLD is also 20
"/*     * Process {}'s (example: Dir.glob(""{jruby,jython}/README*"")      */"
// All braces pushed..
// Look for slash, starting from 'start' position, until 'end'.
// // fields should really be an immutable map as it is never modified after construction //
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 
// SunSignalFacade
// load self object as IRubyObject, for recv param
// line 533
// modify the block with a new backref/lastline-grabbing scope
// IOT is also 6
// line 530
// "hashdef" object, a hash with a default
// skip inner braces
/* failed : try next recursion */
// ----- Helper Methods --------------------------------------------------------
// line 1782
// try to use POSIX for this first
// No or mismatched braces..Move along..nothing to see here
// retuns null when not found to avoid unnecessary getRuntime().getNil() call
// line 1803
// otherwise fall back on the old way
// are we at '**/'
// leftToken made us start as nest 1
// single precision, little-endian
// NOT REACHED HERE
// index of left-most brace // index of right-most brace
// This is not an expression that computes anything
// ignore, we're on the way out
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.
// line 1806
// b64_xtable for decoding Base 64
// SimpleSampler
// ----- Ruby Class Methods ----------------------------------------------------
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.
/* complete, according to Posix.2 */
// Get index of last read byte
// long, little-endian
// double precision, big-endian
// obtain b
// double precision, little-endian
// prepare to call "def" utility method to handle def logic
// single precision, native
// single precision, big-endian
// unsigned char
// signed char
// signed short, little-endian
// 64-bit number, native (as fixnum)
// Possible Checksum Byte
// unsigned int, native
// int, native
// See if we have a converter for the job...
/* $?: last status */
/* $$: pid */
// Otherwise the unpack should be here...
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char
// break out if we've dug as deep as we can
// ignore and try windows version
/*encode.limit() - */
// Skip embedded comments in pack format string
/* root fiber */
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.
// Determine how many of type are needed (default: 1)
//if the low bit is set //set the high bit of the result
// 'Z' adds extra null pad (versus 'a')
// line 1270
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte
//do some padding, I don't understand the padding strategy
//if the index is not a multiple of 8, we are not on a byte boundary
// we filled up current byte; append it and create next one
// we don't deal with negatives.
// default PidGetter
// populate commandline with NG-provided stuff
// ignore and use hashcode
// just unix
// direct invocation of the command
// single string command, pass to sh to expand wildcards
// just windows
// TODO: These 2 should be handled with an Iterator!!!
// TODO verify this is correct
// ??? For now, use the same renderer as everyone else. // ?? // ?? IN FUTURE: change this to use a new instance of renderer // ?? for this data type.
// TODO: This should be handled with an Iterator!!!
"/** * SQLFilterAction.java * * Created on March 22, 2003, 10:55 AM * * Adapted from SessionPropertiesAction.java by Colin Bell. * * TODO: CHange name to ContentsTabFilterAction */"
// TODO: Do we need this one. */
// JASON: Do we need these?
//??? For now, use the same renderer as everyone else. //?? //?? IN FUTURE: change this to use a new instance of renederer //?? for this data type.
// BAD - Converting a URL to a file this way is problematic when the file path contains spaces
//JASON: Remove?? //_session.getSessionSheet().getSQLPanel().executeSQL(sql);
// TODO: This is a nasty quick hack. Needs an API to do this.
"/* TODO: Delete this class * Copyright (C) 2001 Colin Bell * colbell@users.sourceforge.net * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */"
// TODO: Hard coded -. JDBC/ODBC bridge JDK1.4 // brings back -9 for nvarchar columns in // MS SQL Server tables.
// hear no evil, see no evil
// When I tried using a length for LONGVARBINARY that is the max // length of the source records, I get the following exception: // // Exception condition 239. Data exception - string data, right truncation. // I tried bit varying(32767) with data that had max length of 16384. So // it's back to maximum length hard-coded for now. // registerColumnType(Types.LONGVARBINARY, 2147000000, "bit varying($l)");
// TODO: is this right???
"/*	 * TODO: This should not be public. Check all usages of it	 * and put appropriate methods in an API object.	 */"
"//	 JASON: Do we need these?"
"// JASON: Do we need this? //		getSQLPanel().selected();"
//TODO: Rename to IObjectTreeNodeExpander
// TODO: Hard coded -. JDBC/ODBC bridge JDK1.4 // brings back -9 for nvarchar columns in // MS SQL Server tables. // -8 is ROWID in Oracle.
//set the property values // Note: this may have already been done by another instance of // this DataType created to handle a different column.
// Always add plugins - there is not a good way to compare plugin zips and their extracted contents // at the moment. // TODO: Determine the best way to derive the filesize and checksum of the plugin zip that was last // extracted. Should we keep it around? How about using the current release.xml file ? Come to // think of it, perhaps we shouldn't be computing the checksum of *any* existing files, why don't // we just get it from the current release.xml file?
// TODO: verify this
// multiple rows - not good
//?? Extract this out into a class like CascadeInternalFramePositioner.
// ?? Is there any way to check for invalid input? Valid input includes // ?? at least any printable character, but could it also include unprintable // ?? characters?
// Cast is not so nice, but framework doesn't meet new requirements.
"/*				 * END-KLUDGE				 */"
// Total Hack! Type OTHER(1111) can be other types as well?
// JASON: Should be part of status bar?
//??GETRIDOFTHIS
// Don't call super. Packing this frame causes problems.
// TODO: Delete ME
// Note. Some DBMSs such as Oracle do not allow: // "select *, rowid from table" // You cannot have any column name in the columns clause // if you have * in there. Aliasing the table name seems to // be the best way to get around the problem.
// We are displaying a new dataset, so if there was // a cell editor in operation, tell it to cancel. //???? How does this impact popup display?
// KLUDGE: // We want some info about the columns to be available for validating the // user input during cell editing operations.  Ideally we would get that // info inside the ResultSetDataSet class during the creation of the // columnDefinition objects by using various functions in ResultSetMetaData // such as isNullable(idx).  Unfortunately, in at least some DBMSs (e.g. // Postgres, HSDB) the results of those calls are not the same (and are less accurate // than) the SQLMetaData.getColumns() call used in ColumnsTab to get the column info. // Even more unfortunate is the fact that the set of attributes reported on by the two // calls is not the same, with the ResultSetMetadata listing things not provided by // getColumns.  Most of the data provided by the ResultSetMetaData calls is correct. // However, the nullable/not-nullable property is not set correctly in at least two // DBMSs, while it is correct for those DBMSs in the getColumns() info.  Therefore, // we collect the collumn nullability information from getColumns() and pass that // info to the ResultSet to override what it got from the ResultSetMetaData.
"/**	 * the utility class that reads and writes release info from/to the release.xml file TODO: Spring-inject	 * when this class is a Spring bean	 */"
// TODO: This won't work when the column has values with quotes in them. // Use PreparedStatements instead. Hmmm... instead of insert statements, could we not // just create a sequence and generate a select statement that: // a) uses the sequence for the pkid // b) selects distinct values // That would be a more efficient approach that would also eliminate this quoting problem
// The following only works if SwingUtilities.getRoot(table) returns // and instanceof BaseMDIParentFrame. // If SwingTUilities.getRoot(table) returns and instance of Dialog or // Frame, then other code must be used.
// Need to somehow call  // SQLResultExecuterPanel.reRunSelectedResultTab(true); //  // Something like : // SQLResultExecuterPanel panel = getPanel();  // panel.reRunSelectedResultTab(true); // // However, that doesn't apply when the user is exporting from the // table contents table.  There needs to be a more generic way to // do this for all tables containing data that is to be exported // where some of the fields contain placeholders. // For now, we just inform the user and let them either continue // or abort and change the configuration manually,  // re-run the query / reload the table data and re-export.  
//?? Split these 4 functions off into a subclass of BaseFavouriteAction
// TODO: Rename this to getTableType.
// TODO: Bizarre that I couldn't find a valid SQL to drop an index.
//TODO: ? Dialog Handling on Cancelled ?
// This refactoring depends on the following API methods: // getCreateTableSQL
//Should probably create my own table model but i am being a bit slack.
// TODO Probably want to allow the user to set these sequence properties ?? // Sequence settings.
// We set expected and checksum to -1 here, since we don't have that information for release.xml file // TODO: Can HttpClient be used to get the byte-size of release.xml so we can perform this check?
// Here, I don't completely understand how these types are to be used in all databases and I haven't // yet had time to implement support in the dialects for them. So, this exclude list will keep these // less commonly used types from failing the test. Also, since not all of these types appear in Java5 // and we currently support compiling the code base with it, I use the integer values for new types // that were introduces in Java6, rather than the type constant name.
"/* * TODO: Delete this class - unused */"
"/*					 * TODO: Find out why					 * KLUDGE: For some reason, I am not able to get the sheet to					 * size correctly. It always displays with a size that causes					 * the sub-panels to have their scrollbars showing. Add a bit					 * of an increase in the size of the panel so the scrollbars					 * are not displayed.					 */"
// Copied from Java Doc Matcher.replaceAll: // // Note that backslashes (\) and dollar signs ($) in the replacement string // may cause the results to be different than if it // were being treated as a literal replacement string. // Dollar signs may be treated as references to // captured subsequences as described above, and // backslashes are used to escape literal characters in the replacement string.
"/**	 * TODO: Clean this mess up!!!! Load plugins. Load all plugin jars into class loader.	 */"
// TODO: subclass these hibernate dialects to provide the "canPasteTo"  //       api method in HibernateDialect interface. //private static final DB2390Dialect db2390Dialect = new DB2390Dialect();
// This is weird - if I don't set this the column header doesn't line up // with the column contents.
// Required otherwise it gets too wide.
//??? For now, use the same renderer as everyone else. //?? //?? IN FUTURE: change this to use a new instance of renderer //?? for this data type.
// TODO: Delete Me
// This refactoring depends on the following dialect API methods: // getUpdateSQL
// For PointBase, if type maps to Pointbase "BLOB", and the size // isn't valid (PB requires size for BLOBS) then set it to something // reasonably large, like 16MB. 1 is the default size if no size // is specified.  That's practically useless :)
// Should the data be first cloned so that the sorting doesn't take place // on the array that is used in getValue() // TODO: This is a must if sorting is done in a thread! ??
"/*			 * TODO: When 1.4 is the earliest version supported, add the following line:			*		setSurrendersFocusOnKeystroke(true);			* This should help handle some problems with navigation using tab & return			* to move through cells.			*/"
// Drop FK constraints before dropping any tables. Otherwise, we // may drop the child table prior to dropping it's FKs, which would // be an error. // TODO: This should be done in the dialect's getTableDropSQL method for a database specific // handling(or ignoring) of this problem.
//Silently ignore, what could we do anyway?
// This is a bit hard coded but if we use _scale here // some number displays go crazy.
// TODO: Figure out why the selection of the root node in the object tree // is undone if we don't delay. It seems like some other thread racing  // to set the selected node to none.  When this happens, the detail pane // for the root node disappears when a session is first opened, or when // an ObjectTree frame is created.  This is a really crappy and unreliable // way to fix this problem, but it hides the problem for now.  A better  // understanding of the architecture of session creation is required  // before a proper solution can be attempted. RMM 20051217
// TODO: Temporary until we sort out a better way to do guido's fix // assertEquals(SECOND_STMT_SEP, qt2.getSQLStatementSeparator());
// TODO Maybe we should have a checkbox to allow the user to toggle  // default value on/off.  Some dbs (like DB2) treat empty string "" as // a different default value than null.
// check the error stream for a problem // // This is a bit questionable since it is possible // for processes to output something on stderr // but continue processing.  But without this, some // problems are not seen (e.g. "bad argument" type // messages from the process).
// OK, this is a hack.  Currently, when precision == scale, I have  // no way to determine if this is valid for the actual data.  The // problem comes when the source db's precision/scale are greater -  // or reported to be greater - than the precision/scale of the  // destination db.  In this case, it maximimizes both for the  // destination, causing a definition that allows 0 digits to the  // left of the decimal.  Trouble is, without looking at the actual // data, there is no way to tell if this is valid - in some cases // it will be ok (0.0000000789) in others it will not be ok (100.123). // So for now, make the scale be approx. one-half of the precision // to accomodate the most digits to the left and right of the decimal // and hopefully that covers the majority of cases.
//????? if desired, get fancy and use icons in buttons instead of text ?????????
// TODO: When JDK1.4 is the earliest JDK supported // by Squirrel then remove the hardcoding of the // boolean data type.
// TODO: This should be handled with an Iterator
/* Work around some UTC and Daylight saving offsets */
//?? Is there any way to check for invalid input?  Valid input includes //?? at least any printable character, but could it also include unprintable //?? characters?
// TODO: These 2 should be handled with an Iterator.
// This is (a logically not sufficent) try to cope with the problem that there are the following // contradictory rules in the JDBC API Doc: // Statement.getResultSet(): // This method should be called only once per result. // Statement.getUpdateCount(): // This method should be called only once per result. // Statement.getMoreResults(): // There are no more results when the following is true: (!getMoreResults() && (getUpdateCount() == -1) // // If getMoreResults() returns false, we don't know if we have more results, we only know that it isn't // a result set. Since we called getUpdateCount() before getMoreResults() because we would like to know // the update count of the first result, we might not be allowed to call getUpdateCount() again. // // The Intersystems Cache Driver for example always returns the same updateCount on simple // INSERT, UPDATE, DELETE statements not matter if getMoreResults() was called. So updateCount never // gets -1 and this will loop forever. When I discussed the issue with the Intersystems people they // just told me not to call getUpdateCount() twice. That simple. My hope is that this will cure // problems with DBs that just don't care for multiple result sets.
// The call here is the result of a desperate fight // to find a place where the components in the split // had not height = 0. If someone knows a better way // please tell me I'll apreciate any advice. // gerdwagner@users.sourceforge.net
/** TODO: Spring-inject when this class is a Spring bean */
"/* TODO: what I really want to do here is get the SQL script and replace                     * ""CREATE PROCEDURE"" with ""ALTER PROCEDURE"", then put that in the SQL pane                     * and *NOT* execute it. */"
// TODO: should I be adding quotes if user wants identifiers quoted??
// The following ugly conversion from text to Byte is necessary because // the Byte class is inconsistant.  When asked to output as Hex, it does // so as an UNSIGNED byte, but when asked to read back the same thing // using the Hex radix, it insists that the input must be SIGNED. // To get around this, we up-size the conversion to Integer, then  // truncate that to a byte, and finally convert the byte to a Byte.  Yech.
/* this should just bring back one table, i hope. */
// TODO: Temporary until we sort out a better way to do guido's fix // IQueryTokenizer qt2 = sessionUnderTest.getQueryTokenizer();
// Hack to deal with Firebird's RDB meta tables.
// Hack to deal with Axion AXION_* tables.
// handle mouse events for double-click creation of popup dialog. // This happens only in the JTextField, not the JTextArea, so we can // make this an inner class within this method rather than a separate // inner class as is done with the KeyTextHandler class. //
// Don't use tinyint for now, even though Mckoi "supports" it. It's // notion of tinyint is 7-bit (not 8-bit) so it is not compatible with // other DBs and leads to overflow (resulting in negative values which // are a corruption of the actual value inserted/updated). This is not // a great work-around. I filed a bug report on the mailing list; // hopefully it will get fixed soon.
// TODO: Need to define a better approach to getting dialects. // That is, we don't really want to ever prompt the user in this // case.  It's always Oracle.  Yet, we may have a new OracleDialect // at some point.
// No appropriate DataType for this column, so do the best // we can with what we know. // // THIS MAY NOT BE THE BEST BEHAVIOR HERE!!!!!!!
// Evil hack to split the vacuum output a little.
"/** * This <CODE>ICommand</CODE> displays a dialog box that allows the user to * enter a 'where' clause or an 'order by' clause used when getting data via * the 'Contents' tab. * * @author <A HREF=""mailto:mjhammel@users.sourceforge.net"">Maury Hammel</A> * * TODO: Change name to ContentsTabFilterCommand */"
// TODO: - Col - Add method to Databasemetadata that returns array // of objects for getBestRowIdentifier. For PostgreSQL put this kludge in // the new function. THis way all the kludges are kept in one place. // // KLUDGE!!!!!! // // For some DBs (e.g. PostgreSQL) there is actually a pseudo-column // providing the rowId, but the getBestRowIdentifier function is not // implemented.  This kludge hardcodes the knowledge that specific // DBs use a specific pseudo-column.  Additionally, as of pg 8.1, // you must create the table using "WITH OID" appended to the create // statement.  Otherwise, OID column is not available by default. //
// This is a work-around for what looks like a bug to me - it is a syntax error to qualify with the  // schema the new table name, but not the old as in: // // ALTER TABLE "public"."tablerenametest" RENAME TO "public"."tablewasrenamed" // // The second "public". is apparently not (currently) a valid thing to do.
// Skip formatting for Stored Procedures - They can have // comments embedded in them, and I'm presently not sure // how the formatter handles this.
// ??Need to tell object to display itself in a panel.
// all of the following have been converted to use the DataType objects // So, why not just have case Types.NULL and default??? (this seems pointless) // RMM 20070726
//?? Need to associate a panel with an object type somehow.
"/*     *     *     * Implement IDataSetUpdateableModel interface     * and IDataSetUpdateableTableModel interface     *     * TODO: THIS CODE WAS COPIED FROM ContentsTab.  IT SHOULD PROBABLY     * BE PUT INTO A COMMON LOCATION AND SHARED BY BOTH THIS     * CLASS AND ContentsTab.     *     *     */"
// TODO: How to let the user customize this??
"/*		 * CSE: moved this code down here to fix repaint problems on first		 * display - bounds should be set before install		 *		 * Uninstall the old popup from root pane		 * and install the new one. Even in case		 * they are the same objects it's necessary		 * to cover the workspace switches etc.		 */"
//TODO: RENAME to DataSetViewerPropertyDestination
// Discovered that the loginame field can be null - in that case, how to know we have the correct view?
"/**	 * TODO: This shouldn't be public. Its only been done for the JComplete	 * plugin. At some stage this method will be returned to package visibility.	 */"
// Some dbs (like McKoi) make -1 the default for scale.  Apply the  // same hack as above.
"/**	 * TODO: move to IOUtilities	 * 	 * @see net.sourceforge.squirrel_sql.client.update.UpdateUtil#createZipFile(FileWrapper, FileWrapper[])	 */"
"/*				 * TODO: Work out why				 * KLUDGE: For some reason, I am not able to get the sheet to				 * size correctly. It always displays with a size that causes				 * the sub-panels to have their scrollbars showing. Add a bit				 * of an increase in the size of the panel so the scrollbars				 * are not displayed.				 */"
// If SQL executing produced warnings then write them out to the session // message handler. TODO: This is a pain. PostgreSQL sends "raise // notice" messages to the connection, not to the statment so they will // be mixed up with warnings from other statements.
//?? Best guess: read object? //?? This is probably the wrong thing to do here, but //?? I don't know what else to try.
// Hack to deal with Ingres IIE* meta tables.
// This is a bit hard coded but if we use _scale here // some number displays go crazy. //_numberFormat.setMaximumFractionDigits(_scale);
// TODO: SPATIAL and FULLTEXT indexes require a MyISAM engine for the table. Is there a way // to tell what engine is being used for a table? It may not be necessary, since the following // doens't hurt if already a MyISAM engine: // // ALTER TABLE my_table ENGINE = MYISAM; // // Still, this is not the kind of thing we would want to do automatically, since MyISAM engine is // non-transactional. We will probably need to tell the user - somehow - that they need this // otherwise the create index statement will fail. Maybe a comment in the script and if they // happen to read it they could uncomment the conversion of the engine? Maybe a custom dialog?
"/* * TODO: Delete me * Copyright (C) 2002-2003 Johan Compagner * jcompagner@j-com.nl * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */"
// JASON: Make menu smarter. When second window for the same // session is added create a hierarchical menu for all windows // for the session.
// For some reason, when the Oracle plugin adds details tabs for  // triggers, the _tabPnl's first tab ends up being the trigger details // tab and not the generic database object info tab.  This causes the  // _tabs length to be 1 tab greater than the tabs that are actually in  // the _tabPnl.  This throws off the selection such that the tab  // selected in the tab panel doesn't get rendered until the tab to the // right of the selected tab is selected.  This is a work-around for  // this problem until I can determine why the DatabaseObjectInfoTab  // never makes it into the _tabPnl in the first place.
// The following is a work-around for the problem on Mac OS X where // the Apple LAF delegates to the Swing Popup factory but then // tries to set a 90% alpha on the underlying Cocoa window, which // will always be null if you're using JGoodies L&F // see http://www.caimito.net/pebble/2005/07/26/1122392314480.html#comment1127522262179 // This has no effect on Linux/Windows
// colDefs not in same order as DB, so search for // matching colDef entry // Note: linear search here will NORMALLY be not too bad // because most tables do not have huge numbers of columns.
// TODO: What about these // Viewport.font, ColorChooser.font, InternalFrame.font, // OptionPane.font, "Panel.font", // ScrollPane.font, DesktopIcon.font
// Don't use "real" type. Axion sets the column size to 12 by default, // yet it can handle more precision. So data being copied from the real // column can potentially be larger than what the column claims to support. // This will be a problem for other databases that pay attention to the // column size. // TODO: Perhaps re-introduce the REAL type, but use the new // getPrecisionDigits to max out the precision.
// This info is merely a placeholder in the tree that we can use to get index name and // parent name more easily. We probably should create a IndexColumnInfo that has this // extra info in it.
// TODO: should the constraint name simply be the column name or something more like a constraint // name?
// Some tables have pseudo column primary keys and others // do not.  JDBC on some DBMSs does not handle pseudo // columns 'correctly'.  Also, getTables returns 'views' as // well as tables, so the thing we are looking at might not // be a table. (JDBC does not give a simple way to // determine what we are looking at since the type of // object is described in a DBMS-specific encoding.)  For // these reasons, rather than testing for all these // conditions, we just try using the pseudo column info to // get the table data, and if that fails, we try to get the // table data without using the pseudo column. // TODO: Should we change the mode from editable to // non-editable?
// TODO: maybe instead of throwing an exception, we could ask // the user if they would like us to adjust their preference for // them.
// HACK: some dbs (like Frontbase) don't support boolean // types. I've tried tinyint, bit and boolean as the column // type, and setBoolean fails for all three. It's a mystery // at this point what column the getBoolean/setBoolean methods // actually work on iin FrontBase.
"/* work-around for this driver, which must have ""dbo"" for schema.  The       * JConnect family of drivers appears to not be affected and can accept a       * null schema, which is necessary to find tables in other schemas, within       * the same catalog.  Similarly, jTDS 1.2.2 doesn't require this, yet it       * doesn't return non-dbo schema tables, unfortunately.        */"
"/** * A dialect delegate for the Progress database. TODO: Progress specification says that the sum of all column * lengths of a table row may not exceed 31960. Need to add an interface method to the HibernateDialect * interface that takes an array of lengths and and checks the sum of columns for a row. This maximum number * may be different across databases so this check method needs to be implemented by each dialect. *  * @author manningr */"
"//TODO: Decide whether this should be a bound property or not. //		getPropertyChangeReporter().firePropertyChange(ISQLDriver.IPropertyNames.NAME, _name, _name);"
"/*					 * END-KLUDGE					 */"
// Hack to deal with Sybase's sys tables
"/** * TODO: Move all code other than for window creation up to AliasWindowManager * Factory to handle creation of maintenance sheets for SQL Alias objects. * * @author <A HREF=""mailto:colbell@users.sourceforge.net"">Colin Bell</A> */"
// TODO: Why shouldn't we call registerSQLDriver here? RMM 20070401
// TODO: Should have session listeners instead of these calls.
// TODO: just noticed that MySQL 5.0 supports a multi-bit BIT // column by using the getObject/setObject methods with a byte[]. // So it would be valuable at some point to make this code a bit // more dbms-specific
"/** * TODO: Move all code other than for window creation up to AliasWindowManager * Factory to handle creation of maintenance sheets for SQL Driver objects. * * @author <A HREF=""mailto:colbell@users.sourceforge.net"">Colin Bell</A> */"
// On Win 2000 & XP mnemonics are normally hidden. To make them // visible you press the alt key. Under the Windows L&F pressing // alt may not work. This code is a workaround. See bug report // 4736093 for more information.
// TODO: Once we're happy that JFCUtilities is no longer required
/* work-around for bug which means we must use "dbo" for schema */
//Unfortunately we need to remove the exising tree table component and create a //new one due to limitations with replacing models in the existing //sun implementation. Why on earth they couldnt formalise the tree //table example on JFC (which we use) a bit more is anyones guess.
// TODO: figure out why bind variables aren't working
// TODO: Make properties file Application.properties so we can use class // name to generate properties file name.
// Hack!!! hopefully the FK name will always be the last token!
// TODO Need to have a generic hibernate dialect extend this to provide the types.
// This could (perhaps more elegantly) be done by recursion
"/** * TODO: Get rid of this class. * This combobox contains all the columns in an SQL table. * * @author <A HREF=""mailto:colbell@users.sourceforge.net"">Colin Bell</A> */"
// TODO: Make Parameter implement SQLItem interface which has a getString // method which can also be implemented by SQLString, or SQLFragment or // some such.  We can then eliminate the use of instanceof below and  // clean up the code a bit, by making itemsInSql look like: // //   ArrayList<SQLItem> itemsInSql = new ArrayList<SQLItem>(); // 
// H2 uses Java classes that implement the "Trigger" interface to operate // on database tables rows when an action triggers them. Therefore, there // is currently no way to access the source for a trigger. Hopefully this // will change at some point in the future. // _treeAPI.addDetailTab(DatabaseObjectType.TRIGGER, new TriggerSourceTab("The source of the trigger"));
// Arrays of Strings are a special case. // In XMLBeanWriter method ProcessProperty an array of // Strings is turned into a list of StringWrapper objects // in the XML (presumably so that when reading them back // we have a class that we can call setters on). Thus, // when reading back an array of Strings we actually read // an array of StringWrappers, which gives a type mis-match // in the following arrayCopy. Therefore we need to convert // the data that is currently in the StringWrapper objects // into actual Strings.
"/**	 * TODO: Move this to IOUtilities Extracts the specified zip file to the specified output directory.	 * 	 * @param zipFile	 * @param outputDirectory	 * @throws IOException	 */"
"/**	 * Set the password for this alias.	 *	 * @param	password	The new password.	 *	 * @throws	ValidationException	 * 			TODO: What conditions?	 */"
// tell caller that the underlying data was not updated //?? is this always true, or could the data be updated with a warning?
// empty string ('') seems to be represented as null in some drivers. // Not sure if this is the best thing to do here, but it fixes an issue // where SQL returns is set default to '', when it is already null.
// TODO: pass in a message handler so user gets error msgs.
// Facade methods for IMessageHandler.  We don't want to allow code to  // directly access an internal IMessageHandler, now that the IMessageHandler // interface requires an ExceptionFormatter to be injected for methods that // accept Exceptions.
"// JASON: Mow that multiple object trees exist storing the edit // where by objectInfo within session won't work. It needs to be objectinfo // within something else. //	private final Map _editWhereColsSheets = new HashMap();"
// TODO: Put in all the property accessors
// DB delete worked correctly, so now delete from table //IMPORTANT: The user and the creator both work through the // SortableTableModel, not the Actual model.  Thus the row // indexes to delete are given in the SortableTableModel row numbers, // so we must work through that model model to actually do the delete.
// TODO: figure out a more reliable way to handle OTHER type // which indicates a database-specific type.
// TODO: Is giving a FK constraint a name universally supported // and done the same way on every database?
/* TODO: sort the list. */
//?? remember which column is the rowID (if any) so we can //?? prevent editing on it
// TODO // Plugin supports only the main session window
"/**	 * Called when app shutdown.	 * TODO: Put throws clause back in	 */"
// TODO I18N
// TODO: Tooltips
/* TODO: FILLFACTOR, ON [PRIMARY], etc. */
// TODO: allow the user to specify ignore case or preserve case.
// TODO: When message are can have some text in red (error) // and some normal then put out errors in red.
// TODO: tell the user that the selected destination schema is // the same as the source schema. // monitor.showMessageDialog(...)
/* TODO: ON [PRIMARY] */
// TODO: Maybe prompt the user to ask to append the records,  // ignoring errors for constraint violations?
// TODO: Refresh
// TODO: Maybe someday we could inform the user that the imported // key can't be created because the list of tables they've // selected, doesn't include the table that this foreign key // depends upon. For now, just log a warning and skip it.
"/*			 * TODO: hookup with Interbase spec and adjust these as necessary. 			 */"
// TODO: figure out how to get then name of the table that the trigger  //       is on.  //"and tables.name = ? " +
// TODO: should also make sure that each of the columns is made "NOT NULL"
// Not implemented
"/**     * Sorts the specified destInfos array based on the order of the sourceInfos     * array.  Not a very efficient algorthim, but it gets the job done.     * TODO: rewrite this using Collections sorting capability.     *      * @param sourceInfos     * @param destInfos     * @param sourceTableName     * @param destTableName     * @return a re-ordered version of the specified destInfos array     * @throws MappingException if the arrays differ in length or column names.     */"
// TODO: Perhaps we can tell the user when they click "Copy Table" // if the source session is Axion and they want primary keys that // it's not possible.
// TODO: use the destination database type to derive a format // that is acceptable.
// TODO: if the use checks "export entire table" and doesn't select all,  // then the selected indices are not set, and this check doesn't properly // detect missing data.  If export entire table is selected, we need to  // set the selected indexes below correctly.
// TODO: create the child index ST
// We just copied the last table.  Now it is safe to copy the // constraints.(Well, that is, if all FK dependencies are met // in the group of tables being copied.  // TODO: new feature could be to examine table list for FK's  // in tables not in the list then prompt the user to add  // those missing tables to the list.
"/** * A dialect delegate for the Axion database.   * TODO: This dialect is not yet complete.  Need to provide implementations wherever ""Not yet implemented"" * appears.  */"
// TODO: Allow the user to specify the sequence name for dialects that don't natively support  // auto-increment columns without using sequence/trigger combo.
"/* * TODO: finish i18n */"
// TODO: Need to enhance the index dialog to allow specifying storage option. For now just accept the // default for the index access method. // valuesMap.put("indexType", "USING BTREE");
// TODO: Put throws clause back in // Empty method.
// TODO?? ColumnDisplayDefinition should also have the Type (String, Date, // Double,Integer,Boolean)
// TODO: Need to add storageOptions to the add index dialog // valuesMap.put(ST_STORAGE_OPTION_KEY, );
// Move any i18n files that are located in the core downloads dir to the i18n downloads dir. The spring // application context will not load properly (for some unknown reason) when there are i18n jars in the // classpath. So as a work-around, we simply ensure that they are where they should be anyway. // Previously we were not as careful about this, so it is possible that i18n jars were copied into the // core downloads directory.
// TODO: Implement this better
// TODO need to implement or change the message
// TODO: Need to allow user to specify this
"/** * A dialect delegate for the TimesTen database. * TODO: This dialect is not yet complete.  Need to provide implementations wherever ""Not yet implemented"" * appears.   */"
"/** * A dialect delegate for the Sun Microsystems HADB (High-Availability) database. * TODO: This dialect is not yet complete.  Need to provide implementations wherever ""Not yet implemented"" * appears. *  * @author manningr */"
// Not yet ready // DataImportGlobalPreferencesTab tab = new DataImportGlobalPreferencesTab(); // return new IGlobalPreferencesPanel[] { tab };
// TODO: set the total for the progress bar.
// TODO: use the destination database type to derive a // format that is acceptable.
//?? Future: may want to create TablePopupMenu to allow cut/copy/paste operations
// TODO: ask the user if they want to "undo" the changes that the  // paste made.  Alternatively show them the specific problem and  // let them fix it.  Then allow them to retry the operation, starting // from the point at which the previous operation failed.
// flag for whether we have already loaded the properties or not
// History file not found for user - first time user ran pgm.
// default is 12 point, so define font relative to that
//Getting java.sql.Driver to run shutdown command
// i18n[ColorPropertiesController.hint=Set session colors for this Alias]
// Remove trailing ","
//Version //This is optional. If you don't want to give out this info, please enter "N/A"
// Expanders - trigger and index expanders are added inside the table // expander //_treeAPI.addExpander(DatabaseObjectType.SCHEMA, new SchemaExpander());
//the code bellow is only for Embedded Derby Driver
/* Register custom DataTypeComponent factory for Derby CLOB type */
// handle null, which is shown as the special string "<null>"
// i18n[DataSetUpdateableTableModelImpl.error.retrievingdefaultvalues=Error retrieving default column values]
//_treeAPI.addDetailTab(DatabaseObjectType.SEQUENCE, new DatabaseObjectInfoTab()); //_treeAPI.addDetailTab(DatabaseObjectType.SEQUENCE, new SequenceDetailsTab());        
// no default in DB. If nullable, use null.
// there was an error in the conversion
// about to delete last thing in field, so replace with // null
// i18n[exportconfig.fileWillBeCreated={0} not found - will be created]
// To make the shortcut visible in the popup
// i18n[exportconfig.fileExistsReplace={0}\nalready exists. Do you want to replace it?]
// ///////////////////////////////////////////////////////// // IBM DB 2 specific code to read procedure definitions.    
// it is handy to have the cannonical path name // to show user in error messages.  Since getting // that name might involve an IOException, we need // to put it inside a try statement.  However, // since the file does exist there is no good reason // for getting an IOException at this point, but // if we get one there is something seriously wrong // and we want to abort.  Therefore it make sense // to get that name here and save it for later use.
// Load plugin preferences.
// Currently, as of milestone 3, Axion doesn't support "schemas" like // other databases. So, set the schema to emtpy string if we detect // an Axion session.
// The DataObject returns a string to put into the // popup which can later be converted to the appropriate // object type.
// have the DataType object fill in the appropriate kind of value // into the appropriate variable position in the prepared stmt
// bad export - do not proceed with command // The exportData() method has already put up a message // to the user saying the export failed.
// DataTypes may limit the initial data read from the DB, e.g. to minimize the // time needed for the initial load of the table. // To edit the contents of a cell, we require that the entire contents of the data // element be present in the cell before editing. // Therefore we ask the DataType if we need to re-read the data contents // without limiting it, and do that read if needed.  If there is a problem during the // read (e.g. we cannot identify exactly one row in the DB matching the // current row in the table), then the cell is not editable. // The reverse is not true - if we succeed in reading the data, there may still // be other reasons why we cannot edit it, so we need to check for it being editable // after the read
// i18n[oracle.displaySessionStatistics=Display database session statistics]
// the parse did not find XML, or it was mal-formed
// Test make many paths
// it's error to have '8' and '9' in octal number
// table doesn't exist in source db
// in case it already exists
// GWG XML format check code
// The indexes are in ascending order, but we want to delete in // descending order (see previous comment), so run through the // list backwards.
"// i18n[exportconfig.databaseDrivers=Database Drivers]		"
// i18n[favs.nameMustNotBeBlank=Name cannot be blank.]
"//	private String getFileName(File dir, String name) //	{ //		 //		return getFileName(new File(dir, name)); //	} //"
// Users.
"//	private final static ILogger s_log = //		LoggerController.createLogger(AlterTableDialog.class);"
// No end bracket, params might follow 
// These files contain images etc. We try to filter out these props.
//Re-registering driver is necessary for Embedded Derby
// i18n[DataSetUpdateableTableModelImpl.error.unknownerrorupdate=Unknown problem during update.\nNo count of inserted rows was returned.\nDatabase may be corrupted!]
// typeName
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getHelpFileName()     */"
// Method Tests
//ResultSet rs = con.getMetaData().getTables("dbcopysrc", null, "BIGINT_TYPE_TABLE", new String[]{ "TABLE" });
// This might be because an table alias is used maybe with an AS before it.
// Empty method.
// ignore any SQLExceptions. This would only if we could not get // column info from the SQL database meta data.
// Open file output stream
// set the ps to read from the file we just created.
// see if there was a problem during parsing
// Increases component width by 40 pixels
// Increases component width by 20 pixels
// Allow the user to set "0" for the fetch size to indicate that // this should not be called. JDBC-ODBC bridge driver fails to // execute SQL once you have set the fetch size to *any* value.
// Impossible.
// not too many old files
// First time through, skip the double spacing
//i18n[PasteTableAction.error.destdbobj=The destination database  //doesn't support copying tables into '{0}' objects.\n Please  //select a schema to paste into.]
// if no columns defined, return a generic class // to avoid anything throwing an exception.
// sort the indexes into ascending order (because that is the // only function easilly available from the Arrays class)
// Read the entire row, since some drivers complain if columns are // read out of sequence
/* The second time that catalogs are asked for, return two */
// i18n[i18n.wroteFixedFile=Wrote file {0}]
// SS: now select/reorder columns
// Done before actually reading the data from the ResultSet. If done // after // reading the data from the ResultSet Oracle throws a // NullPointerException // when processing ResultSetMetaData methods for the ResultSet // returned for // DatabasemetaData.getExportedKeys.
"/*     * As the JCC driver code is obfuscated, we do not check the full class     * name, but resort to checking a prefix and suffix instead.     *      * In my version, the full class name is ""com.ibm.db2.jcc.c.SqlException""     */"
// Prefix for the JCC SqlException class name
// Class name for the JCC SqlException class
// Setup the applications Look and Feel.
//Set the return type
// Adding 10 000 000 milliseconds from the orgTime of File f1
// Cannot pass byte array to Class.forName
// Supports Session main window only
// Here the max line length == original line size - so it doesn't get  // trimmed of white space.
// i18n[oracle.noSql=No SQL selected for execution.]
// Settings Gap Sizes ***************************************************
//        QName l_qn = new QName( "http://sqlvalidator.mimer.com/v1", "SessionData" );
// Empty body.
// i18n[firebird.showTrigger=Show trigger source]
// Filling Columns ******************************************************
// User has cancelled the query execution.
// Appending Labels with optional components ------------------------------
// Adding Titles ----------------------------------------------------------
// If the user chooses neither Fixed value nor Auto-Increment, then clear the "Fixed value"  // field if it has a value.
// i18n[firebird.showProcedureSource=Show procedure source]
// Removed for duplicate line
// No i18n, developers should write English props.
/* The JTextComponent that is being used for editing */
/* The first time that schemas are asked for, return just one */
//The connection Technology used, could be ODBC, JDBC, ADO //This is optional. If you don't want to give out this info, please enter "N/A"
// i18n[SQLResultExecuterPanel.outputStatus=Building output...]
// Check to be sure we get only one schema
//Use the session key you got from the openSession call here
// i18n[firebird.seqDetails=Display sequence details]
//Set the target server and name space
// i18n[I18n.NoSourceDir=Please choose a source directory.]
// Execute the SQL command in the SQL tab and then display the SQL tab.
// save the pointer needed to enable editing of data on-demand
//if doesnt exist prompt to create it.
// check to see if we hit the end of the file // without processing the current record
// copy the header data from the column array // to the header string array
// Logger for this class
// since the letter wasn't a special letter, this // will be the first letter of our current column
// only check once per session
// setting color
// need to return a clone, and can't use clone because values.Length // might be greater than columnsCount
// this will be a text qualified column, so // we need to set startedWithQualifier to make it // enter the seperate branch to handle text // qualified columns
"/*	 * The JTable used for displaying all DB ResultSet info.	 */"
// Test make a long path
// since user is now using popup, stop editing // using the in-cell editor, if any
// Rob: Removed replacement via RegExp because it needed several RegExp escapes in val.
// there was a problem with the read // It would be nice to report this to the user, but if we try we get in trouble // in some cases where the data is continually re-read after the dialog // goes away (because the cell is being re-painted). // cell is not editable
// these are all more or less global loop variables // to keep from needing to pass them all into various // methods during parsing
"/*    * First we have the methods for in-cell and Text-table operations    */"
// delete the row from the table
// for convenience, cast the value object to its type
// we have the whole contents of the CLOB
// If the suffix is ".tmp" then send it to the array
// i18n[xmlReformatter.xmlWarning2=XML Warning]
// The following pointer is needed to allow the "Make Editable button // to tell the application to set up an editable display panel
// Not a uri - assume it is a string filename.
// These objects do not depend on catalogs or schemas. // It is enough if we load them once.
//i18n[explainplanexecuter.createPlanTableMsg=The Oracle Plan  //Table '{0}' doesnt exist in the current schema. Do you want to  //create it?]
// I have seen the reference to the outer class being null // when this method is called. // I have seen it only with the runtime jars // and on Linux. // I could not reproduce in my IDE.
// i18n[codecompletion.useSyntaxPlugin=Code completion will work better if you use the Syntax plugin. Get it from squirrelsql.org, it's free!]
// cut table image and draw on the page
// Column not in model
// result of checking for jaybird driver with major version >= 2
// delete the old file
//Dataholder res = conn.runClassMethod("%Library.CMUtilities", "getExecutionPlan", argv, Database.RET_OBJECT);
// i18n[mssql.allObjects=All objects]
// data is a String, so we need to convert to real object
// NOI18N
"//	private int _lastSessionIdx = 1;"
// make sure there is an instance
// line should look like : // // This is a line with an <span>embedded key</span> in it.  //
"//		double headerWidth = tableHeader.getWidth() * scale;"
// Might also be a catalog or a schema name
//tab button
//ignore the user input
// just in case table is editable, call creator to set up cell editors
// Some actions dont have accelerators
//i18n[TaskThreadPool.errorDuringTaskExecMsg=Error ocured during task execution:]
// The field is binary and not in the format expected by the DataType // default to hex
// Creating a filter that catches "*.tst" files.
// Process the listeners last to first, notifying // those that are interested in this event.
// Inserts are not properly separated. We give up.
// call the underlying model to get the whole data, if possible
// better safe than sorry!
// tables that have at least one child table and have a least one parent table
// add controls for file handling, but only if DataType // can do File operations
// We want to delete rows from the end of the table towards the beginning // of the table.  If we delete from the front to the back, that throws off // the indexes of the rows after each delete and we would have to compensate // for that. // Example: if we want to delete rows 2 and 4 and do it in that // order, then after deleteing row 2 the row that used to be row 4 is now // actually row 3, so we would have to subtract 1 from the index to get the // row to delete. // On the other hand, if we delete row 4 first, then the indexes of all // rows prior to that one have not been affected, so we can then delete // row 2 without any complications.
// private void appendPrivelegeToBuffer(StringBuffer pBuffer, String psPrivilege)
// get the default values from the DB for the table columns
//Make the button looks the same for all Laf's
// childs
// In case the connection won't be able to tell its Auto Commit state, // this is the best default we have.
// get the values from the "not use" list
// check for Informix - it has very "special" qualified names
//shift the image for pressed buttons
// The list of rows may be empty, in which case we just return.
// end of mouse listener
// i18n[i18n.missingTarnslation=Missing translations]
//Making nice rollover effect //we use the same listener for all buttons
// add a panel containing binary data editing options, if needed
// Do the conversion into the object in a safe manner
// create new object to hold the different value, but use the same // internal CLOB pointer // as the original
// for convenience, cast the existing object
// "deactivate indexes during restore" // "restore without creating shadows" // "do not reserve space for record versions" // "restores one table at a time" // "do not restore database validity conditions" // "replace database from backup file" // "override old page size" // "new page size" // "restore"
// the line is a comment (as per the RFC 2483)
// "Unknown" types are treated as Strings internally in SQuirreL.
// ######################################################################## // ########## events // ######################################################################## // ------------------------------------------------------------------------
// malformed URI
// getRoot() doesn't appear to return the deepest Window, but the first one. // If you have a dialog owned by a window you get the dialog, not the window.
// the URI is not a valid 'file:' URI
// no existing clob to re-use
// Tests
// Now, check to be sure we get both catalogs.
// if the original object is not null, then it contains a Clob object // that we need to re-use, since that is the DBs reference to the clob // data area. // Otherwise, we set the original Clob to null, and the write method needs // to // know to set the field to null.
// a subclass of Foo with the same values as the original
// different only by type - same name
// create an empty set for the "not use" list
// Failure Tests
"/*    * Internal class for handling key events during editing of both JTextField    * and JTextArea.    */"
"/*    * Now the functions for the Popup-related operations.    */"
/* expectations that are specific to this test */
"//	private TableColumnsDataSet iut = null;"
// Check reference equality to be sure that it isn't the exact same object.
// the following can cause and exception if the text is not formatted correctly
// handle special case of delete with <null> contents
// add buttons to button panel
// This is acceptable
/* Common mock objects */
/* Test Constants */
//The target DBMS, could be Mimer SQL Engine, Oracle, ... //This is optional. If you don't want to give out this info, please enter "N/A"
// Labels
/* expect getFile for updated files that were downloaded */
/* expected fileOperationInfos for files that will be installed */
// check to see if new data is same as old data, in which case we // do not update the underlying data. // // This is NOT an optimization (though it does // speed things up).  We need to do this to avoid an error when we check for // rows being changed in the DB.  If the new value and old value are the same, // when we look to see if any rows already exist with the new value, it will find // the existing row and claim that the update will make one row identical to the // changed row (i.e. that there will be two identical rows in the DB) which is // not true.  So we avoid the problem by not updating the DB if the data has not // been changed.  This can happen if user changes the cell contents, then changes // them back before exiting the cell.
// ArtifactXmlBean
// visible (gui) // ------------------------------------------------------------------------
// Row 3
"/*		 * Save various information which is needed to do Update & Cancel.		 */"
// call the function in the app code that saves the data in the // persistant storage (e.g. a database). // The success or failure of that function (as indicated by the absance or // presence of a result errpor/warning message) determines the result of this call. // (Since the table is supposed to be editable, we should have an // IDataSetUpdateableTableModel object set in our super class.)
// user checks // ------------------------------------------------------------------------
// create an empty set for the "use" list
// non-delete when null => clear field and add text
// if there was a problem with converting, then just fall through // and continue as if there was no default given in the DB. // Otherwise, use the converted object
// try to use the DB default value
// MM-MYSQL driver doesnt support null for column name.
// user enters something when field is null
// i18n[i18n.ParsingFinish=Parsing finished]
// get the values from the "use" list
/* Now, create an array large enough to hold the original and the new */
// just send the text to the output file
// get the values from the "not use" list and convert to sorted set
// i18n[I18n.info=Info]
// check that the text is a valid representation
// Helper methods
// field is not nullable, so create a reasonable default value
// setup dest mock file
// handle null
// I cannot think of any reason for doing anything // at all here
// downloads directory
// check for user deletes last thing in field
// use factory to get the appropriate editor
// inject mocks
// if the data is not binary, then there is no need for conversion. // if the data is Hex with ASCII not shown as chars, then no conversion needed.
// return the expected format for this data
"//		case SESSION_BEAN_GRANT_AND_REVOKE: //            return FirebirdManagerGrantPreferenceBean.class.getClassLoader();"
// setup source mock file
// If we reach here we could not calculate a place to add the new table frame. // Now it will automatically be added at (0,0).
// Tell the user that they won't be able to show the explain plan
//   public int getPixelWidth() //   { //      int pixelByCm = (int) (Toolkit.getDefaultToolkit().getScreenResolution() * CM_BY_INCH + 0.5); //      return (int)(_format.getWidth() * pixelByCm + 0.5); //   } // //   public int getPixelHeight() //   { //      int pixelByCm = (int) (Toolkit.getDefaultToolkit().getScreenResolution() * CM_BY_INCH + 0.5); //      return (int)(_format.getHeight() * pixelByCm + 0.5); //   }
// Cannot mock URLs, they are final and so they cannot be subclassed.
// i18n[popupEditableIoPanel.reformatXml=Reformat XML]
// convert number conversion issue into IO issue for consistancy
//double zoom = _desktopController.getZoomer().getZoom();
//g.fillOval((int)(zoom*fp.x + 0.5) - rad, (int)(zoom*fp.y+0.5) - rad, 2 * rad, 2 * rad);
// CLOB cannot be used in WHERE clause
// The old view is preserved to eventually preserve folding points
// no need for conversion
"/*    * DataBase-related functions    */"
// PKTABLE_NAME // PKCOLUMN_NAME          // FKCOLUMN_NAME // FK_NAME
// delete when null => original value
// for convenience cast the object to ClobDescriptor
// test that the string is valid by converting it into an // object of this data type
"/*    * File IO related functions    */"
// default to hex if unknown base passed in
// Setting the starting position is ugly.  I just picked a point.
// tell user that there was a problem
// No problems, so indicate a successful update of the underlying data. // In case we are editing an SQL result that contains the edited colum // more than once, we need to tell the caller to update all columns. // Otherwise generation of where clauses for further editing will fail.
// Regression for HARMONY-46
// i18n[I18n.SourceDir=Source directory]
// downloads/plugin directory
// i18n[i18n.noNativeToAsciiOutDir=Cannot convert files without a native2Ascii output dir.]
// Overriding Superclass Behavior ***************************************
// MySQL disallows quoted column identifiers when adding a primary key.
// cleanup resources used
// if either of the values is null and the other is not, then the data has // changed and we fall-through to the change process.  Otherwise, check // the object contents.
// downloads/core directory
// Adding Rows **********************************************************
// There are many of these "tables", that PostgreSQL throws  // SQLExceptions for whenever a table-like operation is attempted. 
// if we reach this point, the value has been changed, // so fall through to next section
//fail("Not yet implemented");
// no update done to underlying data
// i18n[TableExportCsvDlg.formatXLS=Export MS Excel (XLS) file]
/* show all tooltips for ten seconds before hiding */
// tell the underlying data model to make itself editable, // which includes telling the GUI to rebuild itself
// i18n[mmsql.sqlScripts=SQL Scripts]
// PostgreSQL (at least 7.3.2) returns false for // supportsStoredProcedures() even though it does support them.
//i18n[ColumnDetailsDialog.columnCommentLabel={0} does not  //support column comments]
// Non-empty set of rows to delete.  Make sure user wants to delete
// end of combined export and execute operations
// i18n[I18n.TranslationsGenerationCount=Generated {0} templates to {1}]
// This was originaly done every time. // and the count of instantiated objects was amazing
// We look forward
// i18n[PostgresPlugin.showProcedureSource=Show procedure source]
// i18n[TableExportCsvController.replaceFile=The export file already exisits. Would you like to replace it?]
// Menues that are also shown in the main window Session menu might // be in this popup. If we don't remove them, the Session won't be Garbage Collected.
// look for illegal chars
// i18n[TableExportCsvController.noFile=You must provide a export file name.]
// If our separator is the regular expression special char '|', then // quote it before formatting.
// first attempt to add data to underlying table model
// i18n[TableExportCsvCommand.writeFileSuccess=Export to file  // "{0}" is complete.] 
/* Pick a tableInfo to remove and replace */
// MySQL disallows quoted constraint names
// i18n[I18n.noWorkdirSpecified=No working directory specified.]
// return the text from the file since it does // represent a valid data value
/* Mock objects */
// If this isn't instanceof org.hibernate.type.CollectionType a NoSuchMethodException will be thrown
// hand file input stream to DataType object for import // Also, handle File IO errors here so that DataType objects // do not have to.
// command returned non-standard value. // ask user before proceeding.
//IObjectTreeAPI api = _session.getObjectTreeAPI(_plugin);
// tell creator to delete from DB
/* setup expectations */
// i18n[editWhereColsPanel.useColumns=Use Columns]
// i18n[BookmarksAccessor.bookmarksPluginNeeded=Running bookmarks is only available with the Bookmarks Plugin.\nGet the plugin from www.squirrelsql.org. It's free.]
// '8' and '9' already handled
"/*		 * SELECT viewtext FROM informix.systables AS T1, informix.sysviews AS T2 WHERE tabname = 'a_view' AND		 * T2.tabid = T1.tabid		 */"
// We don't yet have the need to discriminate by version.
// i18n[TablePopupMenu.export=Export CSV / MS Excel ...]
// check for possibly bad return from child
// deletes the last ", "
//i18n[ProcedureColumnsTab.hint=Show columns for the selected procedure] 
// create the imput stream // (so that DataType objects don't have to)
// Code Completion has been done within Code Completion. Now just replace what all candidates have in common.
"/*	 * @see ActionListener#actionPerformed(ActionEvent)	 */"
// mockSQLConnection
// i18n[HibernateConfigController.noProviderMsg=Missing SessionFactoryImplProvider .\nChanges cannot be applied.]
// mockThreadPool
// i18n[i18n.noFilesOpened=No file found.\nSee message panel for details.]
// We need this buffer because this method may be called asynchronously to the event dispatch thread // What could happen is, that _currentAliasInfos ist changed.
// Unfortunately we cannot simply call getColumnTypeAlterSQL since "serial" type is 4 (which is the same // as java.sql.Types.Integer, so we would get back an integer column, not a serial column).  So we piece // it together ourselves: // // ALTER TABLE dbcopydest:"informix".serialtest MODIFY myid integer
//make a few calls
// Example for this code: // Completion should  // from Kv k inner join fetch k.positionen as posses where posses.artNr = 'sdfsdf'
// Can't work with ISessionAction because if a result window is on top // the session in a ISessionAction is null.
// Should at least bind the tablename to a bind var in the SQL
/* DB2 doesn't support cascade, set default, or set null for FK constraint update action */
/* DB2 doesn't support set default for FK constraint delete action */
// mockConnection
// SELECT //SEQSCHEMA,SEQNAME,DEFINER,DEFINERTYPE,OWNER,OWNERTYPE,SEQID,SEQTYPE,INCREMENT,START,MAXVALUE,MINVALUE, //NEXTCACHEFIRSTVALUE,CYCLE,CACHE,ORDER,DATATYPEID,SOURCETYPEID,CREATE_TIME,ALTER_TIME,PRECISION,ORIGIN, // REMARKS // FROM SYSCAT.SEQUENCES // WHERE SEQNAME = ? // and SEQSCHEMA = <schema>
//private static final String PERF_KEY_OBJ_TAB_DIV_LOC = "Squirrel.hibernateplugin.objTabDivLocAsInt";
// i18n[OraclePluginPreferencesPanel.sessionTimezoneTT=Set the session timezone to view  //'WITH LOCAL TIMEZONE' data types]
// mockSQLDriver
//cancel any current cell editing operations
// light blue colors
// JASON: Messages height should be stored with this.
// i18n[I18n.openIOnEditor=Open in Editor]
//i18n[MappingRoot.user=JDBC User (Hibernate)]
// Replace "2011" with Types.NCLOB when Java6 is the minimum supported version
// /////////////////////////////////////////////////////////////////// // Now check length of Strings in splitPieces1 again
// This should override the default tokenizer
//import the data back from the same file
// Replace "-15" with Types.NCHAR when Java6 is the minimum supported version
// Simulate the user switching the statement separator for the session
// DB2 spec says max=2147483647, but the driver throws an exception
//To change body of overridden methods use File | Settings | File Templates.
// wait for command to complete
// i18n[oracle.rows=Rows]
// some cols are not to be used
// The problem with this is data is LONGVARBINARY and there are no McKoi SQL functions to convert it  // to a character string which is executing the SQL produced by this method is supposed to return. //return "SELECT data FROM SYS_INFO.sUSRView where name = '" + viewName + "'";
// i18n[I18n.WorkDirIsNotADirectory=Working directory {0} is not a directory]
// <drop_index_statement> ::= // DROP INDEX <index_name> [ON <table_name>]
// We don't stub return because we want to verify that the object filter was actually used.
/* table of which we are part (needed for creating popup dialog) */
// if all cols are in the "to use" side, delete from EditWhereCols
// create all of the gui objects now
"// Determine the position to place the new internal frame. Ensure that the right end // of the internal frame doesn't exend past the right end the parent frame.	Use a // fudge factor as the dim.width doesn't appear to get the final width of the internal // frame (e.g. where pt.x + dim.width == parentBounds.width, the new internal frame // still extends past the right end of the parent frame)."
// The registrations below are made in support for new types introduced in Java6
// Do not try to be fancy and insert the data where the user is looking, // just stuff it into the actual model and re-paint the table // when the 'table changed' event is fired.
"//		((IMainFrame)comp).addInternalFrame(rdif, false); //		rdif.setLayer(JLayeredPane.POPUP_LAYER);"
// i18n[generalSessionPropertiesPanel.tableContents=Table Contents:]
// i18n[oracle.bufferGets=Buffer Gets]
// user is ok with overwriting file // We do not need to do anything special to overwrite // (as opposed to appending) since the OutputString // starts at the beginning of the file by default.
// Mock Objects
// i18n[AllBluesBoldMetalTheme.name=All Blues - Bold]       
// MySQL 4.x and below // MySQL 5.x and above
// EXPORT OBJECT TO OSX_FILE, EXECUTE PROGRAM ON IT, IMPORT IT BACK
// mockApplication
// export data to file
// i18n[i18n.parseSuccess=Added {0} new and {1} replaced properties to {2}]
// Ensure that the proper type of Object is selected in the Object // Tree.
// i18n[Application.error.loadsqlhistory=Unable to load SQL history from persistant storage.]
// cannot execute a null command
"/*		 * Can be done as follows in MS SQLServer INSERT INTO mytable(id,name) SELECT 1, 'pizza' UNION SELECT 2,		 * 'donuts' UNION SELECT 3, 'milk';		 */"
// Only Oracle supports materialized views directly.
// since the above did not throw an exception, // we now have a good new data object, so // change the text area to reflect that new object. //
// EXPORT OBJECT TO OSX_FILE
// We see that the replacement was already done before so we can count this as replaced
// if user did anything other than default, then save // their options
// add the data to the existing tables
// i18n[ErrorStream.multipleerrors={0} errors detected]
// i18n[InformixPlugin.showProcedureSource=Show procedure source]
// i18n[Application.error.savesqlhistory=Unable to write SQL queries to persistant storage.]
// //  The TreeTableNode interface. //
// ALTER TABLE test3 ALTER COLUMN nullvc varchar(30)
// Load resources.
// Expanders - trigger and index expanders are added inside the table // expander
// Some people put new line characters in their SQL to have nice debug output.  // Remove these new line characters too.                                       
"/*          * Since we depend upon the Informix-specific IfmxConnection class, we need      * to keep a reference to the ISession we are associated with.  However,     * this session could be closed, at which time we want to give up our      * reference so that it can be garbage collected.     */"
//        QName l_qn = new QName( "http://sqlvalidator.mimer.com/v1", "ValidatorResult" );
//i18n[PleaseWaitDialog.queryExecuting=Query is executing]
//new ConvertToStringBufferCommand(_session.getSQLPanelAPI(_plugin)).execute();
// we could tell user here that export was canceled, // but I don't think its necessary, and that avoids // forcing user to do yet another annoying mouse click.
//new InQuotesCommand(_session.getSQLPanelAPI(_plugin)).execute();
// non-null return tells caller there was a problem
// By default null == types we return only cached types
// Keys that can be embedded in templates for replacement later.
// I tried 8000 for the max length of VARCHAR and ingres gives an exception // (cannot assign a value of type long varchar to a varchar field). So // I limit this field to 4000 for now - the Ingres product documentation // indicated that 32k was acceptable. I've tested 4k and it seems to // work fine.
// "CREATE VIEW $viewName$ " + // "AS $selectStatement$ $with$ $checkOptionType$ $checkOption$";
// first time user has run pgm.
// Axion doesn't allow column alterations of the nullable attribute. // Fortunately, it doesn't require this to add a primary key.
// the next top level ket is the counterpart to bra
// Mock objects
//_leftData.add(row[0]); //_rightData.add(row[1]);
/* whether nulls are allowed or not */
// Adding Labels and Separators *****************************************
// Columns
// Rows
// "DROP INDEX $indexName$";
// needed to resize completion panle appropriately // see initializationof _curCompletionPanelSize
// i18n[Application.splash.showmainwindow=Showing main window...]
// "CREATE $unique$ $storageOption$ INDEX $indexName$ " + // "ON $tableName$ ( $columnName; separator=\",\"$ )";
"/*	 * Setters and Getters for each field.	 */"
// "CREATE VIEW $viewName$ " + // "AS $selectStatement$ $withCheckOption$";
///////////////////////////////////////////////////////////////////////////// // Schema dependent data. // Are changed only in this class //
// No flaten. We would turn statement parts to comment
// without this the completion panel's size will be weird
// i18n[HibernateAttribuiteDataSet.attrName=Attribute name]
// null == schemaLoadInfos[0].schemaName is the case when there are no _schemas specified // schemaLoadInfos.length will then be 1.
// This is what the spec says: // // CREATE SEQUENCE // [schema_name.]sequence_name // [INCREMENT BY value], // [START WITH value], // [MAXVALUE value | NOMAXVALUE], // [MINVALUE value | NOMINVALUE], // [CYLCE | NOCYLCE]
//i18n[explainplanexecuter.choosePlanTableTitle=Available PLAN_TABLEs]
// Folder to contain extra LAFs supplied by the user.
// special handling of operations while editing this data type
// Initial load of prefs.
// abort the export
// add a default value // "ALTER TABLE $tableName$ " + // "ALTER $columnName$ SET DEFAULT $defaultValue$";
//The SQL statement to be validated against the standard
"// Setup preferences to make jGoodies LAF look better. //		UIManager.put(Options.USE_SYSTEM_FONTS_APP_KEY, Boolean.TRUE); //		UIManager.put(Options.USE_NARROW_BUTTONS_KEY, Boolean.TRUE);"
// add combo box for command to execute
// "ALTER TABLE $tableName$ ALTER COLUMN $columnName$ SET $nullable$";
// Initialize all the LAF controllers.
// Directory containing the standard LAF jar files.
// Load info about the standard LAFs that come with this plugin.
//_prefs = plugin.getLAFPreferences();
// Set object tree color panel
// i18n[popupeditableIoPanel.exportedToFile=Data Successfully exported to file {0}]
// add each of the panels created by the DataType objects for // editing their own properties
//i18n[explainplanexecuter.choosePlanTableMsg=Choose a PLAN_TABLE to  //store the result in]
// Cannot use a sequence for the default value of a column. However, we could always reference the // ssequence in a trigger:
// In Oracle, no action is implied when the ON DELETE clause is omitted
// i18n[laf.jars=L & F jars:]
// Force the LAF to be set even if Tonic is the current one. This // allows changes to take affect.
// Folder to store user settings.
// This should be a default tokenizer which uses ";" as statement sep
// ALTER TABLE tableName // ALTER COLUMN columnName // SET DEFAULT nextval('tableName_columnName_seq'); // ALTER SEQUENCE tableName_columnName_seq OWNED BY tableName.columnName;
// SELECT last_value, max_value, min_value, cache_value, increment_by, is_cycled FROM sequenceName;
// Folder that stores themepacks for this LAF.
// Test to ensure that we allow sessions that are ending to be GC'd.
//sql.append(DialectUtils.shapeQualifiableIdentifier(newTableName, qualifier, prefs, this));
// i18n[ColorPropertiesPanel.syncComponentBackgroundColorChkLabel=Use toolbar background color for all // components]
// Put all available "Look and Feel" objects into collections // keyed by LAF name and by the class name.
// ALTER TABLE oldTableName RENAME TO newTableName;
// PostgreSQL 8.0 reports length as -1 sometimes. Why??
// mockFontInfo
// get each table's info
// Column list        
//i18n[WhereClausePanel.whereClauseLabel=Where Clause]            
// this DataType does not limit the data read during the initial load of the table, // so there is no need to re-read the complete data later
// The pw. If user name is anonymous this can be anything. But it has to // be supplied anyway.
// i18n[popupeditableIoPanel.cannotOpenFile=Cannot open file {0}.\nError was:{1}]
"/*	 * First we have the methods for in-cell and Text-table operations	 */"
// MySQL disallows quoted column identifiers when dropping a column.
// MySQL disallows quoted column identifiers.
// file exists, is normal and is writable, so see if user // wants to overwrite contents of file
// i18n[SchemaPropertiesPanel.printCacheFileLocation=Print cache file path to message panel]
// // handle mouse events for double-click creation of popup dialog. // This happens only in the JTextField, not the JTextArea, so we can // make this an inner class within this method rather than a separate // inner class as is done with the KeyTextHandler class. //
// In Oracle, matchFull modifier is not supported
// remove all instances of the offending char
"/*	 * The following is used in both cell and popup operations.	 */"
"/*	 * Return a JTextArea usable in the CellPopupDialog	 * and fill in the value.	 */"
// i18n[editWhereColsPanel.cannotRemoveAllCols=You cannot remove all of the fields from the 'use columns' list.]
"/*	 * Now the functions for the Popup-related operations.	 */"
// user wants field to be true
// dist
// Property panels for SQuirreL.
// user wants field to be false
// 1646886: If we've already seen the parameter, don't create another // instance as this will force the user to enter the same value twice. // Add the previous instance to itemsInSql though so that the parameters // value gets propagated to the right spot(s) in the SQL statement.
// let user enter T, t, Y, y, or 1 for true, and // F, f, N, n, or 0 for false
// user has not entered anything or has reset to defaults, // so make sure there is no entry for this column in the // saved info
// create trigger sql for column that is to be auto-incremented
//SQLExecuterTask task = new SQLExecuterTask(_session, sql, new DefaultSQLExecuterHandler(_session)); //jmh to run async_session.getApplication().getThreadPool().addTask(task); //jmhtask.run(); //Set the ? to the statement identifier
// registerColumnType(Types.CLOB, 31982, "varchar($l)");
// see if file exists
// rename view has that same syntax as that of tables.
// In PostgreSQL we need to add a sequence to support auto-increment (name: tablename_colname_seq)
// CREATE [FORCE] VIEW [IF NOT EXISTS] newViewName [(columnName [,..])] // AS select // "CREATE VIEW $viewName$ " + // "AS $selectStatement$ $with$ $checkOptionType$ $checkOption$";
// "select view_definition " + // "from information_schema.views " + // "where table_schema = ? " + // "and table_name = ? ";
// Prepare to have a lot of DocumentEvent.EventType.CHANGE
// Display the result set.
"/* the constructor above sets this from resources, but we'll override it with         * the name of the index. */"
// Why null??
// 1.5 "@ident" annotation // NOI18N
//Expand all of the rows in the tree if the root is non null.
// create add sequence sql
"/* we must iterate through this in descending order to avoid removing, say, item #2, making          * item #4 into item #3, inadvertently removing item #5. */"
//throw new UnsupportedOperationException("Oracle doesn't support using sequences for column defaults");
// update table set <columnName>_2 = <columnName>
// Oracle won't allow in-place conversion between CLOB and VARCHAR
// i18n[mssql.generateDependend=Generate scripts for all dependent objects]
// drop <columnName>
// i18n[PostgresPlugin.showIndexSource=Show index source]
// Now, check to be sure we get both schemas.
// Sybase Adaptive Server Enterprise 
// i18n[CreateTableScriptCommand.error.getprimarykey=Unable to get // primary key info for table {0}]
// Serveral DBs automatically create an index for primary key fields // and return this index in getIndexInfo(). We remove this index from the script // because it would break the script with an index already exists error.
// Oracle doesn't allow unique bitmap indexes.
// View Tab
// tabs and newlines get put into the text before this check, // so remove them // This only applies to Popup editing since these chars are // not passed to this level by the in-cell editor.
// when field is not null delete means set to null, so do it
"//	final Resources rsrc = _session.getApplication().getResources();"
// :new.id := seq_name@nextval;
// i18n[mssql.scriptFullText=Script full-text indexes]
// Append nothing - standard says this is equivalent to NO ACTION and some DBs  // (e.g. Oracle don't accept ... NO ACTION)
// convert file text into a string // Special case: some systems tack a newline at the end of // the text read. Assume that if last char is a newline that // we want everything else in the line.
/* --- TABLE SCRIPTING PANEL ---------------------------------------------- */
"/* this works because all the IDatabaseObjectInfo objects come from the same source, so         * their references are equal. */"
"//		setRenderer(new CellRenderer());"
// field is not nullable or input was not a delete // // we have already handled all legal input, // so just tell user this is being ignored
// chop off "CHECK on column ";
"/* NOTE: there are two rows.					 * NOTE: MssqlConstraint holds the columns in the table participating in the key.					 * NOTE: ForeignKeyConstraint holds the columns in the referenced table IN THE SAME ORDER.					 */"
"/*	 * DataBase-related functions	 */"
"/*	 * File IO related functions	 */"
// i18n[ResultTab.elapsedTimeLabel=Elapsed Time (seconds):]
// Since dialect doesn't support altering sequences, drop then re-create.
// now tableAndColumns[0] contains the table name and tableAndColumns[1] contains // the bracketed list of columns.
// if it's PRIMARY, just write it without the FILEGROUP prefix.
// DROP SEQUENCE sequenceName CASCADE;
//i18n[MainFrame.saveSize=Save size]
// ALTER TABLE tableName // ADD CONSTRAINT constraintName UNIQUE (column1, column2);
// i18n[DialectUtils.columnDropUnsupported={0} doesn''t support // dropping a column]
"/*			Owner  Object                 Grantee            Grantor ProtectType Action Column             			------ ---------------------- ------------------ ------- ----------- ------ ------------------ 			dbo    billing_bak            public             dbo     Grant       Delete .			dbo    billing_bak            public             dbo     Grant       Insert .			dbo    billing_bak            public             dbo     Grant       Select (All+New)			dbo    billing_bak            public             dbo     Grant       Update (All+New)			dbo    billing_bak            usbilling          dbo     Deny        Insert .			*/"
//Add the parameter names and types //Use the session Id you got from the openSession call here
//i18n[MainFrame.restoreSize=Restore saved size]
"/* Name     Owner       Type        Created_datetime                                       			 * ---------------------------------------------------------			 * billing  dbo         user table  2004-03-08 10:41:05.030			 */"
// "DROP SEQUENCE $sequenceName$ $cascade$";
//user must have supplied a file name.
// "CREATE SEQUENCE $sequenceName$ $startWith$ $increment$ $minimum$ $maximum$ $cache$ $cycle$";
// <create_sequence_statement> ::= CREATE SEQUENCE [<schema_name>.]<sequence_name> // [INCREMENT BY <integer>] [START WITH <integer>] // [MAXVALUE <integer> | NOMAXVALUE] [MINVALUE <integer> | NOMINVALUE] // [CYCLE | NOCYCLE] // [CACHE <unsigned_integer> | NOCACHE] // [ORDER | NOORDER]
// file name verification operations are the same for both // export and execute, so do that work here for both. // // If file name is null or empty, do not proceed
// There is a reason that we don't want to use DatabaseObjectType.SESSION here.  The "session" // nodes that this expander is creating should not be confused with the SQuirreL session.  These // session nodes are Oracle sessions that an administrator has the privileges to see.  So we  // must not use DatabaseObjectType.SESSION, or else these nodes get expanded with the database // DefaultdatabasExpander.
// now check to see if the original contents were <null> // and we have actually added the input char to the end of it                                                              
// Subtracting 10 000 000 milliseconds from the orgTime of File f1
// user wants us to create a temp file
// I18n[DriverPropertiesController.loadingDriverFailed=Loading JDBC driver "{0}" failed.\nCan not load driver properties tab.]
// Show users in the object tee.
// Tabs to add to the catalog nodes.
// create the file to open
// The SQLHistoryComboBoxModel has a static member that prevents garbage collection. // Therefore we need to remove the model. 
// convert each string into Classname, prop, & value and fill it into the data
// always add spaces at end for consistancy
"//	private SQLDriverPropertyCollection _props = new SQLDriverPropertyCollection();"
// i18n[CancelStatementThread.cancelFailed=Failed to cancel statement. Perhaps the driver/RDDBMS does not support cancelling statements. See logs for further details ({0})]
"//	private final static ILogger s_log = //		LoggerController.createLogger(CopyTableCommand.class);"
// We assume that classes and attributes won't be in the same completion list. // Classes will be completed fully qualified when the user works with fully qualified class names ...
// data converted ok, so update the table
// If file name default and cmd is null or empty, // make sure this entry is not being held in CellImportExportInfoSaver
// get the real name for use later
// i18n[CancelStatementThread.cancelSucceeded=The database has been asked to cancel the statment.]
// if this panel is called before any instances of the class have been // created, we need to load the properties from the DTProperties.
// get the values from the controls and set them in the static properties
"/*	 * Used by editing operations to set textField value without	 * changing the original text saved in the class	 */"
// field is not nullable, so create a reasonable default value // cannot create default value for unknown data type
// i18n[dataTypeUnknown.readContentsOnLoad=Read contents when table is first loaded and display as string]
// Add mouse listener for displaying popup menu.
// replace the null with just the char
// Sessions.
// more space below
// "ALTER TABLE $tableName$ RENAME COLUMN $oldColumnName$ to $newColumnName$";
// i18n[MappedObjectPanel.QualifiedNames=Show qualified names]
/* The CellRenderer used for this data type */
"/*     * DataBase-related functions     */"
// check that we did not just add a char to a <null>
// Backup directories
// end of constructor for inner class
// Class that displays the various formats available for dates
// use the default settings for the conversion
// I18n[DriverPropertiesController.gettingDriverPropetiesFailed=Loading the properties from the JDBC driver failed.\nCan not load driver properties tab.]
// put a description of the field in the following rows
// i18n[DataTypePreferencesPanel.propsPanel.hint=Set options for specific Data Types]
// figure out which column the user clicked on // so we can pass in the right column description
// file does not already exist, so try to create it
// Add begin
// i18n[editWhereColsPanel.limitColsInCellHint=Limit columns used in WHERE clause when editing table]
// Some drivers will give null.
// Use the standard SQL type code to get the right handler // for this data type.
"/*          * String catalog, String schema, String simpleName,                String tableType, String remarks,          */"
"/*		 * This is the list of names of classes that:		 * 	- support standard SQL type codes and thus do not need to be registered		 * 	- provide the getControlPanel method to allow manipulation of properties		 * These classes should all be named		 * 	net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.DataTypeXXXX		 * because they are part of the standard delivery of the product, and thus should		 * be local to this directory.		 */"
// The SQL Results page puts text into the table cells // rather than objects of the appropriate type, so we // need to convert befor proceeding
// i18n[oracle.diskReadsPerRow=Disk Reads per Row]
// we have an appropriate data type object
"/*	 * Internal class for handling key events during editing	 * of both JTextField and JTextArea.	 */"
"//	private Map _allTabs = new HashMap();"
"// there was no data type object, so this data type is unknown // to squirrel and thus cannot be edited.	"
// Use a CYAN background to indicate that the cell is // editable in the popup
// Currently, OpenEdge only supports the PUB schema for sequences.
// i18n[DataTypePreferencesPanel.propsPanel.title=Data Type Controls]
//_listeners.remove(ISQLExecutionListener.class, lis);
// convert the char into its numeric value
// registerColumnType(Types.BOOLEAN, "bit");
// if are more columns left, part page
"//	private boolean _showHeadings;"
"// reset width to normal	"
// user has entered some non-default info, so save it
// add note to user about including file name in command
// Guaranteed to be non-null.
// first convert internal data into the string array
// get name of file, which must exist
"/*				 * If you add this method to one of the standard DataTypes in the				 * fw/datasetviewer/cellcomponent directory, you must also add the name				 * of that DataType class to the list in CellComponentFactory, method				 * getControlPanels, variable named initialClassNameList.				 * If the class is being registered with the factory using registerDataType,				 * then you should not include the class name in the list (it will be found				 * automatically), but if the DataType is part of the case statement in the				 * factory method getDataTypeObject, then it does need to be explicitly listed				 * in the getControlPanels method also.				 */"
// misc functions - based on oracle dialect
// Instances.
//i18n[ColumnListDialog.dropPrimaryKeyTitle=Drop Primary Key]        
// we need to table column model to be able to add CellEditors to the // individual columns
// abort first..
// Set focus to password control if default user name has been setup.
// fall through to normal processing of this key stroke
// Test for attempting to call listFiles on a non-existent directory.
// Add all panels to the tabbed pane.
// if we are limiting all columns, then we need to re-read // because we do not know if we have all the data or not
//This method makes the web service call //If you want to you can create a web service proxy from the WSDL file, //9 times out of 10, that's what you really want to do.
// no default in DB.  If nullable, use null.
"/*	 * Getters and Setters	 */"
"/*	 * Restore the contents to the original value.	 */"
// both have actual data, so compare the strings // Note that if one has read all of the data and the other has read only part // of the data that we will say that they are NOT equal.
// handle ASCII chars // Irrespective of the radix, the second byte will always // be a space when the data is displayed as a single ASCII character.
// handle cases of null // The processing is different when nulls are allowed and when they are not. //
//while
// Replace "2009" with Types.SQLXML when Java6 is the minimum supported version
"// save data passed in to us	"
// fall through to default
// value is a simple string representation of the data, // the same one used in the Text and in-cell operations.
// Sticky is turned off. Just remove sticky and return.
// remove old sticky tab
// field is not nullable //
// Check for whitespace
// convert file text into a string // Special case: some systems tack a newline at the end of // the text read.  Assume that if last char is a newline that // we want everything else in the line.
// about to delete last thing in field, so replace with null
// return the text converted from the file 
// truncate string
"//	private final JMenu _editMenu;"
// Convert bytes to Bytes
// The NumberFormat object to use for all locale-dependent formatting.
// i18n[HibernateConfigPanel.toObtainSessionFact=To obtain a Hibernate SessionFactoryImpl instance SQuirreL should:]
// get the text to be converted
// Replace "-16" with Types.LONGNVARCHAR when Java6 is the minimum supported version
// call the DataType object for this column and have it check the current value
"/*              * Create the panel and add the GUI items to it             */"
//File object for doing IO
// CopyOnWriteArrayList has snapshot iterators that don't support  // iterator.remove()
// add button panel to main panel
// no entry selected
// convert signed to unsigned
// some formats (e.g. hex & octal) extend a negative number to multiple places // (e.g. FC becomes FFFC), so chop off extra stuff in front
// Checking to make sure the correct files were are listed in the // array.
// standard sql92 functions
// get the hashmap for this type, or create it if this is a new property
// get each DataType's info
// put the property into the hashmap
"/*	 * Conversion Constants	 */"
// new line
// Convert each byte and put into string buffer
// Oddly enough, progress will let you add pks to existing tables, but not drop them.
// if user wants to see ASCII chars as characters, // see if this is one that should be displayed that way
// handle cross-connection between fields
// "ALTER TABLE $childTableName$ " + // "ADD $constraint$ $constraintName$ FOREIGN KEY ( $childColumn; separator=\",\"$ ) " + // "REFERENCES $parentTableName$ ( $parentColumn; separator=\",\"$ )";
// underlaying data cannot be changed
// create the buttons for input done and cancel
// ALTER TABLE <tablename> ADD [CONSTRAINT <constraintname>] UNIQUE (<column list>);
// DROP INDEX index [IF EXISTS];
/* Menu for right-mouse-click when in cell editors */
// not allowed - must have existing file for import
// guard against something really stupid
// time functions mapped to ansi extract
// do not do import
// import and external processing can only be done if // panel is editable
// front pad with zeros and add to output
// load filename and command with previously entered info // if not the default
// "ALTER TABLE $tableName$ " + // "ADD CONSTRAINT $constraintName$ UNIQUE ($columnName; separator=\",\"$)";
// how to use Timestamp in WHERE clauses // default to SQL standard
// value is a simple string representation of the data, // the same one used in Text and in-cell operations.
// close it.
// SquirrelAction descriptions already contain the accelerator 
// Pre-requisites are that column needs to be primary key and it must be integer type. // alter table IDENTITYTEST2 alter column myid identity
// As in java.sql.Types
// ALTER TABLE <tablename> ADD [CONSTRAINT <constraintname>] PRIMARY KEY (<column list>);
"/*     * Internal class for handling key events during editing     * of both JTextField and JTextArea.     */"
// ALTER SEQUENCE <sequencename> RESTART WITH <value>;
// We always get the CLOB, even when we are not reading the contents. // Since the CLOB is just a pointer to the CLOB data rather than the // data itself, this operation should not take much time (as opposed // to getting all of the data in the clob).
// reset each time we start a new print
// i18n[i18n.bundle=Bundle]
// Position window to where it was when last closed. If this is not // on the screen, move it back on to the screen.
"/*     * The following is used in both cell and popup operations.     */"
// ignore - unused.
// the table containing the user's input
// cannot insert row into read-only table
// add some space
// cannot delete rows in read-only table
"/*     * Now the functions for the Popup-related operations.     */"
//return (String)_renderer.renderObject(value);
"/*     * First we have the methods for in-cell and Text-table operations     */"
// since we cannot do exact matches on floating point // numbers, we cannot use this field in the WHERE clause.
// i18n[popupeditableIoPanel.withCommand=With command:]
/* the number of decimal digits allowed in the number */
// several number formats use '.' as decimal separator, others use ','
// handle cases of null // The only legal input in this case is a delete
// user asked to see binary data in a different format // default to hex
// return the expected format for this data // default to hex
// the caller does not need to know that nothing happened
// The list of rows may be empty, in which case // we tell user they should select something first
// there was a problem inserting into the DB
// tell user it is editable
// // Begin code related to printing //
// data is an object - assume already validated
// generally for KEY_TYPED this means add the typed char to the end of the text, // but there are some things (e.g. control chars) that are ignored, so let the // normal processing do its thing
// we want to allow editing of read-only tables on-demand, but // it would be confusing to include the "Make Editable" option // when we are already in edit mode, so only allow that option when // the background model is updateable AND we are not already editing
// We know that it's not interesting to show any code above where // we get involved in event dispatch, so we stop printing the stack // trace when we get as far back as our code.
// Binary data viewing option: which radix to use // This object is only non-null when the data is binary data
//i18n[HibernatePrefsTab.hint=Hibernate configurations]
// Matt Dahlman: this causes problems with the JDBC driver delivered // with Teradata V2R05.00.00.11
// If the file was a temp file, delete it now. // We assume that Export-only operations want to leave the // file in place, but Execute operations just want a temp // space to work with and do not want it lying around afterwards.
// This may be called either when the table is editable or when it is // read-only.  When it is read-only, there is no command to be saved, // but when it is editable, there may be a command.
// white space
// add external processing command field and button
// send a tree expansion event to the object tree
// Provide the actual integer value, as well as it's meaning
// Since data is editable, we need to add control panel // to manage user requests for DB update, file IO, etc.
// the scroll pane that holds the text area
// Used as the value of startedLastEventDispatchAt when we're not in // the middle of event dispatch.
// -- EJBQL tokens --
"//	private final static ILogger s_log = //		LoggerController.createLogger(OpenTablesTab.class);"
//i18n[ColumnListDialog.modifyTitle=Select Column To Modify]
// Regression test for HARMONY-3656
// 5. Is it the same as the local copy, which was placed either by the // installer or the last update?
// This is a tool window.
// Will be called asynchronously to the event dispatch thread
// needed to prevent an infinite loop
/* whether number is signed or unsigned */
// name of file to do export/import/process on
// Fix the case according to what the database tells us.
// Unfortunately, conversion to uppercase does not work properly // for the Georgian alphabet, which has strange rules about case // conversion.  So we need to make one last check before // exiting.
// i18n[mysql.variables=MySQL Variables]
// DB2 stores all names in upper case. // PostgreSQL stores table names in lower case. // That's why we may not find table as it was written in the create statement. // So we try out the upper and lower case names too.
//private static final String PERF_KEY_HQL_TAB_DIVIDER_LOCATION = "Squirrel.hibernateplugin.hqlTabDivLoc";
// Expected.
/////////////////////////////////////////////////////////////////// // Warning
// create the HashMap of names to use and put it in EditWhereCols
"//	private final static ILogger s_log = //		LoggerController.createLogger(ShowMasterLogsTab.class);"
// Checking to make sure the correct files were are listed in // the array.
"/*		 * (non-Javadoc)		 * 		 * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getInternalName()		 */"
"/*		 * (non-Javadoc)		 * 		 * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getVersion()		 */"
//!!!                    return SQLTokenContext.INCOMPLETE_STRING_LITERAL;
// the second row contains a multi-line description, // so make that row high enough to display it
// groups
// i18n[exportconfig.applicationSettings=Application Settings]
// i18n[exportconfig.databaseAliases=Database Aliases]
// i18n[exportconfig.errorReslovingFileName=Error resolving file name]
"/*		 * (non-Javadoc)		 * 		 * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()		 */"
// private final int TABLE_COL_DATATYPE = 3; // not used
// Selects the values from the existing table
// If the directory exists, add one to the directory number (making // it a new directory name.)
// MySQL allows statement separators in procedure blocks.  The process // of tokenizing above renders these procedure blocks as separate  // statements, which are not valid to be executed separately.  Here, we  // re-assemble any create procedure/function/trigger statements that we  // find using the beginning procedure block pattern and the procedure  // separator. 
// i18n[Application.info.setjdbcdebuglog=Attempting to set JDBC debug log to output stream]
//To get the TableInfo for the selected object in the tree
// BLOBs are different from normal data types in that what is actually // read from the DB is a descriptor pointing to the data rather than the // data itself.  During the initial load of the table, the values read from the // descriptor may have been limited, but the descriptor itself has been // completely read,  Therefore we do not need to re-read the datum // from the Database because we know that we have the entire // descriptor.  If the contents of the BLOB have been limited during // the initial table load, that will be discovered when we check if // the cell is editable and the full data will be read at that time using // this descriptor.
//Get all the data types available
"/*     * File IO related functions     */"
// text field for how many bytes of Blob to read
//?? What to do with this error? //?? error message = "Could not read the complete data. Error was: "+ex.getMessage());
// Convert Bytes to bytes
// user said not to read any of the data from the blob
"//	  _mainSplitPane.add(getDesktopPane(), JSplitPane.RIGHT);"
// Stray sep - or we failed to find pattern
// for each element in the "not use" set, if selected then add to "use", // otherwise add to new "not use" set
// save the input for use later
// DELIMITER sets the separator that tells us when a procedure.   // This is MySQL-specific
// Test to make sure that only the 3 files that were created are // listed.
// Move over leading whitespaces
// check for max size reached (only works when DB provides non-zero scale info
// save the original value for re-use by CLOB/BLOB types in conversion
// The DateFormat object to use for all locale-dependent formatting. // This is reset each time the user changes the previous settings.
// Sequence tabs
// More than one selection is allowed - check to see if we should change the selection
// plugin supports Session main window only
// Table
// i18n[OracleAliasPrefsPanel.All=Allow all Schemas]
// can use an empty clob for editing
// get the nullability information and pass it into the ResultSet // Unfortunately, not all DBMSs provide the column number in object 17 as stated in the // SQL documentation, so we have to guess that the result set is in column order
"/*	 * Make sure the entire CLOB data is read in.	 * Return true if it has been read successfully, and false if not.	 */"
// If this is not a hibernate error we write a log entry
//i18n[PrimaryKeyTab.hint=Show primary key for the selected table] 
// ANALYZE Checkbox
// i18n[ErrorStream.unexpectedsymbol=this symbol not expected in]
// old version //return session.getObjectTreeAPI(sqlScriptPlugin);
// Add context menu items to the object tree's session node. // as popup menu
// Just add the tab
// create new object to hold the different value, but use the same internal CLOB pointer // as the original
// Throws an exception claiming that 2007 isn't a valid type - go // figure. // pstmt.setNull(position, _colDef.getSqlType());
// Expanders.
// This fixes the issue where the tree is getting constructed prior to // the Oracle plugin expanders being registered.(USERS, SESSIONS, // INSTANCES nodes have no children until the tree is refreshed). Even // though this is a hack, it doesn't seem to negatively impact // performance even when loading all schemas.
// GET OSX_FILE FOR EXPORT & EXTERNAL PROCESSING
// Not all Oracle's, just 10g and above.
// value is a simple string representation of the data, // but NOT the same one used in the Text and in-cell operations. // The in-cell version may replace newline chars with "\n" while this version // does not.  In other respects it is the same as the in-cell version because both // use the _renderer object to do the rendering.
/* Register custom DataTypeComponent factory for Oracles XMLType */
"/*     * (non-Javadoc)     *      * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getTitle()     */"
// merge columns in a new column
// i18n[hibernate.hqlToSqlLong=HQL to SQL]
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#applyChanges()	 */"
// i18n[oracle.displayOptions=Display database options]
// Questions
"/*		 * GUI components - need to be here because they need to be		 * accessible from the event handlers to alter each other's state.		 */"
// sheet types
// Schema
// reload complete SchemaInfo
// check box for whether to read contents during table load or not // i18n[dataTypeBigDecimal.readContentsOnFirstLoad=Read contents when table is first loaded;]
// check box for whether to show newlines as "\n" for in-cell display
// I18n[oracle.infoTitle=Oracle Session info for: {0}]
"//			_driversList = new DriversList(app);"
// I18n[oracle.sgaTitle=Oracle SGA trace for: {0}]
// Needs to be done in both cases because if the window goes back to // the default layer it goes back behind all other windows too.
//Nil out the timer so that it can be gc'd
//Create spinner for update period
//Only resize once.
//JMH Remove the current sql text. Create a tabbed pane for session details (including sql text)
// If we don't invokeLater here no Short-Cut-Key is sent // to the internal frame // seen under java version "1.4.1_01" and Linux
// i18n[oracle.displaySessionDetails=Display session details]
// Oracle allows statement separators in PL/SQL blocks. The process // of tokenizing above renders these procedure blocks as separate // statements, which is invalid for Oracle. Since "/" is the way // in SQL-Plus to denote the end of a procedure or function, we // re-assemble any create procedure/function/trigger statements that we // find. This should be done before expanding file includes. Otherwise, // any create sql found in files will already be joined, causing this to // find create SQL without matching "/". The process of // expanding 'file includes' already joins the sql fragments that it // finds.
// At the moment, no default value
//JMH: For additional performance we could utilise the fixed_table_sequence column //from the session, to investigate which rows need to be updated on a refresh //See V$SESSION doco for more info.
// This seems to work for both Oracle 9i and 10g
// Since it is likely to have "/" on it's own line, and it is key to // letting us know that proceeding statements form a multi-statement // procedure or function, it deserves it's own place in the _queries // arraylist. If it is followed by other procedure or function creation // blocks, we may fail to detect that, so this just goes through the // list and breaks apart statements on newline so that this cannot // happen.
// line separator for easy using ;-)
"/*		* For Oracle 10g we could say something like : 		* 		* ""where XMLSERIALIZE(CONTENT "" + _colDef.getLabel() +"") like '<value>'""		* 		* This doesn't appear to work on Oracle 9i at the moment, so we will		* avoid using this column in any where clause if the value is non-null,		* which is what the superclass implementation does.		* 		* TODO: Find a way to do this for both versions or split this behavior		* so that it works on 10g and is disabled on 9i.		*/"
// variables // ======================================================================== // non visible // ------------------------------------------------------------------------ // Logger for this class
// Below is equivalent to the following: // stringValueResult = xmlType.getStringVal();
// now bind the string..
// Both of these throw an exception claiming that it got a clob // and expected a number (inconsistent data types): // // pstmt.setClob(position, null); // pstmt.setNull(position, java.sql.Types.CLOB); //
// Need to adjust param which is 1-based(JDBC) to a 0-based number for  // array access
// Trigger tabs
// Plugin supports only the main session window
// Index tab
// ////// Object Tree Expanders //////// // Schema Expanders - sequence
// extractors
// Table Expanders - trigger and index // expander
// ////// Detail Tabs //////// // Procedure tab
// Lock tab
// ////// Popup Menus ////////
//s_log.info("Not all selected objects where tables.");
// Catalog
// merge columns in an existing column
// This causes locks own by other pids to be excluded from the result. //+ "    pgl.pid = pg_stat_get_backend_pid(svrid) AND "
// We don't know if this type can be used in where clauses so always exclude it.
// Options: // FULL Checkbox
// controlling // ------------------------------------------------------------------------
// Do the conversion into the object in a safe manner // Special case: the input is exactly the output
// Stored Procedures can have comments embedded in them, so // don't line-wrap them.
// VIEW TYPE DBO (doesn't exist yet)
// VIEW
// SEQUENCE TYPE DBO
// SEQUENCE
// It is important to process the name change first - so that we can use // the new name instead of the old in subsequent alterations
// INDEX
// Here we use index inside of column names so that we don't have to alias the columns in the  // dialect.  Different dialects call these sequence information columns by different names.  Just  // make sure to preserve the order in the dialect. // last_value // max_value // min_value // cache_value // increment_by // is_cycled
// TABLE TYPE DBO
// create new columns in table
// skip comments
// update <destinationTable> s  // set destColumn = ( select f.desc_t1 from <fromTable> f where f.myid = s.myid)
// implemented in all originally supported dialects
// deletes the ", "
// Selects the values from the merge table
// Selects the values for the where part
// maybe with Inner join better performance
// add column if neeeded
// getColumnAddSQL
// Don't show indexes dialog if only one index exists to be modified
// Execute the sql synchronously
// Show the user a dialog with a list of columns and ask them to select one or more columns to drop
//ArrayList<String> result = new ArrayList<String>();
// If the table has only one column, it cannot be dropped
// Set a default primary key name based on the name of the table
// Adds a foreign key constraint to the source table.
// only // gives // the // SQL // without // the // Cascade/Restrict // Constraint
// Show the user a dialog with a list of columns and ask them to select
// If there is only one column in the table,
// Copys the distinct values from the source column into the lookup table.
// Creates the lookup table with it's columns (depenting on the mode).
// getInsertIntoSQL
// getUpdateSQL
// getColumnDropSQL
// Add column name to the list
// No point to ordering less than 2 tables
// Create the analysis dialog using the EDT, and wait for it to finish.
// Column
// A Map for quick lookup later - we want to pass TableColumnInfos to the dialect, not merely column // names.
// new Name of the table
// There are more dependancies then just FKs (like views, etc.), // therefore cascadeConstraints is used as a parameter for the TableDropSQL.
// local constraint
// Now, get the drop order (same as delete) and update the dialog // status while doing so.
// Don't show foreignKeys dialog if only one index exists to be modified
// if the check gets till here we have all the need information
// Mode
// Drop Conflicts
// "fki_" is default startname
// add to the button group
//adding all Colums together
// pre-selection
// add to jpanel pane
// add to the panel  - Update
// _columnTab = new MergeColumnDialog.ColumnsTab();
// private ColumnsTab _columnTab;
// Increment
// Name
// Maximum
// Last Value
// Start
// Minimum
// use default sequential layout
// Foreign Key
// view list
// break;
// Table name
/* Do Nothing */
// Column 0 // Row 0
// labels should stay put, while user-input fields are allowed to grow as the user desires.
// Some databases cannot order by LONG/LOB columns.
// table list        
// Cascade Constraints Checkbox
// adding all Colums together
//some data
// All rules passed, so activate the button
// if the check gets till here we have all the needed information
//all tables except the merge into table
// all local and columns for the other tables..
// Column list
// i18n[sqlbookmark.noDeleteSelection=Please select the bookmark to delete]
// i18n[sessionscript.startupScripts=Startup Scripts]
// Folder within plugins folder that belongs to this // plugin.
// This should never happen as we check above for the duplicate.
"//		IApplication application = getApplication(); //		application.addToMenu(IMenuIDs.PLUGINS_MENU, //				getSmarttoolsMenu(getApplication(), null, false));"
// just plain data
// ------------------------------------------------------------------------ // Thread SEARCHING // ------------------------------------------------------------------------
// Catalog 
// table list
// ------------------------------------------------------------------------ // Table classes // ------------------------------------------------------------------------
//i18n[sqlparam.inputParameterValues=Please input the parameter values]
// old version before multible sesssion windows //return session.getSQLPanelAPI(plugin);
"//	private static final String PREFS_FILE_NAME = ""sqlparamprefs.xml"";"
// Types.CHAR, // Types.VARCHAR, // Types.LONGVARCHAR, // Types.BINARY, // Types.VARBINARY // Types.LONGVARBINARY // Types.NULL // Types.JAVA_OBJECT // Types.DISTINCT // Types.ARRAY // Types.BLOB // Types.CLOB // Types.REF // Types.DATALINK
// PostgreSQL uses literal values true/false instead of 1/0.
//The format of the result. This must be "text" or "html". //Hopefully some type of XML format will be available as well
//Supply the user name. If you use anonymous you will be logged in and the pw will be ignored
//And the version of the calling program. //This is optional. If you don't want to give out this info, please enter "N/A"
//The version of the target DBMS //This is optional. If you don't want to give out this info, please enter "N/A"
//Set this to 1 if your application is interactive where the user enters queries and then runs them //Set it to 2 if it is non interactive, such as for instance a JDBC Bridge driver that intercepts SQL
// Add context menu items to the object tree's view and procedure nodes.
//otApi.addDetailTab(DatabaseObjectType.INDEX, new IndexDetailsTab());        
// trigger source //        "SELECT text " + //        "FROM dbo.sysobjects " + //        "inner join syscomments on syscomments.id = sysobjects.id " + //        "where loginame = ? " + //        "and name = ? " + //        "and type = 'TR' ";        
// Refresh the currently selected tab.
"//		final TextAreaDefaults dfts = TextAreaDefaults.getDefaults(); //		_columnStyle = dfts.styles[Token.COLUMN]; //		_commentStyle = dfts.styles[Token.COMMENT1]; //		_keyword1Style = dfts.styles[Token.KEYWORD]; //		_keyword2Style = dfts.styles[Token.DATA_TYPE]; //		_keyword3Style = dfts.styles[Token.FUNCTION]; //		_labelStyle = dfts.styles[Token.LABEL]; //		_literalStyle = dfts.styles[Token.LITERAL1]; //		_operatorStyle = dfts.styles[Token.OPERATOR]; //		_otherStyle = dfts.styles[Token.NULL]; //		_tableStyle = dfts.styles[Token.TABLE];"
// Below is equivalent to the following: // xmlType = XMLType.createXML(o);
"//		String LINE_NUMBER_COLOR = ""lineNumberColor""; //		String SELECTION_COLOR = ""selectionColor""; //		String SHOW_LINE_NBRS = ""showLineNumbers"";"
"//	private int _caretRGB = Color.red.getRGB(); //	private int _selectionRGB = 0xccccff; //	private int _lineHighlightRGB = Color.lightGray.getRGB(); //	private int _eolMarkerRGB = 0x009999; //	private int _bracketHighlightRGB = Color.black.getRGB(); //	private int _lineNumberRGB = Color.black.getRGB();"
"//		String EOL_MARKERS = ""eolMarkers""; //		String EOL_MARKER_COLOR = ""eolMarkerColor"";"
// One may ask why we don't register the key strokes permanently. // When we did so with two internal frames open, the key stroke event // sometimes went to the wrong frame. This doesn't happen if we procede // like we do. // The question is, why?
"/*								We don't support switching the entry control during a session								because serveral things, that are attached to the entry control								from outside this plugin would need to reinitialze too.								For example code completion and edit extras.								synchronized (_session)								{									ISQLEntryPanelFactory factory = _plugin.getSQLEntryAreaFactory();									ISQLEntryPanel pnl = factory.createSQLEntryPanel(_session);									_session.getSQLPanelAPI(_plugin).installSQLEntryPanel(pnl);								}								*/"
//         new MultiKeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_OPEN_BRACKET, MENU_MASK), //            ExtKit.matchBraceAction), //         new MultiKeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_OPEN_BRACKET, MENU_MASK | InputEvent.SHIFT_MASK), //            ExtKit.selectionMatchBraceAction), //         new MultiKeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_F10, InputEvent.SHIFT_MASK), //            ExtKit.showPopupMenuAction),
/* The second time that schemas are asked for, return two */
////////////////////////////////////////////////////////////////////////////////////////////////////////////// // The ctrl enter short cut in the Netbeans editor is set in org.netbeans.editor.ext.BaseKit // to the org.netbeans.editor.ext.BaseKit.SplitLineAction. // Since the ctrl enter shorcut is a basic SQuirreL short cut and is defined via the main menu action // we must remove this binding here.
// The SQLSettingsInitializer added above holds a reference to the // SyntaxPreferences of the current Session which itself holds a // reference to the Session. We remove the SQLSettingsInitializer // to give the Session the chance to get Garbage Collected.
// Internal states // inside white space // inside line comment // // inside block comment /* ... */ // inside string constant // inside string constant after backslash // inside char constant // inside char constant after backslash // inside identifier // slash char // after '=' // after '>' // after '>>' // after '>>>' // after '<' // after '<<' // after '+' // after '-' // after '*' // after '*' // after '|' // after '%' // after '&' // after '^' // after '!' // after '0' // integer number // octal number // double number // double number // hex number // after '.'
//i18n[RowCountTab.title=Row Count]
// Add the buttons to it
// this didn't work // final int pos = getCaretPosition(); // final Document doc = _textArea.getStyledDocument(); // final Element docElem = doc.getDefaultRootElement(); // final Element lineElem = docElem.getElement(getCaretLineNumber()); // return lineElem.getElementIndex(pos);
// Tooltips and questions
// Operator numeric-ids // = // < // > // << // >> // >>> // + // - // * // / // & // | // ^ // % // ! // ~ // == // <= // >= // <<= // >>= // >>>= // += // -= // *= // /= // &= // |= // ^= // %= // != // . // , // : // ; // ? // ( // ) // [ // ] // { // } // ++ // -- // && // ||
// Start the thread that does the coloring
// Put the initial text into the text pane and // set it's initial coloring style.
// if we just finish, we can't go to sleep until we // ensure there is nothing else for us to do. // use try again to keep track of this.
// i18n[StringFunctionsTab.hint=Show all the string functions available in DBMS]
// Get the history into an array.
// set up the list of column names and the data for the rows
// Global misc
// i18n[sqlbookmark.squirrelMarksInPopup=Show SQuirreL bookmarks in ctrl+j popup]
// as a coding convenience, create a reference to the text component // that is typecast to JTextComponent. this is not essential, as we // could typecast every reference, but this makes the code cleaner
//To change body of created methods use File | Settings | File Templates.
//ScriptEnvironment env = new ScriptEnvironment(m_session.getSQLPanelAPI(m_plugin), ownerFrame);
// Add panels for core Squirrel functionality.
// set column heading // set data in first row
// For some reason, Frontbase doesn't find tables that have been previously created.
//String path = "/release/snapshot/";
// DB2 cannot alter a column's null attribute directly (only // through constraints). Not only that, but it's apparently not a // valid thing to do to create a primary key using a column that has // been made "not null" via a check constraint. Therefore, the only // columns that qualify to be made PKs are those that were declared // not null at the time of table creation.
// i18n[SQLResultExecuterPanel.closeAll=Close all]
// Test whether or not the dialect correctly converts nullable // columns to not-null before applying the primary key - if // necessary
// Misc
"/*    		 * viewDefSql is the SQL that can be used to query the data dictionary for the body of a view.    		 * This should exclude the ""CREATE VIEW <viewname> AS"" prefix and just return the query.   		 */"
// replace any instance of flag in command with file name
// Utility methods
// ThreadSearching
// Needed to make the panel set the divider location from preferences
"//				System.err.println(""Attempt to use dialect sql from "" + referenceDialect.getDisplayName() //					+ "" failed: "" + e2.getMessage());"
// short scale
"/*         * GUI components - need to be here because they need to be         * accessible from the event handlers to alter each other's state.         */"
//WARNING: this depends on entries in ButtonGroup being in the same order // as the values for whereClauseUsage
// max size reached
"/*         * If you add this method to one of the standard DataTypes in the         * fw/datasetviewer/cellcomponent directory, you must also add the name         * of that DataType class to the list in CellComponentFactory, method         * getControlPanels, variable named initialClassNameList.         * If the class is being registered with the factory using registerDataType,         * then you should not include the class name in the list (it will be found         * automatically), but if the DataType is part of the case statement in the         * factory method getDataTypeObject, then it does need to be explicitly listed         * in the getControlPanels method also.         */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getWebSite()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getNewSessionPropertiesPanels()     */"
// i18n[favs.newFolder=New Folder] // ?? i18n
//i18n[RowCountTab.hint=Number of rows in the selected table] 
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getPluginUserSettingsFolder()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#load(net.sourceforge.squirrel_sql.client.IApplication)     */"
// Only a single selection can be made at a time.
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo#getCatalogName()     */"
// We only show row counts for tables and views.  Other objects won't  // be affected by changing row counts.
// create update/cancel controls using default layout
// checkbox for Java default/non-default format
// select the one just added.
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo#getSchemaName()     */"
//((IMainFrame) comp).addInternalFrame(taif, false); //taif.setLayer(JLayeredPane.POPUP_LAYER);
// i18n[sqlbookmark.noAdd=No text to be added.]
"//			check for ""malformed"" XML, or text that happens to contain //			a ""<"" with no corresponding "">"""
// Add listener to listen for items added/removed from list.
// i18n[Application.error.closeFileViewers=Unable to close all file viewers]
// Required on Linux.
// Add actions to the popup menu.
// fudge for larger inset windows
// Go thru all loaded plugins asking for panels.
// Tooltips
// Infos
// create a new bookmark manager
// !!!                    return SQLTokenContext.INCOMPLETE_CHAR_LITERAL;
// Register tabs to display in the details panel for UDT nodes.
// this gets called before initialize()
// QueryTokenizer tests
// Check to ensure that the tokenizer received is not the default one that // should have been overridden.
// Test to see that table(100) matches table(0).  It should since only // the row count is different.
// Test to see if we can fool matchKeyPrefix into assuming that there  // will be '(' on the end of the path since row count is enabled.  Yet // we'll send in a string that doesn't have this characteristic.
// Size to set child windows to.
// For the serialization test in superclass - cannot use mockHelper because the replay needs to be  // done here.
/* expect getFile for updated files that will be removed */
// not necessarily the case - I'm just curious if we have any components that need to be re-read
/* Mock Objects */
// Don't forget to set this to the number of statements in result
// Setup one column in multiple rows
// Try to create a file in a directory that does not exist
// Sybase 15 fully supports quotation marks for identifiers, and  // reports " as the identifier quote string - yeah, they got it right!
// Helper Methods
// Regression test for HARMONY-21
// canRead only returns if the file exists so cannot be fully tested.
// Test for creating a file that already exists.
// Test to see if correct suffix was used to create the tempfile.
// Test to make sure that the tempfile was saved in the correct // location and with the correct prefix/suffix.
// parse hy.test.vmargs if was given
"/*                 * If the ""short file name"" doesn't exist, then assume that the                 * 8.3 file name compatibility is disabled.                 */"
// Finding a non-existent directory for tests 3 and 4 // This is necessary because getCanonicalPath is case sensitive and // could cause a failure in the test if the directory exists but with // different case letters (e.g "Temp" and "temp")
// rebuild the bookmark menu.
// Test to make sure that listFiles can read hidden files.
// Old test left behind "garbage files" so this time it creates a // directory that is guaranteed not to already exist (and deletes it // afterward.)
// Test to see if the directory was saved with the correct name.
// Subtracting 100 000 milliseconds from the orgTime of File f1
// Trying to set time to a large exact number
// Similarly, trying to delete a read-only directory should succeed
// Regression test for HARMONY-4493
// Assert is flawed because canWrite does not work. // assertTrue("File f1 Is Set To ReadOnly." , f1.canWrite());
// Tests to see if the correct number of files were returned.
// Assert is flawed because canWrite does not work. // assertTrue("File f2 Is Set To ReadOnly." , f2.canWrite());
//testBooleanColType(sourceName, destName); //testCharColType(sourceName, destName);
// This is for brute force detection of columns whose column size is 0
// verify that changing the clone didn't affect the original
// we cannot mock DTProperties  because it is designed to be accessed // statically. :( // Simulate missing property.
// We still have to bind a value, or else the PS will throw // an exception.
// i18n[Application.error.loadcellselections=Unable to load Cell Import/Export selections from // persistant storage.]
"//		final Map map = getAllEditWhereColsSheets(tree); //		return (EditWhereColsSheet)map.get(objectInfo.getQualifiedName());"
// We are in the closing event of the Session main window. // We don't want to send this event again therefore // we pass withEvents = false.
"// Ok button at bottom of dialog. //		JPanel btnsPnl = new JPanel(); //		JButton okBtn = new JButton(""OK"");"
// Get list of all plugin developers names. Allow for multiple // developers for a plugin in the form "John Smith, James Brown".
// EasyMock Class extension helpers.  Since classextension and interface  // EasyMock methods cannot be used on the same mocks, this provides convenience // to not have to specify the package name for classextension mocks.
// SQL Reference Guide says 32k, but I get: // // The specified row size exceeded the maximum allowable row width., // SQL State: 50002, Error Code: 2045 // // when I go above 8000.
"//	private static final class CellRenderer extends BasicComboBoxRenderer //	{ //		public Component getListCellRendererComponent(JList list, Object value, //						int index, boolean isSelected, boolean cellHasFocus) //		{ //			setText(((TableColumnInfo)value).getColumnName()); //			return this; //		} //	}"
"//		JInternalFrame[] frames = GUIUtils.getOpenNonToolWindows(getDesktopPane().getAllFrames()); //		_app.getActionCollection().internalFrameOpenedOrClosed(frames.length);"
//////////////////////////////////////////////////// // Is done in dispose itself because listeners must be fired even in DO_NOTHING_ON_CLOSE mode // tabHandle.fireClosed(e); ///////////////////////////////////////////////////
// Under JDK1.4 the first item in a JComboBox // is no longer automatically selected.
// This seems to be necessary to get background colours // correct. Without it labels added to the content pane // have a dark background while those added to a JPanel // in the content pane have a light background under // the java look and feel. Similar effects occur for other // look and feels.
"// Done this late so that plugins have time to register expanders // with the object tree prior to it being built. //			getSession().getObjectTreeAPI(_app.getDummyAppPlugin()).refreshTree();"
// We need this method to satisfy one of the Interfaces we implement, // but since we have moved all operations to the DataType sub-panels // which initialize their own data during creation, // there is nothing for us to do here
// We need this in order to allow the user to see this // plugin - which isn't loaded - in the plugin summary // dialog, so that they can enable it.
// No tokenizer has been set by any installed plugin.  Go ahead and // give the default tokenizer.  It is important to not cache this  // object so that session property changes to the current session  // are reflected in this default tokenizer.
///////////////////////////////////////////////////////////////////////////////// // Checks if the former message should be highlighted in a 'history' color.
// if the user selected Editable Table in the Session Properties, // then the display will be an editable table; otherwise the display is read-only
// It is possible for a table to contain only columns of types that // we cannot process or do selects on, so check for that. // Since this check is on the structure of the table rather than the contents, // we only need to do it once (ie: it is not needed in getWarningOnProjectedUpdate)
"//	public SQLFilterClauses getSQLFilterClauses() //	{ //		return _sqlFilterClauses; //	}"
// get WHERE clause // The -1 says to ignore the last arg and use the contents of the values array // for the column that we care about.  However, since the data in // that column has been limited, when getWhereClause calls that // DataType with that value, the DataType will see that the data has // been limited and therefore cannnot be used in the WHERE clause. // In some cases it may be possible for the DataType to use the // partial data, such as "matches <data>*", but that may not be // standard accross all Databases and thus may be risky.
// Template bodies
// if the rows do not match 1-for-1 to DB, ask user if they // really want to do delete
// for each row in table, count how many rows match where clause // if not exactly one, generate message describing situation
// Add the list of column names we will be inserting into - be sure // to skip the rowId column and any auto increment columns.
// This can happen if an impl of ISQLExecutionListener returns null  // from the statementExecuting API method, to indicate that the SQL  // shouldn't be executed.            
//////////////////////////////////////////////////////// // Implementataion of IDataSetUpdateableTableModel: // Delegation to _dataSetUpdateableTableModel
// There is no good way using JDBC metadata to tell if the table is a // materialized view. So, we need to query the data dictionary to find // that out. Get all table names whose comment indicates that they are // a materialized view.
// check option not supported
// If a driver says it supports schemas/catalogs but doesn't // provide schema/catalog nodes, try to get other nodes.
// create data structure containing contents of rows to be deleted // We cannot use the getRow() method because that uses MyJTable whereas // the indexes that we have are indexes in the SortableTableModel.
// Go through each child of the parent and see if it was previously // expanded. If it was recursively call this method in order to expand // the child.
// to allow the fw to save and reload user options related to // specific columns, we construct a unique name for the table // so the column can be associcated with only that table. // Some drivers do not provide the catalog or schema info, so // those parts of the name will end up as null.  That's ok since // this string is never viewed by the user and is just used to // distinguish this table from other tables in the DB. // We also include the URL used to connect to the DB so that // the same table/DB on different machines is treated differently.
//i18n[sqlparam.valueFor=Value for {0}]
//////////////////////////////////////////////////////////////////////// // Reload  all matching procedure types
// DB2 stores all names in upper case. // PostgreSQL stores all names in lower case. // That's why we may not find proc as it was written in the create statement. // So we try out the upper and lower case names too.
//int progress = loadSchemas(1); // load tables with catalog = null
// if the release version doesn't change, we won't be pulling down core artifacts. So, we just // need to make sure that all core files have been copied from their installed locations into the // corresponding directory in download, which is in the CLASSPATH of the updater. This covers the // case where the update is being run for the first time after install, and no new version is // available, but the user wants to install/remove plugins and/or translations.
// drop the existing default value. // "ALTER TABLE $tableName$ " + // "ALTER $columnName$ DROP DEFAULT";
// notify table that rows have changed // The deleted rows may not be contiguous in the actual data model // because the gui may be showing a version of the data sorted in // some other order, so we cannot use fireRowsDeleted.
// detect whether or not the object tree needs refreshing by comparing // old value to new and see if they changed.
/////////////////////////////////////////////////////////////////////////// // // Override the functions that need to be changed to tell the table // mechanisms how to do editing. // //////////////////////////////////////////////////////////////////////////
// ColumnDisplayDefinition[] colDefs = createColumnDefinitions(md, // columnIndices, computeWidths); // _dataSetDefinition = new DataSetDefinition(colDefs);
// we should never get here because the areEqual function is only // called when we are trying to update the database, so we know // that we have a DataType object for this column (or we would // have been stopped from editing by the isEditableXXX methods), // but we need a return here to keep the compiler happy.
// as a coding convenience, create a reference to the text component // that is typecast to JTextComponent.  this is not essential, as we // could typecast every reference, but this makes the code cleaner
"// if text cannot be edited in the cell but can be edited in //				the popup, show that by changing the text colors."
// the list of specific column names is in comma-separated format // with a comma in front of the first entry as well // empty the map of old values
// When changing the backgroud color, it helps to set the inner component's border to zero.  Otherwise, // the border can obscure the text and make it hard to see.  This is especially seen when using the // kunstoff l&f.
// ALTER TABLE <TABLENAME> ADD CONSTRAINT NULL_FIELD CHECK (<FIELD> IS NOT // NULL)
// default behavior if no appropriate data type found is to create // a simple JTextArea with no special handling. // // In Theory, this cannot happen because if there is no data type object // for this column's data type, then isEditableInPopup returns false, so // we should not get here.  If there IS a data type object, and isEditableInPopup // returns true, then we would have executed the return statement above. // Assume that the value can be represented as a string.
// ALTER TABLE localTableName // ADD CONSTRAINT constraintName FOREIGN KEY (localColumn1, localColumn2) // REFERENCES referencedTableName (referencedColumn1, referencedColumn2) // MATCH FULL ON UPDATE RESTRICT ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED;
// ALTER TABLE tableName // DROP CONSTRAINT constraintName
// ALTER TABLE <tablename> // ADD [CONSTRAINT <constraintname>] FOREIGN KEY (<column list>) // REFERENCES <exptablename> (<column list>) // [ON {DELETE | UPDATE} {CASCADE | SET DEFAULT | SET NULL}];
// convert all columns in key to not null - this doesn't hurt if they // are already null.
// I tried the following for values under 8000 but I get // Encountered unexpected exception - line 1, You cannot assign a // value of type 'long byte' to a column of type 'byte varying'. // Explicitly convert the value to the required type. // registerColumnType(Types.VARBINARY, 8000, "byte varying($l)");
// myid // myid // StringTemplate st = new StringTemplate(templateStr);
"// CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name // [index_type] // ON tbl_name (index_col_name,...) // // index_col_name: // col_name [(length)] [ASC | DESC] //	 // index_type: // USING {BTREE | HASH} // Note; indexType is unused at the moment because the index dialog doesn't accept this. See below."
// int featureId = DialectUtils.COLUMN_TYPE_ALTER_TYPE; // String msg = DialectUtils.getUnsupportedMessage(this, featureId); // throw new UnsupportedOperationException(msg);
// InstantDB (at least version 3.13) only returns "TABLES" // for getTableTypes(). If you try to use this in a call to // DatabaseMetaData.getTables() no tables will be found. For the // moment hard code the types for InstantDB.
// TABLE_CAT // TABLE_SCHEM // TABLE_NAME // COLUMN_NAME // DATA_TYPE // TYPE_NAME // COLUMN_SIZE // DECIMAL_DIGITS // NUM_PREC_RADIX // NULLABLE // REMARKS // COLUMN_DEF // CHAR_OCTET_LENGTH // ORDINAL_POSITION // IS_NULLABLE
// Compute available height above the cursor
// i18n[SQLResultExecuterPanel.rowsUpdated={0} Row(s) Inserted]
// Removed for comment
// i18n[UpdateControllerImpl.changesRecordedMsg=Requested changes will be made when // SQuirreL is restarted]
// Save options selected for DataType-specific properties
// Just a helper to make the fromResultSet ? ... below // look nicer.
"// this gets called before initialize()		"
// i18n[SessionStartupTimeHintDlg.dontShowAgain=Don't show this message again]
// data is editable in popup
"//		double pageBottom = pageTop +  clipHeight + headerHeight;"
// page number message (in smaller type)
// 4. Get the release.xml file as a ChannelXmlBean from the server or // filesystem.
// 2. Load the local release.xml file as a ChannelXmlBean.
// at least 1 more row left
// // variables used in printing //
// stay in line-comment state
// Load resources such as menu items, etc...
// object that called us and that we want to return data to when done
"//	private ColumnDisplayDefinition[] _hdgs = new ColumnDisplayDefinition[0];"
// i18n[DumpApplicationAction.titleSuccess=Dump successful]
// Nothing to do if object tree is opened.
// i18n[SQLResultExecuterPanel.execStatus=Executing SQL...]
// Track the time in aggregate for the script.
// log.info("SQL executed: " + sql);
// i18n[SQLResultExecuterPanel.toggleSticky=Toggle sticky]
"//	private SQLDriverPropertyCollection _sqlDriverProps;"
// set layout
// draw the header on every page
// Tricky alias and chaining completion examples  // // au to auftr in // from Kv auftr where au // // au to auftr in // from Kv.positionen.kv auftr where au // // positionen. to fields of Kv aggregate positionen in // from Kv auftr where auftr.positionen. // // positionen. to fields of Kv aggregate positionen in // from Kv where positionen.
"/*          * Since we depend upon the Connection class associated with the ISession,      * we need to keep a reference to the ISession we are associated with.       * However, this session could be closed, at which time we want to give up      * our reference so that it can be garbage collected.     */"
"//	public ColumnsComboBox(SQLConnection conn, ITableInfo ti) //		throws SQLException //	{ //		super(conn.getSQLMetaData().getColumnInfo(ti)); //		setRenderer(new CellRenderer()); //	} // //	/** //	 * This renderer uses the unqualified column name as the text to display //	 * in the combo. //	 */ //	private static final class CellRenderer extends BasicComboBoxRenderer //	{ //		CellRenderer() //		{ //			super(); //			setOpaque(true); //		} // //		public Component getListCellRendererComponent(JList list, Object value, //						int index, boolean isSelected, boolean cellHasFocus) //		{ //			setText(((TableColumnInfo)value).getColumnName()); //			return this; //		} //	}"
// private final static ILogger s_log = // LoggerController.createLogger(CreateMysqlTableScriptCommand.class);
// Flag indicates changing in textarea
// only the first row (containing data) is editable
// for entries past the first one, use the default renderer
//The name of the calling client program. //This is optional. If you don't want to give out this info, please enter "N/A"
// Dec 31 23:59:59 EST 2107 is overflow on FAT file systems, and // the call fails
///////////////////////////////////////////////////////////////////////////////// // There are a lot of goodies in the ExtSettingsInitializer // that might be interesting in th future. // Unfortunately some conflicts with some of Squirrels shortcuts // are in ExtSettingsInitializer //Settings.removeInitializer(ExtSettingsInitializer.NAME); //Settings.addInitializer(new ExtSettingsInitializer(), Settings.CORE_LEVEL); // /////////////////////////////////////////////////////////////////////////////
// // End of code related to printing //
// log.info("SQL starting to execute: " + sql);
// do a simple check to see if the string might contain XML or not
// Keylistener to indicate changing of text
// // inner class for the data display pane //
// Here we do the Replacement
//i18n[DeleteAliasAction.error.selectingwindow=Error selecting window]
// Determine size of grid to tile into. e.g 3X3 for 9 cells.
// the insert worked, so make this input form go away
// stay in block-comment state
// Fixes ClassCastException, see below.
// Test to see if the correct number of directories are returned.
// create column model
// for now, ignore popup request //RowDataJTable.this.displayPopupMenu(evt);
// set up cell editors on first row
// Display the result set metadata.
// do not recognize this button request
// create the JTable for input and put in the top of window
// try to convert the text in the popup into a valid // instance of type of data object being held in the table cell
// add row headers to help user understand what the second row is
// return _mainFrame;
"//		String CURRENT_LINE_HIGHLIGHTING = ""currentLineHighlighting""; //		String CURRENT_LINE_HIGHLIGHT_COLOR = ""currentLineHighlightColor"";"
// Check to see if to is a directory and convert toFile to be the name of the file in that directory.
// this frame should really go away when done
// Don't change the case of the identifier if database allows mixed // case.
// Persists the change list to the update directory.
// DATA_TYPE column of result set. // int data = _rs.getInt(idx);
// add mouse listener for Popup
// this is a binary field, so allow for multiple viewing options
// i18n[SessionStartupTimeHintDlg.showAliasProps=Open Alias Schema Properties]
// Description needed to handle conversion of data to/from Object
// define filter to select only names using the fileBase
// layout // ------------------------------------------------------------------------
// The following is only useable for a root type of InternalFrame. If the // root type is Dialog or Frame, then other code must be used.
// When we started dispatching the current event, in milliseconds.
// user said to insert, so collect all the data from the // JTable and send it to the DataSetViewer for insertion // into DB and on-screen tables
// Test to see if the correct number of files are returned.
// display the frame
// number of chars used to represent byte // the base radix
// delete last ','
// "ALTER TABLE $oldObjectName$ RENAME TO $newObjectName$";
// Temporary events need to be included // in case a modla dialog opens.
//  private static ILogger s_log = //      LoggerController.createLogger(DatabaseExpander.class);
// SEARCHABLE column of result set.
// Replace "-9" with Types.NVARCHAR when Java6 is the minimum supported version
//NOI18N
// more space above
// Under JDK1.4 an empty JComboBox has an almost zero width.
// not in scroll pane
// put the data and header names into the model
// Frontbase describes it's tables as "BASE TABLE".
// do one or two passes
// can't fit -> hide
// Convert to layered pane's coordinates
// Update the bounds of the popup
// Creating a filter that catches directories.
// Not successful
// yes it can, so add controls
// light yellow
// i18n[DatabaseMetaData.searchableTypePredBasic=supports all except 'WHERE...LIKE']
//The pw. If user name is anonymous this can be anything. But it has to be supplied anyway.
// i18n[editextras.reformatFailed=Reformat failed, normalized // Strings differ]
// -1 is stored if the checksum operation failed. This will ensure that comparison with any other // file's checksum will be different - even if they happen to be the same file.
// Since this thread is not a UI thread, it is ok to run the task synchronously.
// cannot use '-' when unsigned
// SS: Modified to auto-compute column widths if <computeWidths> is true
// we do not expect a lot of files in this directory, // so just do things linearly
//For testing on the local machine //URL l_url = new URL("http://localhost:8081/services");
// hold the state
// data objects
// load the info into the text fields
// i18n[ObjectTreeSearch.error.objectnotfound=Could not locate the database object ''{0}'' in Object tree]
//For testing on the live server //            URL l_url = new URL("http://sqlvalidator.mimer.com/beta2/services");
// i18n[ConnectToAliasCommand.error.closeconnection=Error occured closing Connection]
// common expectations
// sort the list
//repaint the page for printing
// i18n[SQLResultExecuterPanel.rowsDeleted={0} Row(s) Deleted]
// Execute validator and return results.
// Close existing session.
// get parameters previously set by user, or set default values // set to use the Java default
// Synchronize on the outer class, because that's where all // the state lives.
// IMPORT OBJECT FROM OSX_FILE
// Finding a non-existent directory to create.
// JASON: What are its valid values?
// allow the user to enter just the hour or just hour and minute // and assume the un-entered values are 0
"/*     * Return a JTextArea usable in the CellPopupDialog     * and fill in the value.     */"
// i18n[Application.error.writecellselections=Unable to write Cell Import/Export options to // persistant storage.]
/* Sort it and store in a new CopyOnWriteArrayList */
// Handle table source
// FileFilter
// "ALTER SEQUENCE $sequenceName$ $startWith$ $increment$ $minimum$ $maximum$ $cache$ $cycle$";
//i18n[DeleteDriverAction.error.selectingwindow=Error selecting window]
//i18n[DumpApplicationCommand.title.status=Application Status Bean]
"/*     * Property change control panel     */"
//Create self and
// prompt the user to add a website url for this driver
//_sqlEntryFactoryProxy = new OsterSQLEntryAreaFactory(this, originalFactory);
// Add a new formatter for Sybase-Errors/Warnings
/* Spring-injected */
// Maximum time we won't warn about.
/////////////////////////////////////////////////////////// // SybaseASE specific code to read procedure definitions.
// Context instance declaration
/* ----------------------------------- Public API ------------------------------------------------------*/
/* --------------------------- Spring=injected dependencies --------------------------------------------*/
//plugin supports Session main window only
// Put the 'AND' or the 'OR' in front of the clause if // there are already values in the text area.
// Cell Import/Export file not found for user - first time user ran pgm.
// Incomplete and error token-ids
"/* At this stage there's no more text in the scanned buffer, but      * this buffer is not the last so the scan will continue on another buffer.      * The scanner tries to minimize the amount of characters      * that will be prescanned in the next buffer by returning the token      * where possible.      */"
// SQL-Server doesn't support a cascade clause.
// Need to remove the existing jar in the plugins directory and all of the files beneath the // plugin-named directory.
// If the user wants to select for Right mouse clicks then change the selection before popup appears
// set default colors
/* The total number of decimal digits allowed in the number */
"/*	 * Internal class for handling key events during editing	 * of both JTextField and JTextArea.	 * Since neither cell nor popup are allowed to edit, just ignore	 * anything seen here.	 */"
// We have a core or translation file that is not already installed - add it
// strange that release xml file wasn't found; but not a problem at this point - just log it.
"//	private boolean _bracketHighlighting = true;"
// make this the same size as the fileNameField
// i18n[SQLTab.title=SQL]
/* GUI Widgets */
//?? There does not seem to be any standard way to represent //?? binary data in a WHERE clause... // tell caller we cannot use this in Where clause
// Skip files that are not installed - new files
// false);
// Not the Textcontrol itself changed but some other of the Syntax Preferences, for example a color. // So we tell the current control to update the preferences.
// Install the factory for creating SQL entry text controls.
// Some DBs give a negative number when they do not have a value for // the scale.  Assume that if the _scale is 0 or positive that the DB really // means for that to be the scale, but if it is negative then we do not check.
// check the total number of digits in the number. // Since the string version of the number is therepresentation of // the digits in that number and including possibly a plus or minus // and a decimal, start by counting the number of digits in the string.
// Create the actual panel that will be displayed in dialog.
// nothing needed here??
// artifact name for plugins is <plugin internal name>.zip
// get grant target
// Assume that all start tags are "<...>" or include a space // after the tag name (e.g. as in "<SOMETAG args>" and all // end tags are "</...>".  Remove the syntactic markers, // then remove any spaces, and convert to upper case for comparison
// Procedures
// DB cols are in same order as colDefs
// translations are most likely to be found in core lib dir.
//i18n[DumpApplicationCommand.error.dumpingdrivers=Error dumping drivers]
// Download directories
// " WITH ADMIN OPTION"
// Dump aliases.
// setting value
//   public static final String duplicateLineAction = "duplicate-line-action";
// Once and again the Netbeans editor calls createSyntax() after // sessionEnding() was called. Then sess is null and the code below // would break.
// Install directories
// root
// session preferences
// -- backup
//i18n[DumpApplicationCommand.title.sessiondump=Session Dump: {0}]
// Make sure no duplicates are kept in history.
// && node != _tree.getLastSelectedPathComponent())
//DialogSupport.setDialogFactory(new NbDialogSupport());
// List of the additional colorings
// Update java colorings
"/* Suppress warnings for issues that are present in this old release of     * NetBeans editor libraries we are using.    */"
// ExtCaret highlighting colorings
// Standard expanders.
// Register tabs to display in the details panel for database nodes.
// Navy.
//         new MultiKeyBinding( //            KeyStroke.getKeyStroke(KeyEvent.VK_D, InputEvent.CTRL_MASK), //            SQLKit.duplicateLineAction),
/* the whole column definition */
// Formatting settings
// NULLABLE column of result set.
// Removed for the SQLBookmark Plugin
//i18n[DumpApplicationCommand.error.sessiondump=Error dumping sessions]
// Operators
// Dump sessions.
// errors
// redirect the Esc key to Cancel button
// start with illegal number of rows matching query
// Reasons for this code mailed to Rob by Gerd on 9/20/2008. // // the Problem are methods like // // BaseSQLEntryPanel.getBoundsOfSQLToBeExecuted() // BaseSQLEntryPanel.moveCaretToPreviousSQLBegin() // // They rely on the line break being a single char. // Also I suppose some of our code generation (scripting) functions do the same. // At least I'm pretty sure if \r\n would be preserved // they could produce a mixture of \n and \r\n.
// I thought this prevented GC. It doesn't // But if two Sessions are open and one is closed the one left open looses // key bindings. For example the Arrow navigation keys. //getKeymap().removeBindings();
// info
//i18n[DumpApplicationCommand.error.combiningtempfiles=Error combining temp files into dump file]
// find the entry in colDefs matching this column
// Example: // ALTER TABLE kvpos ADD CONSTRAINT kv_kvpos FOREIGN KEY (kvid) kv(kvid) // -------------------------------------------------------------^ ("References" expected) // // kv will not be marked with the condition above, because // errInf.endPos <= absolutePosition + len // is never true.
"/*	      * GUI components - need to be here because they need to be	      * accessible from the event handlers to alter each other's state.	      */"
// preferences from the last session
// Register tabs to display in the details panel for table nodes.
// load properties and fill missing entries with the global preferences 
// global preferences
// With an hanging SessionListener a Session nvere gets Garbage Collected.
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo#getQualifiedName()     */"
//   protected Action[] createActions() //   { //      Action[] javaActions = new Action[] //      { //         new NetbeansDuplicateLineAction(), //      }; //      return TextAction.augmentList(super.createActions(), javaActions); //   }
// i18n[StringFunctionsTab.title=String Functions]
// end else
"//		IAliasesList al = getAliasesListInternalFrame().getAliasesList();"
// "backup file"
// add <columnName>_2 null as CLOB
// Regression for HARMONY-3869
// Regression for HARMONY-53
// Token-ids
//Get 10 lines at a time.
// Messages
// Regression for HARMONY-829
//  Determine the number of lines to draw in the foreground.
// for strings, a "blank" field is allowed, so only // switch to null when there is nothing left in the field // and user does delete
"/*	 * Properties settable by the user	 */"
// nothing found
// GridLayout makes equal cells
// ISessionListener interface methods
// Note: Temporary events need to be included // in case a modla dialog opens.
// Data type keyword numeric-ids
// i18n[graph.invalidWidth=Invalid width]
// Combo box for read-all/read-part of blob
// Regression for HARMONY-444
// ArtifactName // Type // Installed? // Install/Update/Remove
// The only thing that would prevent us from editing a string in the popup // is if that string has been truncated when read from the DB. // Thus, being able to edit the string is the same as not needing to re-read // the data.
// Paint the background
// register the default button, if available
//  Update sizes when number of digits in the line number changes
// listen on windowClosing and redirect it to Cancel button
// Note: tabs and newlines are allowed in string fields, even though they are unusual.
// this column is limited, so truncate the data
// Other keywords numeric-ids
// Names of the columns.
// Token category-ids
// We cannot use this data in the WHERE clause if it has been truncated. // Since being truncated is the same as needing to re-read, // only use this in the WHERE clause if we do not need to re-read
// register the cancel button helpers, if available
// Rest of the keywords
// Void type keyword numeric-id
// See SQLSettingsInitializer to find out how fonts are // handled in the Netbeans editor. // _textArea.setFont(font);
// get the type of artifact
// Incomplete tokens
// ask the DataType object if the two values are the same
// Void type
// Numeric-ids for token-ids
// i18n[SQLPreferencesPanel.largeScriptStmtCount=Large Script Statement Count: ]
// read map with users
// expected;
// Token-categories
// JDK1.5 vararg's "..."
"//	private final ISession _session;"
// checkbox for limit/no-limit on data read during initial table load
// At this point the user input has been validated and both the // new and old values are objects of the appropriate data type. // Either or both of newValue and oldValue may be null.
// if there is no updateable model, then we cannot update anything // (should never happen - just being safe here)
// i18n[dataTypeString.typeChar=CHAR, VARCHAR, LONGVARCHAR   (SQL types 1, 12, -1)]
// Cannot edit the rowID column, if present
//               case SQLTokenContext.ANNOTATION_ID: // JDK 1.5 annotations //                  return new Coloring(null, new Color(0, 111, 0), null);
"//		_session = session;"
//IObjectTreeAPI api = session.getObjectTreeAPI(this);
// Oracle SQL
// find the next name in the text
// first look to see if they are identical objects, e.g. both null
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getTitle()     */"
// i18n[PreferencesPanel.procedureSeparatorLabel=Procedure/Function // Separator]
//Hashtable autoCorrects = plugin.getAutoCorrectProviderImpl().getAutoCorrects(); //javaAbbrevMap.putAll(autoCorrects);
// This stops the text control from line wrapping.
// display mode
// printing set
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.session.ISQLEntryPanel#setUndoManager(javax.swing.undo.UndoManager)     */"
// global references
// create the dialog with given content
// create the file
"/*	 * @see ISQLEntryPanel#getCaretLineNumber()	 */"
// Data types
// print fore color will be gray
// We do abrevs ourselfs in the DocumentListener in NetbeansSQLEntryPanel. // We don't use the Netbeans implementation mainly because it is case sensitive. // If we come across a performance problem one day we can still try to use this.
"/* The current JTable that we are working with.	 * This is used only to see when the user moves	 * to a different JTable so we know when to clear	 * the HashMap of DataTypeObjects.	 */"
// for convenience cast the object to BlobDescriptor
//IMainPanelTab[] getMainTabbedPanePanels(ISession session);
// Dialog is shown only when it is written to.
//  Variables for this LineNumber component
// Label panel containing the versions for the update at top of dialog.
"/* map of existing DataType objects for each column.	 * The key is the ColumnDisplayDefinition object, and the value	 * is the DataTypeObject for that column's data type.	 */"
//  LineNumber height (abends when I use MAX_VALUE)
// i18n[HelpViewerWindow.error.loadchangelogfile=Error retrieving Change Log file URL for {0}]
"/*    * The following is used in both cell and popup operations.    */"
// BLOB cannot be used in WHERE clause
// Options for global popup menu.
// init user list
// table data objects
//Options column increased
// this is the actual command that colors the stuff. // Color stuff with the description of the style matched // to the hash table that has been set up ahead of time.
// handle of connected server
// usermanager of jaybird
// forever
// After the lexer has been set up, scroll the reader so that it // is in the correct spot as well.
// Only if the text did really changed (null != re.change) Intervals // must be adjusted. // If the text did not change there is nothing to adjust.
/*Color.maroon*/
// i18n[WindowManager.errorselectingwindow=Error selecting window]
// Logger for this class //private final static ILogger log = LoggerController.createLogger(PreferencesPanel.class);    
// since the previous entry might have changed the color, // we need to reset the color back to default value for table cells, // taking into account whether the cell is selected or not.
// The Interval is involved even if pos lied one point before // or after the interval. // This way for example we get // -- Select ... // out of comment coloring when the first "-" is removed.
// record the colorStartPos of the last bit of text that we colored
// we will highlight tokens until we reach a good stopping place. // the first obvious stopping place is the end of the document. // the lexer will return null at the end of the document and wee // need to stop there.
"//			synchronized (doclock) //			{"
//IObjectTreeAPI api = m_session.getObjectTreeAPI(m_plugin);
// create the new document.
// since we did something, we should check that there is // nothing else to do before going back to sleep.
// Though in API-Doc they say setCharacterAttributes() is thread save we // received observed java.lang.Errors  from Swing as well as dead locks. // That's why we do changes synchron now.
// TODO: columns, tables
// Internationalized strings for this class.
// targetType == TARGET_TYPE_SQL
"/*          * String catalog, String schema, String simpleName          */"
// Remove the core items since they are the most recent, and the user is not allowed to remove them
"//TODO:			setFont(style.createStyledFont(getFont()));"
// not something we can read
// Removed for reformatting
///////////////////////////////////////////////////////// // Setting the model initializes columns. We want to // initialize the columns ourselves below.
// can use an empty blob for editing
// no rows selected.
// Folder to store the user settings in
// Label containing the location of the plugins at top of dialog.
// Table of loaded plugins in centre of dialog.
// column 1 is internal name
//private JLabel lblTitle = new JLabel();
// column 3 is loaded status
// "Other" types are treated as Strings internally in SQuirreL.
// Total number of threads.
// start the threads
// join with the threads
// // First parse the SQL string //
// This is expected
// Bean for the global preferences
// Now sequences should go.
// the plugin
//////////////////////////////////////////////////////////////////////////////// // We try to cascade
///////////////////////////////////////////////////////// // Printing
//utilUnderTest = null;
"/*   		 * Now that we have run the view definition query, and retrieved the SQL that is the body of the view   		 * (that is, it's query part minus the ""CREATE VIEW AS"" prefix), we can drop the view.    		 */"
//UpdateUtil util = new UpdateUtilImpl();
//TABLENAME
// this is the column on which the constraint to be dropped is defined
//////////////////////////////////////////////////////////////////////////////////////// // Printing
// Mocks for generic dialect test
// No paper edges. We print the Graph as it is to a single image.
/* DB2 requires primary keys to also be declared "not null" */
// i18n[graph.dina5=Din A 5]
// Need a directory that exists
// MySQL spatial index requires a not null column
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#initialize()     */"
// alterations fail for some reason unless you do this...
// TODO move to new standard location and rewrite test to be less static
// We need to add a second column to have a unique constraint so that we can drop that one.  Progress // doesn't allow the very first index to ever be dropped.
// This is what we expect
// gui
// We always get the BLOB, even when we are not reading the contents. // Since the BLOB is just a pointer to the BLOB data rather than the // data itself, this operation should not take much time (as opposed // to getting all of the data in the blob).
////////////////////////////////////////////////////////////////////////////////////////// //Needs to be done at this moment. That's why we can't call updateFromPreferences() here.
// See if plugin has any jars in lib dir.
// convert nullint into a varchar(100)
//new RemoveQuotesCommand(_session.getSQLPanelAPI(_plugin)).execute();
// Postgres has some special indexes that only work on certain columns.  Skip tests for those
// Selects the distinct values from the source column.
// getSelectedController() == null means: Create a new Graph
// This is what we expect.
// Since it is likely to have the procedure separator on it's own line,  // and it is key to letting us know that proceeding statements form a  // multi-statement procedure or function, it deserves it's own place in  // the _queries arraylist.  If it is followed by other procedure or  // function creation blocks, we may fail to detect that, so this just  // goes through the list and breaks apart statements on newline so that  // this cannot happen.
// Remove menu item from Windows menu that relates to this // internal frame.
/* drop the table so that we can test our create statement */
"//Action performed for the combo box //	private void cbFieldNameActionPerformed(java.awt.event.ActionEvent evt) //	{ // //		selectedIndex = cbFieldName.getSelectedIndex(); //		DefaultComboBoxModel comboModel = //			(DefaultComboBoxModel) cbFieldName.getModel(); //		FieldDetails fd = (FieldDetails) comboModel.getElementAt(selectedIndex); // //		cbFieldName.setSelectedItem(fd.getFieldName()); //		cbFieldType.setSelectedItem(fd.getFieldType()); //		tfFieldLength.setText(fd.getFieldLength()); //		tfFieldDefault.setText(fd.getDefault()); //		chAutoIncrement.setSelected(fd.IsAutoIncrement()); //		chNotNull.setSelected(fd.IsNotNull()); // //	}"
/* Build the sql statement(s) to create the table */
/////////////////////////////////////////////////////////////////////////// // We try to find a completely free space for the new table frame.
// Register so that we can display different tooltips depending // which entry in list mouse is over.
// quiet
/* create a table with a default value to use as the model */
// defines the size of the arrow
// Don't need tooltips any more.
// No need to this in background when SchemaInfo  is not reloaded.
// If node hasn't already been expanded.
// i18n[graph.inch=inch]
// make it grow when added
// Enable/Disable actions that require open session frames.
//public Folder getSubFolder(int idx) throws IndexOutOfBoundsException { /// return (Folder)_folders.get(idx); //}
// create it.
// create a unique index on myuniquechar
// Empty body, purely to shorten the interface name for convienience.
// Progress throws an exception if you try to drop the first index that was created
// skip this table, try the next.
// Renames the source column.
//[i18n[OrderByClausePanel.hint=Order by clause for the selected table]            
// create a non-unique index on mychar
//////////////////////////////////////// // Serialized attributes
// Axion cannot handle ts escape sequence - so skip this test for now.
//private static final DB2400Dialect db2400Dialect = new DB2400Dialect();
// i18n[GeneralPreferencesPanel.squirrelHomePath=Home directory: -home {0}]
// now drop the second.
// check to see if the column index is within the bounds // of our header array
// Unused methods - this is not a real dialog, just a fake.
// grab the current letter as a char
// Center text vertically.
//DatabaseObjectType.UDF_TYPE_DBO=UDF Type
// i18n[graph.btnCreateNewGraph=Create new graph]
// Column is in both table 1 and 2
// save the pointer needed for insert and delete operations
/* create a test view that we will get view def for then drop and re-create */
"/*	private class DBCopyPluginResources extends PluginResources {	DBCopyPluginResources(String rsrcBundleBaseName, IPlugin plugin) {	    super(rsrcBundleBaseName, plugin);	}	}	*/"
/* Verify insert worked only if the dialect supports sub-second timestamp values */
// See if all selected nodes are of the same type.
// BLOB exists, so try to read the data from it // based on the user's directions
// No exceptions during logging
// variables // ======================================================================== // non visible // Logger for this class
// i18n[SQLFilterSheet.error.columnList=Unable to get list of columns {0}]
//Shutdown Embedded Derby DB
// UPDATE tableName SET setColumn1 = setValue1, setColumn2 = setValue2 // FROM fromTable1, fromTable2 // WHERE whereColumn1 = whereValue1 AND whereColumn2 = whereValue2;
// 1. Find the local release.xml file
// These must not be internationalized since SQL tokens must be in  // English //No I18N //No I18N
"/*    * Channel that provides snapshot release updates - more frequent and less    * stable    */"
// Table was deleted from DB
// "ALTER SEQUENCE $sequenceName$ " + // "$restartWith$ $startValue$ " + // "$incrementBy$ $incrementValue$ ";
// If we've loop through one time for each character in the string,  // then something must be wrong.  Get out!
// When all updates are retrieved, tell the user that the updates will be installed upon the // next startup.
// i18n[graph.orderyName=order by name]
// Transferable
// features
// <rename_view_statement> ::= RENAME VIEW <old_table_name> TO <new_table_name> // <old_table_name> ::= <table_name> // <new_table_name> ::= <table_name
// i18n[graph.save=Save]
// Check once a day // Check once a week // check every time the app launches
// <create_index_statement> ::= // CREATE [UNIQUE] INDEX <index_name> ON <table_name> (<index_spec>) // // <index_spec> ::= // <index_column_name>,... // | <dbfunction_name> (<column_name>,...) [ASC|DESC] // // <index_column_name> ::= // <column_name> [ASC|DESC]
// alter table FKTESTCHILDTABLE add CONSTRAINT foo_const UNIQUE (MYID)
/* Channel that provides stable release updates */
// hit is on folding point
"/*    public static final int NO_ACTION = 0;        public static final int CASCADE_DELETE = 1;        public static final int SET_DEFAULT = 2;        public static final int SET_NULL = 3;    */"
// i18n[DownloadStatusEventHandler.downloadingUpdatesMsg=Downloading Files]
//boolean isUpToDate() throws Exception;
// Some databases store a time component in DATE columns (Oracle)  // The user can set a preference for DATEs that allows them // to be read as TIMESTAMP columns instead. This doesn't  // appear to have ill effects for databases that are standards // compliant (such as MySQL or PostgreSQL).  If the user  // prefers it, use the TIMESTAMP data type instead of DATE.
// Info
/* Test the create statement */
// build ui
// We should never NOT have an object here because we only get here // when a DataType object has claimed that the column is editable. // If there is no DataType for the column, then the default in the // isEditableXXX() methods in this class is to say that the column // is not editable, and therefore we should never have this method // called in that case.
// If the update dir, is actually a file, log an error.
// Since the user only wants to be notified of updates at startup, return here, thereby  // freeing up the thread.
// The first argument is a JTable, which is only used by instances // of JTextField to convert coordinates on a double-click.  Since that // cannot happen with the JTextArea, do not bother passing the table.
// convert to string // Special case: some systems tack a newline at the end of // the text read.  Assume that if last char is a newline that // we want everything else in the line.
// User doesn't wish for us to try to auto-detect the dest db.
// MS SQLServer yields "Conversion failed when converting datetime from character string" // for {ts '2008-02-21 21:26:23.966123'}
// Kick off a thread to go and fetch the files one-by-one and register // callback class - DownloadStatusEventHandler
// catalog // schema // tableName // columnName // dataType // typeName // columnSize // decimalDigits // radix // isNullAllowed // remarks // defaultValue // octet length // ordinal position // isNullable
// build data
// The driver throws an exception for varchar with length > 3924
// 3. Determine the channel that the user wants (stable or snapshot)
//tableName, columns, pkColumns, prefs, qualifier
// 2. When the user clicks ok, then display update dialog again.
// 1. Wait for user to click ok/close
// Symbol used by user in Command field to indicate // "Put the file name here" when the command is executed.
/* Helper methods */
// based on defaults from DB, get the default object instance // for each column
// current Schema says don't load
// i18n[syntax.enableAutoCorr=Enable auto correct / abreviation]
// first time through this method in program, so go cleanup // old log files
// Helpers
// Lazily create the event.
"/*     * (non-Javadoc)     *      * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getHint()     */"
// always wrap on word boundaries
// 1. Find the local release.xml file. Bail with exception if we cannot find it.
// If the downloads dir doesn't already exist, just create it.
// Needes to be done via event queque because method is not called from the event disptach thread.
// Note: If we are here _cacheSchemaIndependentMetaData must be false
// Clear
// This is a funny functionality anyway and // leads to problems with the DockTabStyle. // E.g. when SessionProperties is closed first tab gets selected.
// i18n[graph.refreshAllTables=Refresh all tables]
//i18n[DualProgressBarDialog.error.getdialog=getDialog: unable to invokeAndWait for dialog]
// i18n[generalSessionPropertiesPanel.objectTabs=Object Tabs:]
// -- restore
//i18n[DBCopyGlobalPreferencesTab.title=DB Copy]
// 3. & 3a. Get the release.xml file as a ChannelXmlBean from the server or // filesystem.
// i18n[codecompletion.prefs.table.spWithParams=SP with params]
// i18n[TableExportCsvDlg.useDefaultFormating=Use default formating]
// i18n[mssql.add=Add >>]
// i18n[oracle.diplayScriptDetails=Display script details]
// i18n[SchemaInfo.loadingDataTypes=Loading data types]
// i18n[oracle.diskReadsPerExec=Disk Reads per Exec]
// i18n[dataTypeBigDecimal.scaleEceeded=Scale Exceeded: Number  //of digits to right of decimal place ({0})\nis greater than  //allowed in column ({1}).]
// i18n[TableTypesTab.hint=Show all the table types available in DBMS]
// Record now as the last time we checked for updates.
// Since this timer must be started when SQuirreL is launched, wait a couple of minutes for // SQuirreL to get done initializing the UI.
// 3a. For server, Determine the channel that the user has (stable or snapshot)
// HSQLDB 1.7.1 throws error.
// i18n[mssql.allDefaults=All defaults]
"/* 		 * Don't prevent the user from overriding the laf is they choose to use 		 * Swing's default laf prop 		 */"
// Oracle jdbc driver doesn't properly identify this column // in ResultSetMetaData as read-only. For now, just use // isAutoIncrement flag to simulate this setting.
//i18n[IndexesTab.hint=Show indexes for the selected table] 
// i18n[graph.saveGraph=Save graph]
// i18n[mysql.hintGrants=(MySQL) Grants]
// i18n[mssql.scriptDatabase=Script database]
// getter/setter
// i18n[ResultTab.elapsedTime=Total: {0}, SQL query: {1}, Building output: {2}]
// i18n[SequenceDetailsTab.hint=Display sequence details]
// i18n[HelpViewerWindow.error.loadlicencefile=Error retrieving Licence file URL for {0}]
// i18n[exportconfig.errorWritingPrefs=Error occured writing to preferences file: {0}]
// i18n[firebird.triggerDetails=Display trigger details]
//i18n[PreferencesPanel.truncateTable=Truncate table before inserting data]
// i18n[userscript.selScriptToDel=Please select the script to delete]
"/* (non-Javadoc)   * @see net.sourceforge.squirrel_sql.client.session.ISQLPanelAPI#fileAppend()   */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getLicenceFileName()     */"
// flag for whether to use the default Java format (true) // or the Locale-dependent format (false)
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getGlobalPreferencePanels()     */"
// i18n[HibernateSQLPanel.Execute=Execute SQL]
//i18n[CopyTablesCommand.loadingPrefix=Analyzing table:]
// i18n[javaBeanDataSet.name=Property Name]
// i18n[popupeditableIoPanel.errorGettingPath=Error getting full path name for selected file]
// i18n[graph.name=Name]
// throws PluginException
// Add table types to list.
// if value contains "-" it probably has a date component
// Add UDT parent node.
// no existing blob to re-use
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getPluginAppSettingsFolder()     */"
// i18n[SQLScriptPreferencesPanel.deleteRefActionToolTip=Append ON DELETE ...]
// i18n[mssql.allUDFs=All user-defined functions]
// i18n[codeCompletion.spWithoutParams=stored procedure without parameter info: {call mySP()}]
// i18n[mssql.genereateCreate=Generate the CREATE <object> command for each object]
"/* (non-Javadoc)    * @see net.sourceforge.squirrel_sql.client.session.ISQLPanelAPI#fileSaveAs()    */"
// i18n[dateTypeTimestamp.stringVersion=Use String version of Timestamp ]
"/* (non-Javadoc)    * @see net.sourceforge.squirrel_sql.client.session.ISQLPanelAPI#fileClose()    */"
"/* (non-Javadoc)    * @see net.sourceforge.squirrel_sql.client.session.ISQLPanelAPI#fileOpen()    */"
//i18n[ExcelSettingsPanel.xlsSettings=Excel import settings]
// i18n[ColorPropertiesPanel.statusBarBackgroundColorBtnLabel=Choose Status Bar Color]
//Empty Bbody
// i18n[SplashScreen.info.loadingfile=Loading file - ]
// i18n[TableExportCSVDlg.exportTitleNew=CSV / MS Excel export]
// i18n[CopyProgressMonitor.analyzingTableMessage=Analyzing table ]
// i18n[UpdateControllerImpl.exceptionMsg=Exception was: ]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#unload()     */"
//i18n[CSVFileImporter.invalidDateFormat=Invalid date format given]
// i18n[mysql.tabStatus=MySQL Table Status]
// set to default
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.session.ISession#getSchemaInfo()     */"
//i18n[DatabaseObjectInfoTab.hint=Basic information] 
// alter table <tablename> drop column <columnName>
// i18n[popupeditableIoPanel.cannotCreateTempFile=Cannot create temp file..\nError was:\n{0}]
// checkbox for whether to interpret input leniently or not // i18n[dataTypeDate.allowInexact=allow inexact format on input]
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#nullsAreSortedHigh()	 */"
// whether or not to read date type columns with rs.getTimestamp() // i18n[dataTypeDate.readDateAsTimestamp=Interpret DATE columns as TIMESTAMP]
"/*              * Create the panel and add the GUI items to it              */"
// readdDateAsTimestamp checkbox
// Adds the new column (type: integer).
// lenient is set next
// i18n[graph.scriptdd=script DDL]
// regression test for HARMONY-1497
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo#getDatabaseObjectType()     */"
// registerColumnType(Types.LONGVARCHAR, 31982, "varchar($l)");
// Frontbase requires CASCADE // or RESTRICT keywords.
// Anticipate the same issue for BLOBS as for BINARY and LONGVARBINARY. // registerColumnType(Types.BLOB, 2147000000, "bit varying($l)");
// convert each column that will be a member key to non-null - this // doesn't hurt if they are already null.
// check box for whether to read contents during table load or not
// Derby is real close to DB2. Only difference I've found so far is 48 // instead of 53 for float length llimit.
// Copy the app module jar to core downloads directory
//throws PluginException;
// user does not want to overwrite the file
"/*		select v.VIEWDEFINITION 		from sys.SYSVIEWS v, sys.SYSTABLES t, sys.SYSSCHEMAS s 		where v.TABLEID = t.TABLEID 		and s.SCHEMAID = t.SCHEMAID 		and UPPER(t.TABLENAME) = 'VIEWNAME'		and UPPER(s.SCHEMANAME) = 'SCHEMANAME'		 */"
// is it installed?
// '*/' outside comment
// the number of files to keep is arbitrarilly set here
// i18n[DataTypesTab.title=Data Types]
// The event dispatch thread, for the purpose of getting stack traces.
// Additional Index Creation
// everything is ok
// i18n[sqlval.noSql=No SQL specified]
// set to the default
// The text area displaying the object contents
// i18n[AboutBoxDialog.error.creditsfile=Error reading credits file]
// Dont enable the session drop down if it is empty
// CREATE UNIQUE INDEX indexName ON tableName USING btree (column1, column2) TABLESPACE // WHERE constraints;
// i18n[graph.btnOk=OK]
"/*		 * ALTER TABLE <tableName> ADD CONSTRAINT UNIQUE (<columnList>) CONSTRAINT <constraintName>		 */"
// Save Application level SQL history.
// Save options selected for Edit Where Columns
// Save options selected for Cell Import Export operations
// i18n[dataTypeOther.sqlOtherType=SQL Other   (SQL type 1111)]
// for faster printing, turn off double buffering
// i18n[SQLHistoryDlg.filterCboStartsWith=starts with]
// i18n[DataCache.msg.driverRegisteredSucessfully=Driver class {0} sucessfully registered // for driver definition: {1}]
//i18n[CreateTableScriptCommand.jdbcOdbcMessage=JDBC-ODBC Bridge doesn't  //provide all of the necessary metadata. The script may be incomplete.]
// No special treatment
// i18n[graph.new=New]
// i18n[popupeditableIoPanel.errorReadingFile=There was an error while reading file {0}.\nThe error was:\n{1}]
//i18n[ColumnListDialog.tableNameLabel=Table Name: ]
"/* (non-Javadoc)    * @see net.sourceforge.squirrel_sql.client.session.ISQLPanelAPI#fileNew()    */"
// i18n[DownloadStatusEventHandler.updateDownloadFailedTitle=Update Download Failed]
// i18n[DB2Plugin.showViewSource=Show view source]
// i18n[laf.warning=Note: Changes may not take effect until the application is restarted.]
// i18n[AbstractRefactoringDialog.tableNameLabel=Table Name: ]
// i18n[mssql.windows=Windows text (ANSI)]
// i18n[popupeditableIoPanel.exportError6=Export Error]
// i18n[graph.scriptPlugNeeded=Scripting is only available with the SQL Scripts Plugin.\nGet the plugin from www.squirrelsql.org. It's free.]
// i18n[oracle.parseCalla=Parse Calls]
// i18n[DerbyDialect.typeMessage=Derby doesn't allow the column type to // be altered]
// i18n[exportconfig.xmlErrorWritingTo=XML Error writing to\n{0}]
// i18n[popupeditableIoPanel.exportError2=Export Error]
// i18n[sqlscript.configYourMultiTableScriptConstr=Include constraints to tables not in selection]
// i18n[sqlval.logon=SQL Validation Logon]
//i18n[PasteTableAction.error.multischemapaste=The paste  //operation may only be applied to one schema at a time]
// i18n[Application.splash.loaddatatypeprops=Loading Data Type Properties...]
// i18n[mssql.cancel=Cancel]
// i18n[graph.showZoomPaper=Show/Zoom paper edges]
//i18n[UpdateSummaryTable.allTranslationsLabel=All translations]
// determine whether we read all there was in the blob or not
// i18n[graph.showddl=show DDL]
// i18n[HibernateTabController.noConfigSelected=Please select a Hibernate configuration to connect to.\nHibernate configurations can be defined in the global preferences window.\nWould you like to open the window now?]
"//	private ISession _session;"
// i18n[popupeditableIoPanel.selectImportDataFile=You must select an existing file to import data from.]
// i18n[CreateTableOfCurrentSQLCommand.noQuery=No query found to create the script from.]
// i18n[SQLHistoryDlg.filterCboEndsWith=ends with]
//i18n[UpdateSummaryTable.allPluginsLabel=All plugins]
// i18n[sqlscript.dropIfExists=Drop table if exists]
// i18n[graph.cm=cm]
// we successfully read the whole thing
// valid bounds
//Create checkbox for enabling auto refresh // i18n[oracle.auotRefresh2=Enable auto refresh]
// i18n[AboutBoxDialog.creditspanelcreatetime=CreditsPanel created in ]
//i18n[syntax.cols=Columns]
// i18n[SQLTab.hint=Execute SQL statements]
// i18n[DownloadStatusEventHandler.changesRecordedTitle=Changes Recorded]
//i18n[ImportDataIntoTableExecutor.ioException=An error occured while reading the input file.]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.session.ISession#getMetaData()     */"
// i18n[UpdatePreferencesPanel.connectionFailureDialogMsg=Unable to download release.xml from the // specified location]
// i18n[mysql.enterDbName=Enter database name]
// i18n[graph.printGraph=Print graph]
// i18n[SQLResultExecuterPanel.closeAllButThis=Close all but this]
// i18n[BaseListInternalFrame.error.execdoubleclick=Error occured executing doubleclick event]
// i18n[xmlReformatter.xmlWarning5=XML Warning]
// i18n[popupeditableIoPanel.importError2=Import Error]
// i18n[sqlval.dbmsVersion=DBMS Version:]
// i18n[HelpViewerWindow.error.loadfaqfile=Error retrieving FAQ from URL = {0}]
// i18n[ColorPropertiesPanel.statusBarBackgroundColorChooserDialogTitle=Select Background Color for // Status Bar]
// i18n[AboutBoxDialog.aboutpanelcreatetime=AboutPanel created in ]
//i18n[CSVSettingsPanel.useTab=Tab seperated]
// i18n[graph.delGraph=Do you really wish to delete this graph?]
//i18n[CSVSettingsPanel.inputFileEncoding=Input file encoding]
// i18n[RefactoringPreferencesPanel.quoteToolTip=Identifiers appear in quotes]
// data was not fully read in before, so try to do that now
// i18n[Session.driverComplianceTitle=JRE/JDBC Version Mismatch]
// i18n[ColorPropertiesPanel.toolbarBackgroundColorChooserDialogTitle=Select Background Color for // Toolbar]
// i18n[TableExportCsvController.noCommand=You must provide a command string or uncheck "Execute command".]
// i18n[sqlscript.successCreate=Successfully created table {0}]
// i18n[graph.dina4=Din A 4]
// i18n[popupeditableIoPanel.importWarning=Import Warning]
// i18n[graph.removeGraph=Remove graph]
//i18n[ColumnDetailsDialog.addColumnTitle=Add Column]
//i18n[ColumnDetailsDialog.showButtonLabel=Show SQL]
// i18n[TriggerDetailsTab.hint=Display trigger details]
// i18n[userscript.executing=Executing Script...]
// i18n[DBUtil.error.firebirdcommit=Firebird requires commit // table create before inserting records. Please adjust your // preferences.]
// i18n[userscript.selClasspathToDel=Please select the classpath entry to delete]
// Binary data viewing option: view ascii as char rather than as numeric value
// ALTER SEQUENCE sequenceName // INCREMENT BY increment MINVALUE minimum MAXVALUE maxvalue // RESTART WITH restart CACHE cache CYCLE;
// i18n[codeCompletion.PrefsTabTitle=Code Completion]
// i18n[PreferencesPanel.lineCommentLabel=Start of line comment]
// i18n[graph.selGraphToAdd=Select the graph to add the selected tables to]
// i18n[DataImportGlobalPreferencesTab.hint=Preferences for data import]
// i18n[graph.width=Width]
// i18n[SchemaPropertiesController.cacheFilePath=Cache file path for Alias "{0}": {1}]
// i18n[MemoryPanel.runGC=Run garbage collection]
// i18n[graph.dbOrder=db order]
//i18n[DualProgressBarDialog.copyingTablesLabel=Copying table]
//i18n[TableExportCsvCommand.missingClobDataMsg=Found Clob placeholder  //({0}) amongst data to be exported. Continue exporting cell data?]
// i18n[mssql.fileOptions=File Options]
// i18n[graph.invalidHeight=Invalid height]
// i18n[AboutBoxDialog.error.creditsfileurl=Couldn't retrieve Credits File URL]
// INSERT INTO tableName (column1, column2) // query;
// 24 chars
//i18n[AbstractRefactoringDialog.tableNameLabel=Table Name: ]
// i18n[editextras.day=Day]
// i18n[UpdatePreferencesPanel.autoCheckFrequency=How often to check for // updates:]
// i18n[Application.splash.loadcellselections=Loading Cell Import/Export selections...]
// String templateStr = null;
// i18n[mssql.ok=OK]
// i18n[SchemaInfo.loadingCatalogs=Loading catalogs]
// i18n[Application.info.jdbcwriter=Attempting to set JDBC debug log to writer]
// i18n[HelpViewerWindow.error.loadpluginhelp=Error generating Help entry for plugin {0}]
//i18n[CopyDriverAction.error.selectingwindow=Error selecting window]
// label for type combo - used to enable/disable text associated with the combo // i18n[dataTypeBigDecimal.read2=Read]
// i18n[ViewSourceTab.display=Show view source]
// i18n[codecompletion.function.mustEndWith=function must end with ',']
// i18n[PostgreSqlXmlTypeDataTypeComponent.cellErrorMsg=<Error: see log file>]
// i18n[graph.newName=Please enter a new name]
// i18n[ActionCollection.createActionError=Error occured creating Action: {0}]
// i18n[dataSetViewerTablePanel.conversionError=Conversion Error]
// i18n[HtmlViewerPanel.error.displayurl=Error displaying URL]
// i18n[i18n.failedToParse=Failed to parse {0}\n{1}]
// i18n[codecompletion.function.needsTwoArgs=function needs at least two arguments]
// i18n[LogPanel.logInfoLabel=Logs: Errors {0}, Warnings {1}, Infos {2}]
// here we've hit the second line of a multi-line i18n stanza // Just skip it, we're not that sophisticated.
// And the query info.
// This file is a zip; it needs to be extracted into the install directory. All zips are packaged // in such a way that the extraction beneath install directory is all that is required.
//i18n[UpdateSummaryTable.installOptionsLabel=Install Options]
//i18n[ColumnDetailsDialog.defaultValueLabel=Default Value: ]
// i18n[SupportedRefactoringsTab.hint=Show refactorings that are supported by the plugin]
// get the ConentPane into a variable for convenience
//i18n[ColumnDetailsDialog.editButtonLabel=Edit SQL]        
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getDescriptiveName()     */"
// i18n[userscript.codeTemplate=Script code template]
// the whole blob has been previously read in
//i18n[OraclePluginPreferencesPanel.readClobsFullyCheckBoxTT=Read all  //CLOB data when the Contents tab is displayed]
// i18n[MysqlPlugin.showProcedureSource=Show procedure source]
// i18n[UpdateSummaryDialog.currentVersionPrefix=Current Version:]
// i18n[i18n.notGeneratedInWorkDir=File {0} has not been generated. Cannot continue.]
// i18n[HibernateConfigController.ReallyRemoveConfig=Are you sure you want to delete configuration "{0}".]
// i18n[HibernateSQLPanel.alwaysFormat=Always format]
// read succeeded, so reset the BlobDescriptor to match
// i18n[ValidatorGlobalPreferencesTab.hint=Preferences for SQL validation]
// i18n[OraclePluginPreferencesPanel.sessionTimezoneLabel=Initialize Session Timezone]
// i18n[AbstractRefactoringDialog.showButtonLabel=Show SQL]
//i18n[MappingRoot.driverName=JDBC driver name (Hibernate)]
// i18n[generalSessionPropertiesPanel.sqlResults=SQL Results:]
"/*		 * Internal class for handling key events during editing		 * of both JTextField and JTextArea.		 */"
//i18n[SQLFilterAction.singleObjectMessage=You must have a  //single table or view selected to activate the SQL Filter]
// i18n[mysql.droppingDBs=Dropping database(s)]
//i18n[LockDetailsTab.hint=Display Locks]
// i18n[exportconfig.errorResolvingFile=Error resolving file name]
// i18n[IndexDetailsTab.hint=Display index details]
// Other tests
// i18n[SQLHistoryItemWrapper.lastUsed=Last used]
// Copy i18n files to i18n downloads directory
// i18n[exportconfig.errorCreatingFile=Error occured reading from preferences file: {0}]
// i18n[SybaseASEPlugin.triggerHint=Show trigger source]
// One synchron call for first completion
// i18n[HibernateConfigPanel.toObtainSessionFactPersUnit=persitence-unit name:]
// must not qualify column name 
// i18n[DialectUtils.error.getprimarykey=Unable to get primary key info for table {0}]
// i18n[TimeDateFunctionsTab.title=Time/Date Functions]
//i18n[SQLScriptPreferencesPanel.deleteRefActionCheckboxLabel=Add delete  //referential action to the FK definition]
// i18n[TableExportCsvController.fileChooserTitel=Choose export file]
// i18n[MemoryPanel.sessionInfo.toString3=Session: ID={0}, Alias={1}: created at {2}, closed at {3}, finalized at {4}]
// end of inner class
// i18n[SupportedRefactoringsTab.title=Supported Refactorings]
// i18n[oracle.displayDetails=Display index details]
"/*		 * Now the functions for the Popup-related operations.		 */"
// desc_t1
// i18n[OracleAliasPrefsPanel.ApplyNow=Apply now]
//i18n[RefactoringPreferencesPanel.borderTitle=Refactoring Preferences]
// i18n[TableExportCsvCommand.failedToExecuteCommand=Failed to execute\n{0}\nError message\n{1}\nSee last log entry for details.]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getVersion()     */"
// rename <columnName>_2 to <columnName>
//i18n[ImportDataIntoTableExecutor.importingDataInto=Importing data into {0}]
// i18n[TableExportCsvDlg.columnSeparator=Column Separator:]
// i18n[graph.saveGraphImagesToFile=Copy graph to clipboard]
// i18n[mysql.fieldProps=Field Properties:]
// i18n[ColorPropertiesPanel.objectTreeBackgroundColorChooserDialogTitle=Select Background Color for // Object Tree]
// i18n[SQLResultExecuterPanel.canceleRequested=Query execution cancel requested by user.]
// Copy core files minus any i18n jars to core downloads directory
// i18n[graph.showQualifiedTableNames=Show qualified table names]
//i18n[CSVSettingsPanel.useChar=Seperated by character:]
// i18n[syntax.prefUsePlain=Use plain editor]
// i18n[Application.error.loadcolsinfo=Unable to load Edit 'Where' Columns selections.]
// create new object to hold the different value, but use the same internal BLOB pointer // as the original
// i18n[userscript.scriptClass=Script class]
// tell user that there was a problem // i18n[baseDataSetViewerDestination.error=Error]
// i18n[graph.refreshTable=Refresh table]
// i18n[oracle.displaySnstanceDetails=Display instance details]
// i18n[ActionCollection.actionNotFound=Action {0} not found in ActionCollection.]
// i18n[sqlval.user=User:]
// i18n[mmsql.textFiles=Text Files]
// if the original object is not null, then it contains a Blob object // that we need to re-use, since that is the DBs reference to the blob data area. // Otherwise, we set the original Blob to null, and the write method needs to // know to set the field to null.
//i18n[SpecialColumnMapping.FIXED_VALUE=Fixed value]
// i18n[i18n.executingCommand=Executing command: {0}]
// i18n[userscript.confirmRemove=Do you want to remove script {0} from the list?]
// i18n[Application.error.savedatatypeprops=Unable to write DataType properties to persistant // storage.]
// i18n[editextras.errorProcessingFormat=Error processing Format SQL command: {0}]
//i18n[ModifyDriverAction.error.selectingwindow=Error selecting window]
// i18n[HelpViewerWindow.error.displaydocument=Error displaying document]
// we need the try/catch just to keep the compiler happy
// i18n[mysql.copyTable=Copy Table...]
// default is no reference
// i18n[popupeditableIoPanel.fileError=File Name Error]
"/* This is another way to do this. Modifying the column type to serial is much easier. Thanks to 		 * Doug Lawry for setting me straight!!		 */"
// DB2 requires that columns be not-null before applying a unique constraint
// i18n[CancelStatementThread.cancelSucceededLate=Canceling statement succeeded now. But took longer than one second.]
//i18n[SQLResultExecuterPanel.nonStickyPanel=Cannot make a cancel panel sticky]
//i18n[DumpApplicationCommand.header=SQuirreL SQL Client Application Dump {0}]
// i18n[HibernateConfigController.NoConfigToRemove=No configuration selected to remove.]
// i18n[syntax.errAbrev=error / abreviation]
// i18n[i18n.noEditorCommand=Can not open files withou an editor command.]
// i18n[SQLHistoryDlg.filterCboRegEx=regular exp]
// i18n[popupeditableIoPanel.exportError5=Export Error]
// i18n[dateTypeTimestamp.defaultFormat=Use default format ]
// Null tests
// Strip quotes from the column name
// i18n[DualProgressBarDialog.copyingRecordsLabel=Copying records]
// i18n[DBUtil.error.maptype=Couldn't map type for table='{0}' // column='{1}']
// "ALTER TABLE $tableName$ ALTER COLUMN $columnName$ IDENTITY";
//System.err.println("MockApplication.getMainFrame: stub not yet implemented");
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getInternalName()     */"
//sessionPanel = new SessionPanel(this);
//_treeAPI.addDetailTab(DatabaseObjectType.PROCEDURE,  //        new ProcedureSourceTab(i18n.SHOW_PROCEDURE_SOURCE));
// i18n[MemoryPanel.sessionInfo.toString2=Session: ID={0}, Alias={1}: created at {2}]
//MockConnection2 mockCon = getMockConnection();
// Add package node to contain standalone procedures.
//i18n[CreateDriverAction.error.selectingwindow=Error selecting window]
// Global errors
// i18n[FactoryProviderDialog.title=Name of SessionFactorImpl provider]
// i18n[i18n.executingCommandFailed=Execution failed with error: {0}]
// i18n[oracle.sorts=Sorts]
// i18n[graph.noSel=No selection]
// i18n[HelpViewerWindow.pageloaded=Page loaded.]
// i18n[SchemaPropertiesController.cacheFilePathNotExists=Cache file for Alias "{0}" does not exist. If it existed the path would be: {1}]
// i18n[TableExportCsvDlg.withHeaders=Include column headers]
// i18n[mssql.currentActivity=Current Activity]
// i18n[TableExportCsvController.commandChooserTitel=Choose command executable]
// i18n[popupeditableIoPanel.exportError=Export Error]
// "ALTER TABLE $tableName$ " + // "ADD $constraint$ $constraintName$ UNIQUE $index$ $indexName$ $indexType$ ( $indexColumnName$ )";
// i18n[ActionCollection.createActionInfo=Attempting to load action class - {0}]
// i18n[xmlRefomatter.xmlWarning=XML Warning]
// i18n[SchemaInfo.loadingKeywords=Loading keywords]
// mockSession
/* Build the table types returned by PostgreSQL */
// Clone the test bean and change every bean property
// i18n[syntax.removeRows=remove selected rows]
// get list of files using that base name
// i18n[codecompletion.prefs.table.spWithoutParams=SP without params]
// squirrel installed lib dir
// i18n[dataSetViewerEditableTablePanel.deleteRosQuestion=Do you wish to delete {0} rows from this table?]
// Trying to set time to an exact number
// add button to execute external command // i18n[popupeditableIoPanel.execute34=Execute]
// we need to convert to a different format // default to hex
// i18n[UpdateSummaryDialog.title=Update Summary]
//i18n[hibernate.HibernateTabPanel.openConfigs=Open Hibernate configurations]
/* Data */
//i18n[DataImportGlobalPreferencesTab.title=Data import]
// i18n[graphToFile.ImageFileSpec=JPG image format]
"/*		 * Property change control panel		 */"
// Some dialects support adding columns, but the logic has not been added yet to the dialect. // If that is the case the message is "Not yet implemented" - fail for all other messages.
//i18n[syntax.resWords=Reserved Words]
//i18n[EditWhereColsAction.singleObjectMessage=You must have a  //single table selected to limit the colums used in the Edit  //WHERE clause]
//i18n[syntax.selColor=Select Color]
// i18n[sqlval.logonOk=OK]
// i18n[popupeditableIoPanel.fileDoesNotExist=File {0} does not exist,\nor is not a readable, normal file.\nPlease enter a valid file name or use Browse to select a file.]
// i18n[MetaDataTab.hint=Show database metadata]
// print the i18n comment
// i18n[sqlscript.enterNameOfTable=Enter name of table:]
// i18n[HibernateConfigController.classpathEntryDesc=Jars, Zips or directories]
// i18n[syntax.prefUseNetbeans=Use Netbeans editor (recommended)]
// i18n[HQLEntryPanelManager.quoteHQLsb=Quote HQL as StingBuffer]
// i18n[userscript.showInStandardMenues=Show in standard menues]
// i18n[I18n.SourceDirIsNotADirectory=Source directory {0} is not a directory.]
"/* Can be done as follows in Postgres			INSERT INTO mytable(id,name) 			  SELECT 1, 'pizza'			  UNION			  SELECT 2, 'donuts'			  UNION			  SELECT 3, 'milk';		 */"
//i18n[MappingRoot.url=JDBC Url (Hibernate)]
// i18n[UpdateManagerDialog.title=Update Manager]
//i18n[syntax.dataTypes=Data Types]
// i18n[Session.driverCompliance=The driver being used for alias ''{0}'' is not JDBC 2.1 compliant.\nYou should consider getting a more recent version of this driver]
// All currently installed artifacts will be marked with INSTALL action. 
// i18n[cellDataPopup.valueofColumn=Value of column {0}]
// Entries
//i18n[CSVSettingsPanel.dateFormat=Date format]
// DROP INDEX indexName CASCADE;
// i18n[sqlbookmark.editBookmark=Edit bookmark]
// i18n[oracle.bufferPerExec=Buffer Gets per Exec]
// I don't know of any API for getting the event dispatch thread, // but we can assume that it's the current thread if we're in the // middle of dispatching an AWT event...
// i18n[mysql.copyToNewTable=Copy to new Table:]
// Check null argument is handled
// i18n[mssql.allViews=All views]
// i18n[DB2Plugin.showTriggerSource=Show trigger source]
//i18n[SQLScriptPreferencesTab.title=SQL Scripts]
//i18n[ColumnDetailsDialog.modifyButtonLabel=Modify Column]
// i18n[UpdatePreferencesPanel.localPathLabel=Local Path:]
// Making sure that the directory does not exist.
// i18n[OraclePluginPreferencesPanel.showErrorOffsetLabel=Show Syntax // Error Offset in SQL Editor]
// column name // sqlType
/* construct mock objects */
// File handling controls // i18n[popupeditableIoPanel.useFile=Use File: ]
/* execute test */
// i18n[graph.showConstr=Show constraint names]
// i18n[DumpSessionAction.error=Error occured dumping session: {0}]
// i18n[oracle.diskReads=Disk Reads]
"/*		 * @see Comparator#compare(Object, Object)		 */"
"/* (non-Javadoc)         * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.datatransfer.DataFlavor)         */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getDatabaseProductName()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getCascadeClause()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsSchemasInTableDefinitions()     */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsMixedCaseIdentifiers()	 */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsResultSetType(int)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getSchemaTerm()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsCatalogs()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsCatalogsInProcedureCalls()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getTypeInfo()     *      * @deprecated  Replaced by getDataTypes     */"
"/* (non-Javadoc) * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getProcedures(java.lang.String, java.lang.String, java.lang.String, net.sourceforge.squirrel_sql.fw.sql.ProgressCallBack) */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getImportedKeysInfo(net.sourceforge.squirrel_sql.fw.sql.ITableInfo)     */"
// add classpath string
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getPrimaryKeys(net.sourceforge.squirrel_sql.fw.sql.ITableInfo)     *      * @deprecated use getPrimaryKey instead     */"
// i18n[ObjectTreeTab.hint=Show database objects]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getProcedureColumns(net.sourceforge.squirrel_sql.fw.sql.IProcedureInfo)     *      * @deprecated use getProcedureColumnsDataSet instead     */"
"/*       * (non-Javadoc)       *        * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getPrimaryKey(net.sourceforge.squirrel_sql.fw.sql.ITableInfo)       */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getColumnInfo(net.sourceforge.squirrel_sql.fw.sql.ITableInfo)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.MetaDataDataSet#next(net.sourceforge.squirrel_sql.fw.util.IMessageHandler)     */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.preferences.IGlobalPreferencesPanel#uninitialize(net.sourceforge.squirrel_sql.client.IApplication)	 */"
"/* (non-Javadoc)	 * @see javax.swing.table.AbstractTableModel#getColumnName(int)	 */"
"/*	 * (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#close()	 */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#getPreview(int)	 */"
"/*	 * (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#getInt(int)	 */"
"/* (non-Javadoc)	 * @see javax.swing.table.TableModel#getRowCount()	 */"
"/*	 * (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#getRows()	 */"
"/*	 * (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#getConfigurationPanel()	 */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#statementExecuted(net.sourceforge.squirrel_sql.plugins.dbcopy.event.StatementEvent)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#recordCopied(net.sourceforge.squirrel_sql.plugins.dbcopy.event.RecordEvent)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#handleError(net.sourceforge.squirrel_sql.plugins.dbcopy.event.ErrorEvent)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#analyzingTable(net.sourceforge.squirrel_sql.plugins.dbcopy.event.TableEvent)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#tableCopyStarted(net.sourceforge.squirrel_sql.plugins.dbcopy.event.TableEvent)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getPanelComponent()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider#getDestSelectedDatabaseObject()     */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getInternalName()	 */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getVersion()	 */"
"/*    * (non-Javadoc)    *     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getVersionColumns(net.sourceforge.squirrel_sql.fw.sql.ITableInfo)    *     * @deprecated use getVersionColumnsDataSet instead    */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider#setCopySourceSession(net.sourceforge.squirrel_sql.client.session.ISession)	 */"
"/* (non-Javadoc)		 * @see javax.swing.table.DefaultTableModel#getColumnCount()		 */"
"/* (non-Javadoc)		 * @see javax.swing.table.DefaultTableModel#isCellEditable(int, int)		 */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()     */"
"/* IDataTypeComponent interface methods 		/**	 * @see net.sourceforge.squirrel_sql.fw.datasetviewer.cellcomponent.IDataTypeComponent#canDoFileIO()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.plugins.smarttools.gui.ISmarttoolFrame#setFocusToFirstEmptyInputField()	 */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.session.event.ISQLExecutionListener#statementExecuted(java.lang.String)	 */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData#getImportedKeysInfo(net.sourceforge.squirrel_sql.fw.sql.ITableInfo)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ITableInfo#setImportedKeys(net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo[])     */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#getDatabaseProductName()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#deletesAreDetected(int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#isReadOnly()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#nullsAreSortedAtStart()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#othersInsertsAreVisible(int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#ownDeletesAreVisible(int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#ownUpdatesAreVisible(int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#storesLowerCaseQuotedIdentifiers()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#storesUpperCaseQuotedIdentifiers()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsANSI92FullSQL()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsCatalogsInIndexDefinitions()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsColumnAliasing()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsCorrelatedSubqueries()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsDifferentTableCorrelationNames()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsGetGeneratedKeys()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsGroupBy()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsIntegrityEnhancementFacility()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsMultipleTransactions()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsOpenCursorsAcrossCommit()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsOrderByUnrelated()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsResultSetConcurrency(int, int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSchemasInIndexDefinitions()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSchemasInTableDefinitions()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSelectForUpdate()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsStoredProcedures()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSubqueriesInIns()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsTransactions()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#usesLocalFilePerTable()	 */"
"/* (non-Javadoc)         * @see net.sourceforge.squirrel_sql.client.session.mainpanel.BaseMainPanelTab#refreshComponent()         */"
// i18n[MemoryPanel.sessionInfo.toString1=Session: ID={0}, Alias={1}: created at {2}, closed at {3}]
// i18n[HibernateConfigPanel.toObtainSessionFactConfiguration=Call "new org.hibernate.cfg.Configuration().configure().buildSessionFactory();"]
// i18n[graph.addChildTables=Add child tables]
//i18n[explainplanexecuter.planTableUnavailableTitle= //PLAN_TABLE not found]
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider#getDestSelectedDatabaseObject()	 */"
// i18n[RefactoringPreferencesPanel.prefsToolTip=Table names appear in scripts as SCHEMA.TABLE]
// scope
// i18n[sqlscript.dlgCreatTableOfSql=Create table of SQL]
// i18n[SchemaInfo.loadingTables=Loading tables]
// i18n[DialectUtils.columnDefaultUnsupported={0} doesn''t support // altering a column''s default value]
// i18n[userscript.classNotFoundIn=Class {0} found in\n{1}]
// i18n[ThreadCheckingRepaintManager.workinwrongthread=GUI work done in wrong thread]
// i18n[PreferencesPanel.statementSeparatorLabel=Statement Separator]
// i18n[ImportFileDialog.tableColumn=Table column]
// i18n[sqlval.dbms=DBMS]
// i18n[HelpViewerWindow.error.loadpluginsettings=Error retrieving app settings folder for plugin {0}]
//i18n[syntax.findNetbeansOnly=Find is only available when the Netbeans editor is used.\nSee menu File --> New Session Properties --> Tab Syntax]
// i18n[HtmlViewerPanel.error.processhyperlink=Error processing hyperlink]
// i18n[oracle.displayTriggerColumns=Display trigger column information]
// i18n[xmlReformatter.seeOtherErrs={0}\nDo you wish to see other errors?"]
// i18n[HibernateConfigPanel.newFactoryClasspathBorder=Additional classpath entries to create a SessionFactoryImpl]
// i18n[HibernateConfigController.noCfgNameMsg=Not a valid configuration name\nChanges cannot be applied.]
// i18n[popupeditableIoPanel.executeError2=Execute Error]
//i18n[DropTableDialog.title=Drop Table(s)]
// i18n[graph.addParentTables=Add parent tables]
// i18n[sqlval.descriptivename=SQL Validator plugin]
// i18n[SchemaPropertiesPanel.specifySchemas=Specify Schema loading and caching]
// i18n[graph.graphSaved=Graph "{0}" saved to "{1}"]
//i18n[DerbyPlugin.showProcedureSource=Show procedure source]
// i18n[resultSetMentaDataSet.propName=Property Name]
// i18n[mysql.shoeVariables=(MySQL) Show Variables]
//i18n[MappingRoot.connectionErr=Error getting SQL connection data from Hibernate:]
// i18n[UpdatePreferencesPanel.atStartupLabel=At Startup]
// i18n[userscript.selScriptToExec=Please select the script to execute]
// i18n[HibernateConfigPanel.classPathAdd=Add classpath entry]
// i18n[mssql.performace=Performance Counters]
// i18n[mapdataset.key=Key]
// i18n[mssql.scriptPrimary=Script PRIMARY keys, FOREIGN keys, defaults, and check constraints]
// i18n[laf.lf=L & F]
// i18n[mssql.delay={0}s delay]
//i18n[PleaseWaitDialog.pleaseWait=Please wait while the query is executed]
// i18n[NumericFunctionsTab.hint=Show all the numeric functions available in DBMS]
// i18n[userscript.applicableTo=Scripts applicable to objects of type {0}]
//i18n[syntax.whiteSpace=White Space]
// i18n[popupeditableIoPanel.exportError3=Export Error]
// i18n[syntax.textLimitLineVisible=Show text limit line]
// Trying to set time to a negative number
// i18n[OracleAliasPrefsPanel.AccessibleButSys=Allow accessible Schemas excluding SYS]
// i18n[i18n.noNativeToAsciiOutDirNoDir=native2Ascii output dir is not a directory. native2Ascii will not be executed.]
// i18n[HibernateAttribuiteDataSet.dbTableName=Database table name]
// i18n[sqlscript.configMultiTableScript=Configuration of multi table scripts]
// i18n[CatalogsTab.hint=Show all the catalogs]
//i18n[FormatterSourceTab.noSourceAvailable=No object source code is  //available]
// i18n[sessionPropertiesPanel.loadSchemasCatalogs=Load Schemas/Catalogs into object tree]
// i18n[DriverPropertiesPanel.useDriverProperties=Use driver properties]
// i18n[UpdateControllerImpl.releaseFileDownloadFailedMsg=Release file couldn't be downloaded. Please // check your settings.]
// i18n[sqlval.disconnected=Disconnected from the SQL Validation web service]
// i18n[oracle.displaySnapshotDetails=Display materialized view details]
// i18n[editWhereColsSheet.unableToEdit=Unable to get list of columns, {0}]
// i18n[OracleAliasPrefsPanel.AccessibleAndSys=Allow accessible Schemas and SYS]
//i18n[ColumnListDialog.showSQLButtonLabel=Show SQL]
// i18n[SQLResultExecuterPanel.nosqlselected=No SQL selected for execution.]
// i18n[OraclePlugin.hint=Preferences for Oracle]
// i18n[AboutBoxDialog.info.endmemtimer=Ending memory timer (AboutBox)]
// i18n[DBUtil.error.nocolumns=Table '{0}' in schema '{1}' has // no columns to copy]
"/* (non-Javadoc)    * @see net.sourceforge.squirrel_sql.client.session.ISQLPanelAPI#filePrint()    */"
// i18n[i18n.noNativeToAsciiCommand=Cannot convert files without a native2Ascii command.]
// i18n[exportconfig.errorSavingAlials=Error saving aliases]
// add button for Brows // i18n[popupeditableIoPanel.browse=Browse]
// i18n[OraclePrefsPanelController.hint=Oracle Plugin preferences]
// i18n[sqlscript.scriptOnly=Generate script only]
// i18n[OracleAliasPrefsPanel.header=Configure Oracle Schema loading properties]
// i18n[graph.addTableRefBy=add table referenced by {0}]
//i18n[DumpApplicationCommand.error.dumpingstatus=Error dumping Application Status bean]
// i18n[sqlbookmark.enterSql=Please enter a bookmark sql]
// i18n[HibernateConfigPanel.FactoryProvider=SessionFactoryImpl provider]
// i18n[codeCompletion.prefsExplain=When completing functions SQuirreL doesn't know // if a function is a stored procedure or a user defined function. // To make code completion of these two kinds of functions convenient SQuirreL offers to // configure which way completion should work.]
// i18n[editWhereColsSheet.limitSizeOfWhereClause=Limit the size of the WHERE clause used behind the scenes when editing cell contents.]
// i18n[UpdatePreferencesPanel.autoBorderLabel=Automatic Updates]
// i18n[UpdateSummaryDialog.installedVersionPrefix=Installed Version:]
// i18n[popupeditableIoPanel.cannotAccessFile=Cannot access file name {0}\nAborting export.]
// some kind of problem - tell user // i18n[DataSetUpdateableTableModelImpl.error.deleteFailed=One of the delete operations failed with exception:\n{0}\nDatabase is in an unknown state and may be corrupted.]
// i18n[Application.error.savecolsinfo=Unable to write Edit Where Cols options to persistant // storage.]
// i18n[dataSetViewerTablePanel.makeEditable=Make Editable]
// i18n[exportconfig.fileExistsButReadOnly={0}\nexists and you cannot write to it.\nPlease use a different name.]
//i18n[ColumnsTab.hint=Show columns for the selected table] 
//i18n[PreferencesPanel.transferOptionsBorderLabel=Transfer Options]
// i18n[DataTypesTab.hint=Show all the data types available in DBMS]
// i18n[graph.renameGraph=Rename graph]
// i18n[PostgresPlugin.showViewSource=Show view source]
// i18n[SQLFilterSheet.contentsMsg=You must have the Contents Tab selected to activate the SQL Filter]
// i18n[HelpViewerWindow.error.loadpluginlicence=Error generating Licence entry for plugin {0}]
// i18n[ResultTab.limitMessage=Limited to <font color='red'> {0} </font> rows]
// i18n[GeneralPreferencesPanel.paths=SQuirreL paths]
// i18n[laf.broderLaf=Look and Feel]
// i18n[mssql.monitorAsOf=Monitor (as of {0,date,full})]
// i18n[syntax.configAutoCorr=Configure auto correct /abreviation]
//i18n[ColumnPriviligesTab.title=Column Privileges]
// i18n[syntax.prefSyntaxHint=Syntax Highlighting]
// i18n[syntax.switchingNotSupported=Switching the editor of a runninig session is not supported.\nYou may switch the entry area in the New Session Properties dialog]
// i18n[laf.otmFiles=OTM files]
// i18n[PreLaunchHelperImpl.backupFailedMessage=Backup of existing files failed. Installation cannot // proceed]
// i18n[graph.orderPksConstr=order PKs/constraints on top]
// i18n[resultFrame.stayOnTop=Stay on top]
// i18n[DatabaseMetaData.searchableTypeSearchable=supports all WHERE]
// i18n[codecompletion.prefs.table.udfWithParams=UDF with params]
// i18n[mysql.defaultValue=Default Value]
// i18n[SystemFunctionsTab.title=System Functions]
// i18n[mssql.scriptUsers=Script database users and database roles]
// i18n[SchemaTableUpdateWhatItem.allObjects=All Objects]
// i18n[DeleteTablesCommand.progressDialogTitle=Analyzing tables to delete]
// i18n[TableExportCsvDlg.exportCompleteTable=Export complete table]
// i18n[ViewLogsSheet.error.clearlogcontents=Error clearing the log contents]
// i18n[popupeditableIoPanel.notWriteable=File is not writeable.\nChange file permissions or select a differnt file for export.]
// i18n[SchemaPropertiesController.cacheDeleteFailed=Could not delete {0}]
// mocks
// i18n[userscript.enterScriptClass=Please enter a script class]
// i18n[SQLScriptPreferencesPanel.prefsToolTip=Table names appear in scripts as SCHEMA.TABLE]
//i18n[TableExportCsvDlg.lineSeparatorLabel=Line Separator:]
// i18n[graph.viewTableInObjectTree=View table in Object tree]
//i18n[SQLResultExecuterPanel.queryStatistics=Query {0} of {1}  //elapsed time (seconds) - Total: {2}, SQL query: {3},  //Building output: {4}]
// i18n[graph.selGraph=Select graph]
// i18n[mssql.includeHeaders=Include descriptive headers in the script files]
// i18n[DBCopyGlobalPreferencesTab.hint=Preferences for DB Copy]
// i18n[mssql.filesToGenerate=Files to Generate]
// i18n[RefactoringPreferencesPanel.quoteCheckboxLabel=Quote identifiers in scripts]
// i18n[sqlval.dbmsName=DBMS Name:]
// i18n[popupeditableIoPanel.fileOverwrite=File {0} already exists.\n\nDo you wish to overwrite this file?]
// Add stored proc parent node.
// i18n[popupeditableIoPanel.fileOpenError=There was an error opening file {0}.\nThe error was:\n{1}]
//i18n[ProcedureSourceTab.cLanguageProcMsg=This is a C-language routine. The  //source code is unavailable.]
// i18n[ErrorStream.oneerror=1 error detected]
// i18n[graph.removeFoldingPoint=remove folding point]
// i18n[editWhereColsSheet.editWhereColumns=Edit 'WHERE' columns]
// i18n[ConnectionStatusTab.hint=Connection Status]
// i18n[dataTypeString.limitReadOnly=Limit read only on columns with these names:]
// i18n[popupeditableIoPanel.replaceFile=(In command, the string {0} is replaced by the file name when Executed.)]
// i18n[dataTypeDate.useDefaultFormat=Use default format ({0})]
// i18n[mysql.selectSingleTable=Must select a single table]
// i18n[sqlbookmark.qureyParams=Query Parameters]
// i18n[AliasesListInternalFrame.error.ctrlF4key=Probably closed by the ctrl F4 key. See BasicDesktopPaneUi.CloseAction]
// i18n[oracle.sortsPerExec=Sorts per Row]
// i18n[firebird.domainDetails=Display domain details]
// i18n[SQLResultExecuterPanel.exec=Executing SQL]
// i18n[TableExportCsvController.invalidSeparator=You must provide a single separator character or check "Use tab" to use the tab character.]
// i18n[RowNumberTableColumn.rowNumber=Row Number]
// i18n[TableExportCsvDlg.sepeartorTab=Use tab character]
// i18n[DefaultDatabaseExpander.error.retrieveschemaprivs=Unable to retrieve schema privileges]
// i18n[popupeditableIoPanel.showAscii=Show ASCII as chars]
// label for the date format combo, used to enable/disable text // i18n[dataTypeTime.useDefaultFormat2= or locale-dependent format:]
// i18n[ResultTab.rowCountLabel=Row Count:]
// i18n[KeywordsTab.hint=Show all the non-standard Keywords available in DBMS]
// i18n[dataTypeOther.readContentsWhenLoaded=Read contents when table is first loaded and display as string]
// i18n[UpdateSummaryDialog.applyLabel=Apply Changes]
// add button for applying file & cmd info without doing anything else // i18n[popupeditableIoPanel.applyFile=Apply File & Cmd]
// i18n[dataTypeTime.useDefaultFormat=Use default format ({0})]
// i18n[UpdateControllerImpl.changesRecordedTitle=Changes Recorded]
// i18n[HibernateConfigPanel.toObtainSessionFactFactoryProvider=Invoke the user defined provider method below:]
//i18n[ExcelSettingsPanel.sheetName=Sheet name]
// i18n[mssql.extProps=Include extended properties]
// i18n[Session.driverCompliance3.0=The driver being used for alias ''{0}'' is not JDBC 3.0 compliant.\nYou should consider getting a more recent version of this driver]
// i18n[popupeditableIoPanel.noExportFile=No file name given for export.\nPlease enter a file name  or use Browse before clicking Export.]
// i18n[DriversList.tooltiptext=List of database drivers that can be used to configure an alias]
// i18n[SchemaTableCboItem.schemaID.dontLoad=Don't load]
// i18n[LogPanel.viewLastLog=Press to view last log entry]
// i18n[userscript.classNotFound=Class {0} not found]
// i18n[mssql.oneFile=Create one file]
// i18n[SQLPanel.copylastbutton.hint=Copy current SQL history to entry area]
// i18n[sessionPropertiesPanel.schemaPrefix=Limit Schema Objects using these comma-delimited prefixes:]
// i18n[TableExportCsvCommand.failedToWriteFile=Failed to write file\n{0}\nError message\n{1}\nSee last log entry for details.]
// i18n[graph.unit=Unit]
// i18n[editWhereColsSheet.shouldIncludePKs=The 'use' window should include at least the primary keys for the table.]
// i18n[sqlval.connected=Connected to the SQL Validation web service]
//i18n[SQLScriptPreferencesPanel.borderTitle=SQL Script Preferences]
// i18n[codeCompletion.UDFWithoutParams=user defined function without parameter info: myFunct()]
// i18n[editextras.escapeDate=Escape date]
// i18n[AbstractRefactoringDialog.editButtonLabel=Edit SQL]
// i18n[TableExportCsvDlg.formatCSV=Export CSV file]
// set up Cancel button // i18n[cellDataPopup.cancel=Cancel]
//i18n[SQLScriptPreferencesPanel.updateRefActionCheckboxLabel=Add update  //referential action to the FK definition]
// i18n[SQLPanel.openSqlHistory.hint=Open SQL History]
// i18n[sqlbookmark.enterName=Please enter a bookmark name with no blanks]
// i18n[UpdateControllerImpl.updateCheckFailedTitle=Update Check Failed]
// i18n[graph.invalidNumberFormat=Invalid number format. Can not calculate new unit.]
// i18n[oracle.sessionStatistics=Session Statistics]
// i18n[SystemFunctionsTab.hint=Show all the system functions available in DBMS]
// i18n[xmlRefomatter.noXml=The data does not contain any XML tags.  No reformatting done.]
// i18n[SQLResultExecuterPanel.rowsSelected={0} Row(s) Selected]
// Replace "-8" with Types.ROWID when Java6 is the minimum supported version
// i18n[HelpViewerWindow.error.congen=Error generating Contents file]
// i18n[PreLaunchHelperImpl.installUpdatesMessage=Updates are ready to be installed. Install them now?]
// i18n[Application.info.setjdbcdebuglogsuccess=JDBC debug log set to output stream // successfully]
// i18n[sqlbookmark.nodeUserMarks=User bookmarks]
// i18n[graph.scriptTable=Script table]
// i18n[oracle.firstLoadTime=First Load Time]
// i18n[editextras.convertStringBufErr=Error executing convert to StringBuffer command: {0}]
// i18n[ShowDriverWebsiteCommand.comfirm=No WebSite URL for the  // specified driver.  Would you like to add one?]
// i18n[graph.graphRemoved=Removed graph file "{0}"]
// i18n[Application.error.showhelpwindow=Error showing help window]
// i18n[userscript.scriptCompleted=Script completed]
// i18n[mysql.grants=MySQL Grants]
// i18n[mssql.activity=Displays the current activity on the SQL Server.]
// i18n[graph.hideScrollBars=Hide scrollbars]
// i18n[graph.rightClickTable=Right click table in object tree to add to graph]
"//		String NULL = ""<null>""; // i18n[resultSetMentaDataSet.val=Value]"
// defaultValue // octetLength // ordinalPosition // isNullable
// i18n[LogPanel.openLogs=Press to open logs]
// i18n[oracle.rowsPerExec=Rows per Exec]
// i18n[sqlbookmark.nodeSquirrelMarks=SQuirreL bookmarks]
// i18n[mssql.scriptPermission=Script object-level permissions]
// i18n[TimeDateFunctionsTab.hint=Show all the Time/Date functions available in DBMS]
// i18n[DriversListInternalFrame.error.ctrlF4key=Probably closed by the ctrl F4 key. See BasicDesktopPaneUi.CloseAction]
// i18n[mssql.msdos=MS-DOS text (OEM)]
//i18n[DerbyPlugin.prefsHint=Set preferences for Derby Plugin]
// i18n[graphToFile.fileChooserTitle=Save image file(s)]
// i18n[LogPanel.titleError=Last log entry (Entry type: ERROR)]
// i18n[exportconfig.ioErrorWritingTo=IO Error writing to\n{0}]
//i18n[SQLScriptPreferencesPanel.deleteActionLabel=Action to take on delete:]
//i18n[DumpApplicationCommand.error.dumpingsystemprops=Error dumping metadata]
// i18n[DBUtil.info.bindclobmem=bindClobVarInMemory: binding '{0}' bytes]
// i18n[OraclePluginPreferencesPanel.hideRecycleBinCheckBoxToolTip=Recycle // Bin tables are a Flashback Database Option in Oracle 10g]
//i18n[ColumnListDialog.primaryKeyTitle=Choose column(s) for primary key] 
// i18n[OraclePluginPreferencesPanel.hideRecycleBinCheckBoxLabel=Remove // Recycle Bin Tables from the Object Tree]
// i18n[graph.addTableRefByNoHit=add table referenced by (no hit on FK)]
// i18n[oracle.parseSchema=Parse Schema]
// i18n[Application.error.setlaf=Error setting LAF]
//i18n[sqlparam.quoteValues=Quote Values]
// i18n[UpdatePreferencesPanel.statusLableSuccessMsg=Connected Successfully]
// i18n[sqlbookmark.enterDescription=Please enter a bookmark description]
// i18n[TableExportCsvDlg.useGlobalPrefsFormatingExcel=Use formating as configured in Global Prefs (recommended for MS Excel)]
// i18n[UpdatePreferencesPanel.enableAutoUpdate=Enable Automatic Updates]
//i18n[DerbyPluginPreferencesPanel.readClobsFullyCheckBoxLabel=Enable  //extended Derby CLOB support]
// i18n[mysql.tableNamelbl=Table Name:]
/* remove table with name table10 */
// i18n[SchemaPropertiesPanel.loadAllAndCacheNone=Load all Schemas, cache none]
// i18n[favs.savedQueries=Saved Queries]
// i18n[mssql.remove=<< Remove]
// i18n[firebird.showView=Show view source]
// i18n[OracleXmlTypeDataTypeComponent.cellErrorMsg=<Error: see log file>]
//i18n[syntax.selColor2=Select Color]
// i18n[CodeCompletionPreferencesPanel.numberOfTables=number of tables]
// i18n[popupeditableIoPanel.noFile=No File Selected]
//a.put("Built-By", "manningr"); // argMap.get(BUILT_BY_KEY)
// i18n[codeCompletion.UDFWithParams=user defined function with parameter info: myFunct(<IN INTEGER tid>)]
//i18n[ColumnListDialog.primaryKeyNameLabel=Primary Key Name: ]
// i18n[FactoryProviderController.fileCreated=File {0} has been successfully created.]
// i18n[graph.dina3=Din A 3]
// i18n[TableTypesTab.title=Table Types]
// Create a ClassLoader for all the LAF jars. Install all Look and Feels // into the UIManager.
// i18n[xmlRefomatter.unexpectedProblem=Unexpected problem during formatting.]
// Get Look and Feel class object.
// i18n[DBUtil.error.tablenotfound=Couldn't locate table '{0}' in // schema '(1)']
// i18n[DownloadStatusEventHandler.changesRecordedMsg=Requested changes will be made when // SQuirreL is restarted]
// i18n[UpdatePreferencesPanel.siteTypeLabel=Site Type:]
// i18n[laf.menus=Menus]
// i18n[mssql.unicode=International text (Unicode)]
// i18n[graph.invalidName=Invalid name]
// i18n[syntax.addRow=Add row]
"/*		 * From MySQL 5.0 manual:		 */"
// i18n[mysql.hintTabStatus=(MySQL) Table Status]
//i18n[InformixExceptionFormatter.notAvailableMsg=Not Available]
// i18n[graph.height=Height]
//i18n[explainplanexecuter.createPlanTableTitle=Create Plan Table]
//i18n[explainplanexecuter.planTableUnavailable=Explain plans  //will be unavailable for this session]
// i18n[userscript.dlgTabecp=Extra class path]
// i18n[editWhereColsPanel.noPK=The table ''{0}'' doesn't have a primary key.]
// i18n[mysql.processes=MySQL Processes]
// get WHERE clause for the selected row // the -1 says to just use the contents of the values without // any substitutions
// i18n[xmlRefomatter.malformedXml=Possible mal-formed XML:\n   Starting tag was: {0}\nEnding Tag was: {1}\nContinuing with reformatting XML."]
// i18n[oracle.displaysSequenceDetails=Display sequence details]
// i18n[syntax.corExt=correction / extension]
// i18n[mssql.refreshNow=Refresh Now]
// i18n[MemoryPanel.statusDialogTitle=Session garbage collection status]
// read the DB MetaData info and fill in the value, if any // Note that the ResultSet info and the colDefs should be // in the same order, but we cannot guarantee that.
// i18n[mssql.allSps=All stored procedures]
// i18n[SQLHistoryDlg.title=SQL History for {0}]
// Now that we have the file, do the import. // // Note: the sequence of operations is divided into two sections // at this point.  The preceeding code ensures that we have // a readable file, and the code in the following method call // does the import.  The reason for splitting at this point is // that the Execute operation needs to do an import, and it will // already have the file to do the import from (which is the same // as the file it exported into).
// command to use when processing data with an external program
// Set ON UPDATE action to NO ACTION as Oracle doesn't currently support this.  NO ACTION causes the  // update clause to be omitted.
"//		final JScrollPane sp = new JScrollPane(); //		sp.setBorder(BorderFactory.createEmptyBorder()); //		sp.setViewportView(_tree); //		sp.setPreferredSize(new Dimension(200, 200));"
// Option to select default catalog only applies to sessions // that support catalogs.
// If the user wants to select for Right mouse clicks then change the selection before popup  // appears
// i18n[sqlbookmark.deleteConfirm=Do you really wish to delete the selected bookmark?]
// If this session doesn't share SQL history with other sessions // then disable the controls that relate to SQL History.
// i18n[ContentsTab.hint=View the contents of the selected table]
// Some DBMS's (EG Think SQL) throw an exception on a call to // getBestRowIdentifier.
// Add together the standard expanders for this node type and any // individual expanders that there are for the node and process them.
// User cannot be allowed to drop all columns from a table
// any errors here result in an un-editable table, which // should be no problem
// If a driver says it supports schemas but doesn't // provide schema nodes, try to get other nodes.
// i18n[mysql.openTables=MySQL Open tables]
//No need to be focusable
// HADB reports "10" for column size of BLOB/CLOB // 2GB (2^32)
// for example: case 0: s = "invalid character"; break; // perhaps insert application specific error messages here
// pseudocolumn query failed, so reset it.  Otherwise, we'll  // mistake the last column for a pseudocolumn and make it  // uneditable 
// Dont need to close the ResultSet as DatabaseTypesDataSet // will do so when its finished with it.
// data, random accessible // current token // current input character (original) // current input character (for token) // last input character // position of current character // line number of current character // start position of current line
/////////////////////////////////////////////////////////// // We are through with parsing. Now we store the outcome // in _lastRun... and tell the listeners.
// Special case: the input is exactly the output
// i18n[HelpViewerWindow.title=SQuirreL SQL Client Help]
// It causes a lot of pain in serveral places to cope with nulls or // emptys here.
// use just the columns listed in the table, and set the not-used cols to the ones // that are not mentioned in the table
// for each element in the "use" set, if selected then add to "not use", // otherwise add to new "use" set
// call the function in the app code that checks for unexpected // conditions in the DB as it will be after doing the update
//int progress = loadCatalogs(1); // load tables with schema = null
// create a hashmap containing the column names. // by convention, the value and key is the same for each column name
//////////////////////////////////////////////////////////////////////// // Reload  all matching table types
// If called here it is called far to often and restoring selection in the // Object tree doesn't work. //fireSchemaInfoUpdate();
////////////////////////////////////////////// // belong together
// If characters don't match but case may be ignored, // try converting both characters to uppercase. // If the results match, then the comparison scan should // continue.
// i18n[SybaseASEPlugin.hint=Preferences for SybaseASE]
// CREATE VIEW name [(view_col [, view_col 鈥)] // AS <select> [WITH CHECK OPTION];
// The following strings are SQL tokens and should therefore *not* // be internationalized // No I18N // No I18N             // No I18N             // No I18N             // No I18N              // No I18N
// i18n[SchemaPropertiesPanel.schemaTableTitle=Schema table]
// i18n[editWhereColsPanel.notUseColumns=Not Use Columns]
// i18n[HibernateSQLPanel.result=SQL result]
// i18n[Application.info.jdbcwritersuccess=JDBC debug log set to writer successfully]
// i18n[sqlval.loOnAs=Log on as]
// use lenient input or force user to enter exact format // set to allow less stringent input
// get which locale-dependent format to use // set to use the Java default
// i18n[UpdateControllerImpl.promptToDownloadAvailableUpdatesMsg=There are updates available. // Do you want to download them now?]
// an error here may mean that the file cannot be // reached or has moved or some such.  In any case, // the file cannot be used for export.
// i18n[ErrorStream.noerrors=No errors detected]
// this method is called from the super class's constructor // therfore _titleLbl is null for that call. 
// Needs to be done later because when reInitList is called, // the text componetes model is not yet up to date. // E.g. the last character is missing.
// SELECT 'CREATE VIEW FOOVIEW AS ' || VIEWTEXT // FROM SYSPROGRESS.SYSVIEWS // where VIEWNAME = 'FOOVIEW' and OWNER = 'MANNINGR'
"//		builder.addGridded(new JButton(""Alter"")); //		builder.addRelatedGap();"
// since the base name file exists, we need to skip it // and bump up the endIndex
// i18n[laf.themePacLoc=Theme Pack Directory:]
// If the operator is 'IN' and there are no parenthesis // around the value, put them there.
// tell scrollpane to use table size with the height adjusted to leave // room for the scrollbar at the bottom if needed
// text put in file name field to indicate that we should // create a temp file for export
// i18n[ErrorStream.error.semantic=Semantic error {0}]
// should not happen since the file that was selected was // just being shown in the Chooser dialog, but just to be safe...
// at this point we have an actual file that we can output to, // so create the output stream // (so that data type objects do not have to).
// CREATE [UNIQUE] INDEX <index> ON <table> (<column> [DESC] [, ...]) [DESC];
// i18n[laf.tabTitle=Fonts]
// If the table+column already has a data object in the map, // then remove it.
// i18n[TableExportCsvDlg.executeCommand=Execute command (%file will be replaced by export file name)]
// Add the names of all LAF objects to control. By doing thru the Map // these will be sorted.
// i18n[ValidatorGlobalPreferencesTab.title=SQL Validator]
//[i18n[OrderByClausePanel.orderByClauseLabel=Order By Clause]
// Retrieve URLs of all the Look and Feel jars and store in lafUrls.
"/*      * DataBase-related functions      */"
// If this was done when the header was clicked // it prevents MS Excel like adopition of column // sizes by double click. See class ButtonTableHeader.
// i18n[laf.tabFonts=Fonts]
// if the original object is not null, then it contains a Clob object // that we need to re-use, since that is the DBs reference to the clob data area. // Otherwise, we set the original Clob to null, and the write method needs to // know to set the field to null.
// This method is called from a thread. // In case listeners update Swing controls we invoke later here.
// CREATE VIEW <viewname>[(<viewcolumn>,..) AS SELECT ... FROM ... [WHERE Expression] // [ORDER BY orderExpression [, ...]] // [LIMIT <limit> [OFFSET <offset>]];
// i18n[userscript.execOn=Execute script on {0}]
// i18n[popupeditableIoPanel.overwriteWarning=File Overwrite Warning]
// i18n[xmlReformatter.malformedXmlAt=Malformed XML.  No ending tag seen for text starting at:\n{0}]
// save the user options - we know that it is not the default // because we do not allow importing from "temp file"
// //////////////////////////////////////////////////////////////////////// // Split the first two matching toplevel brakets here
// check box for whether to use Java Default or a Locale-dependent format
// i18n[popupeditableIoPanel.fileOpenErrorHeader=File Open Error]
// If all of the data has been read, then the blob can be edited in the Popup, // otherwise it cannot
// CREATE TABLE tableName ( // column1 int, // column2 varchar(20) NOT NULL DEFAULT 'Hello World' // CONSTRAINT tableName_pkey PRIMARY KEY(column1,column2) // );
// place to save reference to DataType object needed // for calling the appropriate renderer on the object value
// where clause usage group
// i18n[dateTypeTimestamp.generateWhereClause=For internally generated WHERE clauses:]
// If all of the data has been read, then the clob can be edited in the Popup, // otherwise it cannot
/* set up the controls */
// i18n[laf.other=Other]
// IMPORTANT: put the buttons into the array in same order as their // associated values defined for whereClauseUsage.
//[i18n[OrderByClausePanel.orderDirectionLabel=Order Direction]
//i18n[DumpApplicationCommand.title.systemprops=System Properties]
// lenient checkbox
// i18n[ErrorStream.notexpected=not expected]
// Objects needed to handle radio buttons
// i18n[UpdatePreferencesPanel.testLabel=Test Connection]
// i18n[laf.statusBars=Status Bars]
// add label for the radio button group
// i18n[ErrorStream.error.syntax=Syntax error {0}]
// we have read data, so that is not the same state //  odd-ball case: assume if neither has read data that they are equal
// i18n[AboutBoxDialog.info.startmemtime=Starting memory timer (AboutBox)]
//i18n[ColumnPriviligesTab.hint=Show access rights for columns in the selected table] 
"// we have not already created a DataType object for this column // so do that now and save it		   "
// i18n[mssql.oneFilePerObject=Create one file per object]
"// JASON: //	SQLFilterClauses getSQLFilterClauses();"
// if this column is being limited, then truncate the data if needed // (start with a quick check for the data being shorter than the limit, // in which case we don't need to worry about it).
// Loop while we either have a ResultSet to process or rows have // been updated/inserted/deleted.
// i18n[graphToClipboard.title=Copy graph image pages to clipboard]
// Menus
// CREATE SEQUENCE <sequencename> [AS {INTEGER | BIGINT}] // [START WITH <startvalue>] [INCREMENT BY <incrementvalue>];
// i18n[popupeditableIoPanel.exportError100=Export Error]
// i18n [MemoryPanel.gcStatusToolTip={0} Sessions waiting for garbage collection]
// i18n[HibernateTabPanel.mappedObjects=Mapped objects]
// i18n[sqlscript.configYourMultiTableScriptIxAtEnd=Constraints and indexes at end of script]
// deletes the last ", " // deletes the last ", "
// i18n[popupeditableIoPanel.numberBase=Number Base:]
// i18n[mysql.structureAndData=Structure and Data]
// i18n[HelpViewerWindow.error.loadchangelog=Error generating Change Log entry for plugin {0}]
// i18n[generalSessionPropertiesPanel.mainTabs=Main Tabs:]
// FOREIGN KEY (columnName [,...]) // REFERENCES [refTableName] [(refColumnName[,...])] // [ON DELETE {CASCADE | RESTRICT | NO ACTION | SET DEFAULT | SET NULL}] // [ON UPDATE {CASCADE | SET DEFAULT | SET NULL}]
// CREATE VIEW viewName // AS definition;
// "CREATE SEQUENCE $sequenceName$ START WITH $startValue$ " + // "INCREMENT BY $incrementValue$ $cache$ $cacheValue$";
// see if its a one-table statement
// CREATE {[UNIQUE [HASH]] INDEX [[IF NOT EXISTS] newIndexName] // | PRIMARY KEY [HASH]} ON (columnName [,...])
// Ingres requires that columns that are to become not null must have a // default value.
// "SELECT CURRENT_VALUE, 'NONE', 'NONE', CACHE, INCREMENT, 0 " + // "FROM INFORMATION_SCHEMA.SEQUENCES " + // "WHERE SEQUENCE_SCHEMA = ? " + // "AND SEQUENCE_NAME = ? ";
// alter table ti.getSimpleName() // add foreign key (fkTableCol) // references pkTableName(pkTableCol);
// get parameters previously set by user, or set default values // set to the default
// i18n[HibernateTabController.hint=Support for Hibernate]
// Alter table <table> add constraint <constraint> // foreign key(<column>) references <table>(<column>) // on delete set null
// i18n[sqlval.technologyVersion=Technology Version:]
// i18n[mssql.add_Menmonic="]
// "CREATE SEQUENCE $sequenceName$ $startWith$ " + // "$increment$ $minimum$ $maximum$ $cache$ $cycle$";
// i18n[graph.scriptAllTables=Script all tables]
// i18n[sqlscript.configYourMultiTableScript=Configure your multi table script:]
// float(54) produces an exception: // // invalid column format 'float' on column 'float_column'., // SQL State: 42000, Error Code: 2014
// i18n[laf.settings=Look and Feel settings]
// i18n[syntax.styles=Syntax Styles]
// check if this completion request is outside the original definition point
// i18n[hibernate.hqlToSqlShort=Convert HQL to SQL (ctrl + enter)]
// "ALTER TABLE $tableName$ " + // "ALTER $columnName$ SET DATA TYPE $dataType$";
// i18n[popupEditableIoPanel.wrapLines=Wrap Lines on/off]
//i18n[RowIDTab.hint=Show columns that uniquely identify a row]
// Dump alias information.
// i18n[AliasPropertiesInternalFrame.title=Properties for Alias: {0}]
// i18n[userscript.enterScriptName=Please enter a script name]
// Make sure that the session menu is enabled.
// PostgreSQL follows the standard for SQL BIT. It's a string of BITs. // So bit(10) is a string of 10 bits. JDBC treats SQL BIT as if it // were only a single BIT. It specifies that BIT is equivalent to // BOOLEAN. It claims that the PreparedStatement set method that should // be used with BIT is setBoolean and getBoolean. This is not compliant // with the standard. So SQL BIT type support is broken in Java, there // is nothing we can do about that. // Best thing to do for now, is try to convert the BIT type to a // boolean like the JDBC spec says and hope for the best. Hope that the // source database isn't using the BIT column as a sequence of multiple // BITs.
// i18n[HibernateAttribuiteDataSet.attrClassName=Attribute class name]
// i18n[TableExportCsvDlg.exportCsvFile=Export to file:]
// all the data from the clob has been read. // make sure there are no newlines in it
// i18n[SQLResultExecuterPanel.cancelMsg=Press Cancel to Stop]
// popup does not fit with the orig placement
"// i18n[exportconfig.errorSavingAliases=Error saving aliases]			"
// i18n[MysqlPlugin.showTriggerSource=Show trigger source]
// i18n[mysql.withAllFields=With all Fields]
// i18n[ImportFileDialog.suggestColumnsIgnoreCase=ignore case]
// i18n[HelpViewerWindow.error.loadwelcomefile=Error retrieving Welcome file URL for {0}]
// double and float have no scale - that is DECIMAL_DIGITS is null. // Assume that is because it's variable - "floating" point.
// alter table TEST ALTER MYCHAR SET DEFAULT 'FOO' // alter table TEST ALTER MYCHAR DROP DEFAULT
// i18n[codeCompletion.prefixConfig=Configure function completion for function name prefixes:]
// "CREATE SEQUENCE $sequenceName$ " + // "$increment$ $startWith$ $minimum$ $maximum$ $cache$ $cycle$";
// "CREATE SEQUENCE $sequenceName$ " + // "$increment$ $minimum$ $maximum$ $startWith$ $cache$ $cycle$";
// GenericDialect must be last, since it will claim that it supports any product/version.  That is also // why there is no isGenericDialect - it would always return true if there was one, making it useless.
// i18n[graph.addFoldingPoint=add folding point]
// i18n[codecompletion.unknowntable=unknown table {0}]
// fine, don't add any data files. //throw new WrappedSQLException(ex);
"// Sort the rows by the property name. //		Collections.sort(_data, new DataSorter());"
// Firebird doesn't natively support altering a columns nullable // property. Will have to simulate in a future release.
// CREATE GENERATOR EMPNO_GEN; // // COMMIT; // // SET TERM !! ; // // CREATE TRIGGER CREATE_EMPNO FOR EMPLOYEES // // BEFORE INSERT POSITION 0 // // AS BEGIN // // NEW.EMPNO = GEN_ID(EMPNO_GEN, 1); // // END
"//			Dimension dim = getPreferredSize(); //			dim.width = PREFERRED_WIDTH; //			setPreferredSize(dim); //			setRows(3);"
// Don't bother the user with details about where the result fetch // failed if they cancelled the query.
// fine, don't show any indexes. //throw new WrappedSQLException(ex);
// i18n[dataSetViewerEditableTablePanel.noRowsDeleted={0}\nNo rows deleted from database.]
// there's a DBNAME specified, so make sure it matches the current catalog.
// If the "None" place-holder is in the list in the first position, remove it.  It is not possible to  // select the "None" place-holder upon startup, because it is already selected in the list if it is  // present.
// SELECT TEXT_SEGMENT FROM IIVIEWS // WHERE TABLE_NAME = <VIEWNAME> AND TABLE_OWNER = <SCHEMANAME>
// "DROP VIEW $viewName$";
// i18n[DatabaseMetaData.searchableTypePredChar=only supports 'WHERE...LIKE']
// The mode_decode routine may or may not be there. We don't care if it is not there, but log an // info if we failed to drop it for some other reason.
// i18n[oracle.showTriggerSource=Show trigger source]
// Some drivers for both MS SQL and Sybase don't return guest as // a schema name.
// "select 'CREATE VIEW ' || VIEWNAME || ' AS ' || VIEWDEFINITION " + // "from POINTBASE.SYSVIEWS v, POINTBASE.SYSSCHEMATA s " + // "where v.SCHEMAID = s.SCHEMAID " + // "and v.VIEWNAME = 'TESTVIEW' " + // "and s.SCHEMANAME = 'DBCOPY' ";
// i18n[graph.addRelTables=Add all related tables]
// this is a UDF, not a stored procedure.
// i18n[SchemaInfoCacheSerializer.endStore=Finished writing schema cache for Alias{0}. file: {1}]
/////////////////////////////////////////////////////////// // We use Vectors because a MessageHandler might be called from different threads.
// i18n[dateTypeTimestamp.typeTimestamp=Timestamp   (SQL type 93)]
// number of errors detected
// i18n[PreLaunchHelperImpl.restoreFromBackupTitle=Confirm Restore From Backup
// i18n[exportconfig.fileSavedTo={0} saved to {1}]
// set up Update button // i18n[cellDataPopUp.updateData=Update Data]
// TABLE NAME // COLUMN NAME // COLUMN SIZE // COLUMN SIZE
/* since .execute() returned true, the first result is a ResultSet. */
// i18n[RefactoringPreferencesPanel.qualifyCheckboxLabel=Qualify table names in scripts with schema]
// Clear session info from all actions.
// misc // ------------------------------------------------------------------------
// the other obj is null, so see if this non-null obj contains // a null value, which is equivilent. // Assume that if we have read some of the data and we still have // _data == null, then the value in the DB is actually null.
// If a different LAF to the current one has been requested then // change to the requested LAF.
/////////////////////////////////////////////////////////////////////////////// // The colums of the last completed table/view that match the tableNamePat // will be returned on top of the collection
// Uh-oh!  We shouldn't have more than one plugin registering a  // custom exception handler for a given session.  The first one  // wins and all others get an error message.
//i18n[ColumnDetailsDialog.modifyColumnTitle=Modify Column]
// Don't log an error message here. It is possible that the user // interrupted the query because it was taking too long. Just // throw the exception, and let the caller decide whether or not // the exception should be logged.
// if value was null, we do not need to do // anything else with this column. // Also assume that a value of "" is equivilent to null
// If source column is type 1111 (OTHER), try to use the  // column type name to find a type that isn't 1111.        
// Only close the statement if SQLException - otherwise it has to // remain open until the ResultSet is read through by the caller.
// i18n[RefactoringPreferencesTab.hint=Settings for the Refactoring plugin]
// new line to the begining so that sb.append( will be removed                              // new line to the end so that a semi colon at the end will be removed.                    
// For char or date types this is the maximum number of characters, for  // numeric or decimal types this is precision.
// i18n[oracle.sortsPerExec=Sorts per Exec]
// don't bother changing the delay, but stop it if it's running.
// view name // schema name
// Span across two columns //c.ipadx = 40;
// handle cases of null // The processing is different when nulls are allowed and when they are // not. //
// This doesn't appear to work for PROGRESS RDBMS //result[i] = DBUtil.getTableCount(con, ti.getSimpleName());
// i18n[mssql.toScript=Objects to script:]
// Get the names of all the selected tables in a comma separated list,
/* NOTE: a procedure may also be a UDF! */
// TODO: tell the user that the selected destination schema is  // the same as the source schema. //monitor.showMessageDialog(...)            
// Column is in table 2, but not table 1 - how else would we get // here??
// Add Help, Licence and Change Log nodes to the tree. // i18n[HelpViewerWindow.help=Help]
// i18n[popupeditableIoPanel.exportError8=Export Error]
// i18n[mssql.allUserDef=All user-defined data types]
// since we do not have all of the data from the clob, we cannot allow editing
// i18n[sqlbookmark.noRunSelection=Please select the bookmark to run]
// "server" // "port" // "database file" // "backup file"
// // If there are parameters in the SQL string, then we need // to prompt for some answers. //
//For reasons that i cannot exmplain, this is out by two, probably due to the //border or insets around a cell??
// change the delay, and start it if it was stopped.
// create the timer, but DO NOT start it.
//i18n[SQLResultExecuterPanel.scriptStmtCounts=Row update  //counts: {0} Inserts, {1} Selects, {2} Updates, {3} Deletes
// string used as error indicator and description of problems seen // when checking for 0 or mulitple matches in DB
// i18n[mssql.objectsToBeScripted=Objects to be scripted]
// double space since this is a new version of // the stored procedure (overloading name with // different parameters)
// ... while attributes used in qualified expressions will not be completed qualified. // That means for pack.Foo. the completion popup will be placed behind the last dot.
// i18n[graph.close=close]
// i18n[popupeditableIoPanel.exportError7=Export Error]
// Force the LAF to be set even if Skin is the current one. This // allows a change in theme to take affect.
//In an effort to avoid non JDBC standard out parameter types ie //oracle specific ones, the dbms_output.get_line is used rather than //the dbms_output.getlines. The disadvantage is there are more trips //to the server to return multiple lines.
// i18n[userscript.selScriptToEdit=Please select the script to edit]
// Allocate the current session to the actions.
// Dump System Properties.
// i18n[DBUtil.info.executequery=executeQuery: Running SQL:\n '{0}']
// pane.addTab(MergeColumnDialog.i18n.TABBEDPANE_COLUMNS_LABEL, _columnTab);
// There used to be a frame.pack() here but it resized the frame // to be very wide if text output was used.
"//Action performed for the Update button //	private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) //	{ //		String query = getQuery(); //		dbUtils.execute(query); //		_dlog.setVisible(false); //		_dlog.dispose(); //		JOptionPane.showMessageDialog(null, ""Field updated""); //	}"
//private IApplication _app;
// i18n[syntax.prefUseOster=Use Ostermiller editor]
"//	private static final ILogger s_log = //		LoggerController.createLogger(UserParentExpander.class);"
// for the column that is being changed, use the value // passed in by the caller (which may be either the // current value or the new replacement value)
// // The TreeModel interface //
// Sets constraints like NOT NULL for the new column, depending on the constraints for the old // column.
// don't increment i if you're removing something; otherwise, you'd skip the next item.
// JDK1.5 "@ident" annotation // "@keyword" gets returned as two tokens "@" and "keyword"
//i18n[parserthread.undefinedTable=undefined table]
// When we get to the last statement, if the script is large, // show the user the total execution time.                 
/* add the tables. */
// no tags, so cannot be XML
/* add the procedures. */
// i18n[mssql.generateDrop=Generate the DROP <object> command for each object]
/* add the views. */
// Firebird gives weird exception: unsuccessful metadata update // object FKTESTPARENTTABLE is in use; squelch it and continue.
// autoinc_gen_<column>
// We don't add a listener to a button twice // because the FindDialogSupport class will call // this method with the same button instances // whenever the replace dialog is opened. // // If we add the listener again and again replace // will be done as often as the dialog is opened. // This is especially nasty if the text to replace // is part of the replacement text.
// MySQL requires MyISAM storage engine for spatial and fulltext indexes.  Don't test them  // for now.  See the TODO in the MySQLDialect for getCreateIndexSQL.
// These should be different since we are providing two different // statement separators in SessionProperties
// CREATE [UNIQUE] [ASC[ENDING] | DESC[ENDING]] INDEX index // ON table (col [, col 鈥);
// SET GENERATOR name TO int;
//IProcedureInfo[] procs = metaData.getProcedures(catalog,null,null);
// i18n[UpdatePreferencesPanel.updateSiteBorderLabel=Update Site]
// i18n[DB2Plugin.showProcedureSource=Show procedure source]
// This test disabled for now until we figure out a better way to do // concurrent modifications to the schemaInfoCache. // @Test
/* add the UDTs. */
// i18n[mssql.scriptTemplate=Script template]
// These tell the Dialect test runner where tables that is creates can be  // found.
"//	private ResultSet mockResultSet = null; //	 //    private static int[] columnIndices =  //        new int[] { 4, 6, 18, 9, 7, 13, 12, 5, 8, 10, 11, 14, 15, 16, 17 };"
// catalog // schema // tableName // columnName // dataType; 1 == CHAR // typeName // columnSize // decimalDigits // radix // isNullAllowed // defaultValue // isNullable
// the user has restricted the set of columns to use. // If this name is NOT in the list, then skip it; otherwise we fall through // and use the column in the WHERE clause
// If the directory exists, add one to the directory number // (making it a new directory name.)
// Has to be done directly on the main frame because of racing condition at start up.
// Find the internal Frame in the list of internal frames // and remove it.
// have the DataType object fill in the appropriate kind of value // into the first (and only) variable position in the prepared stmt
// Span across two columns
// Test Connection Button Panel (Both the button and the status label
// Site type
// Update server name
// Separator
// Update server port
// Path to release.xml
// Local update directory
// Channnel combo-box
// URL text field
/* Do nothing */
// i18n[I18n.CouldNotCreateWorkDir=Could not create Working directory {0}]
// Instance Creation ****************************************************
// i18n[I18n.ExecuteNativeToAscii=Execute nativeToAscii]
// All rules passed, so enable the buttons.
// Primary Key name
// Empty block.
// i18n[I18n.includeTimestamp=Include timestamp in modified properties file]
// See also loadSchemaNames()
// It would be nice to tell the user what happened, but if we try to // put up a dialog box at this point, we run into trouble in some // cases where the field continually tries to re-read after the dialog // closes (because it is being re-painted).
// do not let user remove everything from the list
// i18n[I18n.failedToOpenZip=Failed to open zip/jar {0}]
//i18n[I18n.TranlationsGenerationMessage=\n#\n#Missing  //translation generated by I18n Plugin on {0}\n#]
// i18n[I18n.WorkDirDoesNotExistQuestionCreate=Working directory {0} does not exist.\nDo you want to create it?]
// If the cell is editable, we really must have a valid // DataType object, so the 'else' clause should never // be used.  It is just there as defensive programming.
// i18n[I18n.WorkingDir=Working Directory]
// i18n[I18n.PropsCopyMsg=Copied existing translations from {0} to {1}]
// Whether to force user to enter dates in exact format or use heuristics to guess it
// which locale-dependent format to use; short, medium, long, or full
// startparts[1] contains our I18n string key followed by </span>
// i18n[I18n.bundles=Bundles]
//tell the UI that this _workingBuffer is through
// SELECT last_number, max_value, min_value, cache_size, increment_by, cycle_flag // FROM USER_SEQUENCES WHERE sequence_name = ?;
// We don't care if these throw an SQLException.  Just squelch them // and report to the user what the outcome of the previous statements // were.
// i18n[I18n.NativeToAsciiOutDir=native2Ascii output dir]
// i18n[I18n.noWorkdir=Working directory doesn't exist.\nDo you want to create it?]
// i18n[I18n.loadBundles=Load bundles]
// i18n[I18n.WorkdirIsNoDir=The working directory is not a directory.\nNo bundles will be loaded from {0}]
// i18n[I18n.changeApplicationDefaultLocaleNote=Example VM Parameters to change locale used by SQuirreL: -Duser.language=en -Duser.country=US]
// i18n[I18n.locales=Locales]
// i18n[I18n.NoWorkDir=Please choose a work dir to store your translations.]
// -1 because column starts with 1 put pos with 0
// Dump table types.
//BaseMDIParentFrame
// no problems found, so do not return a warning message. // nothing for user to worry about
// use the Java default date-to-string
// use a date formatter
// I18n[DriverPropertiesController.noDriverSelected=No driver available in this Alias.\nCan not load driver properties tab.]
////////////////////////////////////////////////////////////// // On Errors we restart the parser behind the error
// user just entered the hour, so append min & sec
// Either are at teh beginning ...
// use the DateFormat to parse
"//		_tree.addTreeSelectionListener(new ObjectTreeSelectionListener()); //		_objTreeSelLis = new ObjectTreeSelectionListener(); //		_tree.addTreeSelectionListener(_objTreeSelLis);"
///////////////////////////////////////////////////////////////// // Error // Attention: Do not use background colors here. // Color blind people cannot read black writing on red background.
// user entered hour an min. See if they also entered secs
// user did not enter seconds
// If this happens then this is a programming error as we said // in the above call to ingore these errors.
// Needed to guarantee other components a focus lost // and to allow to enter the tabs components via tab // key in a well defined way (the user can see where the focus is).
//void sessionInternalFrameOpened(SessionInternalFrame sessionInternalFrame, ISession sess);
//  Metrics of the component used in the constructor
// break when first braket found
// Since 1.4 implements interfaces that became available in JDBC 3.0,  // let's warn the user if the driver doesn't support DatabaseMetaData // methods that were added in JDBC 2.1 and JDBC 3.0 specifications. 
"//		String EDIT = ""edit"";"
// Activate another session since the current // active session has closed.
"//	public SQLExecutionInfo() //	{ //		this(1, """"); //	}"
// We only want the index sql which is the second statement in the array. Informix requires the // constraint stuck onto the end of the statement.
//  There should not be more than one row in the DB that matches // the table, and if there is we cannot determine which one to read, // so check that there are no more
// We need to keep track of the bind var index separately, since  // the number of column defs may not be the number of bind vars // (For example: auto-increment columns are excluded)
// Means load all Schemas from database.
// Thread safe support for every call to this method:
"//	private SimpleAttributeSet _saSetErrorHistory;"
// Get an array since we dont want trouble with the sessionsList when // we remove the sessions from it.
// if we could not identify which table to edit, tell user
// Sort the rows by the property name.
// for each row in table, do delete and add to number of rows deleted from DB
// Mouse listener used to display popup menu.
// give the ResultSetReader some time to realize that the user requested // cancel and stop fetching results.  This allows us to stop the query // processing gracefully.
// If the file using the base name with no extention exists, // it is first.  The other files are in order from oldest to newest. // The set of files to delete is slightly different depending on // whether the base name file exists or not.
// There should be one row in the data, so try to move to it
// i18n[DriverInternalFrame.error.illegalvalue=Illegal value of {0} passed for Maintenance type]
// return the whole contents of this column in the DB
//_app = app;
// we have at least one row, so try to retrieve the object // Do Not limit the read of this data
// go on to the next item
// CREATE SEQUENCE testAutoIncrementTable_myid_seq // INCREMENT BY 1 MINVALUE 1 NOMAXVALUE START WITH 1 NOCYCLE; // // CREATE FUNCTION nextAutoVal () RETURNING INTEGER; // RETURN testAutoIncrementTable_myid_seq.NEXTVAL; // END FUNCTION; // // I finally did get a trigger to work, but I had to use a function: // // CREATE TRIGGER myid_trigger // INSERT ON testAutoIncrementTable // FOR EACH ROW (execute function nextAutoVal() into myid); //
// Title label at top.
// i18n[AliasInternalFrame.illegalValue=Illegal value of {0} passed for Maintenance type]
// no support for undo
// if the old preference file exists and is newer than the  // newUserPreference file, then use it for reading preferences
"/*		 * SELECT 'CREATE VIEW <newViewName> AS ' || SUBSTR(TEXT , LOCATE('as', TEXT)+2, LENGTH(TEXT)) FROM		 * SYSCAT.VIEWS WHERE VIEWSCHEMA = '<schema>' AND VIEWNAME = '<oldViewName>';		 */"
// Get the largest width and height
// if blocked that means that it doesn't help anymore // Or an error dialog is shown or the connection is made // and the SessionFrame is being constructed/shown.
// look for places to break the string
// If the user checked Auto Logon but gave wrong username/password // in the Alias definition. He will be asked to enter username/password again in an extra dialog. // Here for convenience we transfer these data back into the Alias. // Note: Don't do this when Auto Logon is false.
// toUpperCase replaces the German 脽 by ss. // This will kill reformating later. // Since upperIn is just for building pieces // it is OK to place 脽 here.
/////////////////////////////////////////////////////////////////// // Message
// NextCh already done
// Each call to _stmt.getMoreResults() places the to the next output. // As long as it is a ResultSet, we process it ...
//Object obj = action.getValue(BaseAction.IBaseActionPropertyNames.ROLLOVER_ICON);
//      private JLabel _executionLogFileNameLbl = new OutputLabel(" "); //      // Must have at least 1 blank otherwise width gets set to zero. //      private JLabel _logConfigFileNameLbl = new OutputLabel(" "); //      // Must have at least 1 blank otherwise width gets set to zero.
"//	private AliasesListInternalFrame _aliasesListWindow; //	private DriversListInternalFrame _driversListWindow;"
// mockPreferences
// Done this late so that plugins have time to register expanders // with the object tree prior to it being built.
// Separated by a line.
// Reset the background to the colour that the current Look // and Feel uses for internal frames.
// Data
// mockSQLMetaData
// Needes to be done via event queque because adding the session to the // drop down happens via the event queue too.
// i18n[laf.staticText=Static Text]
"// Cut and Paste need to be worked on, so for now do not include them // Also, the copy operations do not seem to work right - we may need special //    versions for the cellEditor menu. //		add(_cut); //		add(_copy); //		add(_copyHtml); //		add(_paste); //		addSeparator();"
// add the menu items to the menu
// No more automatic restarts because // key events will restart the parser from now on.
//_listeners.add(ISQLExecutionListener.class, lis);
"//	private IntegerIdentifierFactory _idFactory = new IntegerIdentifierFactory();"
// i18n[dataTypeTime.typeTime=Time   (SQL type 92)]
// Assume DBMS doesn't support catalogs.
// Get the node to be expanded.
// sql contains columns from multiple tables, // so we cannot use all of the columns in a WHERE clause // and it becomes difficult to know which table (or tables!) an // edited column belongs to.  Therefore limit the output // to be read-only
// Register tabs to display in the details panel for procedure nodes.
// Back-off a bit after a hundred updates to allow the UI to update
// sticky tab was closed
// Register tabs to display in the details panel for catalog nodes.
// must *not* be done in the GUI thread
// Tell the DataSetViewer to delete the rows // Note: rows are indexes in the SORTABLE model, not the ACTUAL model
// Since we are reading Meta-data about the DB, we should // never see a CLOB. However, if we do we assume that // it is printable text and that the user wants to see it, so // read in the entire thing.
/* --- SECURITY PANEL ---------------------------------------------- */
//getTable().doLayout();
//parentRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
// i18n[mssql.only70compatible=Only script 7.0 compatible features]
"//	private String _sqlOutputMetaDataClassName = IDataSetDestinations.READ_ONLY_TABLE;"
// i18n[mssql.scriptLogins=Script SQL Server logins (Windows and SQL Server logins)]
// Note: A CaseInsensitiveString can be a mutable string. // In fact it is a mutable string here because this is usually called from // within Syntax coloring which uses a mutable string.
// make sure we are starting clean
// load all table types with catalog = doi.getCatalog() and schema = doi.getSchema()
//private transient String[] availableTypesInDataBase;
// Save the current UI defaults.
// invokeLater to make the call synchronto the event queue
// Do not do new HashMap() here.
// Columns have not yet been loaded 
// i18n[FileManager.error.cannotwritefile=File {0} \ncannot be written to.]
// Scrollbars are "shown always" to stop sheet resizing when they // are shown/hidden.
"/*		 * alter table test drop constraint u_test		 */"
// This can take a long time for big jars - so it is not done on the EDT.
// Editable Text
// Removed for uncomment
"/*	 * The following is used by both in-cell and Popup operations.	 */"
// i18n[mssql.scriptIndexses=Script indexes]
// Static text
"/* the number of decimal digits allowed to the right of the decimal point		 * in the number		 */"
"/*	 * Return a JTextArea usable in the CellPopupDialog.	 */"
"/*	 * Now define the Popup-related operations.	 */"
"/*	 * First we have the cell-related and Text-table operations.	 */"
//int modelCol = getTable().convertColumnIndexToModel(col);
//return ((String)obj1).equals(obj2);
"/*		 * SELECT 'unknown' as last_value, T1.max_val AS max_value, T1.min_val AS min_value, T1.cache AS		 * cache_size, T1.inc_val AS increment_by, case T1.cycle as is_cycled FROM informix.syssequences AS T1,		 * informix.systables AS T2 WHERE T2.tabid = T1.tabid and T2.owner = '<schema>' and T2.tabname = '<sequenceName>'		 */"
"/*			 * Create the panel and add the GUI items to it			 */"
// i18n[DriverWindowFactory.error.copyingdriver=Error occured copying the driver]
// special handling of operations while editing Strings
//i18n[WindowManager.registerSessionSheet=Registering {0} in WindowManager]
// checkbox for read/not-read on table load
// SS: update dynamic column widths
"/*	 * Property change control panel	 */"
"/*		 * File IO related functions		 */"
// Next the buttons.
// i18n[mssql.fileFormat=File Format]
// This is not the column that the mouse has been pressed in.
// Store ptr to newly open window in list of windows per session.
// Added by Patch 2856103 for Apple/Mac
// If this is the column that the table is currently is // currently sorted by then display the sort icon.
// Rendering the column that the mouse has been pressed in.
// Ensure that this is a Plastic Theme.
// set of characters to be ignored by the scanner
// error messages
// default is to do nothing.  Derived classes must override this // to accomplish anything.
// save for possible future use
//i18n[ImportFileDialog.fileImport=Import file]
// Register tabs to display in the details panel for schema nodes.
/* forever */
// Some drivers (e.g. Oracle) give precision as 0 in some cases. // When precision is 0, we cannot check the length, so do not try.
// now remove the non-digit chars, if any
"//		return method.getParameterTypes().length == 1 //			&& method.getParameterTypes()[0] == int.class //			&& method.getReturnType() != Void.TYPE;"
// user entered '+' or '-' at a bad place
// Update font used for status bars.
"/*		 * DataBase-related functions		 */"
"//		double tableWidth =_table.getColumnModel().getTotalColumnWidth() * scale;"
// Listen for GUI components being created.
"//		Dimension dim = sp.getPreferredSize(); //		dim.width = PREFERRED_WIDTH; //		sp.setPreferredSize(new Dimension(sp.getPreferredSize().width, 200));"
// SQL FLOAT requires support for 15 digits of mantissa.
// get binary stream from rs
// Any other components are on the right.
// The message area is on the right of the statusbar and takes // up all available space.
// SS: Display complete column header as tooltip if the column isn't wide enough to display it
// return the text from the file since it does // represent a valid value of this data type
"//				return Boolean.class;	// Don't show checkbox for // output only field."
// Use valueof when min supported JDK is 1.4 //return Boolean.valueOf(_props[row].required);
// _inWidgetSetVisible was introduced to allow moveToFront to be called // from within setVisible. See EditWhereColsSheet or SQLFilterSheet
// a light yellow
// mockSessionManager
// Test Data
// Get the new Look and Feel object.
// mockSchemaInfo
// keep scanning until we're either EOL or find a different filegroup.
// the columns in the referenced table
// j is the index of the first file in the next filegroup.
// if we're still in this function, just add it at the end.
// not so simple -- we want to keep the filegroups together.
// Simulate the user changing the session properties
//i18n[RowIDTab.title=Row IDs]
// If no columns are selected, and we're not dropping the PK, then // there is nothing to do.
// property file not found for user - first time user ran pgm.
// chop off "DEFAULT on column ";
// Only concerned about order when more than one table.
"//			parent.addInternalFrame(viewer, true, null); //			GUIUtils.centerWithinDesktop(viewer);"
// If Auto Logon is true in ConnectToAliasCommand user name/password // of the Alias definiton may have changed. // Here we transfere this information back into the controls.
// Add the message handler to the session
//i18n[SplashScreen.error.updatingprogressbar=Error occured updating progress bar]
// 1 < buf.size()
// Done after the set of the selected item above so that we control // when the initial build is done. We want to make sure that under all // versions of the JDK that the window is shown before the (possibly // lengthy) refresh starts.
// Copys the gathered values into the lookup table.
//I18n[DriverPropertiesController.invalidUrl=According to  //the driver "{0}", the url "{1}" is invalid.]
//void reload();
//Set the cell Width to the width of the header
// constraintKeys looks like this --> `REFERENCES pubs.dbo.foo (fooid, quuxid)' // chop off "REFERENCES "
// we can have more than one file in the string so tokenize // on whitespace.  Let the user know if we find multiple // tokens that they cannot place drop than one file at a  // time
//Create checkbox for enabling auto refresh // i18n[oracle.dboutputEnableAutoRefer=Enable auto refresh]
// i18n[dataTypeBigDecimal.precisionEceeded=Precision Exceeded:  //Number of digits in number ({0})\nis greater than allowed in  //column ({1})]
// i18n[DB2Plugin.showUdfSource=Show UDF source]
// i18n[Application.splash.loadsqlhistory=Loading SQL history...]
// i18n[DataSetUpdateableTableModelImpl.error.unknownerror=Unknown error during check on DB.  Update is probably not safe.\nDo you wish to proceed?]
// i18n[dataTypeUnknown.unknownTypes=Unknown DataTypes   (non-standard SQL type codes)]
// i18n[SchemaPropertiesPanel.hint=Here you may pecify which Schemas to be loaded and displayed in a Session's Object tree. // Code completion and Syntax highlighting will work only for loaded schemas. // If Schemas take a long time to load you may cache them on your hard disk. // Then loading will take long only when you open a Session for the first time. // You can always refesh the cache either by using the Session's 'Refresh all' toolbar button // or by using the 'Refresh Item' right mouse menu on an Object tree node.]
"//		Point pt = JFCUtilities.computePopupLocation(evt, evt.getComponent(), this);"
// i18n[dataTypeBigDecimal.newlinesAsbackslashN=Show newlines as \\n within cells]
// checkbox for whether to interpret input leniently or not // i18n[dateTypeTimestamp.allowInexact=allow inexact format on input]
// i18n[UdfDetailsTab.hint=Display UDF details]
// some kind of problem - tell user // i18n[DataSetUpdateableTableModelImpl.error.preparingdelete=While preparing for delete, saw exception:\n{0}]
// i18n[generalSessionPropertiesPanel.metaData=Meta Data:]
// i18n[dateTypeTimestamp.jdbcEscape=Use JDBC standard escape format ]
//i18n[syntax.background=Select background color]
// i18n[DataSetUpdateableTableModelImpl.error.staleupdaterow=This row in the Database has been changed since you refreshed the data.\nNo rows will be updated by this operation.\nDo you wish to proceed?]
// i18n[EditExtrasAccessor.editextrasPluginNeeded=Quoting is only available with the Edit Extras Plugin.\nGet the plugin from www.squirrelsql.org. It's free.]
// i18n[HibernateConfigPanel.classPathRemove=Remove selected entries]
// i18n[generalSessionPropertiesPanel.showToolbar=Show toolbar]
// i18n[DataSetUpdateableTableModelImpl.error.exceptionduringcheck=Exception seen during check on DB.  Exception was:\n{0}\nUpdate is probably not safe to do.\nDo you wish to proceed?]
// i18n[FactoryProviderDialog.desc=Please enter the fully qualified class name of a SessionFactorImpl provider class. // The compiled class file must be in one of your additional classpath entries.]
//i18n[SQLScriptPreferencesPanel.updateActionLabel=Action to take on update:]
// i18n[SQLScriptPreferencesPanel.updateRefActionToolTip=Append ON UPDATE ...]
// i18n[DerbyDialect.varcharMessage=Derby only allows varchar columns // to be altered]
// i18n[ResultTab.cannotedit=This SQL can not be edited.]
// Add import control // i18n[popupeditableIoPanel.import44=Import]
// i18n[codeCompletion.PrefsTabTitleHint=Configure Code Completion]
// label for the date format combo, used to enable/disable text // i18n[dataTypeDate.orlocaleIndependent= or locale-dependent format:]
// i18n[laf.lafPerformanceWarning=Also note: Some Look and Feels may cause performance problems. // If you think your selected Look and Feel slows down SQuirreL switch to a Metal or Plastic Look and Feel.]
// i18n[graph.format=Format ...]
//i18n[syntax.bold=Bold]
// i18n[userscript.scriptProps=Script properties]
// i18n[DBUtil.error.bindclobfailure=bindBlobVar: failed to // bind blob using filesystem - attempting to bind blob using // memory]
// i18n[DumpSessionAction.warning=<HTML><BODY><B>Warning:</B> Plain<BR>text passwords<BR>may be saved<BR>in this file.</BODY></HTML>]
// i18n[DataSetUpdateableTableModelImpl.error.multimatchingrows=Muliple rows in DB match current row in table - cannot re-read data.]
// i18n[DatabaseMetaData.searchableTypePredNone=no support]
// i18n[SplashScreen.error.updatingprogressbar=Error occured updating progress bar]
// i18n[userscript.execOnTargets=Execute script on selected targets]
// i18n[DownloadStatusEventHandler.updateDownloadFailedMsg=Please consult the log for details]
//i18n[CSVSettingsPanel.seperatorCharToolTip=Specify the character that is used to seperate the columns in this file (e.g. ',' or ';')]
// i18n[sqlscript.scriptWritten=Script was written to the SQL editor of the main session window.]
// i18n[userscript.execOutput=Script execution output]
// i18n[syntax.osterWarning=You are using the Oster editor. Please consider using the Netbeans editor. See menu File --> New Session Properties --> Syntax]
// i18n[DataSetUpdateableTableModelImpl.info.norowsupdated=No rows updated.]
// i18n[userscript.showInStandardMenues1=Show in standard menues]
// i18n[SQLScriptPreferencesPanel.qualifyCheckboxLabel=Qualify table names in scripts with schema]
// i18n[generalSessionPropertiesPanel.sqlExecTabs=SQL Execution Tabs:]
// i18n[AboutBoxDialog.error.systemprops=Error occured displaying System Properties]
// i18n[DefaultDatabaseExpander.error.retrieveuserroles=Unable to retrieve user roles]
// i18n[PreferencesPanel.removeMultiLineCommentLabel=Remove multi-line // comments (/*...*/) from SQL before executing
// i18n[SessionStartupTimeHintDlg.title=Session startup time hint]
// label for type combo - used to enable/disable text associated with the combo // i18n[dataTypeBlob.read=Read]
// i18n[PreferencesPanel.procedureSeparatorToolTip=Multiple statements // within a procedure or function can be terminated with this.]
// i18n[userscript.scriptAdminErr=Err Msg]
// i18n[DialectUtils.dropPrimaryKeyUnsupported={0} doesn''t // support dropping primary keys]
//i18n[CopyTablesCommand.progressDialogTitle=Analyzing FKs in Tables to Copy]
// i18n[UpdateControllerImpl.updateCheckTitle=Update Check]
// i18n[DataSetUpdateableTableModelImpl.info.updateidenticalrows=This operation will update {0} identical rows.\nDo you wish to proceed?]
// i18n[HQLEntryPanelManager.unquoteHQL=Unquote HQL]
//i18n[syntax.replaceNetbeansOnly=Replace is only available when the Netbeans editor is used.\nSee menu File --> New Session Properties --> Tab Syntax]
// i18n[sqlscript.configYourMultiTableScriptIxAfterEach=Constraints and indexes after each table]
// i18n[SchemaTableCboItem.schemaID.loadButDontCache=Load but don't cache]
// i18n[userscript.scriptCompletedErr=Script completed with errors]
// i18n[DialectUtils.addPrimaryKeyUnsupported={0} doesn''t // support adding primary keys]
// i18n[syntax.osterExplain=Note: The preferable editor is the Netbeans editor. The Netbeans editor\n //- is less memory consuming,\n //- its highlightning is more exact,\n //- can handle many lines well.\n // The Oster editor is still there // because it can handle // very long lines better than the // Netbeans editor. // This is due to a known bug in // the Netbeans editor (Issue #41241). // As soon as this bug is fixed // the Oster editor will be removed.]
// i18n[exportconfig.errorSavingDrivers=Error saving drivers]
// i18n[SQLHistoryController.mnuAppendSelectionToEditor=Append selected statements to SQL editor]
// i18n[SchemaInfo.loadingStoredProcedures=Loading stored procedures]
// i18n[popupeditableIoPanel.cannotFindFile=Cannot find file {0}\nCheck file name and re-try export.]
// i18n[FactoryProviderDialog.example=Save example code for a SessionFactorImpl provider class to ...]
// i18n[codecompletion.listTruncated=Completion list truncated. Narrow by typing to get missing entries.]
// i18n[HibernateSQLPanel.code=SQL code]
// i18n[PreferencesPanel.lineCommentToolTip=Sequence of characters at // the beginning of a line to indicate that whole line is a comment]
// i18n[DataSetUpdateableTableModelImpl.error.rereadingdb=There was a problem reported while re-reading the DB.  The DB message was:\n{0}]
//i18n[ScriptWriter.error.nouserhome=The System property <user.home> // is null.  Cannot determine where to write DBCopy SQL scripts. // Disabling writing SQL scripts for DBCopy operations.]
//i18n[ColumnListDialog.editSQLButtonLabel=Edit SQL]
// i18n[HibernateConfigController.noPersistenceUnitName=Missing Persitence-Unit name .\nChanges cannot be applied.]
// i18n[popupeditableIoPanel.createFileError=Failed to create file {0}.\nChange file name or select a differnt file for export.]
//i18n[DerbyPlugin.showViewSource=Show view source]
// i18n[HibernateConfigPanel.toObtainSessionFactJPA=Call "javax.persistence.Persistence.createEntityManagerFactory("<persitence-unit name>");"]
// i18n[MysqlPlugin.hint=Preferences for MySQL]
// i18n[PreLaunchHelperImpl.installFailedMessage=Unexpected error while attempting to install updates]
// i18n[dataTypeJavaObject.readContentsWhenLoaded=Read contents when table is first loaded and display as string]
// i18n[generalSessionPropertiesPanel.sqlResultTabs=SQL Results Tabs:]
// i18n[oracle.dboutputStayOnTop=Stay on top]
// i18n[ColorPropertiesPanel.objectTreeBackgroundColorButtonLabel=Choose Object Tree Color]
//i18n[InstallDefaultDriversAction.error.selectingwindow=Error selecting window]
// i18n[RemoveColumnCommand.singleColumnMessage=The table's only column cannot be removed - a table // must have a least one column.]
// i18n[popupeditableIoPanel.exportError4=Export Error]
// i18n[editextras.errorRemoveQuotes=Error processing Remove Quotes SQL command: {0}]
//i18n[ColumnListDialog.dropErrorMessage=Can't drop all columns - a  //table must have at least one column
// i18n[SQLScriptPreferencesTab.hint=Settings for the SQL Script plugin]
// i18n[DataCache.msg.driverClassNotFound=Could not find class {0} in neither // the Java class path nor the Extra class path of the {1} driver definition:\n{2}]
// i18n[ColorPropertiesPanel.instructions=These settings control the background colors...]
// i18n[DialectUtils.columnNullUnsupported={0} doesn''t support // altering a column's nullable attribute]
// i18n[sqlscript.storeSqlInTableFailed=An error occured during storing SQL result in table {0}. See messages for details.\nI will create the copy script. You may correct errors and run it again.]
// i18n[PreLaunchHelperImpl.installUpdatesTitle=Updates Available]
// i18n[Application.splash.loadeditselections=Loading Edit 'Where' Columns selections...]
//i18n[CopyExecutor.tablecolmismatch=Column count for table {0} in  //source database is {1}, but column count for table {2} in  //destination database is {3}
// i18n[DataSetUpdateableTableModelImpl.confirmupdateallrows=The table has no columns that can be SELECTed on.\nAll rows will be updated.\nDo you wish to proceed?]
// i18n[PreLaunchHelperImpl.restoreFromBackupMessage=Restore SQuirreL to previous version before // last update?]
// i18n[cellDataPopUp.conversionError=Conversion Error]
// i18n[popupeditableIoPanel.notANormalFile=File is not a normal file.\n Cannot do export to a directory or system file.]
//i18n[syntax.font=Select font color]
// i18n[favs.deletelFolder=Are you sure to want to delete the folder \"{0}\" and all of its contents?]
// i18n[ToolsPopupController.toolspopupmsg=Please try out the Tools popup by hitting ctrl+t in the SQL Editor. Do it three times to stop this message.]
//i18n[ImportDataIntoTableExecutor.success={0,choice,0#No records|1#One record|1<{0} records} successfully inserted.]
//i18n[AbstractRefactoringDialog.showButtonLabel=Show SQL]
// i18n[mssql.scriptingOptionsDlg=Scripting options allow you to specify how an object will be scripted.]
// checkbox for whether to interpret input leniently or not // i18n[dataTypeTime.inexact=allow inexact format on input]
// i18n[SchemaPropertiesPanel.refreshSchemas=Connect database to refresh Schema table]
// i18n[editextras.errorRemoveNewLines=Error processing Remove // NewLines SQL command: {0}]
//i18n[FileEditorDropTargetListener.internalErrorMessage=Internal error occurred.  //See log for details]
// i18n[TableExportCsvDlg.exportSelection=Export selection]
// i18n[PreferencesPanel.statementSeparatorToolTip=When multiple // statements are selected, use this to separate them into single // statements.]
// i18n[HibernateConfigPanel.configName=Configuration name]
// i18n[laf.lafWarning=Note: Controls may not be drawn correctly after changes in this panel until the application is restarted.]
// set up dialog to ask user if it is ok to proceed // IMPORTANT: this dialog is SYNCHRONOUS (ie. we do not proceed until // user gives a response).  This is critical since this function provides // a return value to its caller that depends on the user input. // i18n[baseDataSetViewerDestination.warning=Warning]
// i18n[mysql.logs=MySQL Logs]
// i18n[SessionSQLPropertiesPanel.removeMultiLineComment=Remove multi line comment (/*...*/) from SQL before sending to database]
// i18n[dateTypeTimestamp.timestampInWhere=Do not use Timestamp in WHERE clause]
// i18n [MemoryPanel.gcStatus={0}\n\n //Sessions waiting for garbage collection:\n //==================================================\n //{1}\n //Sessions open:\n //==================================================\n //{2}\n //Sessions garbage collected:\n //==================================================\n //{3}\n]
//i18n[DropTableDialog.cascadeLabel=Cascade Constraints:]
// i18n[CodeCompletionPreferencesPanel.maxLastSelectedCompletionNames=If you call code completion without being in the scope of a table, //for which number of tables the parser last found would you like to see colums on top of the completion list?]
// i18n[UpdateControllerImpl.softwareVersionCurrentMsg=This software's version is the most recent]
// i18n[popupeditableIoPanel.errWhileExecutin=Error while executing command.\nThe command was:\n {0}\nThe error was:\n{1}]
// i18n[oracle.displayColumns=Display index column information]
// i18n[sqlbookmark.noSQLPanel=To run a bookmark you must open this window\nusing the "Edit Bookmarks" toolbar button of a Session window.\nThe bookmars SQL Code will then be written to the Session's SQL editor.]
// i18n[dataSetViewerEditableTablePanel.selectionNeeded=You must select something in the table to delete.]
// i18n[generalSessionPropertiesPanel.generalSettings=General settings for the current session]
// i18n[OraclePluginPreferencesPanel.showErrorOffsetTT=Creates and uses a // user-defined function that is used to determine the syntax error token]
// i18n[HibernateConfigPanel.applyConfigChanges=Apply changes to this configuration]
// i18n[CancelStatementThread.cancelTimedOut=Failed to cancel statement within one second. Perhaps your driver/database does not support cancelling statements. If cancelling succeeds later you'll get a further messages.]
// i18n[HibernateConfigPanel.ConfiguirationDef=Configuration definition]
// i18n[DataSetUpdateableTableModelImpl.info.identicalrows=This  //operation will result in {0} identical rows.\nDo you wish  //to proceed?]
// i18n[DerbyDialect.columnLengthMessage=Derby only allows varchar // column length to be increased]
//i18n[ReconnectAction.confirmReconnect=Close the current connection  //to the database and open a new one?]
// label for the date format combo, used to enable/disable text // i18n[dateTypeTimestamp.orLocaleDependend= or locale-dependent format:]
// i18n[FactoryProviderController.fileCreateFailed=File {0} could not be created: {1}]
// i18n[CreateDataScriptOfCurrentSQLCommand.noQuery=No query found to create the script from.]
// i18n[oracle.buffer.getsPerRow=Buffer Gets per Row]
// i18n[laf.tabHint=Fonts]
// i18n[SchemaInfoCacheSerializer.beginStore=Starting to write schema cache for Alias {0}. file: {1}]
// i18n[oracle.displayTriggerDetails=Display trigger details]
// i18n[graph.newGraph=New table graph]
// i18n[dataTypeBlob.readOnFirstLoad=Read contents when table is first loaded:]
// i18n[mysql.displayProcesses=(MySQL) Display database processes]
// i18n[OraclePrefsPanel.Description= "Interactions with Schema Alias properties (see 'Schemas' tab):\n //\n //1. 'Load all Schemas, cache none': Oracle Alias properties will take effect immediately.\n //\n //2. 'Load and cache all Schemas': Oracle Alias properties will take effect on next 'Refresh all' inside a Session.\n //\n //3. 'Specify Schema loading and Caching': Oracle Alias properties will take effect when the Schemas table on the 'Schemas' tab is refreshed.\n //\n //Note: If Schema Alias properties are set to load all cache none and Oracle Alias properties is set to 'Allow all Schemas' this may result in very long Session startup time.]
// i18n[PreferencesPanel.useCustomQTToolTip=Gives enhanced capabilities // over the default query tokenizer for handling {0} scripts]
// i18n[graphToClipboard.copyButton=Copy image from selected tab]
// i18n[popupeditableIoPanel.commandReturnNot0=The convention for command returns is that 0 means success, but this command returned {0}.\nDo you wish to import the file contents anyway?]
// i18n[dataTypeJavaObject.sqlJavaObjectType=SQL JavaObject   (SQL type 2000)]
// i18n[DBUtil.info.bindbloblength=bindBlobVarInFile: writing '{0}' bytes.]
// i18n[SessionStartupTimeHintDlg.text=This Session seems to take considerable time to load. You may configure Alias Schema Properties to improve startup performance.]
// i18n[SchemaPropertiesPanel.schemaTableUpdateLable2=in all Schemas to]
// i18n[syntax.hasBeenAutocorr={0} has been auto corrected / extended to {1}. To configure auto correct / abreviations see Menu Session --> Syntax --> Configure auto correct / abreviation]
// i18n[DialectUtils.columnCommentUnsupported={0} doesn''t support // column comments]
// i18n[GeneralPreferencesPanel.squirrelUserPath=User directory: -userdir {0}]
// i18n[MyURLClassLoader.noAssignCheck=Failed to load {0} in {1} to check if it is // assignable to {2}. Reason: {3}]
//i18n[ImportTableDataCommand.sqlErrorOccured=An error occured while reading database data.] //i18n[ImportTableDataCommand.error=Error]
// i18n[popupeditableIoPanel.executeError=Execute Error]
//i18n[ImportDataIntoTableExecutor.sqlException=A database error occured while inserting data] //i18n[ImportDataIntoTableExecutor.error=Error]
// i18n[dataSetViewerTablePanel.textCantBeConverted=The given text cannot be converted into the internal object.\nThe database has not been changed.\nThe conversion error was:\n{0}]
// i18n[CancelStatementThread.closeFailed=Failed to close statement. Propably the driver/RDDBMS does not support canceling statements. See logs for further details ({0})]
// i18n[DialectUtils.columnTypeUnsupported={0} doesn''t support // altering a column's type attribute]
// i18n[rowDataInputFrame.propName=Input New Row Data]
//i18n[ColumnDetailsDialog.columnTypeTootTip={0} does not  //support altering column type]     
// i18n[DataSetUpdateableTableModelImpl.error.unknownupdateerror=Unknown problem during update.\nNo count of updated rows was returned.\nDatabase may be corrupted!]
//i18n[PreferencesPanel.colTypeMappingBorderLabel=Column Type Mapping]
// i18n[HQLEntryPanelManager.quoteHQL=Quote HQL]
//i18n[ColumnListDialog.dropTitle=Select Column(s) To Drop]
// i18n[generalSessionPropertiesPanel.dataTYpe1=Properties for the individual Data Types may be set in the]
// i18n[mssql.generateSqlScript=Generate SQL Script]
//i18n[SQLResultExecuterPanel.scriptQueryStatistics=Executed {0}  //queries; elapsed time (seconds) - Total: {1}, SQL query: {2},  //Building output: {3}]
// i18n[rowInputDataFrame.conversionToInternErr=The given text cannot be converted into the internal object.\nThe database has not been changed.\nThe conversion error was:\n{0}]
// i18n[userscript.dlgTabScriptsGenTempl=Generate script template...]
// i18n[DataSetUpdateableTableModelImpl.error.duringInsert=Exception seen during check on DB.  Exception was:\n{0}\nInsert was probably not completed correctly.  DB may be corrupted!]
// i18n[editextras.timeStamp=Time stamp]
//i18n[hibernate.HibernateTabPanel.connect=Connect/disconnect configuration selected configuration]
// no first row, so we cannot retrieve the data // i18n[DataSetUpdateableTableModelImpl.error.nomatchingrow=Could not find any row in DB matching current row in table]
// i18n[popupeditableIoPanel.cannotExec=Cannot execute a null command.\nPlease enter a command in the Command field before clicking on Execute.]
//i18n[ColumnDetailsDialog.columnNullLabel={0} does not  //support altering column nullability]
// i18n[mysql.showLogs=(MySQL) Show Logs]
// i18n[NumericFunctionsTab.title=Numeric Functions]
// i18n[DialectUtils.columnNameUnsupported={0} doesn''t support // altering a column''s name]
// i18n[AboutBoxDialog.systempanelcreatetime=SystemPanel created in ]
// i18n[UpdateControllerImpl.promptToDownloadAvailableUpdatesTitle=Updates Available]
// i18n[popupEditableIoPanel.wrapWord=Wrap on Word on/off]
//i18n[SybaseASEPlugin.showViewSource=Show view source]
//i18n[ColumnListDialog.dropErrorTitle=Too Many Columns Selected]
// i18n[popupeditableIoPanel.fileChooserError=File Chooser Error]
// i18n[userscript.applicableToTarget=Scripts applicable to selected targets]
// i18n[OraclePlugin.timestampWarning=The setting to use string literals // for timestamps may result in the inability to edit tables containing // these columns. If this problem occurs, open // Global Preferences -> Data Type Controls and set Timestamps to use // "JDBC standard escape format"]
//i18n[MappingRoot.driverVersion=JDBC driver version (Hibernate)]
// set up dialog to ask user if it is ok to proceed // IMPORTANT: this dialog is SYNCHRONOUS (ie. we do not proceed until // user gives a response).  This is critical since this function provides // a return value to its caller that depends on the user input. // i18n[baseDataSetViewerDestination.warning2=Warning]
// i18n[userscript1.scriptClass=Script class]
//i18n[syntax.findExplain=Press F3 to go to next result. Press Ctrl+Shift+F7 to toggle highlight search.]
//i18n[DataSetUpdateableTableModelImpl.error.exceptionduringcheck=Exception  //seen during check on DB.  Exception was:\n{0}\nUpdate is probably not  //safe to do.\nDo you wish to proceed?]
// i18n[HibernateAttribuiteDataSet.tableCols=Table columns]
// i18n[UpdatePreferencesPanel.statusLableFailureMsg=Connection failed. See log for error.]
// i18n[cellDataPopUp.cannnotBGeConverted=The given text cannot be converted into the internal object.\n //Please change the data or cancel editing.\n //The conversion error was:\n{0}]
// i18n[DBUtil.error.missingtable=getForeignKeySQL: table // '{0}' has a column '{1}' that references table '{2}' // column '{3}'. However, that table is not being copied. // Skipping this foreign key.]
//i18n[CSVSettingsPanel.csvSettings=CSV settings]
// i18n[syntax.textLimitLineWidth=Text limit line width]
// Required with the first beta of JDK1.4.1 to stop // this scrollpane from being too tall.
// i18n[I18n.NativeToAscii=Path to native to Unicode converter (JDK's native2ascii)]
// i18n[I18n.appendI18nStringsProps=Create/Append I18nString.properties files]
// i18n[I18n.generateTemplateComments=Generate template comments for missing translations]
//add more space between the label and the button
// We don't destroy the timer when there's nothing happening // because it would mean a lot more work on every single AWT // event that gets dispatched.
"/*				 * If the object representing the actual data (i.e. this object)				 * can be edited by the user, then the fw objects need to have				 * a reference to it.  Updateable objects must implement an				 * interface derived from IDataSetUpdateableComponent in the				 * net.sourceforge.squirrel_sql.fw.datasetviewer package.				 * If the component does not implement that interface,				 * then we just keep going, but if it does implement it,				 * then we need to tell the DataSetScrollingPanel that the				 * object that fw needs to call is this one.				 */"
// There are some fields that cannot be used in a WHERE clause, either // because there cannot be an exact match (e.g. REAL, FLOAT), or // because we may not have the actual data in hand (BLOB/CLOB), or // because the data cannot be expressed in a string form (e.g. BINARY). // An update to one of those fields // will look like we are replacing one row with an identical row (because // we can only "see" the fields that we know how to do WHEREs on).  Therefore, // when we are updating them, there should be exactly one row that matches // all of our other fields, and when we are not updating one of these // special types of fields, there should be // no rows that exactly match our criteria (we hope). // // We determine whether this field is one that cannot be used in the WHERE // clause by checking the value returned for that field to use in the // WHERE clause.  Any field that can be used there will return something // of the form "<fieldName> = <value>", and a field that cannot be // used will return a null or zero-length string.
//add more space to the top of the component
// If the user has cancelled the query, don't bother logging // an error message.  It is likely that the cancel request // interfered with the attempt to fetch results from the // ResultSet, which is to be expected when the Statement is // closed.  So, let's not bug the user with obvious error // messages that we can do nothing about.
"//	 JASON: Removed as part of patch //	void removeSessionListener(ISessionListener lis);"
// There is no need to close result sets if we call _stmt.getMoreResults() because it // implicitly closes any current ResultSet. // ON DB2 version 7.1 it is even harmful to close a ResultSet explicitly. // _stmt.getMoreResults() will never return true anymore if you do.
"//		IApplication app = getApplication(); //		CursorChanger cursorChg = new CursorChanger(app.getMainFrame()); //		cursorChg.show(); //		try //		{ //			new ShowNativeSQLCommand(_session).execute(); //		} //		finally //		{ //			cursorChg.restore(); //		}"
// // // DO NOT CHANGE THE VALUES OF THIS CONSTANTS. // // These constants where introduced to make the parser // code more readable. Care was taken. Still it can // not be guaranteed that changing a value will // not be harmful. //
// CopyOnWriteArrayList is unfortunately not sort-able as a List.  So this // will throw an UnsupportedOperationException: // // Collections.sort(_iTableInfos, new TableInfoSimpleNameComparator()); // // The following is the best approach according to concurrency master  // Doug Lea, in this post:  // http://osdir.com/ml/java.jsr.166-concurrency/2004-06/msg00001.html // // Here we copy the existing internal array into a new array that // is large enough to hold the original and new elements.  Then sort it.   // And finally, create a new CopyOnWriteArrayList with the sorted array.
// use all of the columns
"/*		 * When user leaves a cell after editing it, the contents of		 * that cell need to be converted from a string into an		 * object of the appropriate type before updating the table.		 * However, when the call comes from the Popup window, the data		 * has already been converted and validated.		 * We assume that a String being passed in here is a value from		 * a text field that needs to be converted to an object, and		 * a non-string object has already been validated and converted.		 */"
// save various info about the column for use in user input validation // when editing table contents. // Note that the columnDisplaySize is included two times, where the // first // entry may be adjusted for actual display while the second entry is // the // size expected by the DB. // The isNullable() method returns three values that we convert into // two // by saying that if it is not known whether or not a column allows // nulls, // we will allow the user to enter nulls and any problems will be // caught // when they try to save the data to the DB
///////////////////////////////////////////////////////////////////////// // // Implement the IDataSetTableControls interface, // functions needed to support table operations // // These functions are called from within MyJTable and MyTable to tell // those classes how to operate.  The code in these functions will be // different depending on whether the table is read-only or editable. // // The definitions below are for read-only operation.  The editable // table panel overrides these functions with the versions that tell the // tables how to set up for editing operations. // // /////////////////////////////////////////////////////////////////////////
// if use is not looking for ASCII chars, or if this one is one that // is not printable, then convert it into numeric form
// if both objs are null, then they matched in the previous test, // so at this point we know that at least one of them (or both) is not null. // However, one of them may still be null, and we cannot call equals() on // the null object, so make sure that the one we call it on is not null. // The equals() method handles the other one being null, if it is.
// CLOBs are different from normal data types in that what is actually // read from the DB is a descriptor pointing to the data rather than the // data itself. During the initial load of the table, the values read from the // descriptor may have been limited, but the descriptor itself has been // completely read, Therefore we do not need to re-read the datum // from the Database because we know that we have the entire // descriptor. If the contents of the CLOB have been limited during // the initial table load, that will be discovered when we check if // the cell is editable and the full data will be read at that time using // this descriptor.
// i18n[rowInputDataFrame.conversionErr=Conversion Error]
"/*		 * If you add this method to one of the standard DataTypes in the		 * fw/datasetviewer/cellcomponent directory, you must also add the name		 * of that DataType class to the list in CellComponentFactory, method		 * getControlPanels, variable named initialClassNameList.		 * If the class is being registered with the factory using registerDataType,		 * then you should not include the class name in the list (it will be found		 * automatically), but if the DataType is part of the case statement in the		 * factory method getDataTypeObject, then it does need to be explicitly listed		 * in the getControlPanels method also.		 */"
/* -- Basic infrastructure -- */
// save pointer to object needed to render value for use // in the inner class delegate
// We want to detect two empty text values in a row before  // we decide to restore the original value.  Since 'text' // contains the new value, we want to allow the first empty // 'text' so that the user can clear the field, and on the  // second one we will set it to the original value.
// tables that are netiher children nor parents - utility tables
"/*				* If you add this method to one of the standard DataTypes in the				* fw/datasetviewer/cellcomponent directory, you must also add the name				* of that DataType class to the list in CellComponentFactory, method				* getControlPanels, variable named initialClassNameList.				* If the class is being registered with the factory using registerDataType,				* then you should not include the class name in the list (it will be found				* automatically), but if the DataType is part of the case statement in the				* factory method getDataTypeObject, then it does need to be explicitly listed				* in the getControlPanels method also.				*/"
"/*	 * When the table initiates editing and sets this field, remember the value as the	 * original value of the field	 */"
"/*     * Now the Popup-related methods. These are not quite symmetric with the     * in-cell calls because the conversion of the object into the text to     * display in the popup is handled internally to the DataType object inside     * getJTextArea(), so we do not need a ""renderObjectInPopup"" function     * visible to the rest of the world.     */"
// ALTER TABLE <table_name> ADD // FOREIGN KEY [<referential_constraint_name>] (<referencing_column>,...) // REFERENCES <referenced_table> [(<referenced_column>,...)] [<delete_rule>]
// CREATE SEQUENCE sequenceName // INCREMENT BY increment MINVALUE minimum MAXVALUE maxvalue // RESTART WITH restart CACHE cache CYCLE;
// Since we can use a correlated sub-query to update all rows in one statement, we don't care about the // set values, unless fromTables is null, in which case we go with a normal update. Using the set // values would require an update statement for each row in the merged table for each column that was // merged in, which is incredibly inefficient. However, the API is intended to support database // dialects that can't handle correlated sub-queries.
"// From PostgreSQL 8.2 documentation: // CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] name ON table [ USING method ] // 	( { column | ( expression ) } [ opclass ] [, ...] ) // 	[ WITH ( storage_parameter = value [, ... ] ) ] // 	[ TABLESPACE tablespace ] // 	[ WHERE predicate ]"
//////////////////////////////////////////////////////////////////////////////////////////// // The index is needed in case this method is called with schema = null, catalog = null // and two tables with the same name in different schemas/catalogs. // Without the index the same ordinal position could only occur once.
// Tables might have triggers that depend on sequences, so drop tables next.
"/*		 * TimesTen reference claims this is a supported operation, but it yields an exception for me: ALTER		 * TABLE test MODIFY noDefaultVarcharCol DEFAULT 'Default Value' Exception in thread ""main""		 * java.sql.SQLException: [TimesTen][TimesTen 6.0.1 ODBC Driver][TimesTen]TT1001: Syntax error in SQL		 * statement before or at: ""NODEFAULTVARCHARCOL"", character position: 26 -- file ""ptSqlY.y"", lineno		 * 1940, procedure ""sbPtParseSql()"" String alterClause = DialectUtils.MODIFY_CLAUSE; String		 * defaultClause = DialectUtils.DEFAULT_CLAUSE; return DialectUtils.getColumnDefaultAlterSQL(this, info,		 * alterClause, false, defaultClause); So, for now, just throw an exception:		 */"
//StyleConstants.setBackground(_saSetError, Color.red);
//StyleConstants.setBackground(saSetErrorHistory, Color.pink);
//i18n[MetaDataDecoratorDataSet.noJarFiles=No files specified in 'Extra ClassPath' tab for driver]
// If the source column is DISTINCT and the session is PostgreSQL, try to get the underlying type.
//_treeAPI.addDetailTab(DatabaseObjectType.INDEX, new DatabaseObjectInfoTab()); //_treeAPI.addDetailTab(DatabaseObjectType.INDEX, new IndexDetailsTab());
// Date/Time types never declare a length.  Just return something // larger than 0 so we bypass other checks above.
// db2pkCol is used to create a PK when using DB2. DB2 doesn't allow // you to add a PK to a table after it has been constructed unless the // column(s) that comprise the PK were originally there when created // *and* created not null.
// Oracle declares the column size to be 4000, regardless of the maximum // length of the CLOB field.  So if the Oracle BLOB/CLOB column contains  // values that exceed 4000 chars and we use colInfo.getColumnSize() we  // might create a destination column that is too small for the data  // that will be copied from Oracle.  We specify a default value of 4000 // in case the table has no records or if the BLOB/CLOB column contains  // only null values.
"/**	 * Reads the value from the specified ResultSet at column index index, and based on the type, calls the	 * appropriate setXXX method on ps with the value obtained.	 * 	 * @param ps	 * @param sourceColType	 * @param destColType	 * @param index	 * @param rs	 * @return a string representation of the value that was bound.	 * @throws SQLException	 */"
//it is always thrown as said in Embedded Derby API. //So it is not error it is info
// we are limiting some things. // if the string we have is less than the limit, then we are ok // and do not need to re-read (because we already have the whole thing).
///////////////////////////////////////////////////////////////////////////// // This theme was presented to SQuirreL by Karsten Lentzsch of jgoodies.com. // It is SQuirreL's default theme if the LAF plugin is not used. // Here we make the AllBluesBoldMetalTheme also available within the LAF plugin. // Thanks a lot Karsten.
/* Helper Methods */
"/*			GRANT 			    { ALL [ PRIVILEGES ] | permission [ ,...n ] } 			    { 			        [ ( column [ ,...n ] ) ] ON { table | view } 			        | ON { table | view } [ ( column [ ,...n ] ) ] 			        | ON { stored_procedure | extended_procedure } 			        | ON { user_defined_function }			    } 			TO security_account [ ,...n ] 			[ WITH GRANT OPTION ] 			[ AS { group | role } ] 						REVOKE [ GRANT OPTION FOR ] 			    { ALL [ PRIVILEGES ] | permission [ ,...n ] } 			    { 			        [ ( column [ ,...n ] ) ] ON { table | view } 			        | ON { table | view } [ ( column [ ,...n ] ) ] 			        | ON { stored_procedure | extended_procedure } 			        | ON { user_defined_function } 			    } 			{ TO | FROM } 			    security_account [ ,...n ] 			[ CASCADE ] 			[ AS { group | role } ] 			 */"
// If logging has changed.
// Convert the data into an ascii representation // using the standard convention
// this one does not, so they are not equal
// the other obj has not read the data yet.
// the other object has real data
// Close any previous logging.
"/*	 * Set the contents of the component without resetting the	 * original value.	 */"
"/*             * See if there is a plugin-registered DataTypeComponent that can             * handle this column.             */"
// we have the whole contents of the BLOB // tell user the data is truncated
// Create empty required files in user settings directory.
"/* 	 * Getters and Setters	 */"
// Oracle's 'TIMESTAMP WITH TIME ZONE' == -101 // Oracle's 'TIMESTAMP WITH LOCAL TIME ZONE' == // -102
//i18n[PrimaryKeyTab.title=Primary Key]
// if we have seen a property for this DataType before, then the // hashmap already exists.  Otherwise, we need to create it now.
"/*     * Properties settable by the user     */"
"//				Comparable c1 = (Comparable)data1; //				return c1.compareTo(data2) * _iAscending;"
"/*             * Do not return null when trying to use list(Filename Filter) on a             * file rather than a directory. All other ""list"" methods return             * null for this test case.             */"
// This is set here as SessionPanel.dispose() will attempt // to close the session.
//testLongVarbinaryColType(sourceName, destName); //testNumericColType(sourceName, destName); //testRealColType(sourceName, destName); //testSmallIntColType(sourceName, destName); //testTimestampColType(sourceName, destName); //testTimeColType(sourceName, destName); //testTinyIntColType(sourceName, destName);
"//		ISession mockSession = mockHelper.createMock(ISession.class); //		IApplication mockApplication = mockHelper.createMock(IApplication.class); //		expect(mockSession.getApplication()).andStubReturn(mockApplication); //		TaskThreadPool mockThreadPool = mockHelper.createMock(TaskThreadPool.class); //		mockThreadPool.addTask(EasyMock.isA(Runnable.class)); //		expectLastCall().anyTimes(); //		expect(mockApplication.getThreadPool()).andStubReturn(mockThreadPool); //		String[] tableTypes = new String[] { ""TABLE"" }; //		ISQLConnection mockSQLConnection = mockHelper.createMock(ISQLConnection.class); //		expect(mockSession.getSQLConnection()).andStubReturn(mockSQLConnection); //		SQLDatabaseMetaData mockSQLDatabaseMetaData = mockHelper.createMock(SQLDatabaseMetaData.class); //		expect(mockSQLConnection.getSQLMetaData()).andStubReturn(mockSQLDatabaseMetaData); //		expect(mockSQLDatabaseMetaData.getTableTypes()).andStubReturn(tableTypes); //		 //		 //		mockHelper.replayAll(); //		classUnderTest = new DefaultDatabaseExpander(mockSession); //		mockHelper.verifyAll(); //		mockHelper.resetAll();"
// This is a reasonable default and makes initialization code run well
/* Add it back */
// tell user the data is truncated
// Pane to add window content to.
// Put toolbar at top of window.
//First convert the string representation into the binary bytes it is describing
// The main list for window.
// List in the centre of the window.
// probably just no results -- return it empty.
// i18n[sqlbookmark.noEditSelection=Please select the bookmark to edit]
//i18n[VersionColumnsTab.hint=Show columns that are automatically  //updated when the row is updated]
// Create the Look and Feel register.
// At this point we know that we have a 1.4 or higher java runtime
// call the function in the app code that checks for unexpected // conditions in the current DB
"//                    colDefs[i].getSqlTypeName() + ""\n"" + //					((colDefs[i].isNullable()) ? ""nullable"" : ""not nullable"") + ""\n"" + //					""precision=""+ colDefs[i].getPrecision() + ""\n"" + //					""scale="" + colDefs[i].getScale();"
// private MainFrame _mainFrame;
// display error message and do not update the table
//1i8n[MetaDataDecoratorDataSet.classPathLabel=JDBC Driver CLASSPATH]
// 2. Display global preferences
// Oracle throws this ex on BLOB data // types
// Return empty list if source string is empty.
"//			else"
//final String columnClassName = _rsmd.getColumnClassName(idx);
//1i8n[MetaDataDecoratorDataSet.classNameLabel=JDBC Driver CLASSNAME]
"/*		 * First we have the cell-related and Text-table operations.		 */"
// if we are not limiting anything, return false
// if the value is null, then it was read ok
"//			prevent editing if text contains newlines"
// no indexes, i guess.
// init progressbar
// binary types
"// //		GUIUtils.setJButtonSizesTheSame(new JButton[] {_okBtn, _closeBtn, new JButton(i18n.CANCEL)});"
// Add end
"//	private final static ILogger s_log = //		LoggerController.createLogger(ResultSetColumnReader.class);"
// If the active window isn't for the currently selected session // then select the main window for the session.
"//		add(_okBtn); //		add(_closeBtn);"
/* the number of characters allowed in this field */
"/*		 * Now define the Popup-related operations.		 */"
// column is limited and length == limit, so need to re-read // column is not limited, so we have the whole thing
// Progress claims to support catalogs in data manip - but it actually doesn't honor that claim. 
// check for the case where we are limiting some columns // but not limiting this particular column
// if the data is longer than the limit, then we have previously // re-read the contents and we do not need to re-read it again
"/*		 * Return a JTextArea usable in the CellPopupDialog.		 */"
// set the flag for whether or not to limit only on specific fields
// first do special check to see if we should use LONGVARCHAR // in the WHERE clause. // (Oracle does not allow this.)
// What follows comes from the SQuirreL firebird dialect extension.
//DatabaseObjectType.SEQUENCE_TYPE_DBO=Sequence Type
// i18n[mysql.createTableBtn=Create table]
//DatabaseObjectType.PROC_TYPE_DBO=Stored Procedure Type
//DatabaseObjectType.INDEX_TYPE_DBO=Index Type
//DatabaseObjectType.DATABASE_TYPE_DBO=Database Type
//DatabaseObjectType.TABLE_TYPE_DBO=Table Type
// no permissions, i guess.
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.session.ISession#confirmCloseWithUnsavedEdits()     */"
// _mainFrame = new MainFrame(this);
//DatabaseObjectType.TRIGGER_TYPE_DBO=Trigger Type
//DatabaseObjectType.UDT_TYPE_DBO=UDT Type
//Add begin
// Removed for cut SQL
// Oracle's 'TIMESTAMP WITH TIME ZONE' == -101   // Oracle's 'TIMESTAMP WITH LOCAL TIME ZONE' == -102
// if value contains ":" it probably has a time component
"/*	 * Internal class for handling key events during editing	 * of both JTextField and JTextArea.	 * Since the Unknown data type is not editable either in the Cell or in the Popup,	 * we should never get here, but we have provided appropriate code just in case.	 */"
// tables that have at least one parent table
// t1 depends on t2
// Close the ResultSet's Statement if it is non-null. This frees open // cursors.
// Avoid the hit next time
// Close the ResultSet
// leave a blank line just to make it look a bit nicer
// build up datastructure. // final cache.
// t2 depends on t1
// tables that have at least one child table
// value is truncated, so do not use in WHERE clause
// data is longer than the limit, so we need to do more checking
// in Sybase, DEFAULT keyword must appear prior to NULL/NOT NULL
// i18n[DataSetUpdateableTableModelImpl.error.tablenotfound=Cannot edit table because table cannot be found\nor table name is not unique in DB.]
// no triggers, i guess.
//_thread = new Thread(new MemoryTimer()); //_thread.start();
// typeName // columnSize // decimalDigits // radix // isNullAllowable
// finally, try to set the catalog, which appears to be a NO-OP in the Informix driver.
// From MySQL 5.0 Reference: // ALTER TABLE tbl_name // ADD [CONSTRAINT symbol] FOREIGN KEY [id] (index_col_name, ...) // REFERENCES tbl_name (index_col_name, ...) // [ON DELETE {RESTRICT | CASCADE | SET NULL | NO ACTION}] // [ON UPDATE {RESTRICT | CASCADE | SET NULL | NO ACTION}]
// From MySQL 5.0 reference manual // // ALTER [IGNORE] TABLE tbl_name // alter_specification [, alter_specification] ... //  // alter_specification: // | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name,...)
// In Oracle, ON UPDATE actions are not supported
// just eat the exception
// During assignable checks many classes can't be loaded but don't cause problems // either. So we just issue an info.
// for string, just send the text to the output file
// Do not use Axion's bigint data type. // I get the following exception in my test: // org.axiondb.AxionException: // Invalid value "3074478078827346" for column // (BIGINT_TYPE_TABLE).BIGINT_COLUMN, expected numeric(20,10) : // data exception: numeric value out of range // Can someone please tell me why Axion expects big integers to be limited // to 20 precision and 10 scale?(Integers should have scale == 0, right?) // So an Axion bigint is limited to just 20 digits to the left of the // decimal point. // TODO: consider filing a bug report against Axion build M3. // 38 is the maximum precision for Axion's numeric type.
/* DB2 needs to reorg table after changing nullabolity */
"// UPDATE t SET a = (SELECT a FROM t2 WHERE t.b = t2.b); //		String templateStr =  //			""UPDATE $destTableName$ SET $columnName$ = "" + //			""(SELECT $columnName$ FROM $sourceTableName$ "" + //			""WHERE $sourceTableName$.$whereColumnName$ = $destTableName$.$whereColumnValue$""; //		StringTemplate st = new StringTemplate(templateStr);"
// data must fit into the column's max size
"//		return get().getProperty(""mrj.version"") != null;"
// We look backwards
"//	private static final StringManager s_stringMgr = //		StringManagerFactory.getStringManager(TableCopyCommand.class);"
// this will skip blank lines
// At least one version of PostgreSQL through the JDBC/ODBC // bridge returns an empty result set for the list of table // types. Another version of PostgreSQL returns 6 entries // of "SYSTEM TABLE" (which we have already filtered back to one).
"/*              * PointBase doesn't follow the spec with regard to column 11 of getColumns (should return a type              * constant, but instead returns a Boolean.              */"
// catalog // schema // tableName // columnName // keySequence // pkName
/* -- Path operations -- */
// i18n[dataTypeString.limitSize=Limit size of strings read during initial table load to max of:]
/////////////////////////////////////////////////////////////////////////////// // A deadlock chain is circular and does not have a defined beginning Pid. // In order to make the string representation of a deadlock chain unique // we put the smallest Pid at the beginning of the chain.
// re-calculate fullTablename the next time it's requested.
// i18n[dataTypeString.allowLongVarchar=Allow LONGVARCHAR type to be used in WHERE clause]
// forced edit mode ended because user changed the Session Properties
// Row 1
//Add session ended listener -- needs for Embedded Derby DB
/* -- Constructors -- */
// collation
// encountered a comment character at the beginning of // the line so just ignore the rest of the line
// i18n[dataTypeString.newlines=Show newlines as \\n within cells]
// length
// check box for whether to do any limiting of the data read during initial table load
/* there can be only one default in truth, but the model allows more than one. */
// This slash stuff is a ...
/* there can be only one PK in truth, but the model allows more than one. */
// check box for whether to use LONGVARCHAR in WHERE clause // (Oracle does not allow that type in WHERE clause)
/* register as a listener for mouse events */
// All sheets and cells added. Now write out the workbook
// Should there me a Max Number of threads?
/* -- Attribute accessors -- */
// Save off selections so that selection/focus can be restored  // later.
/* -- Path-component accessors -- */
/* IDataTypeComponent interface methods */
/* -- File operations -- */
/* -- Filesystem interface -- */
// CopyTableListener interface methods
// / <summary> // / How much usable data has been read into the stream, // / which will not always be as long as Buffer.Length. // / </summary>
// this flag is used as a loop exit condition // during parsing
// Only for restoring from XML etc.
//dbNameDialectMap.put("DB2/390", db2390Dialect); //dbNameDialectMap.put("DB2/400", db2400Dialect);
// tell the underlying data model to stop forcing edit mode and return to the // mode specified in the session parameters, // which includes telling the GUI to rebuild itself
"/*		TableModel tm = 		    new DefaultTableModel(new String [] { ""Table"", ""Column"" }, 4) {		        private static final long serialVersionUID = -8826914717673025881L;				        public boolean isCellEditable(int rowIndex, int columnIndex) {		            return false;		        }		};		*/"
// Yes 
//String sql = "A'''' sss ;  GO ;; GO'"; //String sql = "A\n--x\n--y\n/*\nB"; //String sql = "GO GO";
// Tabs to add to the database node.
// this column cannot be used in a WHERE clause
// i18n[mssql.scriptingOptions=Table Scripting Options]
// defines the opening angle of the arrow (not rad or so but something fancy)
// i18n[MysqlPlugin.showViewSource=Show view source]
// must not quote column names
// stored procedures and functions have that dangling ;version thing.
/* add users to the role. */
// Removed for copy SQL
// Do Nothing
// trim the column name in case of HADB
"/*public boolean isCellEditable(int rowIndex, int columnIndex) {        return (columnIndex == 0);    }*/"
// coll.add(new CreateTableAction(app, _resources, this));
// final IObjectTreeAPI api = Compat.getIObjectTreeAPI(session, this);
// Tab to add to view nodes.
//i18n[ColumnDetailsDialog.columnNameLabel=Column Name: ]
// Restore the paths
// now drop the first
// trim the table name in case of HADB
// Tabs to add to the user nodes.
/////////////////////////////////////////////////////////// // IBM DB 2 specific code to read view definitions.
// Options in popup menu.
"//	public SQLExecutionInfo(int idx) //	{ //		this(idx, """"); //	}"
"//		String CHECK_TABLE = ""checktable"";"
// Generic SQL
// Tabs to add to the table nodes.
// Show triggers for tables
// visible (gui) // ------------------------------------------------------------------------ // -- main
// _resources.addToMenu(coll.get(CreateTableAction.class), mysqlMenu);
"/*			 * Create the panel and add the GUI items to it			  */"
/////////////////////////////////////////////////////////// // Handling of comments
// fill in list of column names to check against
// This is responsible that comments are not in curQuery
// fill in the current limit length
// checkbox for displaying newlines as \n in-cell
// skip ahead so the cursor is now immediately after the begin comment string
// checkbox for using LONG in WHERE clause
"/*	 * @see ISQLEntryPanel#hasOwnUndoableManager()	 */"
"/* i do believe the getSimpleName() will end in ;1 if it's a procedure 			 * and ;0 if it's a UDF. */"
// add custom args given as parameter
// If the directory exists, add one to the directory number // (making it // a new directory name.)
/* these arrays are parallel. */
//       lblTitle.setBackground(new Color(204,204,204)); //       lblTitle.setName("lblTitle"); //       lblTitle.setOpaque(true); //       lblTitle.setText("Default values"); //       EtchedBorder etchedborder1 = new EtchedBorder(EtchedBorder.RAISED,null,null); //       lblTitle.setBorder(etchedborder1); //       jpanel1.add(lblTitle,cc.xywh(2,2,9,1));
// One or the other should be absolute on Windows or CE
// Should work for Unix/Windows.
// visible (gui) // ------------------------------------------------------------------------ // -- misc
// Test for long file names on Windows
// Drops the original column.
//Add end
// We assume here that if the pseudoColumn was used in the query, // then it was likely to have caused the SQLException.  If not,  // (length == 0), then retrying the query won't help - just throw // the exception.
//  newIndentDepth == indentDepth
"//		case SESSION_BEAN_GRANT_AND_REVOKE: //			return new FirebirdManagerGrantPreferenceBean();"
//////////////////////////////////////////////////////////////////// // These classes have no package see swingsetthemes.jar
"/* call sp_help on the stored procedure, then look at the second ResultSet for                      * the parameter information. */"
// set up array to return for public access to cmd line args
"//	private boolean _bStopExecution = false;"
//assume Unix or Linux
// Die 200 braucht nur SQL Server 7.0, // SQL Server 2000 nicht mehr sagt SAN
"//					_bStopExecution = false;"
// tabs for triggers
// _resources.addToMenu(coll.get(DropDatabaseAction.class), mysqlMenu);
// For windows, the file is being set hidden by the attrib // command.
// end ok
// i18n[mysql.copyOk=Ok]
//ISession[] getActiveSessions();
// Current Alias Schema properties dont want cache. // so we don't cache.
// Treating sequences as tables interferes with the operation of the // PostgreSQL plugin            
// Some drivers for DB2 don't return SYSFUN as a schema name. A // number of system stored procs are kept in this schema.
// Use a set rather than a list as some combinations of MS SQL and the // JDBC/ODBC return multiple copies of each table type.
// Treating indexes as tables interferes with the operation of the // PostgreSQL plugin
"/*	 * Ctor. Wraps this exception around another.	 *	 * @param	wrapee  The exception that this one is wrapped around.	 */"
// Inserts all keys into the new column depending on the content in the old column.
// Set dir to a non-existent directory inside the temporary // directory
// Test for creating a tempfile in a directory that does not exist.
// If we are blocked by a member of a deadlock chain // but do not belong to the deadlock chain ourselves // this prevents a forever loop.
// convert data from StringWrappers to Strings
// Testing two files, one with suffix ".tmp" and one with null
// this should throw an exception - should not allow multiple custom // tokenizers to be installed for a single session.
// See if this is the same statement
// pointer to the viewer // This is needed for insert and delete operations
// Couldn't locate the table - just try to fake it.
// add entries for insert and delete rows // only if table is updateable and already editable (ie. allowEditing is false)
// read succeeded, so reset the ClobDescriptor to match
//plugin supports only Session main window
// i18n ? What is this used for?
"// this didn't work       //		final int pos = getCaretPosition(); //		final Document doc = _textArea.getStyledDocument(); //		final Element docElem = doc.getDefaultRootElement(); //		final Element lineElem = docElem.getElement(getCaretLineNumber()); //		return lineElem.getElementIndex(pos);"
// Error protection against using a suffix without a "."?
// Don't care if it's not there
"//	private int _lastX;"
//            case ISA_SLASH: //               state = INIT; //               return SQLTokenContext.MINUS;
//////////////////////////////////////////////////////////// // The parser didn't get triggered on shift+insert. // We do it here by hand
// Tests for creating a tempfile with a filename shorter than 3 // characters.
// Check for identifier
// Formatting
// GOOD - Converting a URL to a file this way is fine when the file path contains spaces
// Test for trying to create a file in a directory that does not // exist.
// This column is created in the create script abd unused unless testing DB2
// First check aliases
"//		coll.add(new ScriptProcedureAction(app, _resources, this, _userSettingsFolder)); //		coll.add(new RefreshRepositoryAction(app, _resources, this, _userSettingsFolder));"
// CompletionInfos are still loading
// For example Postgres returns table names as datatypes. // In those cases this prevents to have the table names twice.
// cascade constraint clauses
"//	  _table.requestFocus();"
"//		mockResultSet = mockHelper.createMock(ResultSet.class);		"
// a valid File URI
// ALTER TABLE $tableName$ DROP CONSTRAINT $constraintName$
// Null tests 
// Java6 types // ROWID // NVARCHAR // NCHAR // LONGNVARCHAR // NCLOB // SQLXML
/* local expectations */
// Makes sure that the last name is always in top of the list.
// invalid file URIs // not // hierarchical // not file scheme // not absolute // non empty authority // non empty query // non empty fragment
// Regression test for HARMONY-382
// this function returns the resulting process from the exec
// Tests to see if the correct prefix was used to create the // tempfiles.
// remove old name list from map
//private DatabaseMetaData mockGenericDialectDBMetaData = mockHelper.createMock(DatabaseMetaData.class);
// Handle list of column names
// Code Completion has been done within Code Completion. // and relaunch completion popup.  
// cleanup and standardize the name, and add it to the map
// extract column names from text area
// Regression for HARMONY-2674
// IMessageHandler messageHandler = getEasyMockMessageHandler();
// Test create an illegal file
// Only remove the frame if the entire session is not closing
// canWrite only returns if the file exists so cannot be fully tested.
// Add an item to the Windows menu for this window and // store the menu item back in the internal frame.
//i18n[ColumnDetailsDialog.tableNameLabel=Table Name: ]
// Adds a foreign key constraint to the source table for the new column.
// if we get here, then everything worked correctly, so // tell user that data was put into file. // This is different from the Import strategy // because the user may not know the name of the file // that was used if they selected the automatic temp file // operation, or they may not know what directory the file // was actually put into, so this tells them the full file path.
//add(new DropSelectedTablesAction(_app));
// i18n[mysql.createTableComm=Create Table...]
// clear public column values for current line
// remove the function name
//new TestCompletionFunction(),
// Has to be done directly on the main frame because of racing condition at start up. //_aliasesListWindow.nowVisible(true);
// Needed for example on PostgreSQL
//private JCheckBox[] chFields;
//Set the list disabled if allfields of table are to be copied
// two columns to represent a Primary key in the pktest table
// i18n[mysql.sureDropping=Are you sure?]
// views will depend on tables, so drop them first
// Test for when long directory/file names in Windows
//Set the boolean value when the user selects b/w structure and data
//DefaultListModel listModel = (DefaultListModel) listFields.getModel();
//chFields = new JCheckBox[colNames.length];
//String path = "/downloads/";
// DROP INDEX indexName [ CASCADE ] [ ON <tableName> ];
// Just a Test
// i18n[codeCompletion.prefixConfig.deleteSelRows=Delete selected rows]
// i18n[codecompletion.prefs.table.udfWithoutParams=UDF without params]
"/*         * @see MouseMotionListener#mouseDragged(MouseEvent)         */"
// i18n[codeCompletion.globalFunctCompltion=If there is no matching prefix configuration functions should complete like:]
// These are not used
// Column name
// Dialect list
// i18n[codeCompletion.prefixConfig.newRow=Add new row]
// this will be our working buffer to hold data chunks // read in from the data file
// this holds all the values for switches that the user is allowed to set
"/* map of DBMS-specific registered data handlers.	 * The key is a string of the form:	 *   <SQL type as a string>:<SQL type name>	 * and the value is a factory that can create instances of DBMS-specific	 * DataTypeComponets.	 */"
//utilUnderTest = ;
/* logging mechanism for errors */
// by default, it is not running.
// int precision
// Delete all old temporary files
// This should just produce an error message.
// i18n[graph.zoom=Zoom]
//i18n[ColumnDetailsDialog.columnNameTootTip={0} does not  //support altering column name]
// Length
// Type list
//" a read "
// Scale
// Precision
// loop over the data stream until the end of data is found // or the end of the record is found
// Default value
// check to see if we've already found the end of data
// Nullable
// Comment
// Appending internationalized labels with optional components ------------
// use headersHolder.Length here in case headers is null
// Informix: when no database is given in the connect url, then no table types are returned.  The  // catalog can be changed which will select a database, but by that time it is too late.
// create a mapping of names if we have supertable info, since // we need to find the ITableInfo again for re-ordering.
// keep track of the last letter because we need // it for several key decisions
// can only happen for ESCAPE_MODE_BACKSLASH
// read qualified
// return the processed header data for this column
// Test data used in a few places below
// check to see if we have read the header record yet
// i18n[mysql.createAdd=Add]
// The following gives // java.sql.SQLException: Conversion to character stream failed
// we encountered a column with no data, so // just send the end column
// if there are duplicate header names, we will save the last one
// do nothing, this will trim leading whitespace // for both text qualified columns and non
// if no more data could be found, set flag stating that // the end of the data was found
// for hasMoreData to ever be false, all data would have had to // have been // copied to the raw buffer
// i18n[mysql.msgTableCreated=Table {0} created]
// must be called before setting startedColumn = false
// holder array needs to grow to be able to hold another column
// Name of the preferences files
// Create column list
// default behavior if no DataType object is to use the // DefaultColumnRenderer with no modification.
// private DBUtils dbUtils;
// default behavior: toString
"/*	 * Operations for Text and in-cell work	 */"
// default - if we do not know the data type, then we cannot re-read it
"/*	 * @see BaseDataSetViewerDestination#allRowsAdded()	 */"
"/*	 * @see IDataSetViewer#getRowCount()	 */"
// put the data into the DB and the on-screen JTable. // If there was a failure, do not make this form // go away since the user may be able to fix the problem // by changing the data.
// Appending Separators ---------------------------------------------------
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDriver#setWebSiteUrl(java.lang.String)     */"
//FA_xxx
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getDriverName()     */"
// We have done everything we can prior to this point // to ensure that the the file is accessible, but it is // still possible that an existing file was removed // at a bad moment.  Also, the compiler insists that we // put this in a try statement
// these are static instead of final so they can be changed in unit test // isn't visible outside this class and is only accessed once during // CsvReader construction
// ASCII/ANSI escape
//setPreferredSize(new Dimension(400, 400));
// having these as publicly accessible members will prevent // the overhead of the method call that exists on properties
// make sure to clear the flag for next // run of the loop
// i18n[Application.error.loaddatatypeprops=Unable to load DataType Properties selections from // persistant storage.]
//i18n[ImportTableDataCommand.settingsDialogTitle=Import file settings]
"/*	 * @see BaseDataSetViewerDestination#getRow(row)	 */"
// create the threads
"/*	 * @see BaseDataSetViewerDestination#addRow(Object[])	 */"
// Display the field attributes when selected in the list
// Has to be done directly on the main frame because of racing condition at start up. //_aliasesListWindow.nowVisible(false);
// i18n[ImportDataIntoTableExecutor.wrongFormat=Imported column has not the required format.\nLine is: {0}, column is: {1}]
// execute java process
// Show a warning dialog and let the user confirm it.
/* try it as a long in case the database driver didn't correctly identify an unsigned field */
// Set the attributes for the fields in the class FieldDetails
"/*	 * Operations for Popup work.	 */"
// Remove the Fields added to the list
// Reset the checkbox selected index false when fieldname gains focus
//i18n[ImportTableDataCommand.ioErrorOccured=An error occured while reading import file data.]
// Default Operation
// Always use "to" column name since name changes happen first
// wait for errThread to start
// no object, so do not assume binary editing will work
// first make sure that user's last input has been included // (It is too easy for user to enter data and forget to click // on another field to force it to be set.)
// i18n[ImportFileDialog.suggestColumns=Suggest columns (find matching columns)]
"//	/** Logger for this class. */ //	private final static ILogger s_log = //		LoggerController.createLogger(AlterTableCommand.class);"
// Add packages.
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getDatabaseProductVersion()     */"
// Make sure a deselect is followed by a select when a new selected Tab exists. 
// i18n[dataTypeBlob.blobType=BLOB   (SQL type 2004)]
// Set Look and Feel.
// i18n[PreferencesPanel.borderLabel={0} Script Settings]
//i18n[ImportFileDialog.headersIncluded=Headers in first line]
"//		initComponents();"
//i18n[ImportFileDialog.dataPreview=Data preview]
// Informix doesn't allow quoting column names.
// If the user picks auto-increment, auto-fill the "Fixed value" column with 0 for the start  // value if it is currently empty.
"/*         * @see MouseListener#mousePressed(MouseEvent)         */"
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.HibernateDialect#supportsSchemasInTableDefinition()	 */"
"/*         * @see MouseMotionListener#mouseMoved(MouseEvent)         */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getUserName()     */"
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.HibernateDialect#getLengthFunction()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.HibernateDialect#getColumnLength(int, int)	 */"
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.HibernateDialect#getMaxPrecision(int)	 */"
"/*	 * Make sure the entire BLOB data is read in.	 * Return true if it has been read successfully, and false if not.	 */"
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.HibernateDialect#getMaxScale(int)	 */"
// there was no data type object, so this data type is unknown // to squirrel and thus cannot be edited.
// if no object for this data type, then cannot use value in where clause
// let DataType object speak for itself
// if no DataType object, then there is nothing to handle File IO, // so cannot do it
"/*		* @see MouseListener#mouseReleased(MouseEvent)		*/"
"/*         * @see TableCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)         */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.IQueryTokenizer#getSQLStatementSeparator()     */"
// RENAME TABLE <tablename> TO <newtablename>;
"/*	 * @see TableModel#getColumnClass(int)	 */"
"/*	 * @see TableModel#getColumnName(int)	 */"
// i18n[sessionPropertiesPanel.catalogPrefix=Limit Catalog Objects using these comma-delimited prefixes:]
"/* (non-Javadoc)         * @see java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer.DataFlavor)         */"
"/* (non-Javadoc)         * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()         */"
// For all windows (other than the first one opened) for a session // add a number on the end of the title to differentiate them in // menus etc.
// remove from toplevel.
//place popup according to caret position and Placement
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getSystemFunctions()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsCatalogsInTableDefinitions()     */"
"/* Not cached.     * (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getCatalogs()     */"
// make a single list of all class names that we need to check. // Start with the names of known, standard classes that provide Control Panels
// i18n[popupeditableIoPanel.exportSuccess=Export Success]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsSchemasInDataManipulation()     */"
// <create_view_statement> ::= // CREATE [OR REPLACE] VIEW <table_name> [(<alias_name>,...)] AS <query_expression> [WITH CHECK OPTION]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsSchemas()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getJDBCVersion()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsStoredProcedures()     */"
// If the user has selected a non-cannonical Binary format, we need // to convert the text appropriately
"/*	 * Get control panels to let user adjust properties	 * on DataType classes.	 */"
// re-order nodes if the tables are stored hierachically
// i18n[ColorPropertiesController.title=Color Properties]
// Now go through the list in the given order to get the panels
// i18n[ImportFileDialog.fixedValue=Fixed value]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getCatalogTerm()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getURL()     */"
// store all plain table info we have.
"/*	 * Internal method used for both cell and popup work.	 */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getCatalogSeparator()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getProcedureTerm()     */"
// keep a hash table of the column objects // so we can reuse them.
// new table - clear hash map
/* See if we have a custom data-type registered. */
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getTypesDataSet()     */"
// Add node for each object.
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getJDBCMetaData()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsCatalogsInDataManipulation()     */"
"/* (non-Javadoc) * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getNumericFunctions() */"
// Create a test bean to clone
// i18n[ImportFileDialog.importFileColumn=Import file column]
// i18n[ProgressBarDialog.insertingRecordsLabel=Copying records]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getMetaDataSet()     */"
"/* (non-Javadoc) * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getUDTs(java.lang.String, java.lang.String, java.lang.String, int[]) */"
// set up for string types
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getDataTypes()     */"
// set up for integers
// remember this DataType object so we can reuse it
// -8 is ROWID in Oracle. It's a string, but it's auto-assigned
// No need to check column name validity when source and dest are // of the same type of database.
// Only do this if the object tree  // (and hence this contents tab) is visible.
// set up for Binary types
"/* (non-Javadoc) * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[], net.sourceforge.squirrel_sql.fw.sql.ProgressCallBack) */"
// set the singleton instance of the Saver class to be the // instance just created by the XMLBeanReader
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getTableTypes()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDriver#getWebSiteUrl()     */"
// get WHERE clause using original value
// only single dot
// If all columns in a table have empty strings as the headings then the // row height of the label row is zero. We dont want this.
//i18n[SpecialColumnMapping.AUTO_INCREMENT=Auto increment]
"/*       * (non-Javadoc)       *        * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getTablePrivileges(net.sourceforge.squirrel_sql.fw.sql.ITableInfo)       *        * @deprecated use getTablePrivilegesDataSet instead       */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getTimeDateFunctions()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getSQLKeywords()     */"
// i18n[laf.skinThemePackDir=Theme Pack Directory:]
// I18n[oracle.dbOutputTitle=Oracle DB output for: {0}]
// token kind // token position in the source text (starting at 0) // token column (starting at 0) // token line (starting at 1) // exact string value // token string value (uppercase if ignoreCase)
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getPrimaryKey(java.lang.String, java.lang.String, java.lang.String)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#applyChanges()     */"
// data type is unknown to us. // It may be an unusual type like "JAVA OBJECT" or "ARRAY", // or it may be a DBMS-specific type
// HELPERS
// i18n[sessionPropertiesPanel.objectTree=Object Tree]
"/*       * (non-Javadoc)       *        * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getColumnInfo(java.lang.String,       *      java.lang.String, java.lang.String)       */"
// i18n[laf.skinThemPack=Theme Pack:]
// i18n[LogPanel.titleInfo=Last log entry (Entry type: Info)]
// Helper Code **********************************************************
// an interface
//i18n[TablePriviligesTab.hint=Show access rights for the selected table]
"// no problem in conversion - proceed with update //						((DataSetViewerTablePanel.MyJTable)_table).setConvertedValueAt( //							newValue, _row, _col);"
// Whether or not to read date type columns with rs.getTimestamp() 
// original object // another object that has the // same values as the original // another object with different // values
// input scanner // last recognized token // lookahead token
// _mainFrame.setVisible(true); // _mainFrame.toFront(); // Required on Linux
"//	private final AliasWindowFactory _aliasWinFactory;"
// or a white space must be in front of the keyword.  
//wait for pending chars to be processed //post new characters
// i18n[LogPanel.titleWarn=Last log entry (Entry type: Warning)]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.MetaDataDataSet#get(int)     */"
// resolve Largest and *Preferred placements if possible
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#copyStarted(net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyEvent)     */"
/* Ignore that */
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.preferences.IGlobalPreferencesPanel#initialize(net.sourceforge.squirrel_sql.client.IApplication)	 */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ITableInfo#getImportedKeys()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ITableInfo#getExportedKeys()     */"
"/*	 * (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#next()	 */"
// construct the name of executable file
"/*	 * (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#reset()	 */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getHint()	 */"
"/* (non-Javadoc)	 * @see javax.swing.table.AbstractTableModel#setValueAt(java.lang.Object, int, int)	 */"
"/*	 * (non-Javadoc)	 * @see javax.swing.table.TableModel#getColumnCount()	 */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getTitle()	 */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getPanelComponent()	 */"
"/* (non-Javadoc)	 * @see javax.swing.table.TableModel#getValueAt(int, int)	 */"
"/* (non-Javadoc)	 * @see javax.swing.table.AbstractTableModel#isCellEditable(int, int)	 */"
"/*	 * (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#open()	 */"
// i18n[laf.jarZip=JAR/Zip files]
// fail ??
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#tableAnalysisStarted(net.sourceforge.squirrel_sql.plugins.dbcopy.event.AnalysisEvent)     */"
// ALTER TABLE <tableName> MODIFY <columnName> MEDIUMINT NOT NULL AUTO_INCREMENT PRIMARY KEY
"/*	 * (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dataimport.importer.IFileImporter#getDate(int)	 */"
// The edited column is in the resultset twice (example: SELECT MyName,* FROM MyTable). // We won't add the this col to the where clause.
// a class
// Check filename is preserved correctly
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#copyStarted()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#copyFinished(int)     */"
// i18n[SchemaPropertiesController.cacheToDelNotExists=Cache file for Alias "{0}" does not exist. No file was deleted]
// i18n[SchemaPropertiesController.hint=Schemas (loading and caching)]
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.event.CopyTableListener#tableCopyFinished(net.sourceforge.squirrel_sql.plugins.dbcopy.event.TableEvent)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.CopyPreference#deleteTableData(java.lang.String)     */"
// register custom DataTypeComponent factory for DB2 XML
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getAuthor()	 */"
"/* (non-Javadoc)         * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)         */"
// int sqlCode = sqlca.getSqlCode();
//schema should be identical to the statement. Ignore
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getHint()     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider#setDestSelectedDatabaseObject(net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo)     */"
// i18n[ColorPropertiesPanel.backgroundColorLabel=Background Color]
// Toolbar
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getDescriptiveName()	 */"
// Object Tree
// Status Bar
// Since catalog, schema and table are all identifiers, they all need  // to be quoted.
// convert user representation of null into an actual null
// do different things depending on data type
// insert the "WHERE" at the front if there is anything in the clause
// get the SQL session
// String msg = sqlca.getMessage();
/* Call class under test */
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getExternalService()     */"
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.plugin.ISessionPlugin#sessionStarted(net.sourceforge.squirrel_sql.client.session.ISession)	 */"
// DB2Sqlca sqlca = ((DB2Diagnosable) t).getSqlca();
// i18n[ColorPropertiesPanel.toolbarBackgroundColorBtnLabel=Choose Toolbar Color]
// Instructions
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider#getCopyDestSession()	 */"
// Toolbar Color Checkbox
// Object Tree Color checkbox
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider#getCopySourceSession()	 */"
// Set object tree color button
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.plugin.DefaultPlugin#getContributors()	 */"
// Set toolbar color button
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider#getSelectedDatabaseObjects()	 */"
// Set toolbar color panel
// i18n[SchemaPropertiesPanel.loadAndCacheAll=Load all and cache all Schemas]
// Common mocks 
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider#setDestCopySession(net.sourceforge.squirrel_sql.client.session.ISession)	 */"
// count how many rows this WHERE matches
// do the delete and add the number of rows deleted to the count
// int sqlstate = sqlca.getSqlState();
// treat it like a time - no date component
// look up the table in the EditWhereCols list
// Names of the various methods we need to invoke
// treat it like a timestamp
//  Set right/left margin
"/* (non-Javadoc)		 * @see javax.swing.table.DefaultTableModel#getColumnName(int)		 */"
// Either resultTabToReplace or _stickyTab must be not null here
// i18n[SchemaPropertiesPanel.CacheSchemaIndependentMetaData=Cache Schema independent meta data (Catalogs, Keywords, Data types, Global functions)]
// Oracle stores time information in java.sql.Types.Date columns // This tells Oracle that we are only talking about the date part.                    
"/* (non-Javadoc)		 * @see javax.swing.table.DefaultTableModel#getValueAt(int, int)		 */"
// i18n[SchemaPropertiesPanel.deleteCache=Delete cache file]
// Set up the hash table that contains the styles.
"/* (non-Javadoc)		 * @see javax.swing.table.DefaultTableModel#getRowCount()		 */"
// we may have more than one statement in sql at this point
// Map of JAR file URLs containing LAFs keyed by the LAF class name.
//private LAFPreferences _prefs;
// Accessible query
// i18n[dataTypeDate.typeDate=Date   (SQL type 91)]
// Load info about any extra LAFs supplied by the user.
// user said not to read any of the data from the clob
// User said to read at least some of the data from the clob
// CLOB exists, so try to read the data from it // based on the user's directions
// add name to comma-separated string for saving in properties
// i18n[PreferencesPanel.useCustomQTLabel=Use Custom Query Tokenizer]
// We have read in all properties.
// determine whether we read all there was in the clob or not
"/*			  * Create the panel and add the GUI items to it			 */"
"/*	 * @see ISQLEntryPanel#addCaretListener(CaretListener)	 */"
// skip blank lines
// User said to read at least some of the data from the blob
// i18n[laf.lookAndFeel=Look and Feel:]
// SkyBluer
"/*	 * Used by editing operations to reset the field to its original value.	 */"
"/*	 * The original value set in this cell by the table	 */"
// i18n[DataSetUpdateableTableModelImpl.error.tabledbmismatch=There may be a mismatch between the table and the DB:\n{0}\nDo you wish to proceed with the deletes anyway?]
"/*     * Cell related methods come next.     */"
// Plugin knows only how to script Views and Stored Procedures on DB2. // So if it's not a DB2 Session we tell SQuirreL the Plugin should not be used.
//setBounds(new Rectangle(600, 400));
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsPositionedUpdate()	 */"
// i18n[oracle.owner=Owner]
// Yes to all
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsDataDefinitionAndDataManipulationTransactions()	 */"
// another object with different values
//Turn off auto refresh when we are shutting down.
// i18n[LogPanel.titleUnknown=Last log entry (Entry type: Unknown)]
// in case superclass modifies them.
// i18n[UpdatePreferencesTab.hint=Software Update Settings]
// Adding 100 000 milliseconds to the orgTime of File f1
// Install DB2JCCExceptionFormatter iff we're using the JCC driver
// SGA query
// Since we are reading Meta-data about the DB, we should // never see a BLOB. If we do, the contents are not // interpretable // by Squirrel, so just tell the user that it is a BLOB and // that it // has data.
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.util.IOptionPanel#getPanelComponent()    * Return the panel that will contain the prefernces ui.    *    * @return Panel containing preferences.    */"
// Folder that stores Look and Feel jars.
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.client.session.ISQLEntryPanel#setUndoManager(javax.swing.undo.UndoManager)	 */"
"//			JScrollPane sp = new JScrollPane(createDataTypesPanel()); //			sp.setPreferredSize(new Dimension(600, 450)); //			add(sp, gbc);"
// Sunny day
// try to save the selection. // do not dispose of this panel if there is a problem
// try to delete
// Cache
"/* (non-Javadoc)	 * @see net.sourceforge.squirrel_sql.client.session.event.ISQLExecutionListener#statementExecuting(java.lang.String)	 */"
// Cycled
/* Name of directory to store extra LAFs in for the user. */
// Sybase 12.5 doesn't support quotation marks for identifiers, yet  // reports " as the identifier quote string - go figure!
// i18n[generalSessionPropertiesPanel.editableTable=Editable Table]
// add right-click menu to cell editor
// i18n[generalSessionPropertiesPanel.dataTYpe2='General Preferences' window under the 'Data Type Controls' tab.]
// we return something valid even if there is a DB error
// if we could not identify which table to edit, just return
// the whole clob has been previously read in
// init class under test
// no underlying data, so cannot be changed
// Causes NPE in JDK 1.3.1 //_contentsTxt.setText("");
// create mocks to be injected
// Not a real database, but no driver should match this.
// Creating a filter that catches files.
// cannot edit something that we do not know anything about
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ProgressCallBack#currentlyLoading(java.lang.String)     */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#ownInsertsAreVisible(int)	 */"
/* Class under test */
// Cancel
// i18n[laf.themePack=Theme Pack:]
// handle an error in conversion of text to object
// item.setIcon(null);
// i18n[ViewLogsSheet.error.setcaret=Error positioning caret in log text component]
// now match the columns
// Hand the current text to the DataType object. // DataType object is responsible for validating // that the text makes sense for this type of object // and converting it to the proper form for output. // All errors are handled as IOExceptions
// hand file output stream to DataType object for export // Also, handle File IO errors here so that DataType objects // do not have to.
// i18n[popupeditableIoPanel.errorWritingFile=There was an error while writing file {0}.\nThe error was:\n{1}]
// Count of available or free threads.
// i18n[dataTypeClob.typeClob=CLOB   (SQL type 2005)]
// i18n[SchemaTableCboItem.schemaID.loadAndCache=Load and cache]
// Don't use bit(1) for boolean as Frontbase then reports it as BINARY // type instead of BIT.
// Anticipate the same issue for VARBINARY as for BINARY and LONGVARBINARY. // registerColumnType(Types.VARBINARY, 2147000000, "bit varying($l)");
// field for size of text to read
// add listener to buttons
// Instance under test
//no need to return if completion is identical
// original object
// short pseudocolumn
// assuming that the columns in table match colDefs, // bump the index to point to the next colDef entry
// start the string for use in the prepared statment
// add a variable position for each of the columns
// Test case for 1742033 (Skipping quoting escape in table dropping)
// replace the last "," with ")"
// i18n[FileManager.confirm.filereplace={0} \nalready exists. Do you want to replace it?]
// public String getDropIndexSQL(String tableName, String indexName, boolean cascade, // DatabaseObjectQualifier qualifier, SqlGenerationPreferences prefs) // { // return null; // }
// Setup values.length columns
// another object that has the same values as the original
"/*						  * Create the panel and add the GUI items to it							*/"
// try as an alias
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData#getExportedKeysInfo(net.sourceforge.squirrel_sql.fw.sql.ITableInfo)     */"
"/* (non-Javadoc)     * @see java.lang.Comparable#compareTo(java.lang.Object)     */"
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ITableInfo#setExportedKeys(net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo[])     */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#othersUpdatesAreVisible(int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#isCatalogAtStart()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsCatalogsInDataManipulation()	 */"
//_colDefs = hdgs;
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.util.IMessageHandler#showWarningMessage(java.lang.String)     */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#nullsAreSortedLow()	 */"
// could also be a table name
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSchemasInDataManipulation()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#allProceduresAreCallable()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#locatorsUpdateCopy()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#getTableTypes()	 */"
// Setup one row
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#insertsAreDetected(int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#doesMaxRowSizeIncludeBlobs()	 */"
// Constructor Tests
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#allTablesAreSelectable()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#nullsAreSortedAtEnd()	 */"
"//				paintNumWaitingGC(g);"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#nullPlusNonNullIsNull()	 */"
// Mocks
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#othersDeletesAreVisible(int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsCoreSQLGrammar()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#storesUpperCaseIdentifiers()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#storesLowerCaseIdentifiers()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsBatchUpdates()	 */"
// Es mach nichts, wenn es die PID nicht g锟絙e. // Sie wird dann einfach oben nicht zugeordnet.
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#setupDriverName(java.lang.String)	 */"
"/*     * Properties set-able by the user     */"
"/*	 * Ctor.	 *	 * @param	msg	 Message describing the error.	 */"
// insert succeeded
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#storesMixedCaseIdentifiers()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#storesMixedCaseQuotedIdentifiers()	 */"
// Derby requires that columns be not-null before applying a unique constraint
// i18n[WindowManager.error.bringtofront=Error bringing internal frame to the front]
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsAlterTableWithAddColumn()	 */"
// core artifacts are not displayed
//(ALLOWS_EDITING_FALSE == ret)
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsANSI92IntermediateSQL()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsAlterTableWithDropColumn()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsANSI92EntryLevelSQL()	 */"
// = new QueryTree();
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsCatalogsInTableDefinitions()	 */"
// i18n[mssql.allTables=All tables]
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsConvert(int, int)	 */"
"// JASON: Removed as part of patch //	void addSessionListener(ISessionListener lis);"
// Process each individual query.
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsCatalogsInProcedureCalls()	 */"
// Some driver don't correctly support setMaxRows. In // these cases use setMaxRows only if this is a // SELECT.
// No decimal digits strongly suggests an INTEGER of some type. // Since it's not real easy to tell what kind of int (int2, int4, int8) // just make it an int8 (i.e. BIGINT)
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsCatalogsInPrivilegeDefinitions()	 */"
// Numbers and such.
// i18n[codeCompletion.spWithParams=stored procedure with parameter info: {call mySP(<IN INTEGER tid>)}]
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsConvert()	 */"
// Start loading table/column info about the current database.
// driver returns 8 for "long byte", yet it can store 2GB of data.
// values for how to use timestamps in WHERE clauses
// data is not editable in popup
"/*		 * override the JTable method so that whenever something asks for		 * the cellEditor, we save a reference to that cell editor.		 * Our ASSUMPTION is that the cell editor is only requested		 * when it is about to be activated.		 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsExtendedSQLGrammar()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsDataManipulationTransactionsOnly()	 */"
// Display any warnings generated by the SQL execution.
// If there is no sqlPanelAPI (e.g. the Object tree find editor) we assume no parser is necessary and thus provide a dummy impl.
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsPositionedDelete()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsLikeEscapeClause()	 */"
// i18n[mssql.allRules=All rules]
// i18n[oracle.objectName=Object Name]
// ... now we have reached an output that is not a result. We now have to aks for this outputs update count.
// get the values from the "use" list and convert to sorted set
// String ST_CREATE_INDEX_STYLE_TWO = // "CREATE $unique$ $storageOption$ INDEX $indexName$ " + // "ON $tableName$ ( $columnName; separator=\",\"$ )";
// Removed for close Session
// i18n[oracle.objectType=Object Type]
// Define whether or not to use Timestamp in internally generated WHERE // clauses, and if so what format to use.
// As a last resort, get the length of the longest value in the  // specified column.
// Yes || Yes to all
// i18n[sessionPropertiesPanel.limitRowsContents=Contents - Limit rows]
// Loop through source records...
// use clone here to prevent the outside code from // setting values on the array directly, which would // throw off the index lookup based on header name
// Don't fool around with manual commit later.
//ISession[] activeSessions = _plugin.getApplication().getSessionManager().getActiveSessions();
// I18n[oracle.invalidTitle=Oracle invalid objects for: {0}]
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsExpressionsInOrderBy()	 */"
// init mocks
// MySQL driver gets unhappy when we use the same  // PreparedStatement to bind null and non-null LOB variables // without clearing the parameters first.
// i18n[sessionPropertiesPanel.showRowCount=Show Row Count for Tables (can slow application)]
// ICommand Interface implementation
// If source column is type 1111 (OTHER), try to use the  // column type name to find a type that isn't 1111.
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsGroupByUnrelated()	 */"
// check to see if our current holder array for // column chunks is still big enough to handle another // column chunk
// / <summary> // / The position of the cursor in the buffer when the // / current column was started or the last time data // / was moved out to the column buffer. // / </summary>
// alter column clauses
// "RENAME VIEW $oldObjectName$ TO $newObjectName$";
// alter name clauses
// alter default clauses
// "RENAME TABLE $oldObjectName$ TO $newObjectName$";
// i18n[I18n.SourceDirDoesNotExist=Source directory {0} does not exist.]
/* Not needed */
"/*	 * 1968807: Unsigned INT problem with IMPORT FILE functionality	 * 	 * If we are working with a signed integer, then it should be ok to store in a Java integer which is 	 * always signed.  However, if we are working with an unsigned integer type, Java doesn't have this so 	 * use a long instead.  	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsGroupByBeyondSelect()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsFullOuterJoins()	 */"
// Nothing to do for an SQL internal frame
// Paste action object tree types
// Can't paste from a session that is no longer around.
// md = new MemoryDiagnostics();
// Copy action object tree types
// Row 2
// Creating a filter that catches "*.tmp" files.
// i18n[HelpViewerWindow.changelogs=Change Logs]
// filter the list of all DB objects looking for things with the given name
// i18n[HelpViewerWindow.error.loadwelcomefile=Error retrieving Help file URL for {0}]
// Clauses
// Add SQuirreL Licence to the Licence node.
// alter type clauses
// sequence clauses
// Strip local part of URL.
// drop column clauses
// Renderer for tree.
// DROP INDEX indexName [ CASCADE ];
// Add SQuirreL help to the Help node.
// First put the Welcome to SQuirreL node.
//setModel(_model);
// When the user pastes on a TABLE label which is located under a  // schema/catalog, build the schema DatabaseObjectInfo.
// ok, that didn't work - let's see if the table looks fully qualified. // if so, we'll split the name from the schema/catalog and try that.
// i18n[sessionPropertiesSheet.sessionProperties=- Session Properties]
// calculate the average time / item 
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsNamedParameters()	 */"
"//	  addTreeExpansionListener(new MyExpansionListener());"
// Register so that we can display different tooltips depending // which entry in tree mouse is over.
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsMixedCaseQuotedIdentifiers()	 */"
"//   	FileWrapper mockDownloadsDirectory = mockHelper.createMock(""mockDownloadsDirectory"", FileWrapper.class); //   	expect(mockDownloadsDirectory.isDirectory()).andStubReturn(true); //   	expect(mockFileWrapperFactory.create(mockUpdateDirectory, UpdateUtil.DOWNLOADS_DIR_NAME)); //   	expectLastCall().andReturn(mockDownloadsDirectory);"
//ISession sourceSession = sessionInfoProv.getCopySourceSession(); //ISession destSession = sessionInfoProv.getCopyDestSession();
"//		_exportDriversChk.addActionListener(_mediator); //		_exportAliasesChk.addActionListener(_mediator); // //		_exportPrefsBtn.addActionListener(new BrowseButtonListener(_exportPrefsText)); //		_exportDriversBtn.addActionListener(new BrowseButtonListener( _exportDriversText)); //		_exportAliasesBtn.addActionListener(new BrowseButtonListener(_exportAliasesText)); // //		_exportPrefsChk.setSelected(prefs.getExportPreferences()); //		_exportDriversChk.setSelected(prefs.getExportDrivers()); //		_exportAliasesChk.setSelected(prefs.getExportAliases()); // //		_includeUserNamesChk.setSelected(prefs.getIncludeUserNames()); //		_includePasswordsChk.setSelected(prefs.getIncludePasswords()); // //		_exportPrefsText.setText(prefs.getPreferencesFileName()); //		_exportDriversText.setText(prefs.getDriversFileName()); //		_exportAliasesText.setText(prefs.getAliasesFileName());"
// We could make this expectation more restrictive currently. However, we might have impls that have  // wildly different queries in the future.  We don't want to sacrifice flexibility to use this test // for a "perceived" benefit of mirroring the current implementations.
"//		final FormLayout layout = new FormLayout( //				""3dlu, 75dlu:grow(1.0), 3dlu"", //				""center:pref:grow(1.0), 8dlu, bottom:pref""); //		final DefaultFormBuilder builder = new DefaultFormBuilder(layout); //		builder.setDefaultDialogBorder(); //		builder.setLeadingColumnOffset(1); // //		builder.append(buildMainPanel(session, ti)); //		builder.nextLine(); //		builder.appendSeparator(); //		builder.nextLine(); //		builder.append(buildToolBar()); // //		return builder.getPanel();"
"//		boolean isSelected = _exportPrefsChk.isSelected(); //		_exportPrefsText.setEditable(isSelected); //		_exportPrefsBtn.setEnabled(isSelected); // //		isSelected = _exportDriversChk.isSelected(); //		_exportDriversText.setEditable(isSelected); //		_exportDriversBtn.setEnabled(isSelected); // //		isSelected = _exportAliasesChk.isSelected(); //		_exportAliasesText.setEditable(isSelected); //		_exportAliasesBtn.setEnabled(isSelected); //		_includeUserNamesChk.setEnabled(isSelected); //		_includePasswordsChk.setEnabled(isSelected);"
// "server" // "port" // "database file"
// Data 
"//	private javax.swing.JComboBox cbFieldType; //	private javax.swing.JCheckBox chAutoIncrement; //	private javax.swing.JCheckBox chBinary; //	private javax.swing.JCheckBox chNotNull; //	private javax.swing.JCheckBox chUnsigned; //	private javax.swing.JLabel lbAttributes; //	private javax.swing.JLabel lbDefault; //	private javax.swing.JLabel lbFieldLength; //	private javax.swing.JLabel lbFieldName; //	private javax.swing.JLabel lbFieldType; //	private javax.swing.JLabel lbFields; //	private javax.swing.JTextField tfFieldDefault; //	private javax.swing.JTextField tfFieldLength; //	private javax.swing.JComboBox cbFieldName; //	private javax.swing.JButton buttonUpdate; //	private javax.swing.JButton buttonCancel; //	private JDialog _dlog; //	private FieldDetails fd; //	private int selectedIndex; //	private DBUtils dbUtils; //	protected String SQLCommandRoot = ""ALTER TABLE ""; //	protected String SQLCommand = """"; // End of variables declaration"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsLimitedOuterJoins()	 */"
// "ignore bad checksums" // "ignore transaction in Limbo"
// "backup metadata only" // "inhibit garbage collection" // "save old style metadata descriptions" // "transportable format" // "backup external files as tables" // "start backup"
// DROP VIEW viewName CASCADE;
"/*		 * DB2 doesn't support adding an auto-increment column once the table has already been created. So this		 * can simulate one using trigger on the table to access a sequence. Found this idea at wikibooks:		 * http://en.wikibooks.org/wiki/SQL_dialects_reference/Data_structure_definition/Auto-increment_column		 * CREATE SEQUENCE sequence_name; CREATE TABLE table_name ( column_name INT ); CREATE TRIGGER		 * insert_trigger NO CASCADE BEFORE INSERT ON table_name REFERENCING NEW AS n FOR EACH ROW SET		 * n.column_name = NEXTVAL FOR sequence_name;		 */"
// tell the rest of the world that the table has changed. // The 'fire' method used here is very course - it says that the whole table // has been changed when really only one row has been added. // However, finer-grained methods did not seem to cause the right // effect, so I'm using this one untill someone reports a problem with it. // Also, if either of these notifications (the actual model and the sortable // model) are eliminated, it either throws an exception or does not update // the GUI.  Go figure. // Finally, the 'fire' on the _acutalModel is triggered from this method // rather than from inside the MyJTable code because the add() method used // to add a row is also used when loading the table with lots of rows, and // in that case we do not want to generate events until all of the rows // have been added, so the 'fire' cannot happen there.
// If we get here, then no data type object was found for this column. // (should not get here because switch default returns null.)
// I tried to use the length from the source database (PostgreSQL) which // yielded 8192 for this test. So the column def in FB was // binary_column bit varying(8192). Yet it gave me an exception that // indicated truncation (string data right truncation???) // So for now, go back to hard-coded maximal length. // registerColumnType(Types.BINARY, 2147000000,"bit varying($l)");
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo#getSimpleName()     */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsMinimumSQLGrammar()	 */"
// Ok, maybe catalog was really a schema instead.
// i18n[I18n.EditorCommand=Editor command]
// must not qualify the new table name
//i18n[DumpApplicationCommand.error.deletetempfile=Couldn't delete temporary DumpSession file]
// i18n[codecompletion.beingLoaded=Code competion infomation is still being loaded.\nTry again later.]
// Has to be done here e.g. when "Close All Sessions" menu was used.
//i18n[AbstractRefactoringDialog.editButtonLabel=Edit SQL]
//i18n[DataSetUpdateableTableModelImpl.error.updateproblem=There  //was a problem reported during the update.   //The DB message was:\n{0}\nThis may or may not be serious depending  //on the above message.\nThe data was probably not changed in the  //database.\nYou may need to refresh the table to get an accurate  //view of the current data.]
// i18n[sqlval.info=This plugin uses version 1.0 of the SQL Validator Web Service developed by MimerSQL http://sqlvalidator.mimer.com. The SQL Statement is stored anonymously to be used by the ISO SQL Standards committee.]
// Postgres pg_proc table doesn't appear to have schema.  I couldn't // locate another table to join with to get this info either.
//i18n[ProgressBarDialog.error.getdialog=getDialog: unable to invokeAndWait for dialog]
// TODO: check to be sure that the source and destination schemas are // different. Abort if they are the same and inform the user.
// ALTER VIEW oldTableName RENAME TO newTableName; // RENAME oldTableName TO newTableName;
// How many items left
// Column 0 // Row 1
// Removed for the tools popup
//This is for brute force detection of BLOB/CLOB lengths if necessary
"//	private boolean _showLineNumbers = false;"
// i18n[editextras.errorQuoteSql=Error processing Quote SQL command: {0}]
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsMultipleResultSets()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsMultipleOpenResults()	 */"
// i18n[HQLPanelController.hqlToSqlSuccess=Generated {0} SQL(s) in {1} milliseconds.]
// Add SQuirreL Change Log to the Licence node.
// This is for brute force detection of BLOB/CLOB lengths if necessary
// view clauses
// Check for digit
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsNonNullableColumns()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsOuterJoins()	 */"
// Don't try to find it if we have already created it.
// Test for NPE in DBUtil.getForeignKeySQL when the TableInfo // returns null for getImportedKeys
// case shouldn't be changed in this test because the context is the  // source database.
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsOpenStatementsAcrossRollback()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsOpenCursorsAcrossRollback()	 */"
// generate contents file.
// Add plugin help, licence and change log documents to the tree.
// Licence document.
// Size non-tool child window.
// Help document.
// FAQ.
// Change log.
"//						final String docTitle = (String)_docTitles.get(i);"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsOpenStatementsAcrossCommit()	 */"
// ExtCaret highlighting options
// *must* be done in the GUI thread
// Probably shutting down.
// MySQL shows databases as "CATALOGS" not "SCHEMAS"
// no new here, method is called very often.
/* Spring-injected dependencies */
// Assert is flawed because canWrite does not work. // assertTrue("File f2 Is Not Set To ReadOnly." , !f2.canWrite());
// Attempt to write to a file that has previously been written // to. // and is now set to read only.
// Assert is flawed because canWrite does not work. // assertTrue("File f1 Is Not Set To ReadOnly." , !f1.canWrite());
// Regression test for HARMONY-3207 // current directory
// convert each string into key+HashMap and fill it into the data
// MQTs only ever have one sql statement
// TimesTen allows a maximum fetch size of 128.
// i18n[DBUtil.info.executeupdate=executeupdate: Running SQL:\n '{0}']
// get ascii stream from rs
// corresponding to COLUMNS
// _knownTables is just a cache to prevent creating a new String each time
// read rs input stream write to file output stream
"/* (non-Javadoc)     * @see javax.swing.event.UndoableEditListener#undoableEditHappened(javax.swing.event.UndoableEditEvent)     */"
// Using a thread for this gets rid of most of the "white flash".
// Dump drivers
// super.isCellEditable(row, column);
/* Do Nothing - this can happen when the table doesn't exist */
//i18n[DumpApplicationCommand.error.dumpingaliases=Error dumping aliases]
// MySQL uses catalogs and not schemas
// Dump meta data.
// Dump driver information.
// Dump session properties.
// Dump general connection info.
// Dump data types.
// Dump schemas.
// Dump catalogs.
//testDecimalColType(sourceName, destName); //testDoubleColType(sourceName, destName); //testFloatColType(sourceName, destName);
// Add all panels to the tabbed panel.
// if we failed to bind the blob in a file, try memory.
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSubqueriesInComparisons()	 */"
// load views with catalog = doi.getCatalog() and schema = doi.getSchema()
// Go thru all plugins attached to this session asking for panels.
// Fallback to the old method, going directly to the database // instead // of using SchemaInfo, since SchemaInfo didn't have it.
//      _useDriverPropsChk.setSelected(_alias.getUseDriverProperties()); //      _driverPropsBtn.setEnabled(_useDriverPropsChk.isSelected()); // This is mainly for long URLs that cannot be fully // displayed in the label.
// i18n[DBUtil.info.bindclobfile=bindClobVarInFile: Opening temp file '{0}']
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsResultSetHoldability(int)	 */"
// Test for toURL with a file.
// No invalid columns in this TableModel implementation
// Test for toURL when the file is a directory.
//implements ActionListener
//Make it transparent
"/*	 * @see IClientSessionAction#setSession(ISession)	 */"
// Roles
// Tables and Views
// i18n[DeleteTablesCommand.loadingPrefix=Analyzing table:]
// End GWG format check code
// i18n[DBUtil.error.bindblobfailure=bindBlobVar: failed to // bind blob using filesystem - attempting to bind blob using // memory]
// Get all the selected object names and place in a comma separated list.
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsResultSetType(int)	 */"
// Remove trailing ", ".
// Stop refresh if it is running.
// i18n[DBUtil.error.unknowntype=Unknown Java SQL column type: '{0}']
// Can't delete records in snapshots (Oracle materialized views)
// i18n[ViewLogsSheet.error.processinglogfile=Error occured processing log file]
// i18n[ViewLogsSheet.info.nulllogfile=Null log file name]
// Position to the start of the last line in log.
// COLUMN_NAME
// i18n[DBUtil.info.bindblobmem=bindBlobVarInMemory: binding '{0}' bytes]
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsStatementPooling()	 */"
// i18n[DBUtil.info.bindblobfile=bindBlobVarInFile: Opening temp file '{0}']
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSchemasInPrivilegeDefinitions()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSavepoints()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSchemasInProcedureCalls()	 */"
//Close the proper tab by clicking the button //addActionListener(this);
//we don't want to update UI for this button
//paint the cross
// i18n[DBUtil.info.bindcloblength=bindClobVarInFile: writing '{0}' bytes.]
// Group all columns by index
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsUnionAll()	 */"
// put this into the data array
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSubqueriesInExists()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsUnion()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsTransactionIsolationLevel(int)	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsSubqueriesInQuantifieds()	 */"
// GWG format check code follows...
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#supportsTableCorrelationNames()	 */"
// If the user wants the primary key copied and the source session // isn't Axion (Axion throws SQLException for getPrimaryKeys())
// data // ------------------------------------------------------------------------
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#usesLocalFiles()	 */"
"/* (non-Javadoc)	 * @see com.mockobjects.sql.MockDatabaseMetaData#updatesAreDetected(int)	 */"
"/* (non-Javadoc)         * @see net.sourceforge.squirrel_sql.client.session.mainpanel.IMainPanelTab#getTitle()         */"
"/* (non-Javadoc)         * @see java.lang.Comparable#compareTo(java.lang.Object)         */"
"/* (non-Javadoc)         * @see net.sourceforge.squirrel_sql.client.session.mainpanel.IMainPanelTab#getHint()         */"
"/* (non-Javadoc)         * @see net.sourceforge.squirrel_sql.client.session.mainpanel.IMainPanelTab#getComponent()         */"
// Note: SessionInternalFrame and SQLinternalFrame should never provide // a ToolsPopupAccessor. Their Tools Popup ist configured in the SyntaxPlugin class // with standard Actions from ActionCollection.
// Without this the split moves when the window is resized.
/*, IHasName*/
// we are at the last one in the list
"//	private boolean _currentLineHighlighting = true;"
"/*        * Append the new tables to the new array, starting at the end of the        * original        */"
// set dialog
/* Handle squirrel-sql.jar and documentation archive carefully - they live at the top */
//TreeNode Interface
//i8n[syntax.abrevNewLineNote=Use \n in corrections for line break. Note: Bookmarks are more powerful than abreviations.]
"/*		 * Only reformat SQLWarning:		 */"
// i18n[SchemaInfo.loadingSchemas=Loading schemas]
// i18n[DumpSessionAction.success=Session successfuly dumped to: {0}]
// i18n[SchemaInfo.loadingFunctions=Loading functions]
"//	      JScrollPane jscrollpane1 = new JScrollPane();"
// put the map into the tables db with the table name as the key
// Extra keywords that this DBMS supports.
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#getStringFunctions()     */"
// Types of the columns.
// i18n[editWhereColsPanel.limitColsInCell=Limit Columns in Cell Edit]
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.HibernateDialect#getMaxFunction()	 */"
"/*	 * (non-Javadoc)	 * 	 * @see net.sourceforge.squirrel_sql.plugins.dbcopy.dialects.HibernateDialect#getPrecisionDigits(int, int)	 */"
// replace the next question mark with nextVal
/* override common behavior to use drop column style two */
//i18n[explainplanexecuter.objectName=Object Name]
// The Math.min is for the Caret at the end of the text
"/* (non-Javadoc)     * @see net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData#supportsSavepoints()     */"
// // No go through the parse SQL and build the final SQL replacing // parameters with values is goes. //
"/*    * (non-Javadoc)    *     * @see net.sourceforge.squirrel_sql.fw.datasetviewer.IDataSet#get(int)    */"
//result = false;
"//	private boolean _blockCaretEnabled = false;"
/////////////////////////////////////////////////////////// // Sybase ASE specific code to read view definitions.
// tree
//, true, true, true, true);
// i18n[oracle.explainPlan=Explain Plan]
// Skip the artifact if it is identical to the one that is already installed
//throws IOException
// Open the session.
"//	private boolean _showEndOfLineMarkers = false;"
// Time to wait between checks that the event dispatch thread isn't hung.
// if the user has said to not use this column, then skip it
// i18n[PreLaunchHelperImpl.restoreFailedMessage=Restore from backup failed. Re-installation may be // required.
// everything seems to have worked ok
// f is a module
// The SessionManager is global to SQuirreL. // If we don't remove the listeners the // Session won't get Garbeage Collected.
// Open connection to the webservice.
// [EXEC SQL] CREATE VIEW view_name // [(column_name {, column_name})] // AS select_stmt // [WITH CHECK OPTION]
// 1 = interactive, 0 = batch
// Test for toURI with a file name with illegal chars.
"/*	 * @see ISQLEntryPanel#removeCaretListener(CaretListener)	 */"
// Ensure that the proper type of Object is selected in the Object Tree before allowing the SQL Filter to be activated.
//Empty body
//Empty Body
// -- edit
// select
// load tables with catalog = doi.getCatalog() and schema = doi.getSchema()
// load procedures with catalog = null
// i18n[InformixPlugin.showViewSource=Show view source]
// Attempt to write to a file that is setReadOnly.
"/*		DBCopyGlobalPreferencesTab tab = new DBCopyGlobalPreferencesTab();		return new IGlobalPreferencesPanel[] { tab };		*/"
"/*		 * (non-Javadoc)		 * 		 * @see net.sourceforge.squirrel_sql.client.plugin.IPlugin#getDescriptiveName()		 */"
"//	private JTabbedPane _tabbedResultsPanel;"
"//	private List _availableTabs = new ArrayList();"
"//	private ArrayList _usedTabs = new ArrayList();"
//i18n[DataSetUpdateableTableModelImpl.error.rowmatched=\n   Row {0} matched {1} rows in DB]
// i18n[DataSetUpdateableTableModelImpl.error.rownotmatch=\n   Row {0}  did not match any row in DB]
// i18n[oracle.sqlText=SQL Text]
//Operation column increased
"/*		diffSourceSession = null;		setPasteMenuEnabled(false);		PreferencesManager.unload();		*/"
// Uses menu.dbdiff.* in dbdiff.properties
// Interface SessionInfoProvider implementation
//i18n[WhereClausePanel.hint=Where clause for the selected table]            
// Connect.
// Don't care to see tons of debug from ColTypeMapper
"//	private boolean _blinkCaret = true;"
// load procedures with schema = null
// Supply the user name. If you use anonymous you will be logged in and // the pw will be ignored
// i18n[AliasInternalFrame.error.sessioncreation=Test Button has created a session, this is a programming error]
//testBitColType(sourceName, destName);
// Have we already dumped a stack trace for the current event dispatch?
// Column is in table 1, but not table 2
// i18n[DataSetUpdateableTableModelImpl.info.deletecancelled=Delete canceled at user request.]
// Assume objs[0] is a schema/catalog
// i18n[DiffExecutor.noDiffsMessage=No differences were detected]
"//	public File getDebugLogFile() //	{ //		return new File(_userSettingsDir + File.separator + ""squirrel-sql-debug.log""); //	}"
//_tree.expandPath(new TreePath(newFolder.getPath()));
// setColumns Error conditions
// scale the page so the width fits...
/* ------------------------------------- Helper methods ------------------------------------------------*/
//i18n[FileEditorDropTargetListener.oneFileDropMessage=Only one file  //may be dropped onto the editor at a time.]
// Test for toURI when the file is a directory.
"//	private final class MyInternalFrameListener extends InternalFrameAdapter"
// This event does not always hit the righr editor !? // That's why we can't use _sqlEntryPanelIdentifier
// alter table <table> add constraint <constraint>
// i18n[AliasWindowFactory.error.copyAlias=Error occured copying the alias]
// Regression for HARMONY-2146
// Current version of the validator webservice cannot handle // anything greater than 30.
// CREATE SEQUENCE [IF NOT EXISTS] newSequenceName // [START WITH long] // [INCREMENT BY long] // [CACHE long]
// Write to a file.
// If the column is a text column, and there aren't single quotes around the value, put them there.
// table exists in source db but not dest
//Clear any previous plan
// i18n[AliasWindowFactory.schemaPropsCopiedWarning=Warning: Your target Alias contains database specific Schema properties copied from the source Alias.\n // Schema loading of the target Alias may be errorneous. Please check your target Alias's Schema properties.]
// alter table foo add constraint foocon UNIQUE (myid)
// The header for the scrollable part which presents column differences
"//		_tabbedResultsPanel = UIFactory.getInstance().createTabbedPane();"
// Add menu.
//get size of document //width in pixels //height in pixels //height of printer page //width of printer page
// shift Graphic to line up with beginning of print-imageable region
// shift Graphic to line up with beginning of next page to print
// make sure not print empty pages
// i18n[SQLPanel.limitrowscheckbox.hint=Limit rows: ]
// These two columns will be the only ones in the pktest table. They will // start out being nullable, and we will test that the dialect correctly // converts them to non-null then applies the PK constraint to them. // This test shall not be run against any database dialect that claims not // to support changing the nullability of a column.
// Set focus to the SQL entry panel.
"//		String BLINK_CARET = ""blinkCaret""; //		String BLOCK_CARET_ENABLED = ""blockCaretEnabled""; //		String BRACKET_HIGHLIGHTING = ""bracketHighlighting""; //		String BRACKET_HIGHLIGHT_COLOR = ""bracketHighlightColor""; //		String CARET_COLOR = ""caretColor"";"
// ######################################################################## // ########## events // ######################################################################## // ------------------------------------------------------------------------ // ------------------------------------------------------------------------
// dbStatus -> `Status=ONLINE, Updateability=READ_WRITE, UserAccess=MULTI_USER, Recovery=SIMPLE, // Version=539, Collation=SQL_Latin1_General_CP1_CI_AS, SQLSortOrder=52, IsTornPageDetectionEnabled, // IsAutoCreateStatistic'
// Don't keep reporting the same hang every 100 ms.
// After this it can't be stopped anymore!
// throw new IllegalStateException("Wrong constructor");
// i18n[SchemasTab.hint=Show all the schemas]
// JDBC spec says that BIT refers to a boolean column - i.e. a // single binary digit with value either "0" or "1". Also // the same spec encourages use of getBoolean/setBoolean. // However, the SQL-92 standard clearly states that the BIT type // is a bit string with length >= 0. So for SQL-92 compliant // databases (like PostgreSQL) the JDBC spec's support for BIT // is at best broken and unusable. Still, we do what the JDBC // spec suggests as that is all that we can do.
// String sourceSchema = null; // MySQL uses catalogs instead of schemas
// Oracle can only store DECIMAL type numbers.  Since regular non-decimal // numbers appear as "decimal", Oracle's decimal numbers can be rather  // large compared to other databases (precision up to 38).  Other  // databases can only handle this large precision in BIGINT fields, not // decimal, so try to figure out if Oracle is really storing a BIGINT // and claiming it is a DECIMAL.  If so, convert the type to BIGINT before // going any further.
"// Rows //				""12dlu, 6dlu, 12dlu, 6dlu, 80dlu:grow, 6dlu, 12dlu,              6dlu, 80dlu:grow, 6dlu, pref"""
// pid 25493, lock examples: // 5  ["  /db1/shd_data_4_3/"]User.ygwaBvbPosKorrD(1)  25493  1D,  25499 X  E // 5  ["  /db1/shd_data_4_3/"]User.ygwaBvbPosKorrD(1)  25493  1D,  25499,25506  X,X  E,E // 5  ["  /db1/shd_data_4_3/"]User.ygwaBvbPosKorrD(1)  25493  1D,  25499,25506,25508  X,X,X  E,E,E // // oder // //6  ["  d:\db\shd_data_lov\"]User.WLagerartikelD(76)  5544  1D, //7  ["  d:\db\shd_data_lov\"]User.WLagerartikelD(77)  5544  1D,  3804  S  E //8  ["  d:\db\shd_data_lov\"]User.WVorgangD(24)  5544  1D, // // oder fuer kein Lock: // //3  ["  f:\db\shd_data\"]User.ygwaTestD(989)  3792  1D, //4  ["  f:\db\shd_data\"]User.ygwaTestD(990)  3792  1D, //5  ["  f:\db\shd_data\"]User.ygwaTestD(991)  3792  1D, //6  ["  f:\db\shd_data\"]User.ygwaTestD(992)  3792  1D, //7  ["  f:\db\shd_data\"]User.ygwaTestD(993)  3792  1D, //8  ["  f:\db\shd_data\"]User.ygwaTestD(994)  3792  1D, //9  ["  f:\db\shd_data\"]User.ygwaTestD(995)  3792  1D, // //
// Check to see if the string is a file uri.
// common mocks
// If truncate was attempted and not supported, then try delete. // If on the other hand delete was attempted, just throw the // SQLException that resulted from the delete.
"//		final ApplicationFiles appFiles = new ApplicationFiles(); //		_exportPrefsText.setText(getFileName(here, appFiles.getUserPreferencesFile().getName())); //		_exportDriversText.setText(getFileName(here, appFiles.getDatabaseDriversFile().getName())); //		_exportAliasesText.setText(getFileName(here, appFiles.getDatabaseAliasesFile().getName()));"
/* Class to test */
// For tables that have a lot of columns, the user may have limited the set of columns // to use in the where clause, so see if there is a table of col names
// On Unix hidden files are marked with a "." at the beginning // of the file name.
// i18n[oracle.displayUserDetails=Display User details]
// 1757076 (DATE column seen as TIMESTAMP, update in editable mode fails) // We should always return false for this, when the user hasn't specified
// jScrollPane1.setCorner(JScrollPane.UPPER_LEFT_CORNER, corner);
//Set the url for subsequent calls //This is to allow for load balancing to a server on the other side of the world
// Not required.
// create filename filter and attach to directory
//System.err.println("("+extractor.getClass().getSimpleName()+"):The SQL generated by " + referenceDialect.getDisplayName() + " works !!!");
// separators need preferred size in GridBagLayout
// corner.validate();
// we are playing some games with the lexer for efficiency. // we could just create a new lexer each time here, but instead, // we will just reset it so that it thinks it is starting at the // beginning of the document but reporting a funny start colorStartPos. // Reseting the lexer causes the close() method on the reader // to be called but because the close() method has no effect on the // DocumentReader, we can do this.
//String sql = m_session.getSQLPanelAPI(m_plugin).getSQLScriptToBeExecuted();
// this is the constraint that is dropped in drop constraint test
/* The first time that catalogs are asked for, return just one */
// The Ostermiller SQLLexer crashes with an ArrayIndexOutOfBoundsException // if the char is greater then 255. So we prevent the char from being greater. // This is surely not a proper Unicode treatment but it doesn't seem // to do no harm and it keeps the SQLLexer working.
// We have to look for the modelindex because of the Row Number column
///////////////////////////////////////////////////////////////////////////////// // This formula can be found in the API Doc for // methode relocate() of class org.netbeans.editor.Syntax. // See the description of the last parameter 'stopPosition'. // // relocate() is always called before the parseTocken() method of this class.
// get the directory
//Create checkbox for enabling auto refresh // i18n[oracle.enableAutoRefresh=Enable auto refresh]
"//	private static ILogger s_log = //		LoggerController.createLogger(SessionExpander.class);"
"//	private final static ILogger s_log = //		LoggerController.createLogger(AlterColumnsPanelBuilder.class);"
"//		selectedIndex = cbFieldName.getSelectedIndex(); //		DefaultComboBoxModel comboModel = //			(DefaultComboBoxModel) cbFieldName.getModel(); //		FieldDetails fd = (FieldDetails) comboModel.getElementAt(selectedIndex); // //		cbFieldName.setSelectedItem(fd.getFieldName()); //		cbFieldType.setSelectedItem(fd.getFieldType()); //		tfFieldDefault.setText(fd.getDefault()); //		chAutoIncrement.setSelected(fd.IsAutoIncrement()); //		chNotNull.setSelected(fd.IsNotNull());"
// i18n[mysql.displayStatus=(MySQL) Display database status]
// i18n[mysql.status=MySQL Status]
// i18n[mysql.displayOpenTables=(MySQL) Display open tables]
"//	private void closeDialog(java.awt.event.WindowEvent evt) //	{ //		_dlog.setVisible(false); //		_dlog.dispose(); //	}"
"//	private final static ILogger s_log = //		LoggerController.createLogger(DatabaseStatusTab.class);"
// i18n[MysqlTriggerDetailsTab.hint=Display trigger details]
"//	private final static ILogger s_log = //		LoggerController.createLogger(ProcessesTab.class);"
// We got to the end of the script without finding a proc separator. // Just add it as if we had.
// if both objs are null, then they matched in the previous test, // so at this point we know that at least one of them (or both) is not // null. // However, one of them may still be null, and we cannot call equals() on // the null object, so make sure that the one we call it on is not null. // The equals() method handles the other one being null, if it is.
"//Action performed for the cancel button //	private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) //	{ //		_dlog.setVisible(false); //		_dlog.dispose(); //	}"
"//	private Object[] fields;"
// `clustered, unique, primary key located on PRIMARY'
/* one column for the object name, another column for the object's owner. */
"/* Column_name          Type    Computed    Length  Prec    Scale   Nullable    TrimTrailingBlanks  FixedLenNullInSource    Collation			 * -------------------------------------------------------------------------------------------------------------------------------------------------------			 * Location             char    no          2                       yes         no                  yes                     Latin1_General_CI_AS			 * TotalBilledAmnt      money   no          8       19      4       yes         (n/a)               (n/a)                   NULL			 */"
// private utility constructor
// Parameters for call.
"/*Component glue = Box.createGlue();        c.gridx = 1;        c.gridy = 10;        gridBag.setConstraints(glue, c);        panel.add(glue);*/"
// i18n[SQLResultExecuterPanel.rowsUpdated={0} Row(s) Updated]
// i18n[mmsql.catalogErr=The DBNAME of the session's URL is set to '{0}', but the session's current catalog is set to '{1}'.\n\nSQL Server doesn't support this in most cases.  This is a current issue.]
"/* the constructor above sets this from resources, but we'll override it with         * the name of the database file and its size. */"
"/* because of the cross-catalog problem, let's not invoke this if the current catalog isn't equal             * to the catalog specified in the URL.             */"
